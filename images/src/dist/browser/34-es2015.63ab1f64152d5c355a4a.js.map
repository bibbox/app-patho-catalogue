{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/shared/comcol-forms/edit-comcol-page/edit-comcol-page.component.html","webpack:///src/app/+community-page/edit-community-page/edit-community-page.component.ts","webpack:///src/app/+community-page/edit-community-page/community-metadata/community-metadata.component.ts","webpack:///src/app/+community-page/edit-community-page/community-metadata/community-metadata.component.html","webpack:///src/app/+community-page/edit-community-page/community-roles/community-roles.component.html","webpack:///src/app/+community-page/edit-community-page/community-roles/community-roles.component.ts","webpack:///src/app/+community-page/edit-community-page/community-curate/community-curate.component.ts","webpack:///src/app/+community-page/edit-community-page/community-curate/community-curate.component.html","webpack:///src/app/+community-page/edit-community-page/community-authorizations/community-authorizations.component.ts","webpack:///src/app/+community-page/edit-community-page/community-authorizations/community-authorizations.component.html","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/community-administrator.guard.ts","webpack:///src/app/+community-page/edit-community-page/edit-community-page.routing.module.ts","webpack:///src/app/+community-page/edit-community-page/edit-community-page.module.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts"],"names":["I18nBreadcrumbResolver","breadcrumbService","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","EditCommunityPageComponent","router","super","type","community","id","CommunityMetadataComponent","communityDataService","notificationsService","translate","frontendURL","onSubmit","navigateToHomePage","CommunityRolesComponent","dsoRD$","pipe","community$","map","name","href","_links","adminGroup","parent","first","dso","CommunityCurateComponent","dsoNameService","take","communityName$","filter","rd","getName","payload","CommunityAuthorizationsComponent","CommunityAdministratorGuard","authorizationService","authService","IsCommunityAdmin","EditCommunityPageRoutingModule","forChild","path","resolve","breadcrumb","component","canActivate","children","redirectTo","pathMatch","title","hideReturnButton","showBreadcrumbs","resourcePolicyTarget","resourcePolicy","EditCommunityPageModule","I18nBreadcrumbsService"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom\">\n        <h2>{{ type + '.edit.head' | translate }}</h2>\n        <div>\n          <a class=\"btn btn-danger\"\n             [routerLink]=\"((type === 'community') ? '/communities/' : '/collections/') + (dsoRD$ | async)?.payload.uuid + '/delete'\">\n            <i class=\"fas fa-trash\"></i> {{type + '.edit.delete' | translate}}</a>\n        </div>\n      </div>\n      <div class=\"pt-2\">\n        <ul class=\"nav nav-tabs justify-content-start mb-2\">\n          <li *ngFor=\"let page of pages\" class=\"nav-item\">\n            <a class=\"nav-link\"\n               [ngClass]=\"{'active' : page === currentPage}\"\n               [routerLink]=\"['./' + page]\">\n              {{ type + '.edit.tabs.' + page + '.head' | translate}}\n            </a>\n          </li>\n        </ul>\n        <div class=\"tab-pane active\">\n          <div class=\"mb-4\">\n            <router-outlet></router-outlet>\n          </div>\n          <div class=\"col-12 text-right\">\n            <a *ngIf=\"!hideReturnButton\" [routerLink]=\"getPageUrl((dsoRD$ | async)?.payload)\" class=\"btn btn-outline-secondary\">\n              <i class=\"fas fa-arrow-left\"></i> {{ type + '.edit.return' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { Community } from '../../core/shared/community.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EditComColPageComponent } from '../../shared/comcol-forms/edit-comcol-page/edit-comcol-page.component';\nimport { getCommunityPageRoute } from '../community-page-routing-paths';\n\n/**\n * Component that represents the page where a user can edit an existing Community\n */\n@Component({\n  selector: 'ds-edit-community',\n  templateUrl: '../../shared/comcol-forms/edit-comcol-page/edit-comcol-page.component.html'\n})\nexport class EditCommunityPageComponent extends EditComColPageComponent<Community> {\n  type = 'community';\n\n  public constructor(\n    protected router: Router,\n    protected route: ActivatedRoute\n  ) {\n    super(router, route);\n  }\n\n  /**\n   * Get the community page url\n   * @param community The community for which the url is requested\n   */\n  getPageUrl(community: Community): string {\n    return getCommunityPageRoute(community.id);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ComcolMetadataComponent } from '../../../shared/comcol-forms/edit-comcol-page/comcol-metadata/comcol-metadata.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Community } from '../../../core/shared/community.model';\nimport { CommunityDataService } from '../../../core/data/community-data.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\n\n/**\n * Component for editing a community's metadata\n */\n@Component({\n  selector: 'ds-community-metadata',\n  templateUrl: './community-metadata.component.html',\n})\nexport class CommunityMetadataComponent extends ComcolMetadataComponent<Community> {\n  protected frontendURL = '/communities/';\n  protected type = Community.type;\n\n  public constructor(\n    protected communityDataService: CommunityDataService,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService\n  ) {\n    super(communityDataService, router, route, notificationsService, translate);\n  }\n}\n","<ds-community-form [dso]=\"(dsoRD$ | async)?.payload\"\n                   (submitForm)=\"onSubmit($event)\"\n                   (back)=\"navigateToHomePage()\"\n                   (finish)=\"navigateToHomePage()\"></ds-community-form>\n\n","<ds-comcol-role\n  *ngFor=\"let comcolRole of getComcolRoles$() | async\"\n  [dso]=\"community$ | async\"\n  [comcolRole]=\"comcolRole\"\n>\n</ds-comcol-role>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Community } from '../../../core/shared/community.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { HALLink } from '../../../core/shared/hal-link.model';\n\n/**\n * Component for managing a community's roles\n */\n@Component({\n  selector: 'ds-community-roles',\n  templateUrl: './community-roles.component.html',\n})\nexport class CommunityRolesComponent implements OnInit {\n\n  dsoRD$: Observable<RemoteData<Community>>;\n\n  /**\n   * The community to manage, as an observable.\n   */\n  get community$(): Observable<Community> {\n    return this.dsoRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    );\n  }\n\n  /**\n   * The different roles for the community.\n   */\n  getComcolRoles$(): Observable<HALLink[]> {\n    return this.community$.pipe(\n      map((community) => [\n        {\n          name: 'community-admin',\n          href: community._links.adminGroup.href,\n        },\n      ]),\n    );\n  }\n\n  constructor(\n    protected route: ActivatedRoute,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      first(),\n      map((data) => data.dso),\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Community } from '../../../core/shared/community.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { filter, map, take } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { hasValue } from '../../../shared/empty.util';\n\n/**\n * Component for managing a community's curation tasks\n */\n@Component({\n  selector: 'ds-community-curate',\n  templateUrl: './community-curate.component.html',\n})\nexport class CommunityCurateComponent implements OnInit {\n\n  dsoRD$: Observable<RemoteData<Community>>;\n  communityName$: Observable<string>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dsoNameService: DSONameService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      take(1),\n      map((data) => data.dso),\n    );\n\n    this.communityName$ = this.dsoRD$.pipe(\n      filter((rd: RemoteData<Community>) => hasValue(rd)),\n      map((rd: RemoteData<Community>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n  }\n\n}\n","<div class=\"container\">\n    <h3>{{'community.curate.header' |translate:{community: (communityName$ |async)} }}</h3>\n    <ds-curation-form\n           [dsoHandle]=\"(dsoRD$|async)?.payload.handle\"\n    ></ds-curation-form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { RemoteData } from 'src/app/core/data/remote-data';\nimport { DSpaceObject } from 'src/app/core/shared/dspace-object.model';\n\n@Component({\n  selector: 'ds-community-authorizations',\n  templateUrl: './community-authorizations.component.html',\n})\n/**\n * Component that handles the community Authorizations\n */\nexport class CommunityAuthorizationsComponent<TDomain extends DSpaceObject> implements OnInit {\n\n  /**\n   * The initial DSO object\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the community\n   */\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.parent.data.pipe(first(), map((data) => data.dso));\n  }\n}\n","<div class=\"container\">\n  <ds-resource-policies [resourceType]=\"'community'\" [resourceUUID]=\"(dsoRD$ | async)?.payload?.id\"></ds-resource-policies>\n</div>\n","import { Injectable } from '@angular/core';\nimport { SingleFeatureAuthorizationGuard } from './single-feature-authorization.guard';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../../../auth/auth.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../feature-id';\n\n/**\n * Prevent unauthorized activating and loading of routes when the current authenticated user\n * isn't a Community administrator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommunityAdministratorGuard extends SingleFeatureAuthorizationGuard {\n  constructor(protected authorizationService: AuthorizationDataService, protected router: Router, protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check group management rights\n   */\n  getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.IsCommunityAdmin);\n  }\n}\n","import { EditCommunityPageComponent } from './edit-community-page.component';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommunityMetadataComponent } from './community-metadata/community-metadata.component';\nimport { CommunityRolesComponent } from './community-roles/community-roles.component';\nimport { CommunityCurateComponent } from './community-curate/community-curate.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { CommunityAuthorizationsComponent } from './community-authorizations/community-authorizations.component';\nimport { ResourcePolicyTargetResolver } from '../../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyCreateComponent } from '../../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyResolver } from '../../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyEditComponent } from '../../shared/resource-policies/edit/resource-policy-edit.component';\nimport { CommunityAdministratorGuard } from '../../core/data/feature-authorization/feature-authorization-guard/community-administrator.guard';\n\n/**\n * Routing module that handles the routing for the Edit Community page administrator functionality\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { breadcrumbKey: 'community.edit' },\n        component: EditCommunityPageComponent,\n        canActivate: [CommunityAdministratorGuard],\n        children: [\n          {\n            path: '',\n            redirectTo: 'metadata',\n            pathMatch: 'full'\n          },\n          {\n            path: 'metadata',\n            component: CommunityMetadataComponent,\n            data: {\n              title: 'community.edit.tabs.metadata.title',\n              hideReturnButton: true,\n              showBreadcrumbs: true\n            }\n          },\n          {\n            path: 'roles',\n            component: CommunityRolesComponent,\n            data: { title: 'community.edit.tabs.roles.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'curate',\n            component: CommunityCurateComponent,\n            data: { title: 'community.edit.tabs.curate.title', showBreadcrumbs: true }\n          },\n          /*{\n            path: 'authorizations',\n            component: CommunityAuthorizationsComponent,\n            data: { title: 'community.edit.tabs.authorizations.title', showBreadcrumbs: true }\n          },*/\n          {\n            path: 'authorizations',\n            data: { showBreadcrumbs: true },\n            children: [\n              {\n                path: 'create',\n                resolve: {\n                  resourcePolicyTarget: ResourcePolicyTargetResolver\n                },\n                component: ResourcePolicyCreateComponent,\n                data: { title: 'resource-policies.create.page.title' }\n              },\n              {\n                path: 'edit',\n                resolve: {\n                  resourcePolicy: ResourcePolicyResolver\n                },\n                component: ResourcePolicyEditComponent,\n                data: { title: 'resource-policies.edit.page.title' }\n              },\n              {\n                path: '',\n                component: CommunityAuthorizationsComponent,\n                data: { title: 'community.edit.tabs.authorizations.title', showBreadcrumbs: true, hideReturnButton: true }\n              }\n            ]\n          }\n        ]\n      }\n    ])\n  ],\n  providers: [\n    ResourcePolicyResolver,\n    ResourcePolicyTargetResolver\n  ]\n})\nexport class EditCommunityPageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { EditCommunityPageRoutingModule } from './edit-community-page.routing.module';\nimport { EditCommunityPageComponent } from './edit-community-page.component';\nimport { CommunityCurateComponent } from './community-curate/community-curate.component';\nimport { CommunityMetadataComponent } from './community-metadata/community-metadata.component';\nimport { CommunityRolesComponent } from './community-roles/community-roles.component';\nimport { CommunityAuthorizationsComponent } from './community-authorizations/community-authorizations.component';\nimport { CommunityFormModule } from '../community-form/community-form.module';\n\n/**\n * Module that contains all components related to the Edit Community page administrator functionality\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    EditCommunityPageRoutingModule,\n    CommunityFormModule\n  ],\n  declarations: [\n    EditCommunityPageComponent,\n    CommunityCurateComponent,\n    CommunityMetadataComponent,\n    CommunityRolesComponent,\n    CommunityAuthorizationsComponent\n  ]\n})\nexport class EditCommunityPageModule {\n\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n"]}