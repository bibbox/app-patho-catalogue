{"version":3,"sources":["webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.ts","webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.html","webpack:///src/themes/custom/app/forgot-password/forgot-password-form/forgot-password-form.component.ts","webpack:///src/app/forgot-password/forgot-password-form/forgot-password-form.component.html"],"names":["ProfilePageSecurityFormComponent","formService","translate","epersonService","notificationsService","isInvalid","EventEmitter","passwordValue","formModel","id","name","inputType","passwordCanBeEmpty","subs","this","formGroup","createFormGroup","validators","checkPasswordsEqual","checkPasswordLength","checkPasswordEmpty","updateFieldTranslations","onLangChange","subscribe","push","statusChanges","pipe","status","emit","valueChanges","valueChange","password","forEach","fieldModel","label","instant","FORM_PREFIX","group","get","value","notSame","pass","length","notLongEnough","emptyPassword","filter","sub","unsubscribe","ForgotPasswordFormComponent","setInValid","setPasswordValue","submit"],"mappings":"+FAAA,0K,yBCCA,6CAMA,6D,4CALS,kDAAsB,wBAAtB,CAAsB,wBAAtB,CAAsB,mBAAtB,CAAsB,qB,yBAM/B,yCAAwG,yB,qCAAqD,+B,4CAArD,qI,yBACxG,yCAA4F,yB,qCAAwD,+B,4CAAxD,wI,yBAC5F,yCAAkJ,yB,qCAAoD,+B,4CAApD,oIDQ3I,Y,MAAMA,EA6CX,YAAsBC,EACAC,EACAC,EACAC,GAHA,KAAAH,cACA,KAAAC,YACA,KAAAC,iBACA,KAAAC,uBA3CZ,KAAAC,UAAY,IAAI,EAAAC,aAIhB,KAAAC,cAAgB,IAAI,EAAAD,aAK9B,KAAAE,UAAuC,CACrC,IAAI,IAAkB,CACpBC,GAAI,WACJC,KAAM,WACNC,UAAW,aAEb,IAAI,IAAkB,CACpBF,GAAI,iBACJC,KAAM,iBACNC,UAAW,cAaf,KAAAC,oBAAqB,EAOb,KAAAC,KAAuB,GAQ/B,WAEIC,KAAKC,UAAYD,KAAKb,YAAYe,gBAAgBF,KAAKN,UADrDM,KAAKF,mBAEL,CAACK,WAAY,CAACH,KAAKI,oBAAqBJ,KAAKK,sBAG7C,CAACF,WAAY,CAACH,KAAKI,oBAAqBJ,KAAKK,oBAAqBL,KAAKM,sBAE3EN,KAAKO,0BACLP,KAAKZ,UAAUoB,aACZC,UAAUA,KACTT,KAAKO,4BAGTP,KAAKD,KAAKW,KAAKV,KAAKC,UAAUU,cAAcC,KAC1C,YAAa,KACb,YAAKC,GACY,UAAXA,IAKFJ,UAAWI,GAAWb,KAAKT,UAAUuB,KAAKD,KAGhDb,KAAKD,KAAKW,KAAKV,KAAKC,UAAUc,aAAaH,KACzC,YAAa,MACbH,UAAWO,IACXhB,KAAKP,cAAcqB,KAAKE,EAAYC,aAOxC,0BACEjB,KAAKN,UAAUwB,QACZC,IACCA,EAAWC,MAAQpB,KAAKZ,UAAUiC,QAAQrB,KAAKsB,YAAc,SAAWH,EAAWxB,MASzF,oBAAoB4B,GAIlB,OAHaA,EAAMC,IAAI,YAAYC,QAChBF,EAAMC,IAAI,kBAAkBC,MAElB,KAAO,CAACC,SAAS,GAOhD,oBAAoBH,GAClB,MAAMI,EAAOJ,EAAMC,IAAI,YAAYC,MAEnC,OAAO,YAAQE,IAASA,EAAKC,QAAU,EAAI,KAAO,CAACC,eAAe,GAOpE,mBAAmBN,GACjB,MAAMI,EAAOJ,EAAMC,IAAI,YAAYC,MACnC,OAAO,YAAQE,GAAQ,CAACG,eAAe,GAAQ,KAMjD,cACE9B,KAAKD,KACFgC,OAAQC,GAAQ,YAASA,IACzBd,QAASc,GAAQA,EAAIC,gB,6CAlIf/C,GAAgC,0J,mDAAhCA,EAAgC,8wBClB7C,yCAAkC,yB,qCAAoC,8BACtE,6EAOA,yEACA,yEACA,0EACA,gC,MAXkC,mHACzB,0EAOmD,oGACN,8FACM,gJ,kGDQrD,I,kCEjBP,mIAYO,Y,MAAMgD,UAAoC,+B,2CAApCA,I,mDAAAA,EAA2B,4aCbxC,yCACI,0EAAiB,yB,qCAA2C,8BAC5D,2EACI,+EAAyB,yB,sCAA4D,8BACrF,iFACI,qFACI,yFACI,+FACmB,0B,sCAA2D,8BAC9E,8FAAiB,0B,kCAAgC,8BAAO,8BAChE,yEACJ,qEACJ,iEAEA,+EACI,iFAAyB,0B,sCAAoD,8BAC7E,iFAEI,iHAGQ,0DAAa,EAAAC,WAAA,KAAb,CAAgC,oCACf,EAAAC,iBAAA,MACxB,8BACL,qEACJ,iEAEA,+EACI,iFACI,yFAGQ,qDAAS,EAAAC,YAAU,0B,sCAA6C,8BAC5E,qEACJ,iEACJ,8D,MAlCqB,0HAEY,6IAKM,6IACF,sHAMJ,qIAIb,+EAA4B,uCAW5B,8EAEmB,gI,kDDnBhC,G,6CAAMH","file":"x","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DynamicFormControlModel, DynamicFormService, DynamicInputModel } from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormGroup } from '@angular/forms';\nimport { hasValue, isEmpty } from '../../shared/empty.util';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ds-profile-page-security-form',\n  templateUrl: './profile-page-security-form.component.html'\n})\n/**\n * Component for a user to edit their security information\n * Displays a form containing a password field and a confirmation of the password\n */\nexport class ProfilePageSecurityFormComponent implements OnInit {\n\n  /**\n   * Emits the validity of the password\n   */\n  @Output() isInvalid = new EventEmitter<boolean>();\n  /**\n   * Emits the value of the password\n   */\n  @Output() passwordValue = new EventEmitter<string>();\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'password',\n      name: 'password',\n      inputType: 'password'\n    }),\n    new DynamicInputModel({\n      id: 'passwordrepeat',\n      name: 'passwordrepeat',\n      inputType: 'password'\n    })\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Indicates whether the \"checkPasswordEmpty\" needs to be added or not\n   */\n  @Input()\n  passwordCanBeEmpty = true;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  @Input()\n  FORM_PREFIX: string;\n  private subs: Subscription[] = [];\n\n  constructor(protected formService: DynamicFormService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    if (this.passwordCanBeEmpty) {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength]});\n    } else {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength, this.checkPasswordEmpty]});\n    }\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n\n    this.subs.push(this.formGroup.statusChanges.pipe(\n      debounceTime(300),\n      map((status: string) => {\n        if (status !== 'VALID') {\n          return true;\n        } else {\n          return false;\n        }\n      })).subscribe((status) => this.isInvalid.emit(status))\n    );\n\n    this.subs.push(this.formGroup.valueChanges.pipe(\n      debounceTime(300),\n    ).subscribe((valueChange) => {\n      this.passwordValue.emit(valueChange.password);\n    }));\n  }\n\n  /**\n   * Update the translations of the field labels\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.FORM_PREFIX + 'label.' + fieldModel.id);\n      }\n    );\n  }\n\n  /**\n   * Check if both password fields are filled in and equal\n   * @param group The FormGroup to validate\n   */\n  checkPasswordsEqual(group: FormGroup) {\n    const pass = group.get('password').value;\n    const repeatPass = group.get('passwordrepeat').value;\n\n    return pass === repeatPass ? null : {notSame: true};\n  }\n\n  /**\n   * Check if the password is at least 6 characters long\n   * @param group The FormGroup to validate\n   */\n  checkPasswordLength(group: FormGroup) {\n    const pass = group.get('password').value;\n\n    return isEmpty(pass) || pass.length >= 6 ? null : {notLongEnough: true};\n  }\n\n  /**\n   * Checks if the password is empty\n   * @param group The FormGroup to validate\n   */\n  checkPasswordEmpty(group: FormGroup) {\n    const pass = group.get('password').value;\n    return isEmpty(pass) ? {emptyPassword: true} : null;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"container-fluid mb-4\">{{FORM_PREFIX + 'info' | translate}}</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"FORM_PREFIX\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n<div id=\"notLongEnough\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notLongEnough')\">{{FORM_PREFIX + 'error.password-length' | translate}}</div>\n<div id=\"notSame\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notSame')\">{{FORM_PREFIX + 'error.matching-passwords' | translate}}</div>\n<div id=\"emptyPassword\" class=\"container-fluid text-danger\" *ngIf=\"(formGroup.dirty || formGroup.touched) && formGroup.hasError('emptyPassword')\">{{FORM_PREFIX + 'error.empty-password' | translate}}</div>\n","import { Component } from '@angular/core';\nimport { ForgotPasswordFormComponent as BaseComponent } from '../../../../../app/forgot-password/forgot-password-form/forgot-password-form.component';\n\n@Component({\n  selector: 'ds-forgot-password-form',\n  // styleUrls: ['./forgot-password-form.component.scss'],\n  styleUrls: ['../../../../../app/forgot-password/forgot-password-form/forgot-password-form.component.scss'],\n  // templateUrl: './forgot-password-form.component.html'\n  templateUrl: '../../../../../app/forgot-password/forgot-password-form/forgot-password-form.component.html'\n})\n/**\n * Component for a user to enter a new password for a forgot token.\n */\nexport class ForgotPasswordFormComponent extends BaseComponent {\n}\n","<div class=\"container\">\n    <h3 class=\"mb-4\">{{'forgot-password.form.head' | translate}}</h3>\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'forgot-password.form.identification.header' | translate}}</div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{'forgot-password.form.identification.email' | translate}}</label>\n                    <span id=\"email\">{{(registration$ |async).email}}</span></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'forgot-password.form.card.security' | translate}}</div>\n        <div class=\"card-body\">\n\n            <ds-profile-page-security-form\n                    [passwordCanBeEmpty]=\"false\"\n                    [FORM_PREFIX]=\"'forgot-password.form.'\"\n                    (isInvalid)=\"setInValid($event)\"\n                    (passwordValue)=\"setPasswordValue($event)\"\n            ></ds-profile-page-security-form>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <button\n                    [disabled]=\"isInValid\"\n                    class=\"btn btn-default btn-primary\"\n                    (click)=\"submit()\">{{'forgot-password.form.submit' | translate}}</button>\n        </div>\n    </div>\n</div>"]}