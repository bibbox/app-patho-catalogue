{"version":3,"sources":["webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-add-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-remove-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-replace-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/metadata-patch-operation.service.ts","webpack:///src/app/+item-page/edit-item-page/item-metadata/edit-in-place-field/edit-in-place-field.component.html","webpack:///src/app/+item-page/edit-item-page/item-metadata/edit-in-place-field/edit-in-place-field.component.ts","webpack:///src/app/+item-page/edit-item-page/item-metadata/item-metadata.component.html","webpack:///src/app/+item-page/edit-item-page/item-metadata/item-metadata.component.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/\\+search\\-page\\/search\\-page\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/core/breadcrumbs/dso-breadcrumbs.service.ts","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/dso-page-some-feature.guard.ts","webpack:///src/app/+search-page/search-page.module.ts","webpack:///src/app/+search-page/themed-search-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/+item-page/item-page-administrator.guard.ts","webpack:///src/app/+item-page/item-page.resolver.ts","webpack:///src/app/+item-page/edit-item-page/edit-item-page.component.html","webpack:///src/app/+item-page/edit-item-page/edit-item-page.component.ts","webpack:///src/app/+item-page/edit-item-page/simple-item-action/abstract-simple-item-action.component.ts","webpack:///src/app/+item-page/edit-item-page/edit-item-operators.ts","webpack:///src/app/+item-page/edit-item-page/simple-item-action/abstract-simple-item-action.component.html","webpack:///src/app/+item-page/edit-item-page/item-withdraw/item-withdraw.component.ts","webpack:///src/app/+item-page/edit-item-page/item-reinstate/item-reinstate.component.ts","webpack:///src/app/+item-page/edit-item-page/item-private/item-private.component.ts","webpack:///src/app/+item-page/edit-item-page/item-public/item-public.component.ts","webpack:///src/app/+item-page/edit-item-page/item-delete/item-delete.component.html","webpack:///src/app/+item-page/edit-item-page/item-delete/item-delete.component.ts","webpack:///src/app/+item-page/edit-item-page/item-operation/itemOperation.model.ts","webpack:///src/app/+item-page/edit-item-page/item-operation/item-operation.component.html","webpack:///src/app/+item-page/edit-item-page/item-operation/item-operation.component.ts","webpack:///src/app/+item-page/edit-item-page/item-status/item-status.component.html","webpack:///src/app/+item-page/edit-item-page/item-status/item-status.component.ts","webpack:///src/app/shared/responsive-table-sizes/responsive-column-sizes.ts","webpack:///src/app/shared/responsive-table-sizes/responsive-table-sizes.ts","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream-drag-handle/item-edit-bitstream-drag-handle.component.html","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream-drag-handle/item-edit-bitstream-drag-handle.component.ts","webpack:///src/app/shared/pagination-drag-and-drop/abstract-paginated-drag-and-drop-list.component.ts","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream/item-edit-bitstream.component.html","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream/item-edit-bitstream.component.ts","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/paginated-drag-and-drop-bitstream-list/paginated-drag-and-drop-bitstream-list.component.html","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/paginated-drag-and-drop-bitstream-list/paginated-drag-and-drop-bitstream-list.component.ts","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/item-edit-bitstream-bundle.component.html","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/item-edit-bitstream-bundle.component.ts","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-bitstreams.component.html","webpack:///src/app/+item-page/edit-item-page/item-bitstreams/item-bitstreams.component.ts","webpack:///src/app/+item-page/edit-item-page/item-collection-mapper/item-collection-mapper.component.html","webpack:///src/app/+item-page/edit-item-page/item-collection-mapper/item-collection-mapper.component.ts","webpack:///src/app/+item-page/edit-item-page/item-move/item-move.component.html","webpack:///src/app/+item-page/edit-item-page/item-move/item-move.component.ts","webpack:///src/app/+item-page/edit-item-page/virtual-metadata/virtual-metadata.component.html","webpack:///src/app/+item-page/edit-item-page/virtual-metadata/virtual-metadata.component.ts","webpack:///src/app/+item-page/edit-item-page/item-relationships/edit-relationship/edit-relationship.component.html","webpack:///src/app/+item-page/edit-item-page/item-relationships/edit-relationship/edit-relationship.component.ts","webpack:///src/app/+item-page/edit-item-page/item-relationships/edit-relationship-list/edit-relationship-list.component.html","webpack:///src/app/+item-page/edit-item-page/item-relationships/edit-relationship-list/edit-relationship-list.component.ts","webpack:///src/app/+item-page/edit-item-page/item-relationships/item-relationships.component.html","webpack:///src/app/+item-page/edit-item-page/item-relationships/item-relationships.component.ts","webpack:///src/app/+item-page/edit-item-page/item-version-history/item-version-history.component.html","webpack:///src/app/+item-page/edit-item-page/item-version-history/item-version-history.component.ts","webpack:///src/app/+item-page/edit-item-page/item-authorizations/item-authorizations.component.html","webpack:///src/app/+item-page/edit-item-page/item-authorizations/item-authorizations.component.ts","webpack:///src/app/+item-page/edit-item-page/item-page-reinstate.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-withdraw.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-metadata.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-status.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-bitstreams.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-relationships.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-version-history.guard.ts","webpack:///src/app/+item-page/edit-item-page/item-page-collection-mapper.guard.ts","webpack:///src/app/+item-page/edit-item-page/edit-item-page.routing.module.ts","webpack:///src/app/+item-page/edit-item-page/edit-item-page.module.ts","webpack:///src/app/+item-page/edit-item-page/abstract-item-update/abstract-item-update.component.ts","webpack:///src/app/core/breadcrumbs/dso-breadcrumb.resolver.ts","webpack:///src/app/+search-page/configuration-search-page.guard.ts","webpack:///src/app/+search-page/search-page.component.ts","webpack:///src/app/+search-page/search-page.component.html","webpack:///src/app/+search-page/search-tracker.component.ts","webpack:///src/app/+search-page/search-tracker.component.html","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/+item-page/item.resolver.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["DsoPageSingleFeatureGuard","route","state","this","getFeatureID","pipe","featureID","MetadataPatchOperation","op","field","MetadataPatchAddOperation","value","super","operationType","path","MetadataPatchRemoveOperation","place","MetadataPatchReplaceOperation","MetadataPatchOperationService","fieldUpdates","metadataPatch","fieldUpdatesToMetadataPatchOperations","metadataRemoveMap","Map","patch","forEach","operation","has","get","index","set","push","toOperation","Object","keys","uuid","update","metadatum","val","language","changeType","ADD","key","REMOVE","UPDATE","EditInPlaceFieldComponent","registryService","objectUpdatesService","metadataFieldSuggestions","BehaviorSubject","editable","isEditable","url","metadata","valid","isValid","ngModel","saveChangeFieldUpdate","cloneDeep","checkValidity","control","setValue","viewModel","updateValueAndValidity","setValidFieldUpdate","setEditableFieldUpdate","saveRemoveFieldUpdate","removeSingleFieldUpdate","fieldUpdate","query","queryMetadataFields","subscribe","fieldNames","setInputSuggestions","next","fields","map","fieldName","displayValue","split","join","remove","removeChangesFromField","ItemMetadataComponent","itemService","router","notificationsService","translateService","AlertTypeEnum","ngOnInit","updateService","updates$","getFieldUpdates","item","metadataAsList","notificationsPrefix","saveAddFieldUpdate","initialize","lastModified","first","createPatch","switchMap","g","rd","hasFailed","error","getNotificationTitle","errorMessage","payload","checkAndFixMetadataUUIDs","initializeOriginalFields","success","getNotificationContent","assign","add","submit","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","module","exports","I18nBreadcrumbResolver","breadcrumbService","data","breadcrumbKey","fullPath","provider","DSOBreadcrumbsService","linkService","dsoNameService","label","getName","crumb","propertyName","getParentLinkKey","resolveLink","parentRD","hasSucceeded","statusCode","parent","getBreadcrumbs","breadcrumbs","DsoPageSomeFeatureGuard","resolver","authorizationService","authService","routeWithObjectID","getRouteWithDSOId","dso","self","routeWithDSOId","params","SearchPageModule","withEntryComponents","forRoot","ThemedSearchPageComponent","themeName","ItemPageAdministratorGuard","AdministratorOf","ItemPageResolver","store","itemRoute","thisRoute","startsWith","itemId","subRoute","substring","indexOf","length","navigateByUrl","EditItemPageComponent","injector","events","initPageParamsByRoute","pages","routeConfig","children","filter","child","enabled","canActivate","guardConstructor","snapshot","routerState","canActivateOutcomes","every","page","itemRD$","currentPage","firstChild","fade","AbstractSimpleItemActionComponent","itemDataService","itemPageRoute","confirmMessage","messageKey","cancelMessage","headerMessage","descriptionMessage","response","predicate","findById","source","navigate","performAction","ItemWithdrawComponent","isWithdrawn","setWithDrawn","processRestResponse","ItemReinstateComponent","ItemPrivateComponent","isDiscoverable","setDiscoverable","ItemPublicComponent","ItemDeleteComponent","modalService","relationshipService","entityTypeService","viewMode","ListElement","relationships$","relatedItems$","virtualMetadata$","firstMetadataValue","types$","undefined","getEntityTypeByLabel","entityType","getEntityTypeRelationships","relationshipTypes","types","combineLatest","type","getRelationships","relationships","reduce","includedTypes","some","includedType","take","content","modalRef","open","close","relationshipType","isLeftItem","leftwardType","rightwardType","getItemRelationshipsArray","relationship","getRelationshipType","defaultIfEmpty","resolveLinks","rightItem","leftItem","getRelatedItem","relatedItem","entries","authority","endsWith","metadataField","metadataValue","previous","current","concat","isSelectedVirtualMetadata","selected","setSelectedVirtualMetadata","isSelected","selection","selectedTypes","delete","notify","succeeded","ItemOperation","operationKey","operationUrl","disabled","authorized","setDisabled","ItemOperationComponent","ItemStatusComponent","operations$","statusData","handle","statusDataKeys","operations","getCurrentUrl","CanManagePolicies","CanManageMappings","ReinstateItem","WithdrawItem","CanMakePrivate","CanDelete","CanMove","mergeMap","isAuthorized","distinctUntilChanged","toArray","ops","itemPageRoute$","ResponsiveColumnSizes","xs","sm","md","lg","xl","columns","start","end","i","ItemEditBitstreamDragHandleComponent","viewContainerRef","createEmbeddedView","handleView","AbstractPaginatedDragAndDropListComponent","elRef","objectValuesPipe","paginationService","dropObject","EventEmitter","pageSize","options","currentPage$","loading$","subs","initializeObjectsRD","initializeURL","initializeUpdates","initializePagination","getCurrentPagination","currentPagination","objectsRD$","objects","Date","getFieldUpdatesExclusive","transform","updateValues","customOrder","loading","event","dragIndex","previousIndex","dropIndex","currentIndex","dragPage","dropPage","droppedOnElement","nativeElement","querySelector","textContent","droppedPage","Number","isNaN","isNewPage","redirectPage","fromIndex","toIndex","emit","finish","paginationComponent","doPageChange","sub","unsubscribe","clearPagination","ItemEditBitstreamComponent","bitstreamView","changes","bitstream","bitstreamName","format$","format","bundleUrl","PaginatedDragAndDropBitstreamListComponent","bundleService","requestService","paginatedOptions","pagination","getBitstreamsEndpoint","bundle","href","hasByHref$","getBitstreams","ItemEditBitstreamBundleComponent","bundleNameColumn","columnSizes","combineColumns","bundleView","ItemBitstreamsComponent","bitstreamService","objectCache","cdRef","zone","bundlesOptions","submitting","bundles$","getBundles","bundlePage","bundles","updates","values","removedBistreams","responses","displayNotifications","reset","runOutsideAngular","from","run","removeByHrefSubstring","isCached","failedResponses","successfulResponses","instant","undoNotification","info","timeOut","discardTimeOut","discardAllFieldUpdates","reinstateFieldUpdates","isReinstatable","reinstatable","includes","hasUpdates","hasChanges","refreshItemCache","itemUpdateSubscription","ItemCollectionMapperComponent","searchConfigService","searchService","collectionDataService","performedSearch","itemName$","searchOptions$","paginatedSearchOptions","loadCollectionLists","console","log","shouldUpdate$","itemCollectionsRD$","shouldUpdate","findAllByHref","getMappedCollectionsEndpoint","owningCollectionRD$","findOwningCollectionFor","itemCollectionsAndOptions$","mappedCollectionsRD$","itemCollectionsRD","owningCollectionRD","searchOptions","search","buildQuery","dsoTypes","COLLECTION","startWith","responses$","collections","collection","excludingIds","filterIds","mapToCollection","showNotifications","itemRD","removeMappingFromCollection","excluding","messagePrefix","successful","unsuccessful","amount","head","switchToFirstTab","result","addExcludeCollection","collectionId","excludeQuery","tabs","select","tabChange","ItemMoveComponent","selectorType","inheritPolicies","collectionSearchResults","canSubmit","processing","loadSuggestions","searchResult","indexableObject","selectedCollection","selectedCollectionName","name","moveToCollection","onClick","resetCollection","findSuggestions","moveCollection","VirtualMetadataComponent","save","virtualMetadata","relationshipId","items","getVirtualMetadata","EditRelationshipComponent","nameVariant","leftItem$","rightItem$","relatedItem$","find","editItem","of","closeVirtualMetadataModal","selection$","keepLeftVirtualMetadata","keepRightVirtualMetadata","deleteRelationship","EditRelationshipListComponent","selectableListService","getLabel","relatedEntityType$","relatedEntityType","relationshipLabel","leftType","rightType","itemTypeRD","itemTypes","findIndex","itemType","size","modalComp","componentInstance","repeatable","listId","owningCollection","selectableObjects","getFieldUpdatesForRelatedItem","identifiables","identifiable","getNameVariant","deselect","relationshipOptions","searchConfiguration","toLowerCase","nameVariants","deselectAll","hitHighlights","relatedItems","relatedTypes","relatedType","getItemRelationships","isLeftItemArray","rightwardValue","leftwardValue","initialFields","fieldUpdatesFiltered","itemRelationships","openLookup","ItemRelationshipsComponent","cdr","entityType$","relationshipTypes$","removedRelationshipIDs$","addRelatedItems$","removeRelationshipIDs","addRelatedItems","deleteRelationships","addRelationships","action","detectChanges","deleteRelationshipIDs","copyVirtualMetadata","addRelationship","isLeftType","getRelatedItems","ItemVersionHistoryComponent","ItemAuthorizationsComponent","bundleBitstreamsMap","item$","catchError","b","list","bitstreams","getBundleBitstreams","entry","UUID","asObservable","subscription","ItemPageReinstateGuard","ItemPageWithdrawGuard","ItemPageMetadataGuard","CanEditMetadata","ItemPageStatusGuard","ItemPageBitstreamsGuard","CanManageBitstreamBundles","ItemPageRelationshipsGuard","CanManageRelationships","ItemPageVersionHistoryGuard","CanManageVersions","ItemPageCollectionMapperGuard","EditItemPageRoutingModule","forChild","breadcrumb","component","redirectTo","pathMatch","title","showBreadcrumbs","resourcePolicyTarget","resourcePolicy","EditItemPageModule","AbstractItemUpdateComponent","setItem","parentData","findByHref","_links","edit","undoTimeout","substr","checkLastModified","initializeNotificationsPrefix","postItemInit","isValidPage","currentVersion","getLastModified","updateVersion","getDate","warning","DSOBreadcrumbResolver","dataService","followLinks","object","ConfigurationSearchPageGuard","configuration","SearchPageComponent","SearchTrackerComponent","service","sidebarService","windowService","routeService","angulartics2","getSearchOptions","searchEntries","config","searchQueryResponse","filters","appliedFilters","filtersLength","eventTrack","properties","totalElements","pageInfo","totalPages","number","sort","by","order","direction","SEARCH_CONFIG_SERVICE","provide","useClass","I18nBreadcrumbsService","ITEM_PAGE_LINKS_TO_FOLLOW","ItemResolver","dispatch","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { DSpaceObject } from '../../../shared/dspace-object.model';\nimport { DsoPageSomeFeatureGuard } from './dso-page-some-feature.guard';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { FeatureID } from '../feature-id';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n/**\n * Abstract Guard for preventing unauthorized access to {@link DSpaceObject} pages that require rights for a specific feature\n * This guard utilizes a resolver to retrieve the relevant object to check authorizations for\n */\nexport abstract class DsoPageSingleFeatureGuard<T extends DSpaceObject> extends DsoPageSomeFeatureGuard<T> {\n  /**\n   * The features to check authorization for\n   */\n  getFeatureIDs(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID[]> {\n    return this.getFeatureID(route, state).pipe(\n      map((featureID) => [featureID]),\n    );\n  }\n\n  /**\n   * The type of feature to check authorization for\n   * Override this method to define a feature\n   */\n  abstract getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID>;\n}\n","import { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for metadata patch Operations\n * It should contain at least the operation type and metadata field. An abstract method to transform this object\n * into a fast-json-patch Operation is defined in each instance extending from this.\n */\nexport abstract class MetadataPatchOperation {\n  /**\n   * The operation to perform\n   */\n  op: string;\n\n  /**\n   * The metadata field this operation is intended for\n   */\n  field: string;\n\n  constructor(op: string, field: string) {\n    this.op = op;\n    this.field = field;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  abstract toOperation(): Operation;\n}\n","import { MetadataPatchOperation } from './metadata-patch-operation.model';\nimport { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for a metadata patch add Operation\n */\nexport class MetadataPatchAddOperation extends MetadataPatchOperation {\n  static operationType = 'add';\n\n  /**\n   * The metadata value(s) to add to the field\n   */\n  value: any;\n\n  constructor(field: string, value: any) {\n    super(MetadataPatchAddOperation.operationType, field);\n    this.value = value;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  toOperation(): Operation {\n    return { op: this.op as any, path: `/metadata/${this.field}/-`, value: this.value };\n  }\n}\n","import { MetadataPatchOperation } from './metadata-patch-operation.model';\nimport { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for a metadata patch remove Operation\n */\nexport class MetadataPatchRemoveOperation extends MetadataPatchOperation {\n  static operationType = 'remove';\n\n  /**\n   * The place of the metadata value to remove within its field\n   */\n  place: number;\n\n  constructor(field: string, place: number) {\n    super(MetadataPatchRemoveOperation.operationType, field);\n    this.place = place;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  toOperation(): Operation {\n    return { op: this.op as any, path: `/metadata/${this.field}/${this.place}` };\n  }\n}\n","import { MetadataPatchOperation } from './metadata-patch-operation.model';\nimport { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for a metadata patch replace Operation\n */\nexport class MetadataPatchReplaceOperation extends MetadataPatchOperation {\n  static operationType = 'replace';\n\n  /**\n   * The place of the metadata value within its field to modify\n   */\n  place: number;\n\n  /**\n   * The new value to replace the metadata with\n   */\n  value: any;\n\n  constructor(field: string, place: number, value: any) {\n    super(MetadataPatchReplaceOperation.operationType, field);\n    this.place = place;\n    this.value = value;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  toOperation(): Operation {\n    return { op: this.op as any, path: `/metadata/${this.field}/${this.place}`, value: this.value };\n  }\n}\n","import { PatchOperationService } from './patch-operation.service';\nimport { MetadatumViewModel } from '../../../shared/metadata.models';\nimport { FieldUpdates } from '../object-updates.reducer';\nimport { Operation } from 'fast-json-patch';\nimport { FieldChangeType } from '../object-updates.actions';\nimport { Injectable } from '@angular/core';\nimport { MetadataPatchOperation } from './operations/metadata/metadata-patch-operation.model';\nimport { hasValue } from '../../../../shared/empty.util';\nimport { MetadataPatchAddOperation } from './operations/metadata/metadata-patch-add-operation.model';\nimport { MetadataPatchRemoveOperation } from './operations/metadata/metadata-patch-remove-operation.model';\nimport { MetadataPatchReplaceOperation } from './operations/metadata/metadata-patch-replace-operation.model';\n\n/**\n * Service transforming {@link FieldUpdates} into {@link Operation}s for metadata values\n * This expects the fields within every {@link FieldUpdate} to be {@link MetadatumViewModel}s\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MetadataPatchOperationService implements PatchOperationService {\n\n  /**\n   * Transform a {@link FieldUpdates} object into an array of fast-json-patch Operations for metadata values\n   * This method first creates an array of {@link MetadataPatchOperation} wrapper operations, which are then\n   * iterated over to create the actual patch operations. While iterating, it has the ability to check for previous\n   * operations that would modify the operation's position and act accordingly.\n   * @param fieldUpdates\n   */\n  fieldUpdatesToPatchOperations(fieldUpdates: FieldUpdates): Operation[] {\n    const metadataPatch = this.fieldUpdatesToMetadataPatchOperations(fieldUpdates);\n\n    // This map stores what metadata fields had a value deleted at which places\n    // This is used to modify the place of operations to match previous operations\n    const metadataRemoveMap = new Map<string, number[]>();\n    const patch = [];\n    metadataPatch.forEach((operation) => {\n      // If this operation is removing or editing an existing value, first check the map for previous operations\n      // If the map contains remove operations before this operation's place, lower the place by 1 for each\n      if ((operation.op === MetadataPatchRemoveOperation.operationType || operation.op === MetadataPatchReplaceOperation.operationType) && hasValue((operation as any).place)) {\n        if (metadataRemoveMap.has(operation.field)) {\n          metadataRemoveMap.get(operation.field).forEach((index) => {\n            if (index < (operation as any).place) {\n              (operation as any).place--;\n            }\n          });\n        }\n      }\n\n      // If this is a remove operation, add its (updated) place to the map, so we can adjust following operations accordingly\n      if (operation.op === MetadataPatchRemoveOperation.operationType && hasValue((operation as any).place)) {\n        if (!metadataRemoveMap.has(operation.field)) {\n          metadataRemoveMap.set(operation.field, []);\n        }\n        metadataRemoveMap.get(operation.field).push((operation as any).place);\n      }\n\n      // Transform the updated operation into a fast-json-patch Operation and add it to the patch\n      patch.push(operation.toOperation());\n    });\n\n    return patch;\n  }\n\n  /**\n   * Transform a {@link FieldUpdates} object into an array of {@link MetadataPatchOperation} wrapper objects\n   * These wrapper objects contain detailed information about the patch operation that needs to be creates for each update\n   * This information can then be modified before creating the actual patch\n   * @param fieldUpdates\n   */\n  fieldUpdatesToMetadataPatchOperations(fieldUpdates: FieldUpdates): MetadataPatchOperation[] {\n    const metadataPatch = [];\n\n    Object.keys(fieldUpdates).forEach((uuid) => {\n      const update = fieldUpdates[uuid];\n      const metadatum = update.field as MetadatumViewModel;\n      const val = {\n        value: metadatum.value,\n        language: metadatum.language\n      };\n\n      let operation: MetadataPatchOperation;\n      switch (update.changeType) {\n        case FieldChangeType.ADD:\n          operation = new MetadataPatchAddOperation(metadatum.key, [ val ]);\n          break;\n        case FieldChangeType.REMOVE:\n          operation = new MetadataPatchRemoveOperation(metadatum.key, metadatum.place);\n          break;\n        case FieldChangeType.UPDATE:\n          operation = new MetadataPatchReplaceOperation(metadatum.key, metadatum.place, val);\n          break;\n      }\n\n      metadataPatch.push(operation);\n    });\n\n    return metadataPatch;\n  }\n\n}\n","<td>\n    <div class=\"metadata-field\">\n        <div *ngIf=\"!(editable | async)\">\n            <span>{{metadata?.key?.split('.').join('.&#8203;')}}</span>\n        </div>\n        <div *ngIf=\"(editable | async)\" class=\"field-container\">\n            <ds-validation-suggestions [suggestions]=\"(metadataFieldSuggestions | async)\"\n                                         [(ngModel)]=\"metadata.key\"\n                                         [url]=\"this.url\"\n                                         [metadata]=\"this.metadata\"\n                                  (submitSuggestion)=\"update(suggestionControl)\"\n                                  (clickSuggestion)=\"update(suggestionControl)\"\n                                  (typeSuggestion)=\"update(suggestionControl)\"\n                                  (dsClickOutside)=\"checkValidity(suggestionControl)\"\n                                  (findSuggestions)=\"findMetadataFieldSuggestions($event)\"\n                                  #suggestionControl=\"ngModel\"\n                                  [valid]=\"(valid | async) !== false\"\n                                  dsAutoFocus autoFocusSelector=\".suggestion_input\"\n                                  [ngModelOptions]=\"{standalone: true}\"\n            ></ds-validation-suggestions>\n        </div>\n        <small class=\"text-danger\"\n               *ngIf=\"(valid | async) === false\">{{\"item.edit.metadata.metadatafield.invalid\" | translate}}</small>\n    </div>\n</td>\n<td class=\"w-100\">\n    <div class=\"value-field\">\n        <div *ngIf=\"!(editable | async)\">\n            <span>{{metadata?.value}}</span>\n        </div>\n        <div *ngIf=\"(editable | async)\" class=\"field-container\">\n            <textarea class=\"form-control\" type=\"textarea\" [(ngModel)]=\"metadata.value\" [dsDebounce]\n                      (onDebounce)=\"update()\"></textarea>\n        </div>\n    </div>\n</td>\n<td class=\"text-center\">\n    <div class=\"language-field\">\n        <div *ngIf=\"!(editable | async)\">\n            <span>{{metadata?.language}}</span>\n        </div>\n        <div *ngIf=\"(editable | async)\" class=\"field-container\">\n            <input class=\"form-control\" type=\"text\" [(ngModel)]=\"metadata.language\" [dsDebounce]\n                   (onDebounce)=\"update()\"/>\n        </div>\n    </div>\n</td>\n<td class=\"text-center\">\n    <div class=\"btn-group edit-field\">\n        <button [disabled]=\"!(canSetEditable() | async)\" *ngIf=\"!(editable | async)\"\n                (click)=\"setEditable(true)\" class=\"btn btn-outline-primary btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.edit' | translate}}\">\n            <i class=\"fas fa-edit fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!(canSetUneditable() | async) || (valid | async) === false\" *ngIf=\"(editable | async)\"\n                (click)=\"setEditable(false)\" class=\"btn btn-outline-success btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.unedit' | translate}}\">\n            <i class=\"fas fa-check fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!(canRemove() | async)\" (click)=\"remove()\"\n                class=\"btn btn-outline-danger btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.remove' | translate}}\">\n            <i class=\"fas fa-trash-alt fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!(canUndo() | async)\" (click)=\"removeChangesFromField()\"\n                class=\"btn btn-outline-warning btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.undo' | translate}}\">\n            <i class=\"fas fa-undo-alt fa-fw\"></i>\n        </button>\n    </div>\n</td>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport {\n  metadataFieldsToString,\n  getFirstSucceededRemoteData\n} from '../../../../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../../../../shared/empty.util';\nimport { RegistryService } from '../../../../core/registry/registry.service';\nimport { cloneDeep } from 'lodash';\nimport { BehaviorSubject, Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport { FieldUpdate } from '../../../../core/data/object-updates/object-updates.reducer';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { NgModel } from '@angular/forms';\nimport { MetadatumViewModel } from '../../../../core/shared/metadata.models';\nimport { InputSuggestion } from '../../../../shared/input-suggestions/input-suggestions.model';\nimport { followLink } from '../../../../shared/utils/follow-link-config.model';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[ds-edit-in-place-field]',\n  styleUrls: ['./edit-in-place-field.component.scss'],\n  templateUrl: './edit-in-place-field.component.html',\n})\n/**\n * Component that displays a single metadatum of an item on the edit page\n */\nexport class EditInPlaceFieldComponent implements OnInit, OnChanges {\n  /**\n   * The current field, value and state of the metadatum\n   */\n  @Input() fieldUpdate: FieldUpdate;\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  /**\n   * The metadatum of this field\n   */\n  @Input() metadata: MetadatumViewModel;\n\n  /**\n   * Emits whether or not this field is currently editable\n   */\n  editable: Observable<boolean>;\n\n  /**\n   * Emits whether or not this field is currently valid\n   */\n  valid: Observable<boolean>;\n\n  /**\n   * The current suggestions for the metadatafield when editing\n   */\n  metadataFieldSuggestions: BehaviorSubject<InputSuggestion[]> = new BehaviorSubject([]);\n\n  constructor(\n    private registryService: RegistryService,\n    private objectUpdatesService: ObjectUpdatesService,\n  ) {\n  }\n\n  /**\n   * Sets up an observable that keeps track of the current editable and valid state of this field\n   */\n  ngOnInit(): void {\n    this.editable = this.objectUpdatesService.isEditable(this.url, this.metadata.uuid);\n    this.valid = this.objectUpdatesService.isValid(this.url, this.metadata.uuid);\n  }\n\n  /**\n   * Sends a new change update for this field to the object updates service\n   */\n  update(ngModel?: NgModel) {\n    this.objectUpdatesService.saveChangeFieldUpdate(this.url, cloneDeep(this.metadata));\n    if (hasValue(ngModel)) {\n      this.checkValidity(ngModel);\n    }\n  }\n\n  /**\n   * Method to check the validity of a form control\n   * @param ngModel\n   */\n  public checkValidity(ngModel: NgModel) {\n    ngModel.control.setValue(ngModel.viewModel);\n    ngModel.control.updateValueAndValidity();\n    this.objectUpdatesService.setValidFieldUpdate(this.url, this.metadata.uuid, ngModel.control.valid);\n  }\n\n  /**\n   * Sends a new editable state for this field to the service to change it\n   * @param editable The new editable state for this field\n   */\n  setEditable(editable: boolean) {\n    this.objectUpdatesService.setEditableFieldUpdate(this.url, this.metadata.uuid, editable);\n  }\n\n  /**\n   * Sends a new remove update for this field to the object updates service\n   */\n  remove() {\n    this.objectUpdatesService.saveRemoveFieldUpdate(this.url, cloneDeep(this.metadata));\n  }\n\n  /**\n   * Notifies the object updates service that the updates for the current field can be removed\n   */\n  removeChangesFromField() {\n    this.objectUpdatesService.removeSingleFieldUpdate(this.url, this.metadata.uuid);\n  }\n\n  /**\n   * Sets the current metadatafield based on the fieldUpdate input field\n   */\n  ngOnChanges(): void {\n    this.metadata = cloneDeep(this.fieldUpdate.field) as MetadatumViewModel;\n  }\n\n  /**\n   * Requests all metadata fields that contain the query string in their key\n   * Then sets all found metadata fields as metadataFieldSuggestions\n   * Ignores fields from metadata schemas \"relation\" and \"relationship\"\n   * @param query The query to look for\n   */\n  findMetadataFieldSuggestions(query: string) {\n    if (isNotEmpty(query)) {\n      return this.registryService.queryMetadataFields(query, null, true, false, followLink('schema')).pipe(\n        getFirstSucceededRemoteData(),\n        metadataFieldsToString(),\n      ).subscribe((fieldNames: string[]) => {\n          this.setInputSuggestions(fieldNames);\n        });\n    } else {\n      this.metadataFieldSuggestions.next([]);\n    }\n  }\n\n  /**\n   * Set the list of input suggestion with the given Metadata fields, which all require a resolved MetadataSchema\n   * @param fields  list of Metadata fields, which all require a resolved MetadataSchema\n   */\n  setInputSuggestions(fields: string[]) {\n    this.metadataFieldSuggestions.next(\n      fields.map((fieldName: string) => {\n        return {\n          displayValue: fieldName.split('.').join('.&#8203;'),\n          value: fieldName\n        };\n      })\n    );\n  }\n\n  /**\n   * Check if a user should be allowed to edit this field\n   * @return an observable that emits true when the user should be able to edit this field and false when they should not\n   */\n  canSetEditable(): Observable<boolean> {\n    return this.editable.pipe(\n      map((editable: boolean) => {\n        if (editable) {\n          return false;\n        } else {\n          return this.fieldUpdate.changeType !== FieldChangeType.REMOVE;\n        }\n      })\n    );\n  }\n\n  /**\n   * Check if a user should be allowed to disabled editing this field\n   * @return an observable that emits true when the user should be able to disable editing this field and false when they should not\n   */\n  canSetUneditable(): Observable<boolean> {\n    return this.editable;\n  }\n\n  /**\n   * Check if a user should be allowed to remove this field\n   * @return an observable that emits true when the user should be able to remove this field and false when they should not\n   */\n  canRemove(): Observable<boolean> {\n    return observableOf(this.fieldUpdate.changeType !== FieldChangeType.REMOVE && this.fieldUpdate.changeType !== FieldChangeType.ADD);\n  }\n\n  /**\n   * Check if a user should be allowed to undo changes to this field\n   * @return an observable that emits true when the user should be able to undo changes to this field and false when they should not\n   */\n  canUndo(): Observable<boolean> {\n    return this.editable.pipe(\n      map((editable: boolean) => this.fieldUpdate.changeType >= 0 || editable)\n    );\n  }\n\n  protected isNotEmpty(value): boolean {\n    return isNotEmpty(value);\n  }\n}\n","<div class=\"item-metadata\">\n    <div class=\"button-row top d-flex mb-2\">\n        <button class=\"mr-auto btn btn-success\"\n                (click)=\"add()\"><i\n                class=\"fas fa-plus\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.add-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n                (click)=\"reinstate()\"><i\n                class=\"fas fa-undo-alt\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || !(isValid() | async)\"\n                (click)=\"submit()\"><i\n                class=\"fas fa-save\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n                [disabled]=\"!(hasChanges() | async)\"\n                (click)=\"discard()\"><i\n                class=\"fas fa-times\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n        </button>\n    </div>\n    <table class=\"table table-responsive table-striped table-bordered\" *ngIf=\"((updates$ | async)| dsObjectValues).length > 0\">\n        <tbody>\n        <tr>\n            <th>{{'item.edit.metadata.headers.field' | translate}}</th>\n            <th>{{'item.edit.metadata.headers.value' | translate}}</th>\n            <th class=\"text-center\">{{'item.edit.metadata.headers.language' | translate}}</th>\n            <th class=\"text-center\">{{'item.edit.metadata.headers.edit' | translate}}</th>\n        </tr>\n        <tr *ngFor=\"let updateValue of ((updates$ | async)| dsObjectValues); trackBy: trackUpdate\"\n            ds-edit-in-place-field\n            [fieldUpdate]=\"updateValue || {}\"\n            [url]=\"url\"\n            [ngClass]=\"{\n                'table-warning': updateValue.changeType === 0,\n                'table-danger': updateValue.changeType === 2,\n                'table-success': updateValue.changeType === 1\n            }\">\n\n        </tr>\n        </tbody>\n    </table>\n    <div *ngIf=\"((updates$ | async)| dsObjectValues).length == 0\">\n      <ds-alert [content]=\"'item.edit.metadata.empty'\" [type]=\"AlertTypeEnum.Info\"></ds-alert>\n    </div>\n    <div class=\"button-row bottom\">\n      <div class=\"mt-2 float-right\">\n              <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n                      (click)=\"reinstate()\"><i\n                      class=\"fas fa-undo-alt\"></i> {{\"item.edit.metadata.reinstate-button\" | translate}}\n              </button>\n              <button class=\"btn btn-primary mr-0\" [disabled]=\"!(hasChanges() | async)\"\n                      (click)=\"submit()\"><i\n                      class=\"fas fa-save\"></i> {{\"item.edit.metadata.save-button\" | translate}}\n              </button>\n              <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n                      [disabled]=\"!(hasChanges() | async)\"\n                      (click)=\"discard()\"><i\n                      class=\"fas fa-times\"></i> {{\"item.edit.metadata.discard-button\" | translate}}\n              </button>\n          </div>\n      </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Item } from '../../../core/shared/item.model';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { cloneDeep } from 'lodash';\nimport { first, switchMap } from 'rxjs/operators';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MetadataValue, MetadatumViewModel } from '../../../core/shared/metadata.models';\nimport { AbstractItemUpdateComponent } from '../abstract-item-update/abstract-item-update.component';\nimport { UpdateDataService } from '../../../core/data/update-data.service';\nimport { hasNoValue, hasValue } from '../../../shared/empty.util';\nimport { AlertType } from '../../../shared/alert/aletr-type';\nimport { Operation } from 'fast-json-patch';\nimport { MetadataPatchOperationService } from '../../../core/data/object-updates/patch-operation-service/metadata-patch-operation.service';\n\n@Component({\n  selector: 'ds-item-metadata',\n  styleUrls: ['./item-metadata.component.scss'],\n  templateUrl: './item-metadata.component.html',\n})\n/**\n * Component for displaying an item's metadata edit page\n */\nexport class ItemMetadataComponent extends AbstractItemUpdateComponent {\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * A custom update service to use for adding and committing patches\n   * This will default to the ItemDataService\n   */\n  @Input() updateService: UpdateDataService<Item>;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute,\n  ) {\n    super(itemService, objectUpdatesService, router, notificationsService, translateService, route);\n  }\n\n  /**\n   * Set up and initialize all fields\n   */\n  ngOnInit(): void {\n    super.ngOnInit();\n    if (hasNoValue(this.updateService)) {\n      this.updateService = this.itemService;\n    }\n  }\n\n  /**\n   * Initialize the values and updates of the current item's metadata fields\n   */\n  public initializeUpdates(): void {\n    this.updates$ = this.objectUpdatesService.getFieldUpdates(this.url, this.item.metadataAsList);\n    }\n\n  /**\n   * Initialize the prefix for notification messages\n   */\n  public initializeNotificationsPrefix(): void {\n    this.notificationsPrefix = 'item.edit.metadata.notifications.';\n  }\n\n  /**\n   * Sends a new add update for a field to the object updates service\n   * @param metadata The metadata to add, if no parameter is supplied, create a new Metadatum\n   */\n  add(metadata: MetadatumViewModel = new MetadatumViewModel()) {\n    this.objectUpdatesService.saveAddFieldUpdate(this.url, metadata);\n  }\n\n  /**\n   * Sends all initial values of this item to the object updates service\n   */\n  public initializeOriginalFields() {\n    this.objectUpdatesService.initialize(this.url, this.item.metadataAsList, this.item.lastModified, MetadataPatchOperationService);\n  }\n\n  /**\n   * Requests all current metadata for this item and requests the item service to update the item\n   * Makes sure the new version of the item is rendered on the page\n   */\n  public submit() {\n    this.isValid().pipe(first()).subscribe((isValid) => {\n      if (isValid) {\n        this.objectUpdatesService.createPatch(this.url).pipe(\n          first(),\n          switchMap((patch: Operation[]) => {\n            return this.updateService.patch(this.item, patch).pipe(\n              getFirstCompletedRemoteData()\n            );\n          })\n        ).subscribe(\n          (rd: RemoteData<Item>) => {\n            if (rd.hasFailed) {\n              this.notificationsService.error(this.getNotificationTitle('error'), rd.errorMessage);\n            } else {\n              this.item = rd.payload;\n              this.checkAndFixMetadataUUIDs();\n              this.initializeOriginalFields();\n              this.updates$ = this.objectUpdatesService.getFieldUpdates(this.url, this.item.metadataAsList);\n              this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved'));\n            }\n          }\n        );\n      } else {\n        this.notificationsService.error(this.getNotificationTitle('invalid'), this.getNotificationContent('invalid'));\n      }\n    });\n  }\n\n  /**\n   * Check for empty metadata UUIDs and fix them (empty UUIDs would break the object-update service)\n   */\n  checkAndFixMetadataUUIDs() {\n    const metadata = cloneDeep(this.item.metadata);\n    Object.keys(this.item.metadata).forEach((key: string) => {\n      metadata[key] = this.item.metadata[key].map((value) => hasValue(value.uuid) ? value : Object.assign(new MetadataValue(), value));\n    });\n    this.item.metadata = metadata;\n  }\n}\n","var map = {\n\t\"./custom/app/+search-page/search-page.component\": [\n\t\t\"o4x0\",\n\t\t54\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"8kTG\";\nmodule.exports = webpackAsyncContext;","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { DSONameService } from './dso-name.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { LinkService } from '../cache/builders/link.service';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { find, map, switchMap } from 'rxjs/operators';\nimport { RemoteData } from '../data/remote-data';\nimport { hasValue } from '../../shared/empty.util';\nimport { Injectable } from '@angular/core';\nimport { getDSORoute } from '../../app-routing-paths';\n\n/**\n * Service to calculate DSpaceObject breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DSOBreadcrumbsService implements BreadcrumbsProviderService<ChildHALResource & DSpaceObject> {\n  constructor(\n    private linkService: LinkService,\n    private dsoNameService: DSONameService\n  ) {\n\n  }\n\n  /**\n   * Method to recursively calculate the breadcrumbs\n   * This method returns the name and url of the key and all its parent DSOs recursively, top down\n   * @param key The key (a DSpaceObject) used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: ChildHALResource & DSpaceObject, url: string): Observable<Breadcrumb[]> {\n    const label = this.dsoNameService.getName(key);\n    const crumb = new Breadcrumb(label, url);\n    const propertyName = key.getParentLinkKey();\n    return this.linkService.resolveLink(key, followLink(propertyName))[propertyName].pipe(\n      find((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => parentRD.hasSucceeded || parentRD.statusCode === 204),\n      switchMap((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => {\n        if (hasValue(parentRD.payload)) {\n          const parent = parentRD.payload;\n          return this.getBreadcrumbs(parent, getDSORoute(parent));\n        }\n        return observableOf([]);\n\n      }),\n      map((breadcrumbs: Breadcrumb[]) => [...breadcrumbs, crumb])\n    );\n  }\n}\n","import { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../../remote-data';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { Observable } from 'rxjs';\nimport { getAllSucceededRemoteDataPayload } from '../../../shared/operators';\nimport { map } from 'rxjs/operators';\nimport { DSpaceObject } from '../../../shared/dspace-object.model';\nimport { AuthService } from '../../../auth/auth.service';\nimport { hasNoValue, hasValue } from '../../../../shared/empty.util';\nimport { SomeFeatureAuthorizationGuard } from './some-feature-authorization.guard';\n\n/**\n * Abstract Guard for preventing unauthorized access to {@link DSpaceObject} pages that require rights for any specific feature in a list\n * This guard utilizes a resolver to retrieve the relevant object to check authorizations for\n */\nexport abstract class DsoPageSomeFeatureGuard<T extends DSpaceObject> extends SomeFeatureAuthorizationGuard {\n  constructor(protected resolver: Resolve<RemoteData<T>>,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check authorization rights for the object resolved using the provided resolver\n   */\n  getObjectUrl(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\n    const routeWithObjectID = this.getRouteWithDSOId(route);\n    return (this.resolver.resolve(routeWithObjectID, state) as Observable<RemoteData<T>>).pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((dso) => dso.self)\n    );\n  }\n\n  /**\n   * Method to resolve resolve (parent) route that contains the UUID of the DSO\n   * @param route The current route\n   */\n  protected getRouteWithDSOId(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot {\n    let routeWithDSOId = route;\n    while (hasNoValue(routeWithDSOId.params.id) && hasValue(routeWithDSOId.parent)) {\n      routeWithDSOId = routeWithDSOId.parent;\n    }\n    return routeWithDSOId;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '../core/core.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { SearchComponent } from './search.component';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { ConfigurationSearchPageGuard } from './configuration-search-page.guard';\nimport { SearchTrackerComponent } from './search-tracker.component';\nimport { StatisticsModule } from '../statistics/statistics.module';\nimport { SearchPageComponent } from './search-page.component';\nimport { SidebarFilterService } from '../shared/sidebar/filter/sidebar-filter.service';\nimport { SearchFilterService } from '../core/shared/search/search-filter.service';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { JournalEntitiesModule } from '../entity-groups/journal-entities/journal-entities.module';\nimport { ResearchEntitiesModule } from '../entity-groups/research-entities/research-entities.module';\nimport { ThemedSearchPageComponent } from './themed-search-page.component';\n\nconst components = [\n  SearchPageComponent,\n  SearchComponent,\n  SearchTrackerComponent,\n  ThemedSearchPageComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule.withEntryComponents(),\n    CoreModule.forRoot(),\n    StatisticsModule.forRoot(),\n    JournalEntitiesModule.withEntryComponents(),\n    ResearchEntitiesModule.withEntryComponents()\n  ],\n  declarations: components,\n  providers: [\n    SidebarService,\n    SidebarFilterService,\n    SearchFilterService,\n    ConfigurationSearchPageGuard,\n    SearchConfigurationService\n  ],\n  exports: components\n})\n\n/**\n * This module handles all components and pipes that are necessary for the search page\n */\nexport class SearchPageModule {\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { SearchPageComponent } from './search-page.component';\n\n/**\n * Themed wrapper for SearchPageComponent\n */\n@Component({\n  selector: 'ds-themed-search-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedSearchPageComponent extends ThemedComponent<SearchPageComponent> {\n\n  protected getComponentName(): string {\n    return 'SearchPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/+search-page/search-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./search-page.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from './item-page.resolver';\nimport { Item } from '../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring administrator rights\n */\nexport class ItemPageAdministratorGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check administrator authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.AdministratorOf);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { Store } from '@ngrx/store';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getItemPageRoute } from './item-page-routing-paths';\nimport { ItemResolver } from './item.resolver';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated and will redirect to the\n * entity page\n */\n@Injectable()\nexport class ItemPageResolver extends ItemResolver {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n    super(itemService, store, router);\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    return super.resolve(route, state).pipe(\n      map((rd: RemoteData<Item>) => {\n        if (rd.hasSucceeded && hasValue(rd.payload)) {\n          const itemRoute = getItemPageRoute(rd.payload);\n          const thisRoute = state.url;\n          if (!thisRoute.startsWith(itemRoute)) {\n            const itemId = rd.payload.uuid;\n            const subRoute = thisRoute.substring(thisRoute.indexOf(itemId) + itemId.length, thisRoute.length);\n            this.router.navigateByUrl(itemRoute + subRoute);\n          }\n        }\n        return rd;\n      })\n    );\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h2 class=\"border-bottom\">{{'item.edit.head' | translate}}</h2>\n            <div class=\"pt-2\">\n                <ul class=\"nav nav-tabs justify-content-start\">\n                    <li *ngFor=\"let page of pages\" class=\"nav-item\">\n                        <a *ngIf=\"(page.enabled | async)\"\n                           class=\"nav-link\"\n                           [ngClass]=\"{'active' : page.page === currentPage}\"\n                           [routerLink]=\"['./' + page.page]\">\n                            {{'item.edit.tabs.' + page.page + '.head' | translate}}\n                        </a>\n                        <span [ngbTooltip]=\"'item.edit.tabs.disabled.tooltip' | translate\">\n                            <button *ngIf=\"!(page.enabled | async)\"\n                                 class=\"nav-link disabled\">\n                                {{'item.edit.tabs.' + page.page + '.head' | translate}}\n                            </button>\n                        </span>\n                    </li>\n                </ul>\n                <div class=\"tab-pane active\">\n                    <div class=\"mb-4\">\n                        <router-outlet></router-outlet>\n                    </div>\n                    <div class=\"button-row bottom\">\n                      <div class=\"text-right\">\n                        <a [routerLink]=\"getItemPage((itemRD$ | async)?.payload)\" role=\"button\" class=\"btn btn-outline-secondary mr-1\"><i class=\"fas fa-arrow-left\"></i> {{'item.edit.return' | translate}}</a>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { fadeIn, fadeInOut } from '../../shared/animations/fade';\nimport { ChangeDetectionStrategy, Component, Injector, OnInit } from '@angular/core';\nimport { ActivatedRoute, CanActivate, Route, Router } from '@angular/router';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { combineLatest as observableCombineLatest, Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { getItemPageRoute } from '../item-page-routing-paths';\nimport { GenericConstructor } from '../../core/shared/generic-constructor';\n\n@Component({\n  selector: 'ds-edit-item-page',\n  templateUrl: './edit-item-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Page component for editing an item\n */\nexport class EditItemPageComponent implements OnInit {\n\n  /**\n   * The item to edit\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The current page outlet string\n   */\n  currentPage: string;\n\n  /**\n   * All possible page outlet strings\n   */\n  pages: { page: string, enabled: Observable<boolean> }[];\n\n  constructor(private route: ActivatedRoute, private router: Router, private injector: Injector) {\n    this.router.events.subscribe(() => this.initPageParamsByRoute());\n  }\n\n  ngOnInit(): void {\n    this.initPageParamsByRoute();\n    this.pages = this.route.routeConfig.children\n      .filter((child: Route) => isNotEmpty(child.path))\n      .map((child: Route) => {\n        let enabled = observableOf(true);\n        if (isNotEmpty(child.canActivate)) {\n          enabled = observableCombineLatest(child.canActivate.map((guardConstructor: GenericConstructor<CanActivate>) => {\n              const guard: CanActivate = this.injector.get<CanActivate>(guardConstructor);\n              return guard.canActivate(this.route.snapshot, this.router.routerState.snapshot);\n            })\n          ).pipe(\n            map((canActivateOutcomes: any[]) => canActivateOutcomes.every((e) => e === true))\n          );\n        }\n        return { page: child.path, enabled: enabled };\n      }); // ignore reroutes\n    this.itemRD$ = this.route.data.pipe(map((data) => data.dso));\n  }\n\n  /**\n   * Get the item page url\n   * @param item The item for which the url is requested\n   */\n  getItemPage(item: Item): string {\n    return getItemPageRoute(item);\n  }\n\n  /**\n   * Set page params depending on the route\n   */\n  initPageParamsByRoute() {\n    this.currentPage = this.route.snapshot.firstChild.routeConfig.path;\n  }\n}\n","import { Component, OnInit, Predicate } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Item } from '../../../core/shared/item.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { first, map } from 'rxjs/operators';\nimport { findSuccessfulAccordingTo } from '../edit-item-operators';\nimport { getItemEditRoute, getItemPageRoute } from '../../item-page-routing-paths';\n\n/**\n * Component to render and handle simple item edit actions such as withdrawal and reinstatement.\n * This component is not meant to be used itself but to be extended.\n */\n@Component({\n  selector: 'ds-simple-action',\n  templateUrl: './abstract-simple-item-action.component.html'\n})\nexport class AbstractSimpleItemActionComponent implements OnInit {\n\n  itemRD$: Observable<RemoteData<Item>>;\n  item: Item;\n\n  protected messageKey: string;\n  confirmMessage: string;\n  cancelMessage: string;\n  headerMessage: string;\n  descriptionMessage: string;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute: string;\n\n  protected predicate: Predicate<RemoteData<Item>>;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.data.pipe(\n      map((data) => data.dso),\n      getFirstSucceededRemoteData()\n    )as Observable<RemoteData<Item>>;\n\n    this.itemRD$.pipe(first()).subscribe((rd) => {\n        this.item = rd.payload;\n        this.itemPageRoute = getItemPageRoute(this.item);\n      }\n    );\n\n    this.confirmMessage = 'item.edit.' + this.messageKey + '.confirm';\n    this.cancelMessage = 'item.edit.' + this.messageKey + '.cancel';\n    this.headerMessage = 'item.edit.' + this.messageKey + '.header';\n    this.descriptionMessage = 'item.edit.' + this.messageKey + '.description';\n  }\n  /**\n   * Perform the operation linked to this action\n   */\n  performAction() {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Process the response obtained during the performAction method and navigate back to the edit page\n   * @param response from the action in the performAction method\n   */\n  processRestResponse(response: RemoteData<any>) {\n    if (response.hasSucceeded) {\n      this.itemDataService.findById(this.item.id).pipe(\n        findSuccessfulAccordingTo(this.predicate)).subscribe(() => {\n        this.notificationsService.success(this.translateService.get('item.edit.' + this.messageKey + '.success'));\n        this.router.navigate([getItemEditRoute(this.item)]);\n      });\n    } else {\n      this.notificationsService.error(this.translateService.get('item.edit.' + this.messageKey + '.error'));\n      this.router.navigate([getItemEditRoute(this.item)]);\n    }\n  }\n\n}\n","import {RemoteData} from '../../core/data/remote-data';\nimport {Observable} from 'rxjs';\nimport {first} from 'rxjs/operators';\nimport {getAllSucceededRemoteData} from '../../core/shared/operators';\n\n/**\n * Return first Observable of a RemoteData object that complies to the provided predicate\n * @param predicate\n */\nexport const findSuccessfulAccordingTo = <T>(predicate: (rd: RemoteData<T>) => boolean) =>\n  (source: Observable<RemoteData<T>>): Observable<RemoteData<T>> =>\n    source.pipe(getAllSucceededRemoteData(),\n      first(predicate));\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h2>{{headerMessage | translate: {id: item.handle} }}</h2>\n            <p>{{descriptionMessage | translate}}</p>\n            <ds-modify-item-overview [item]=\"item\"></ds-modify-item-overview>\n            <button (click)=\"performAction()\" class=\"btn btn-outline-secondary perform-action\">{{confirmMessage | translate}}\n            </button>\n            <button [routerLink]=\"[itemPageRoute, 'edit']\" class=\"btn btn-outline-secondary cancel\">\n                {{cancelMessage| translate}}\n            </button>\n\n        </div>\n    </div>\n\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-withdraw',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the Item Withdraw page\n */\nexport class ItemWithdrawComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'withdraw';\n  protected predicate = (rd: RemoteData<Item>) => rd.payload.isWithdrawn;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the withdraw action to the item\n   */\n  performAction() {\n    this.itemDataService.setWithDrawn(this.item, true).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Item>) => {\n        this.processRestResponse(response);\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-reinstate',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the Item Reinstate page\n */\nexport class ItemReinstateComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'reinstate';\n  protected predicate = (rd: RemoteData<Item>) => !rd.payload.isWithdrawn;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the reinstate action to the item\n   */\n  performAction() {\n    this.itemDataService.setWithDrawn(this.item, false).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Item>) => {\n        this.processRestResponse(response);\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-private',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the make item private page\n */\nexport class ItemPrivateComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'private';\n  protected predicate = (rd: RemoteData<Item>) => !rd.payload.isDiscoverable;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the make private action to the item\n   */\n  performAction() {\n    this.itemDataService.setDiscoverable(this.item, false).pipe(getFirstCompletedRemoteData()).subscribe(\n      (rd: RemoteData<Item>) => {\n        this.processRestResponse(rd);\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-public',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the make item public page\n */\nexport class ItemPublicComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'public';\n  protected predicate = (rd: RemoteData<Item>) => rd.payload.isDiscoverable;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the make public action to the item\n   */\n  performAction() {\n    this.itemDataService.setDiscoverable(this.item, true).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Item>) => {\n        this.processRestResponse(response);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n\n            <h2>{{headerMessage | translate: {id: item.handle} }}</h2>\n            <p>{{descriptionMessage | translate}}</p>\n            <ds-modify-item-overview [item]=\"item\"></ds-modify-item-overview>\n\n            <ng-container *ngVar=\"(types$ | async) as types\">\n\n                <div *ngIf=\"types && types.length > 0\" class=\"mb-4\">\n\n                    {{'virtual-metadata.delete-item.info' | translate}}\n\n                    <div *ngFor=\"let type of types\" class=\"mb-4\">\n\n                        <div *ngVar=\"(isSelected(type) | async) as selected\"\n                             class=\"d-flex flex-row\">\n\n                            <div class=\"m-2\" (click)=\"setSelected(type, !selected)\">\n                                <label>\n                                    <input type=\"checkbox\" [checked]=\"selected\">\n                                </label>\n                            </div>\n\n                            <div class=\"flex-column flex-grow-1\">\n                                <h5 (click)=\"setSelected(type, !selected)\">\n                                    {{getRelationshipMessageKey(getLabel(type) | async) | translate}}\n                                </h5>\n                                <div *ngFor=\"let relationship of (getRelationships(type) | async)\"\n                                     class=\"d-flex flex-row\">\n                                    <ng-container *ngVar=\"(getRelatedItem(relationship) | async) as relatedItem\">\n\n                                        <ds-listable-object-component-loader\n                                                *ngIf=\"relatedItem\"\n                                                [object]=\"relatedItem\"\n                                                [viewMode]=\"viewMode\">\n                                        </ds-listable-object-component-loader>\n                                        <div class=\"ml-auto\">\n                                            <div class=\"btn-group\">\n                                                <button class=\"btn btn-outline-info btn-sm\"\n                                                        (click)=\"openVirtualMetadataModal(virtualMetadataModal)\">\n                                                    <i class=\"fas fa-info fa-fw\"></i>\n                                                </button>\n                                            </div>\n                                        </div>\n\n                                        <ng-template #virtualMetadataModal>\n                                            <div>\n                                                <div class=\"modal-header\">\n                                                    {{'virtual-metadata.delete-item.modal-head' | translate}}\n                                                    <button type=\"button\" class=\"close\"\n                                                            (click)=\"closeVirtualMetadataModal()\" aria-label=\"Close\">\n                                                        <span aria-hidden=\"true\">×</span>\n                                                    </button>\n                                                </div>\n                                                <div class=\"modal-body\">\n                                                    <ds-listable-object-component-loader\n                                                            *ngIf=\"relatedItem\"\n                                                            [object]=\"relatedItem\"\n                                                            [viewMode]=\"viewMode\">\n                                                    </ds-listable-object-component-loader>\n                                                    <div *ngFor=\"let metadata of (getVirtualMetadata(relationship) | async)\">\n                                                        <div>\n                                                            <div class=\"font-weight-bold\">\n                                                                {{metadata.metadataField}}\n                                                            </div>\n                                                            <div>\n                                                                {{metadata.metadataValue.value}}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </ng-template>\n\n                                    </ng-container>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </ng-container>\n\n            <button (click)=\"performAction()\"\n                    class=\"btn btn-outline-secondary perform-action\">{{confirmMessage | translate}}\n            </button>\n            <button [routerLink]=\"[itemPageRoute, 'edit']\" class=\"btn btn-outline-secondary cancel\">\n                {{cancelMessage| translate}}\n            </button>\n\n        </div>\n    </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport {defaultIfEmpty, filter, map, switchMap, take} from 'rxjs/operators';\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  combineLatest as observableCombineLatest,\n  combineLatest,\n  Observable,\n  of as observableOf\n} from 'rxjs';\nimport { RelationshipType } from '../../../core/shared/item-relationships/relationship-type.model';\nimport { VirtualMetadata } from '../virtual-metadata/virtual-metadata.component';\nimport { Relationship } from '../../../core/shared/item-relationships/relationship.model';\nimport {\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData\n} from '../../../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { Item } from '../../../core/shared/item.model';\nimport { MetadataValue } from '../../../core/shared/metadata.models';\nimport { ViewMode } from '../../../core/shared/view-mode.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { RelationshipService } from '../../../core/data/relationship.service';\nimport { EntityTypeService } from '../../../core/data/entity-type.service';\nimport { LinkService } from '../../../core/cache/builders/link.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { getItemEditRoute } from '../../item-page-routing-paths';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { NoContent } from '../../../core/shared/NoContent.model';\n\n@Component({\n  selector: 'ds-item-delete',\n  templateUrl: '../item-delete/item-delete.component.html'\n})\n/**\n * Component responsible for rendering the item delete page\n */\nexport class ItemDeleteComponent\n  extends AbstractSimpleItemActionComponent\n  implements OnInit {\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  protected messageKey = 'delete';\n\n  /**\n   * The view-mode we're currently on\n   */\n  viewMode = ViewMode.ListElement;\n\n  /**\n   * A list of the relationship types for which this item has relations as an observable.\n   * The list doesn't contain duplicates.\n   */\n  types$: Observable<RelationshipType[]>;\n\n  /**\n   * A map which stores the relationships of this item for each type as observable lists\n   */\n  relationships$: Map<RelationshipType, Observable<Relationship[]>>\n    = new Map<RelationshipType, Observable<Relationship[]>>();\n\n  /**\n   * A map which stores the related item of each relationship of this item as an observable\n   */\n  relatedItems$: Map<Relationship, Observable<Item>> = new Map<Relationship, Observable<Item>>();\n\n  /**\n   * A map which stores the virtual metadata (of the related) item corresponding to each relationship of this item\n   * as an observable list\n   */\n  virtualMetadata$: Map<Relationship, Observable<VirtualMetadata[]>> = new Map<Relationship, Observable<VirtualMetadata[]>>();\n\n  /**\n   * Reference to NgbModal\n   */\n  public modalRef: NgbModalRef;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService,\n              protected modalService: NgbModal,\n              protected objectUpdatesService: ObjectUpdatesService,\n              protected relationshipService: RelationshipService,\n              protected entityTypeService: EntityTypeService,\n              protected linkService: LinkService,\n  ) {\n    super(\n      route,\n      router,\n      notificationsService,\n      itemDataService,\n      translateService,\n    );\n  }\n\n  /**\n   * Set up and initialize all fields\n   */\n  ngOnInit() {\n\n    super.ngOnInit();\n    this.url = this.router.url;\n\n    const label = this.item.firstMetadataValue('dspace.entity.type');\n    if (label !== undefined) {\n      this.types$ = this.entityTypeService.getEntityTypeByLabel(label).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        switchMap((entityType) => this.entityTypeService.getEntityTypeRelationships(entityType.id)),\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((relationshipTypes) => relationshipTypes.page),\n        switchMap((types) => {\n          if (types.length === 0) {\n            return observableOf(types);\n          }\n          return combineLatest(types.map((type) => this.getRelationships(type))).pipe(\n            map((relationships) =>\n              types.reduce<RelationshipType[]>((includedTypes, type, index) => {\n                if (!includedTypes.some((includedType) => includedType.id === type.id)\n                  && !(relationships[index].length === 0)) {\n                  return [...includedTypes, type];\n                } else {\n                  return includedTypes;\n                }\n              }, [])\n            ),\n          );\n        })\n      );\n    } else {\n      this.types$ = observableOf([]);\n    }\n\n    this.types$.pipe(\n      take(1),\n    ).subscribe((types) =>\n      this.objectUpdatesService.initialize(this.url, types, this.item.lastModified)\n    );\n  }\n\n  /**\n   * Open the modal which lists the virtual metadata of a relation\n   * @param content the html content of the modal\n   */\n  openVirtualMetadataModal(content: any) {\n    this.modalRef = this.modalService.open(content);\n  }\n\n  /**\n   * Close the modal which lists the virtual metadata of a relation\n   */\n  closeVirtualMetadataModal() {\n    this.modalRef.close();\n  }\n\n  /**\n   * Get the i18n message key for a relationship\n   * @param label   The relationship type's label\n   */\n  getRelationshipMessageKey(label: string): string {\n    if (hasValue(label) && label.indexOf('Of') > -1) {\n      return `relationships.${label.substring(0, label.indexOf('Of') + 2)}`;\n    } else {\n      return label;\n    }\n  }\n\n  /**\n   * Get the relationship type label relevant for this item as an observable\n   * @param relationshipType  the relationship type to get the label for\n   */\n  getLabel(relationshipType: RelationshipType): Observable<string> {\n\n    return this.getRelationships(relationshipType).pipe(\n      switchMap((relationships) =>\n        this.isLeftItem(relationships[0]).pipe(\n          map((isLeftItem) => isLeftItem ? relationshipType.leftwardType : relationshipType.rightwardType),\n        )\n      ),\n    );\n  }\n\n  /**\n   * Get the relationships of this item with a given type as an observable\n   * @param relationshipType  the relationship type to filter the item's relationships on\n   */\n  getRelationships(relationshipType: RelationshipType): Observable<Relationship[]> {\n\n    if (!this.relationships$.has(relationshipType)) {\n      this.relationships$.set(\n        relationshipType,\n        this.relationshipService.getItemRelationshipsArray(this.item).pipe(\n          // filter on type\n          switchMap((relationships) =>\n            observableCombineLatest(\n              relationships.map((relationship) => this.getRelationshipType(relationship))\n            ).pipe(\n              defaultIfEmpty([]),\n              map((types) => relationships.filter(\n                (relationship, index) => relationshipType.id === types[index].id\n              )),\n            )\n          ),\n        )\n      );\n    }\n\n    return this.relationships$.get(relationshipType);\n  }\n\n  /**\n   * Get the type of a given relationship as an observable\n   * @param relationship  the relationship to get the type for\n   */\n  private getRelationshipType(relationship: Relationship): Observable<RelationshipType> {\n\n    this.linkService.resolveLinks(\n      relationship,\n      followLink('relationshipType'),\n      followLink('leftItem'),\n      followLink('rightItem'),\n    );\n    return relationship.relationshipType.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      filter((relationshipType: RelationshipType) => hasValue(relationshipType) && isNotEmpty(relationshipType.uuid))\n    );\n  }\n\n  /**\n   * Get the item this item is related to through a given relationship as an observable\n   * @param relationship  the relationship to get the other item for\n   */\n  getRelatedItem(relationship: Relationship): Observable<Item> {\n\n    if (!this.relatedItems$.has(relationship)) {\n\n      this.relatedItems$.set(\n        relationship,\n        this.isLeftItem(relationship).pipe(\n          switchMap((isLeftItem) => isLeftItem ? relationship.rightItem : relationship.leftItem),\n          getFirstSucceededRemoteData(),\n          getRemoteDataPayload(),\n        ),\n      );\n    }\n\n    return this.relatedItems$.get(relationship);\n  }\n\n  /**\n   * Get the virtual metadata for a given relationship of the related item.\n   * @param relationship  the relationship to get the virtual metadata for\n   */\n  getVirtualMetadata(relationship: Relationship): Observable<VirtualMetadata[]> {\n\n    if (!this.virtualMetadata$.has(relationship)) {\n\n      this.virtualMetadata$.set(\n        relationship,\n        this.getRelatedItem(relationship).pipe(\n          map((relatedItem) =>\n            Object.entries(relatedItem.metadata)\n              .map(([key, value]) => value\n                .filter((metadata: MetadataValue) =>\n                  metadata.authority && metadata.authority.endsWith(relationship.id))\n                .map((metadata: MetadataValue) => {\n                  return {\n                    metadataField: key,\n                    metadataValue: metadata,\n                  };\n                }))\n              .reduce((previous, current) => previous.concat(current))\n          ),\n        )\n      );\n    }\n\n    return this.virtualMetadata$.get(relationship);\n  }\n\n  /**\n   * Check whether this item is the left item of a given relationship, as an observable boolean\n   * @param relationship  the relationship for which to check whether this item is the left item\n   */\n  private isLeftItem(relationship: Relationship): Observable<boolean> {\n\n    return relationship.leftItem.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid)),\n      map((leftItem) => leftItem.uuid === this.item.uuid)\n    );\n  }\n\n  /**\n   * Check whether a given relationship type is selected to save the corresponding virtual metadata\n   * @param type  the relationship type for which to check whether it is selected\n   */\n  isSelected(type: RelationshipType): Observable<boolean> {\n    return this.objectUpdatesService.isSelectedVirtualMetadata(this.url, this.item.uuid, type.uuid);\n  }\n\n  /**\n   * Select/deselect a given relationship type to save the corresponding virtual metadata\n   * @param type      the relationship type to select/deselect\n   * @param selected  whether the type should be selected\n   */\n  setSelected(type: RelationshipType, selected: boolean): void {\n    this.objectUpdatesService.setSelectedVirtualMetadata(this.url, this.item.uuid, type.uuid, selected);\n  }\n\n  /**\n   * Perform the delete operation\n   */\n  performAction() {\n\n    this.types$.pipe(\n      switchMap((types) =>\n        combineLatest(\n          types.map((type) => this.isSelected(type))\n        ).pipe(\n          defaultIfEmpty([]),\n          map((selection) => types.filter(\n            (type, index) => selection[index]\n          )),\n          map((selectedTypes) => selectedTypes.map((type) => type.id)),\n        )\n      ),\n    ).subscribe((types) => {\n      this.itemDataService.delete(this.item.id, types).pipe(getFirstCompletedRemoteData()).subscribe(\n        (rd: RemoteData<NoContent>) => {\n          this.notify(rd.hasSucceeded);\n        }\n      );\n    });\n  }\n\n  /**\n   * When the item is successfully delete, navigate to the homepage, otherwise navigate back to the item edit page\n   * @param succeeded\n   */\n  notify(succeeded: boolean) {\n    if (succeeded) {\n      this.notificationsService.success(this.translateService.get('item.edit.' + this.messageKey + '.success'));\n      this.router.navigate(['']);\n    } else {\n      this.notificationsService.error(this.translateService.get('item.edit.' + this.messageKey + '.error'));\n      this.router.navigate([getItemEditRoute(this.item)]);\n    }\n  }\n}\n","import { FeatureID } from '../../../core/data/feature-authorization/feature-id';\n\n/**\n *  Represents an item operation used on the edit item page with a key, an operation URL to which will be navigated\n *  when performing the action and an option to disable the operation.\n */\nexport class ItemOperation {\n\n  operationKey: string;\n  operationUrl: string;\n  disabled: boolean;\n  authorized: boolean;\n  featureID: FeatureID;\n\n  constructor(operationKey: string, operationUrl: string, featureID?: FeatureID, disabled = false, authorized = true) {\n    this.operationKey = operationKey;\n    this.operationUrl = operationUrl;\n    this.featureID = featureID;\n    this.authorized = authorized;\n    this.setDisabled(disabled);\n  }\n\n  /**\n   * Set whether this operation should be disabled\n   * @param disabled\n   */\n  setDisabled(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n}\n","<div class=\"col-3 float-left d-flex h-100 action-label\">\n      <span class=\"justify-content-center align-self-center\">\n        {{'item.edit.tabs.status.buttons.' + operation.operationKey + '.label' | translate}}\n      </span>\n</div>\n<div class=\"col-9 float-left action-button\">\n  <span *ngIf=\"operation.authorized\">\n    <button class=\"btn btn-outline-primary\" [disabled]=\"operation.disabled\" [routerLink]=\"operation.operationUrl\">\n      {{'item.edit.tabs.status.buttons.' + operation.operationKey + '.button' | translate}}\n    </button>\n  </span>\n  <span *ngIf=\"!operation.authorized\" [ngbTooltip]=\"'item.edit.tabs.status.buttons.unauthorized' | translate\">\n    <button class=\"btn btn-outline-primary\" [disabled]=\"true\">\n      {{'item.edit.tabs.status.buttons.' + operation.operationKey + '.button' | translate}}\n    </button>\n  </span>\n</div>\n","import {Component, Input} from '@angular/core';\nimport {ItemOperation} from './itemOperation.model';\n\n@Component({\n  selector: 'ds-item-operation',\n  templateUrl: './item-operation.component.html'\n})\n/**\n * Operation that can be performed on an item\n */\nexport class ItemOperationComponent {\n\n  @Input() operation: ItemOperation;\n\n}\n","<p class=\"mt-2\">{{'item.edit.tabs.status.description' | translate}}</p>\n<div class=\"row\">\n  <div *ngFor=\"let statusKey of statusDataKeys\" class=\"w-100\">\n    <div class=\"col-3 float-left status-label\">\n      {{'item.edit.tabs.status.labels.' + statusKey | translate}}:\n    </div>\n    <div class=\"col-9 float-left status-data\" id=\"status-{{statusKey}}\">\n      {{statusData[statusKey]}}\n    </div>\n  </div>\n  <div class=\"col-3 float-left status-label\">\n    {{'item.edit.tabs.status.labels.itemPage' | translate}}:\n  </div>\n  <div class=\"col-9 float-left status-data\" id=\"status-itemPage\">\n    <a [routerLink]=\"itemPageRoute$ | async\">{{itemPageRoute$ | async}}</a>\n  </div>\n\n  <div *ngFor=\"let operation of (operations$ | async)\" class=\"w-100\" [ngClass]=\"{'pt-3': operation}\">\n    <ds-item-operation *ngIf=\"operation\" [operation]=\"operation\"></ds-item-operation>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { fadeIn, fadeInOut } from '../../../shared/animations/fade';\nimport { Item } from '../../../core/shared/item.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { ItemOperation } from '../item-operation/itemOperation.model';\nimport { distinctUntilChanged, first, map, mergeMap, toArray } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, from as observableFrom } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { getItemEditRoute, getItemPageRoute } from '../../item-page-routing-paths';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { hasValue } from '../../../shared/empty.util';\nimport { getAllSucceededRemoteDataPayload } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-status',\n  templateUrl: './item-status.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Component for displaying an item's status\n */\nexport class ItemStatusComponent implements OnInit {\n\n  /**\n   * The item to display the status for\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The data to show in the status\n   */\n  statusData: any;\n  /**\n   * The keys of the data (to loop over)\n   */\n  statusDataKeys;\n\n  /**\n   * The possible actions that can be performed on the item\n   *  key: id   value: url to action's component\n   */\n  operations$: BehaviorSubject<ItemOperation[]> = new BehaviorSubject<ItemOperation[]>([]);\n\n  /**\n   * The keys of the actions (to loop over)\n   */\n  actionsKeys;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute$: Observable<string>;\n\n  constructor(private route: ActivatedRoute,\n              private authorizationService: AuthorizationDataService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.parent.data.pipe(map((data) => data.dso));\n    this.itemRD$.pipe(\n      first(),\n      map((data: RemoteData<Item>) => data.payload)\n    ).subscribe((item: Item) => {\n      this.statusData = Object.assign({\n        id: item.id,\n        handle: item.handle,\n        lastModified: item.lastModified\n      });\n      this.statusDataKeys = Object.keys(this.statusData);\n      /*\n        The key is used to build messages\n          i18n example: 'item.edit.tabs.status.buttons.<key>.label'\n        The value is supposed to be a href for the button\n      */\n      const operations = [];\n      operations.push(new ItemOperation('authorizations', this.getCurrentUrl(item) + '/authorizations', FeatureID.CanManagePolicies, true));\n      operations.push(new ItemOperation('mappedCollections', this.getCurrentUrl(item) + '/mapper', FeatureID.CanManageMappings, true));\n      if (item.isWithdrawn) {\n        operations.push(new ItemOperation('reinstate', this.getCurrentUrl(item) + '/reinstate', FeatureID.ReinstateItem, true));\n      } else {\n        operations.push(new ItemOperation('withdraw', this.getCurrentUrl(item) + '/withdraw', FeatureID.WithdrawItem, true));\n      }\n      if (item.isDiscoverable) {\n        operations.push(new ItemOperation('private', this.getCurrentUrl(item) + '/private', FeatureID.CanMakePrivate, true));\n      } else {\n        operations.push(new ItemOperation('public', this.getCurrentUrl(item) + '/public', FeatureID.CanMakePrivate, true));\n      }\n      operations.push(new ItemOperation('delete', this.getCurrentUrl(item) + '/delete', FeatureID.CanDelete, true));\n      operations.push(new ItemOperation('move', this.getCurrentUrl(item) + '/move', FeatureID.CanMove, true));\n\n      this.operations$.next(operations);\n\n      observableFrom(operations).pipe(\n        mergeMap((operation) => {\n          if (hasValue(operation.featureID)) {\n            return this.authorizationService.isAuthorized(operation.featureID, item.self).pipe(\n              distinctUntilChanged(),\n              map((authorized) => new ItemOperation(operation.operationKey, operation.operationUrl, operation.featureID, !authorized, authorized))\n            );\n          } else {\n            return [operation];\n          }\n        }),\n        toArray()\n      ).subscribe((ops) => this.operations$.next(ops));\n    });\n    this.itemPageRoute$ = this.itemRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((item) => getItemPageRoute(item))\n    );\n  }\n\n  /**\n   * Get the current url without query params\n   * @returns {string}  url\n   */\n  getCurrentUrl(item: Item): string {\n    return getItemEditRoute(item);\n  }\n\n  trackOperation(index: number, operation: ItemOperation) {\n    return hasValue(operation) ? operation.operationKey : undefined;\n  }\n\n}\n","/**\n * A helper class storing the sizes in which to render a single column\n * The values in this class are expected to be between 1 and 12\n * There are used to be added to bootstrap classes such as col-xs-{this.xs}\n */\nexport class ResponsiveColumnSizes {\n  /**\n   * The extra small bootstrap size\n   */\n  xs: number;\n\n  /**\n   * The small bootstrap size\n   */\n  sm: number;\n\n  /**\n   * The medium bootstrap size\n   */\n  md: number;\n\n  /**\n   * The large bootstrap size\n   */\n  lg: number;\n\n  /**\n   * The extra large bootstrap size\n   */\n  xl: number;\n\n  constructor(xs: number, sm: number, md: number, lg: number, xl: number) {\n    this.xs = xs;\n    this.sm = sm;\n    this.md = md;\n    this.lg = lg;\n    this.xl = xl;\n  }\n\n  /**\n   * Build the bootstrap responsive column classes matching the values of this object\n   */\n  buildClasses(): string {\n    return `col-${this.xs} col-sm-${this.sm} col-md-${this.md} col-lg-${this.lg} col-xl-${this.xl}`;\n  }\n}\n","import { ResponsiveColumnSizes } from './responsive-column-sizes';\nimport { hasValue } from '../empty.util';\n\n/**\n * A helper class storing the sizes in which to render a table\n * It stores a list of columns, which in turn store their own bootstrap column sizes\n */\nexport class ResponsiveTableSizes {\n  /**\n   * A list of all the columns and their responsive sizes within this table\n   */\n  columns: ResponsiveColumnSizes[];\n\n  constructor(columns: ResponsiveColumnSizes[]) {\n    this.columns = columns;\n  }\n\n  /**\n   * Combine the values of multiple columns into a single ResponsiveColumnSizes\n   * Useful when a row element stretches over multiple columns\n   * @param start Index of the first column\n   * @param end   Index of the last column (inclusive)\n   */\n  combineColumns(start: number, end: number): ResponsiveColumnSizes {\n    if (start < end && hasValue(this.columns[start]) && hasValue(this.columns[end])) {\n      let xs = this.columns[start].xs;\n      let sm = this.columns[start].sm;\n      let md = this.columns[start].md;\n      let lg = this.columns[start].lg;\n      let xl = this.columns[start].xl;\n      for (let i = start + 1; i < end + 1; i++) {\n        xs += this.columns[i].xs;\n        sm += this.columns[i].sm;\n        md += this.columns[i].md;\n        lg += this.columns[i].lg;\n        xl += this.columns[i].xl;\n      }\n      return new ResponsiveColumnSizes(xs, sm, md, lg, xl);\n    }\n    return undefined;\n  }\n}\n","<ng-template #handleView>\n  <div class=\"drag-handle text-muted float-left p-1 mr-2\">\n    <i class=\"fas fa-grip-vertical fa-fw\" [title]=\"'item.edit.bitstreams.edit.buttons.drag' | translate\"></i>\n  </div>\n</ng-template>\n","import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n  selector: 'ds-item-edit-bitstream-drag-handle',\n  styleUrls: ['../item-bitstreams.component.scss'],\n  templateUrl: './item-edit-bitstream-drag-handle.component.html',\n})\n/**\n * Component displaying a drag handle for the item-edit-bitstream page\n * Creates an embedded view of the contents\n * (which means it'll be added to the parents html without a wrapping ds-item-edit-bitstream-drag-handle element)\n */\nexport class ItemEditBitstreamDragHandleComponent implements OnInit {\n  /**\n   * The view on the drag-handle\n   */\n  @ViewChild('handleView', {static: true}) handleView;\n\n  constructor(private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.handleView);\n  }\n\n}\n","import { FieldUpdate, FieldUpdates } from '../../core/data/object-updates/object-updates.reducer';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../pagination/pagination-component-options.model';\nimport { ObjectUpdatesService } from '../../core/data/object-updates/object-updates.service';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { hasValue } from '../empty.util';\nimport {\n  paginatedListToArray,\n  getFirstSucceededRemoteData,\n  getAllSucceededRemoteData\n} from '../../core/shared/operators';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Component, ElementRef, EventEmitter, OnDestroy, Output, ViewChild } from '@angular/core';\nimport { PaginationComponent } from '../pagination/pagination.component';\nimport { ObjectValuesPipe } from '../utils/object-values-pipe';\nimport { compareArraysUsing } from '../../+item-page/simple/item-types/shared/item-relationships-utils';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n/**\n * Operator used for comparing {@link FieldUpdate}s by their field's UUID\n */\nexport const compareArraysUsingFieldUuids = () =>\n  compareArraysUsing((fieldUpdate: FieldUpdate) => (hasValue(fieldUpdate) && hasValue(fieldUpdate.field)) ? fieldUpdate.field.uuid : undefined);\n\n/**\n * An abstract component containing general methods and logic to be able to drag and drop objects within a paginated\n * list. This implementation supports being able to drag and drop objects between pages.\n * Dragging an object on top of a page number will automatically detect the page it's being dropped on and send a\n * dropObject event to the parent component containing detailed information about the indexes the object was dropped from\n * and to.\n *\n * To extend this component, it is important to make sure to:\n * - Initialize objectsRD$ within the initializeObjectsRD() method\n * - Initialize a unique URL for this component/page within the initializeURL() method\n * - Add (cdkDropListDropped)=\"drop($event)\" to the cdkDropList element in your template\n * - Add (pageChange)=\"switchPage($event)\" to the ds-pagination element in your template\n * - Use the updates$ observable for building your list of cdkDrag elements in your template\n *\n * An example component extending from this abstract component: PaginatedDragAndDropBitstreamListComponent\n */\n@Component({\n  selector: 'ds-paginated-drag-drop-abstract',\n  template: ''\n})\nexport abstract class AbstractPaginatedDragAndDropListComponent<T extends DSpaceObject> implements OnDestroy {\n  /**\n   * A view on the child pagination component\n   */\n  @ViewChild(PaginationComponent) paginationComponent: PaginationComponent;\n\n  /**\n   * Send an event when the user drops an object on the pagination\n   * The event contains details about the index the object came from and is dropped to (across the entirety of the list,\n   * not just within a single page)\n   */\n  @Output() dropObject: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * The URL to use for accessing the object updates from this list\n   */\n  url: string;\n\n  /**\n   * The objects to retrieve data for and transform into field updates\n   */\n  objectsRD$: Observable<RemoteData<PaginatedList<T>>>;\n\n  /**\n   * The updates to the current list\n   */\n  updates$: Observable<FieldUpdates>;\n\n  /**\n   * A list of object UUIDs\n   * This is the order the objects will be displayed in\n   */\n  customOrder: string[];\n\n  /**\n   * The amount of objects to display per page\n   */\n  pageSize = 10;\n\n  /**\n   * The page options to use for fetching the objects\n   * Start at page 1 and always use the set page size\n   */\n  options = Object.assign(new PaginationComponentOptions(),{\n    id: 'dad',\n    currentPage: 1,\n    pageSize: this.pageSize\n  });\n\n  /**\n   * The current page being displayed\n   */\n  currentPage$ = new BehaviorSubject<PaginationComponentOptions>(this.options);\n\n  /**\n   * Whether or not we should display a loading animation\n   * This is used to display a loading page when the user drops a bitstream onto a new page. The loading animation\n   * should stop once the bitstream has moved to the new page and the new page's response has loaded and contains the\n   * dropped object on top (see this.stopLoadingWhenFirstIs below)\n   */\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  protected constructor(protected objectUpdatesService: ObjectUpdatesService,\n                        protected elRef: ElementRef,\n                        protected objectValuesPipe: ObjectValuesPipe,\n                        protected paginationService: PaginationService\n                        ) {\n  }\n\n  /**\n   * Initialize the observables\n   */\n  ngOnInit() {\n    this.initializeObjectsRD();\n    this.initializeURL();\n    this.initializeUpdates();\n    this.initializePagination();\n  }\n\n  /**\n   * Overwrite this method to define how the list of objects is initialized and updated\n   */\n  abstract initializeObjectsRD(): void;\n\n  /**\n   * Overwrite this method to define how the URL is set\n   */\n  abstract initializeURL(): void;\n\n  /**\n   * Initialize the current pagination retrieval from the paginationService and push to the currentPage$\n   */\n  initializePagination() {\n    this.paginationService.getCurrentPagination(this.options.id, this.options).subscribe((currentPagination) => {\n      this.currentPage$.next(currentPagination);\n    });\n  }\n\n  /**\n   * Initialize the field-updates in the store\n   */\n  initializeUpdates(): void {\n    this.objectsRD$.pipe(\n      getFirstSucceededRemoteData(),\n      paginatedListToArray(),\n    ).subscribe((objects: T[]) => {\n      this.objectUpdatesService.initialize(this.url, objects, new Date());\n    });\n    this.updates$ = this.objectsRD$.pipe(\n      getAllSucceededRemoteData(),\n      paginatedListToArray(),\n      switchMap((objects: T[]) => this.objectUpdatesService.getFieldUpdatesExclusive(this.url, objects))\n    );\n    this.subs.push(\n      this.updates$.pipe(\n        map((fieldUpdates) => this.objectValuesPipe.transform(fieldUpdates)),\n        distinctUntilChanged(compareArraysUsingFieldUuids())\n      ).subscribe((updateValues) => {\n        this.customOrder = updateValues.map((fieldUpdate) => fieldUpdate.field.uuid);\n        // We received new values, stop displaying a loading indicator if it's present\n        this.loading$.next(false);\n      }),\n      // Disable the pagination when objects are loading\n      this.loading$.subscribe((loading) => this.options.disabled = loading)\n    );\n  }\n\n  /**\n   * An object was moved, send updates to the dropObject EventEmitter\n   * When the object is dropped on a page within the pagination of this component, the object moves to the top of that\n   * page and the pagination automatically loads and switches the view to that page (this is done by calling the event's\n   * finish() method after sending patch requests to the REST API)\n   * @param event\n   */\n  drop(event: CdkDragDrop<any>) {\n    const dragIndex = event.previousIndex;\n    let dropIndex = event.currentIndex;\n    const dragPage = this.currentPage$.value.currentPage - 1;\n    let dropPage = this.currentPage$.value.currentPage - 1;\n\n    // Check if the user is hovering over any of the pagination's pages at the time of dropping the object\n    const droppedOnElement = this.elRef.nativeElement.querySelector('.page-item:hover');\n    if (hasValue(droppedOnElement) && hasValue(droppedOnElement.textContent)) {\n      // The user is hovering over a page, fetch the page's number from the element\n      const droppedPage = Number(droppedOnElement.textContent);\n      if (hasValue(droppedPage) && !Number.isNaN(droppedPage)) {\n        dropPage = droppedPage - 1;\n        dropIndex = 0;\n      }\n    }\n\n    const isNewPage = dragPage !== dropPage;\n    // Move the object in the custom order array if the drop happened within the same page\n    // This allows us to instantly display a change in the order, instead of waiting for the REST API's response first\n    if (!isNewPage && dragIndex !== dropIndex) {\n      moveItemInArray(this.customOrder, dragIndex, dropIndex);\n    }\n\n    const redirectPage = dropPage + 1;\n    const fromIndex = (dragPage * this.pageSize) + dragIndex;\n    const toIndex = (dropPage * this.pageSize) + dropIndex;\n    // Send out a drop event (and navigate to the new page) when the \"from\" and \"to\" indexes are different from each other\n    if (fromIndex !== toIndex) {\n      if (isNewPage) {\n        this.loading$.next(true);\n      }\n      this.dropObject.emit(Object.assign({\n        fromIndex,\n        toIndex,\n        finish: () => {\n          if (isNewPage) {\n            this.paginationComponent.doPageChange(redirectPage);\n          }\n        }\n      }));\n    }\n  }\n\n  /**\n   * unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.options.id);\n  }\n}\n","<ng-template #bitstreamView>\n  <div class=\"{{columnSizes.columns[0].buildClasses()}} row-element d-flex\">\n    <ng-content select=\"[slot=drag-handle]\"></ng-content>\n    <div class=\"float-left d-flex align-items-center\">\n      {{ bitstreamName }}\n    </div>\n  </div>\n  <div class=\"{{columnSizes.columns[1].buildClasses()}} row-element d-flex align-items-center\">\n    <div class=\"w-100\">\n      {{ bitstream?.firstMetadataValue('dc.description') }}\n    </div>\n  </div>\n  <div class=\"{{columnSizes.columns[2].buildClasses()}} row-element d-flex align-items-center\">\n    <div class=\"text-center w-100\">\n      {{ (format$ | async)?.shortDescription }}\n    </div>\n  </div>\n  <div class=\"{{columnSizes.columns[3].buildClasses()}} row-element d-flex align-items-center\">\n    <div class=\"text-center w-100\">\n      <div class=\"btn-group relationship-action-buttons\">\n        <a [href]=\"bitstream?._links?.content?.href\"\n                class=\"btn btn-outline-primary btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.download' | translate}}\">\n          <i class=\"fas fa-download fa-fw\"></i>\n        </a>\n        <button [routerLink]=\"['/bitstreams/', bitstream.id, 'edit']\" class=\"btn btn-outline-primary btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.edit' | translate}}\">\n          <i class=\"fas fa-edit fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!canRemove()\" (click)=\"remove()\"\n                class=\"btn btn-outline-danger btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.remove' | translate}}\">\n          <i class=\"fas fa-trash-alt fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!canUndo()\" (click)=\"undo()\"\n                class=\"btn btn-outline-warning btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.undo' | translate}}\">\n          <i class=\"fas fa-undo-alt fa-fw\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldUpdate } from '../../../../core/data/object-updates/object-updates.reducer';\nimport { Bitstream } from '../../../../core/shared/bitstream.model';\nimport { cloneDeep } from 'lodash';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport { Observable } from 'rxjs';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../../core/shared/operators';\nimport { ResponsiveTableSizes } from '../../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { DSONameService } from '../../../../core/breadcrumbs/dso-name.service';\n\n@Component({\n  selector: 'ds-item-edit-bitstream',\n  styleUrls: ['../item-bitstreams.component.scss'],\n  templateUrl: './item-edit-bitstream.component.html',\n})\n/**\n * Component that displays a single bitstream of an item on the edit page\n * Creates an embedded view of the contents\n * (which means it'll be added to the parents html without a wrapping ds-item-edit-bitstream element)\n */\nexport class ItemEditBitstreamComponent implements OnChanges, OnInit {\n\n  /**\n   * The view on the bitstream\n   */\n  @ViewChild('bitstreamView', {static: true}) bitstreamView;\n\n  /**\n   * The current field, value and state of the bitstream\n   */\n  @Input() fieldUpdate: FieldUpdate;\n\n  /**\n   * The url of the bundle\n   */\n  @Input() bundleUrl: string;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  @Input() columnSizes: ResponsiveTableSizes;\n\n  /**\n   * The bitstream of this field\n   */\n  bitstream: Bitstream;\n\n  /**\n   * The bitstream's name\n   */\n  bitstreamName: string;\n\n  /**\n   * The format of the bitstream\n   */\n  format$: Observable<BitstreamFormat>;\n\n  constructor(private objectUpdatesService: ObjectUpdatesService,\n              private dsoNameService: DSONameService,\n              private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.bitstreamView);\n  }\n\n  /**\n   * Update the current bitstream and its format on changes\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.bitstream = cloneDeep(this.fieldUpdate.field) as Bitstream;\n    this.bitstreamName = this.dsoNameService.getName(this.bitstream);\n    this.format$ = this.bitstream.format.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload()\n    );\n  }\n\n  /**\n   * Sends a new remove update for this field to the object updates service\n   */\n  remove(): void {\n    this.objectUpdatesService.saveRemoveFieldUpdate(this.bundleUrl, this.bitstream);\n  }\n\n  /**\n   * Cancels the current update for this field in the object updates service\n   */\n  undo(): void {\n    this.objectUpdatesService.removeSingleFieldUpdate(this.bundleUrl, this.bitstream.uuid);\n  }\n\n  /**\n   * Check if a user should be allowed to remove this field\n   */\n  canRemove(): boolean {\n    return this.fieldUpdate.changeType !== FieldChangeType.REMOVE;\n  }\n\n  /**\n   * Check if a user should be allowed to cancel the update to this field\n   */\n  canUndo(): boolean {\n    return this.fieldUpdate.changeType >= 0;\n  }\n\n}\n","<ds-pagination *ngIf=\"(objectsRD$ | async)?.payload\"\n               [hideGear]=\"true\"\n               [hidePagerWhenSinglePage]=\"true\"\n               [hidePaginationDetail]=\"true\"\n               [paginationOptions]=\"options\"\n               [pageInfoState]=\"(objectsRD$ | async)?.payload\"\n               [collectionSize]=\"(objectsRD$ | async)?.payload?.totalElements\">\n  <ng-container *ngIf=\"!(loading$ | async)\">\n    <div [id]=\"bundle.id\" class=\"bundle-bitstreams-list\"\n         [ngClass]=\"{'mb-3': (objectsRD$ | async)?.payload?.totalElements > pageSize}\"\n         *ngVar=\"(updates$ | async) as updates\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n      <ng-container *ngIf=\"updates\">\n        <div class=\"row bitstream-row\" *ngFor=\"let uuid of customOrder\" cdkDrag\n             [id]=\"uuid\"\n             [ngClass]=\"{\n                  'table-warning': updates[uuid].changeType === 0,\n                  'table-danger': updates[uuid].changeType === 2,\n                  'table-success': updates[uuid].changeType === 1,\n                  'bg-white': updates[uuid].changeType === undefined\n                }\">\n          <ds-item-edit-bitstream [fieldUpdate]=\"updates[uuid]\"\n                                  [bundleUrl]=\"bundle.self\"\n                                  [columnSizes]=\"columnSizes\">\n            <div class=\"d-flex align-items-center\" slot=\"drag-handle\" cdkDragHandle>\n              <ds-item-edit-bitstream-drag-handle></ds-item-edit-bitstream-drag-handle>\n            </div>\n          </ds-item-edit-bitstream>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ds-loading *ngIf=\"(loading$ | async)\" [message]=\"'loading.bitstreams' | translate\"></ds-loading>\n</ds-pagination>\n","import { AbstractPaginatedDragAndDropListComponent } from '../../../../../shared/pagination-drag-and-drop/abstract-paginated-drag-and-drop-list.component';\nimport { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { Bundle } from '../../../../../core/shared/bundle.model';\nimport { Bitstream } from '../../../../../core/shared/bitstream.model';\nimport { ObjectUpdatesService } from '../../../../../core/data/object-updates/object-updates.service';\nimport { BundleDataService } from '../../../../../core/data/bundle-data.service';\nimport { switchMap } from 'rxjs/operators';\nimport { PaginatedSearchOptions } from '../../../../../shared/search/paginated-search-options.model';\nimport { ResponsiveTableSizes } from '../../../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { followLink } from '../../../../../shared/utils/follow-link-config.model';\nimport { ObjectValuesPipe } from '../../../../../shared/utils/object-values-pipe';\nimport { RequestService } from '../../../../../core/data/request.service';\nimport { PaginationService } from '../../../../../core/pagination/pagination.service';\nimport { PaginationComponentOptions } from '../../../../../shared/pagination/pagination-component-options.model';\n\n@Component({\n  selector: 'ds-paginated-drag-and-drop-bitstream-list',\n  styleUrls: ['../../item-bitstreams.component.scss'],\n  templateUrl: './paginated-drag-and-drop-bitstream-list.component.html',\n})\n/**\n * A component listing edit-bitstream rows for each bitstream within the given bundle.\n * This component makes use of the AbstractPaginatedDragAndDropListComponent, allowing for users to drag and drop\n * bitstreams within the paginated list. To drag and drop a bitstream between two pages, drag the row on top of the\n * page number you want the bitstream to end up at. Doing so will add the bitstream to the top of that page.\n */\nexport class PaginatedDragAndDropBitstreamListComponent extends AbstractPaginatedDragAndDropListComponent<Bitstream> implements OnInit {\n  /**\n   * The bundle to display bitstreams for\n   */\n  @Input() bundle: Bundle;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  @Input() columnSizes: ResponsiveTableSizes;\n\n  constructor(protected objectUpdatesService: ObjectUpdatesService,\n              protected elRef: ElementRef,\n              protected objectValuesPipe: ObjectValuesPipe,\n              protected bundleService: BundleDataService,\n              protected paginationService: PaginationService,\n              protected requestService: RequestService) {\n    super(objectUpdatesService, elRef, objectValuesPipe, paginationService);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  /**\n   * Initialize the bitstreams observable depending on currentPage$\n   */\n  initializeObjectsRD(): void {\n    this.objectsRD$ = this.currentPage$.pipe(\n      switchMap((page: PaginationComponentOptions) => {\n        const paginatedOptions = new PaginatedSearchOptions({pagination: Object.assign({}, page)});\n        return this.bundleService.getBitstreamsEndpoint(this.bundle.id, paginatedOptions).pipe(\n          switchMap((href) => this.requestService.hasByHref$(href)),\n          switchMap(() => this.bundleService.getBitstreams(\n            this.bundle.id,\n            paginatedOptions,\n            followLink('format')\n          ))\n        );\n      })\n    );\n  }\n\n  /**\n   * Initialize the URL used for the field-update store, in this case the bundle's self-link\n   */\n  initializeURL(): void {\n    this.url = this.bundle.self;\n  }\n}\n","<ng-template #bundleView>\n  <div class=\"row bundle-row\">\n    <div class=\"{{bundleNameColumn.buildClasses()}} font-weight-bold row-element d-flex\">\n      <ds-item-edit-bitstream-drag-handle></ds-item-edit-bitstream-drag-handle>\n      <div class=\"float-left d-flex align-items-center\">\n        {{'item.edit.bitstreams.bundle.name' | translate:{ name: bundle.name } }}\n      </div>\n    </div>\n    <div class=\"{{columnSizes.columns[3].buildClasses()}} text-center row-element\">\n      <div class=\"btn-group bundle-action-buttons\">\n        <button [routerLink]=\"[itemPageRoute, 'bitstreams', 'new']\"\n                [queryParams]=\"{bundle: bundle.id}\"\n                class=\"btn btn-outline-success btn-sm\"\n                title=\"{{'item.edit.bitstreams.bundle.edit.buttons.upload' | translate}}\">\n          <i class=\"fas fa-upload fa-fw\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <ds-paginated-drag-and-drop-bitstream-list [bundle]=\"bundle\" [columnSizes]=\"columnSizes\" (dropObject)=\"dropObject.emit($event)\"></ds-paginated-drag-and-drop-bitstream-list>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Bundle } from '../../../../core/shared/bundle.model';\nimport { Item } from '../../../../core/shared/item.model';\nimport { ResponsiveColumnSizes } from '../../../../shared/responsive-table-sizes/responsive-column-sizes';\nimport { ResponsiveTableSizes } from '../../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { getItemPageRoute } from '../../../item-page-routing-paths';\n\n@Component({\n  selector: 'ds-item-edit-bitstream-bundle',\n  styleUrls: ['../item-bitstreams.component.scss'],\n  templateUrl: './item-edit-bitstream-bundle.component.html',\n})\n/**\n * Component that displays a single bundle of an item on the item bitstreams edit page\n * Creates an embedded view of the contents. This is to ensure the table structure won't break.\n * (which means it'll be added to the parents html without a wrapping ds-item-edit-bitstream-bundle element)\n */\nexport class ItemEditBitstreamBundleComponent implements OnInit {\n\n  /**\n   * The view on the bundle information and bitstreams\n   */\n  @ViewChild('bundleView', {static: true}) bundleView;\n\n  /**\n   * The bundle to display bitstreams for\n   */\n  @Input() bundle: Bundle;\n\n  /**\n   * The item the bundle belongs to\n   */\n  @Input() item: Item;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  @Input() columnSizes: ResponsiveTableSizes;\n\n  /**\n   * Send an event when the user drops an object on the pagination\n   * The event contains details about the index the object came from and is dropped to (across the entirety of the list,\n   * not just within a single page)\n   */\n  @Output() dropObject: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * The bootstrap sizes used for the Bundle Name column\n   * This column stretches over the first 3 columns and thus is a combination of their sizes processed in ngOnInit\n   */\n  bundleNameColumn: ResponsiveColumnSizes;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute: string;\n\n  constructor(private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.bundleNameColumn = this.columnSizes.combineColumns(0, 2);\n    this.viewContainerRef.createEmbeddedView(this.bundleView);\n    this.itemPageRoute = getItemPageRoute(this.item);\n  }\n}\n","<div class=\"item-bitstreams\" *ngVar=\"(bundles$ | async) as bundles\">\n  <div class=\"button-row top d-flex mt-2\">\n    <button class=\"mr-auto btn btn-success\"\n            [routerLink]=\"[itemPageRoute, 'bitstreams', 'new']\"><i\n            class=\"fas fa-upload\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.upload-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning mr-1\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n            class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary mr-1\" [disabled]=\"!(hasChanges() | async) || submitting\"\n            (click)=\"submit()\"><i\n            class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.save-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async) || submitting\"\n            (click)=\"discard()\"><i\n            class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.discard-button\" | translate}}</span>\n    </button>\n  </div>\n\n  <div *ngIf=\"item && bundles?.length > 0\" class=\"container table-bordered mt-4\">\n    <div class=\"row header-row font-weight-bold\">\n      <div class=\"{{columnSizes.columns[0].buildClasses()}} row-element\">\n        <ds-item-edit-bitstream-drag-handle></ds-item-edit-bitstream-drag-handle>\n        {{'item.edit.bitstreams.headers.name' | translate}}\n      </div>\n      <div class=\"{{columnSizes.columns[1].buildClasses()}} row-element\">{{'item.edit.bitstreams.headers.description' | translate}}</div>\n      <div class=\"{{columnSizes.columns[2].buildClasses()}} text-center row-element\">{{'item.edit.bitstreams.headers.format' | translate}}</div>\n      <div class=\"{{columnSizes.columns[3].buildClasses()}} text-center row-element\">{{'item.edit.bitstreams.headers.actions' | translate}}</div>\n    </div>\n    <ds-item-edit-bitstream-bundle *ngFor=\"let bundle of bundles\"\n                                   [bundle]=\"bundle\"\n                                   [item]=\"item\"\n                                   [columnSizes]=\"columnSizes\"\n                                   (dropObject)=\"dropBitstream(bundle, $event)\">\n    </ds-item-edit-bitstream-bundle>\n  </div>\n  <div *ngIf=\"bundles?.length === 0\"\n       class=\"alert alert-info w-100 d-inline-block mt-4\" role=\"alert\">\n    {{'item.edit.bitstreams.empty' | translate}}\n  </div>\n  <ds-loading *ngIf=\"!bundles\" message=\"{{'loading.bitstreams' | translate}}\"></ds-loading>\n\n  <div class=\"button-row bottom\">\n    <div class=\"mt-4 float-right\">\n      <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n              (click)=\"reinstate()\"><i\n        class=\"fas fa-undo-alt\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.reinstate-button\" | translate}}</span>\n      </button>\n      <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || submitting\"\n              (click)=\"submit()\"><i\n        class=\"fas fa-save\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.save-button\" | translate}}</span>\n      </button>\n      <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n              [disabled]=\"!(hasChanges() | async) || submitting\"\n              (click)=\"discard()\"><i\n        class=\"fas fa-times\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.discard-button\" | translate}}</span>\n      </button>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, NgZone, OnDestroy } from '@angular/core';\nimport { AbstractItemUpdateComponent } from '../abstract-item-update/abstract-item-update.component';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { Observable, of as observableOf, Subscription, zip as observableZip } from 'rxjs';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BitstreamDataService } from '../../../core/data/bitstream-data.service';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { Bundle } from '../../../core/shared/bundle.model';\nimport {\n  FieldUpdate,\n  FieldUpdates\n} from '../../../core/data/object-updates/object-updates.reducer';\nimport { Bitstream } from '../../../core/shared/bitstream.model';\nimport { FieldChangeType } from '../../../core/data/object-updates/object-updates.actions';\nimport { BundleDataService } from '../../../core/data/bundle-data.service';\nimport { PaginatedSearchOptions } from '../../../shared/search/paginated-search-options.model';\nimport { ResponsiveColumnSizes } from '../../../shared/responsive-table-sizes/responsive-column-sizes';\nimport { ResponsiveTableSizes } from '../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { Operation } from 'fast-json-patch';\n\n@Component({\n  selector: 'ds-item-bitstreams',\n  styleUrls: ['./item-bitstreams.component.scss'],\n  templateUrl: './item-bitstreams.component.html',\n})\n/**\n * Component for displaying an item's bitstreams edit page\n */\nexport class ItemBitstreamsComponent extends AbstractItemUpdateComponent implements OnDestroy {\n\n  /**\n   * The currently listed bundles\n   */\n  bundles$: Observable<Bundle[]>;\n\n  /**\n   * The page options to use for fetching the bundles\n   */\n  bundlesOptions = {\n    id: 'bundles-pagination-options',\n    currentPage: 1,\n    pageSize: 9999\n  } as any;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  columnSizes = new ResponsiveTableSizes([\n    // Name column\n    new ResponsiveColumnSizes(2, 2, 3, 4, 4),\n    // Description column\n    new ResponsiveColumnSizes(2, 3, 3, 3, 3),\n    // Format column\n    new ResponsiveColumnSizes(2, 2, 2, 2, 2),\n    // Actions column\n    new ResponsiveColumnSizes(6, 5, 4, 3, 3)\n  ]);\n\n  /**\n   * Are we currently submitting the changes?\n   * Used to disable any action buttons until the submit finishes\n   */\n  submitting = false;\n\n  /**\n   * A subscription that checks when the item is deleted in cache and reloads the item by sending a new request\n   * This is used to update the item in cache after bitstreams are deleted\n   */\n  itemUpdateSubscription: Subscription;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute,\n    public bitstreamService: BitstreamDataService,\n    public objectCache: ObjectCacheService,\n    public requestService: RequestService,\n    public cdRef: ChangeDetectorRef,\n    public bundleService: BundleDataService,\n    public zone: NgZone\n  ) {\n    super(itemService, objectUpdatesService, router, notificationsService, translateService, route);\n  }\n\n  /**\n   * Actions to perform after the item has been initialized\n   */\n  postItemInit(): void {\n    this.bundles$ = this.itemService.getBundles(this.item.id, new PaginatedSearchOptions({pagination: this.bundlesOptions})).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      map((bundlePage: PaginatedList<Bundle>) => bundlePage.page)\n    );\n  }\n\n  /**\n   * Initialize the notification messages prefix\n   */\n  initializeNotificationsPrefix(): void {\n    this.notificationsPrefix = 'item.edit.bitstreams.notifications.';\n  }\n\n\n  /**\n   * Submit the current changes\n   * Bitstreams marked as deleted send out a delete request to the rest API\n   * Display notifications and reset the current item/updates\n   */\n  submit() {\n    this.submitting = true;\n    const bundlesOnce$ = this.bundles$.pipe(take(1));\n\n    // Fetch all removed bitstreams from the object update service\n    const removedBitstreams$ = bundlesOnce$.pipe(\n      switchMap((bundles: Bundle[]) => observableZip(\n        ...bundles.map((bundle: Bundle) => this.objectUpdatesService.getFieldUpdates(bundle.self, [], true))\n      )),\n      map((fieldUpdates: FieldUpdates[]) => ([] as FieldUpdate[]).concat(\n        ...fieldUpdates.map((updates: FieldUpdates) => Object.values(updates).filter((fieldUpdate: FieldUpdate) => fieldUpdate.changeType === FieldChangeType.REMOVE))\n      )),\n      map((fieldUpdates: FieldUpdate[]) => fieldUpdates.map((fieldUpdate: FieldUpdate) => fieldUpdate.field))\n    );\n\n    // Send out delete requests for all deleted bitstreams\n    const removedResponses$ = removedBitstreams$.pipe(\n      take(1),\n      switchMap((removedBistreams: Bitstream[]) => {\n        if (isNotEmpty(removedBistreams)) {\n          return observableZip(...removedBistreams.map((bitstream: Bitstream) => this.bitstreamService.delete(bitstream.id)));\n        } else {\n          return observableOf(undefined);\n        }\n      })\n    );\n\n    // Perform the setup actions from above in order and display notifications\n    removedResponses$.pipe(take(1)).subscribe((responses: RemoteData<NoContent>[]) => {\n      this.displayNotifications('item.edit.bitstreams.notifications.remove', responses);\n      this.reset();\n      this.submitting = false;\n    });\n  }\n\n  /**\n   * A bitstream was dropped in a new location. Send out a Move Patch request to the REST API, display notifications,\n   * refresh the bundle's cache (so the lists can properly reload) and call the event's callback function (which will\n   * navigate the user to the correct page)\n   * @param bundle  The bundle to send patch requests to\n   * @param event   The event containing the index the bitstream came from and was dropped to\n   */\n  dropBitstream(bundle: Bundle, event: any) {\n    this.zone.runOutsideAngular(() => {\n      if (hasValue(event) && hasValue(event.fromIndex) && hasValue(event.toIndex) && hasValue(event.finish)) {\n        const moveOperation = {\n          op: 'move',\n          from: `/_links/bitstreams/${event.fromIndex}/href`,\n          path: `/_links/bitstreams/${event.toIndex}/href`\n        } as Operation;\n        this.bundleService.patch(bundle, [moveOperation]).pipe(take(1)).subscribe((response: RemoteData<Bundle>) => {\n          this.zone.run(() => {\n            this.displayNotifications('item.edit.bitstreams.notifications.move', [response]);\n            // Remove all cached requests from this bundle and call the event's callback when the requests are cleared\n            this.requestService.removeByHrefSubstring(bundle.self).pipe(\n              filter((isCached) => isCached),\n              take(1)\n            ).subscribe(() => event.finish());\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Display notifications\n   * - Error notification for each failed response with their message\n   * - Success notification in case there's at least one successful response\n   * @param key       The i18n key for the notification messages\n   * @param responses The returned responses to display notifications for\n   */\n  displayNotifications(key: string, responses: RemoteData<any>[]) {\n    if (isNotEmpty(responses)) {\n      const failedResponses = responses.filter((response: RemoteData<Bundle>) => hasValue(response) && response.hasFailed);\n      const successfulResponses = responses.filter((response: RemoteData<Bundle>) => hasValue(response) && response.hasSucceeded);\n\n      failedResponses.forEach((response: RemoteData<Bundle>) => {\n        this.notificationsService.error(this.translateService.instant(`${key}.failed.title`), response.errorMessage);\n      });\n      if (successfulResponses.length > 0) {\n        this.notificationsService.success(this.translateService.instant(`${key}.saved.title`), this.translateService.instant(`${key}.saved.content`));\n      }\n    }\n  }\n\n  /**\n   * Request the object updates service to discard all current changes to this item\n   * Shows a notification to remind the user that they can undo this\n   */\n  discard() {\n    const undoNotification = this.notificationsService.info(this.getNotificationTitle('discarded'), this.getNotificationContent('discarded'), {timeOut: this.discardTimeOut});\n    this.objectUpdatesService.discardAllFieldUpdates(this.url, undoNotification);\n  }\n\n  /**\n   * Request the object updates service to undo discarding all changes to this item\n   */\n  reinstate() {\n    this.bundles$.pipe(take(1)).subscribe((bundles: Bundle[]) => {\n      bundles.forEach((bundle: Bundle) => {\n        this.objectUpdatesService.reinstateFieldUpdates(bundle.self);\n      });\n    });\n  }\n\n  /**\n   * Checks whether or not the object is currently reinstatable\n   */\n  isReinstatable(): Observable<boolean> {\n    return this.bundles$.pipe(\n      switchMap((bundles: Bundle[]) => observableZip(...bundles.map((bundle: Bundle) => this.objectUpdatesService.isReinstatable(bundle.self)))),\n      map((reinstatable: boolean[]) => reinstatable.includes(true))\n    );\n  }\n\n  /**\n   * Checks whether or not there are currently updates for this object\n   */\n  hasChanges(): Observable<boolean> {\n    return this.bundles$.pipe(\n      switchMap((bundles: Bundle[]) => observableZip(...bundles.map((bundle: Bundle) => this.objectUpdatesService.hasUpdates(bundle.self)))),\n      map((hasChanges: boolean[]) => hasChanges.includes(true))\n    );\n  }\n\n  /**\n   * De-cache the current item (it should automatically reload due to itemUpdateSubscription)\n   */\n  reset() {\n    this.refreshItemCache();\n  }\n\n  /**\n   * Remove the current item's cache from object- and request-cache\n   */\n  refreshItemCache() {\n    this.bundles$.pipe(take(1)).subscribe((bundles: Bundle[]) => {\n      bundles.forEach((bundle: Bundle) => {\n        this.objectCache.remove(bundle.self);\n        this.requestService.removeByHrefSubstring(bundle.self);\n      });\n      this.objectCache.remove(this.item.self);\n      this.requestService.removeByHrefSubstring(this.item.self);\n    });\n  }\n\n  /**\n   * Unsubscribe from open subscriptions whenever the component gets destroyed\n   */\n  ngOnDestroy(): void {\n    if (this.itemUpdateSubscription) {\n      this.itemUpdateSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2>{{'item.edit.item-mapper.head' | translate}}</h2>\n      <p [innerHTML]=\"'item.edit.item-mapper.item' | translate:{ name: (itemName$ | async) }\" id=\"item-name\"></p>\n      <p>{{'item.edit.item-mapper.description' | translate}}</p>\n\n      <ngb-tabset (tabChange)=\"tabChange($event)\" [destroyOnHide]=\"true\" #tabs=\"ngbTabset\">\n        <ngb-tab title=\"{{'item.edit.item-mapper.tabs.browse' | translate}}\" id=\"browseTab\">\n          <ng-template ngbTabContent>\n            <div class=\"mt-2\">\n              <ds-collection-select class=\"mt-2\"\n                [key]=\"'browse'\"\n                [dsoRD$]=\"itemCollectionsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'item.edit.item-mapper.buttons.remove'\"\n                [cancelButton]=\"'item.edit.item-mapper.cancel'\"\n                [dangerConfirm]=\"true\"\n                (confirm)=\"removeMappings($event)\"\n                (cancel)=\"onCancel()\"></ds-collection-select>\n            </div>\n          </ng-template>\n        </ngb-tab>\n        <ngb-tab title=\"{{'item.edit.item-mapper.tabs.map' | translate}}\" id=\"mapTab\">\n          <ng-template ngbTabContent>\n            <div class=\"row mt-2\">\n              <div class=\"col-12 col-lg-6\">\n                <ds-search-form id=\"search-form\"\n                                [query]=\"(searchOptions$ | async)?.query\"\n                                [currentUrl]=\"'./'\"\n                                [inPlaceSearch]=\"true\"\n                                [searchPlaceholder]=\"'item.edit.item-mapper.search-form.placeholder' | translate\"\n                                (submitSearch)=\"performedSearch = true\">\n                </ds-search-form>\n              </div>\n            </div>\n\n            <div *ngIf=\"performedSearch\">\n              <ds-collection-select class=\"mt-2\"\n                [key]=\"'map'\"\n                [dsoRD$]=\"mappedCollectionsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [sortOptions]=\"(searchOptions$ | async)?.sort\"\n                [confirmButton]=\"'item.edit.item-mapper.buttons.add'\"\n                [cancelButton]=\"'item.edit.item-mapper.cancel'\"\n                (confirm)=\"mapCollections($event)\"\n                (cancel)=\"onCancel()\"></ds-collection-select>\n            </div>\n            <div *ngIf=\"!performedSearch\" class=\"alert alert-info w-100\" role=\"alert\">\n              {{'item.edit.item-mapper.no-search' | translate}}\n            </div>\n          </ng-template>\n        </ngb-tab>\n      </ngb-tabset>\n    </div>\n  </div>\n</div>\n","import { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\n\nimport { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { fadeIn, fadeInOut } from '../../../shared/animations/fade';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { Item } from '../../../core/shared/item.model';\nimport {\n  getFirstSucceededRemoteDataPayload,\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  toDSpaceObjectListRD,\n  getAllSucceededRemoteData, getFirstCompletedRemoteData\n} from '../../../core/shared/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter, map, startWith, switchMap, take } from 'rxjs/operators';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { DSpaceObjectType } from '../../../core/shared/dspace-object-type.model';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { PaginatedSearchOptions } from '../../../shared/search/paginated-search-options.model';\nimport { SearchConfigurationService } from '../../../core/shared/search/search-configuration.service';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { getItemPageRoute } from '../../item-page-routing-paths';\n\n@Component({\n  selector: 'ds-item-collection-mapper',\n  styleUrls: ['./item-collection-mapper.component.scss'],\n  templateUrl: './item-collection-mapper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Component for mapping collections to an item\n */\nexport class ItemCollectionMapperComponent implements OnInit {\n\n  /**\n   * A view on the tabset element\n   * Used to switch tabs programmatically\n   */\n  @ViewChild('tabs') tabs;\n\n  /**\n   * The item to map to collections\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n  itemName$: Observable<string>;\n\n  /**\n   * Search options\n   */\n  searchOptions$: Observable<PaginatedSearchOptions>;\n\n  /**\n   * List of collections to show under the \"Browse\" tab\n   * Collections that are mapped to the item\n   */\n  itemCollectionsRD$: Observable<RemoteData<PaginatedList<Collection>>>;\n\n  /**\n   * List of collections to show under the \"Map\" tab\n   * Collections that are not mapped to the item\n   */\n  mappedCollectionsRD$: Observable<RemoteData<PaginatedList<Collection>>>;\n\n  /**\n   * Firing this observable (shouldUpdate$.next(true)) forces the two lists to reload themselves\n   * Usually fired after the lists their cache is cleared (to force a new request to the REST API)\n   */\n  shouldUpdate$: BehaviorSubject<boolean>;\n\n  /**\n   * Track whether at least one search has been performed or not\n   * As soon as at least one search has been performed, we display the search results\n   */\n  performedSearch = false;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private searchConfigService: SearchConfigurationService,\n              private searchService: SearchService,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private collectionDataService: CollectionDataService,\n              private translateService: TranslateService,\n              private dsoNameService: DSONameService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.parent.data.pipe(\n      take(1),\n      map((data) => data.dso),\n    );\n\n    this.itemName$ = this.itemRD$.pipe(\n      filter((rd: RemoteData<Item>) => hasValue(rd)),\n      map((rd: RemoteData<Item>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n    this.searchOptions$ = this.searchConfigService.paginatedSearchOptions;\n    this.loadCollectionLists();\n  }\n\n  /**\n   * Load itemCollectionsRD$ with a fixed scope to only obtain the collections that own this item\n   * Load mappedCollectionsRD$ to only obtain collections that don't own this item\n   */\n  loadCollectionLists() {\n    console.log('loadCollectionLists');\n    this.shouldUpdate$ = new BehaviorSubject<boolean>(true);\n    this.itemCollectionsRD$ = observableCombineLatest(this.itemRD$.pipe(getFirstSucceededRemoteDataPayload()), this.shouldUpdate$).pipe(\n      switchMap(([item, shouldUpdate]) => {\n        if (shouldUpdate === true) {\n          this.shouldUpdate$.next(false);\n        }\n        return this.collectionDataService.findAllByHref(\n          this.itemDataService.getMappedCollectionsEndpoint(item.id),\n          undefined,\n          !shouldUpdate,\n          false\n        ).pipe(\n          getAllSucceededRemoteData()\n        );\n      }),\n    );\n\n    const owningCollectionRD$ = this.itemRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((item: Item) => this.collectionDataService.findOwningCollectionFor(item)),\n      getAllSucceededRemoteData(),\n    );\n    const itemCollectionsAndOptions$ = observableCombineLatest(\n      this.itemCollectionsRD$,\n      owningCollectionRD$,\n      this.searchOptions$\n    );\n    this.mappedCollectionsRD$ = itemCollectionsAndOptions$.pipe(\n      switchMap(([itemCollectionsRD, owningCollectionRD, searchOptions]) => {\n        return this.searchService.search(Object.assign(new PaginatedSearchOptions(searchOptions), {\n          query: this.buildQuery([...itemCollectionsRD.payload.page, owningCollectionRD.payload], searchOptions.query),\n          dsoTypes: [DSpaceObjectType.COLLECTION]\n        }), 10000).pipe(\n          toDSpaceObjectListRD(),\n          startWith(undefined)\n        );\n      })\n    ) as Observable<RemoteData<PaginatedList<Collection>>>;\n  }\n\n  /**\n   * Map the item to the selected collections and display notifications\n   * @param {string[]} ids  The list of collection UUID's to map the item to\n   */\n  mapCollections(ids: string[]) {\n    const itemIdAndExcludingIds$ = observableCombineLatest([\n      this.itemRD$.pipe(\n        getFirstSucceededRemoteData(),\n        map((rd: RemoteData<Item>) => rd.payload),\n        map((item: Item) => item.id)\n      ),\n      this.itemCollectionsRD$.pipe(\n        getFirstSucceededRemoteData(),\n        map((rd: RemoteData<PaginatedList<Collection>>) => rd.payload.page),\n        map((collections: Collection[]) => collections.map((collection: Collection) => collection.id))\n      )\n    ]);\n\n    // Map the item to the collections found in ids, excluding the collections the item is already mapped to\n    const responses$ = itemIdAndExcludingIds$.pipe(\n      switchMap(([itemId, excludingIds]) =>\n        observableCombineLatest(\n          this.filterIds(ids, excludingIds).map((id: string) =>\n            this.itemDataService.mapToCollection(itemId, id).pipe(getFirstCompletedRemoteData())\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, 'item.edit.item-mapper.notifications.add');\n  }\n\n  /**\n   * Remove the mapping of the item to the selected collections and display notifications\n   * @param {string[]} ids  The list of collection UUID's to remove the mapping of the item for\n   */\n  removeMappings(ids: string[]) {\n    const responses$ = this.itemRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((itemRD: RemoteData<Item>) => itemRD.payload.id),\n      switchMap((itemId: string) => observableCombineLatest(\n        ids.map((id: string) =>\n          this.itemDataService.removeMappingFromCollection(itemId, id).pipe(getFirstCompletedRemoteData())\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, 'item.edit.item-mapper.notifications.remove');\n  }\n\n  /**\n   * Filters ids from a given list of ids, which exist in a second given list of ids\n   * @param {string[]} ids          The list of ids to filter out of\n   * @param {string[]} excluding    The ids that should be excluded from the first list\n   * @returns {string[]}\n   */\n  private filterIds(ids: string[], excluding: string[]): string[] {\n    return ids.filter((id: string) => excluding.indexOf(id) < 0);\n  }\n\n  /**\n   * Display notifications\n   * @param {Observable<RestResponse[]>} responses$   The responses after adding/removing a mapping\n   * @param {string} messagePrefix                    The prefix to build the notification messages with\n   */\n  private showNotifications(responses$: Observable<RemoteData<NoContent>[]>, messagePrefix: string) {\n    responses$.subscribe((responses: RemoteData<NoContent>[]) => {\n      const successful = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n      const unsuccessful = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n      if (successful.length > 0) {\n        const successMessages = observableCombineLatest([\n          this.translateService.get(`${messagePrefix}.success.head`),\n          this.translateService.get(`${messagePrefix}.success.content`, { amount: successful.length })\n        ]);\n\n        successMessages.subscribe(([head, content]) => {\n          this.notificationsService.success(head, content);\n        });\n        this.shouldUpdate$.next(true);\n      }\n      if (unsuccessful.length > 0) {\n        const unsuccessMessages = observableCombineLatest([\n          this.translateService.get(`${messagePrefix}.error.head`),\n          this.translateService.get(`${messagePrefix}.error.content`, { amount: unsuccessful.length })\n        ]);\n\n        unsuccessMessages.subscribe(([head, content]) => {\n          this.notificationsService.error(head, content);\n        });\n      }\n      this.switchToFirstTab();\n    });\n  }\n\n  /**\n   * Clear url parameters on tab change (temporary fix until pagination is improved)\n   * @param event\n   */\n  tabChange(event) {\n    this.performedSearch = false;\n    this.router.navigateByUrl(this.getCurrentUrl());\n  }\n\n  /**\n   * Get current url without parameters\n   * @returns {string}\n   */\n  getCurrentUrl(): string {\n    if (this.router.url.indexOf('?') > -1) {\n      return this.router.url.substring(0, this.router.url.indexOf('?'));\n    }\n    return this.router.url;\n  }\n\n  /**\n   * Build a query to exclude collections from\n   * @param collections     The collections their UUIDs\n   * @param query           The query to add to it\n   */\n  buildQuery(collections: Collection[], query: string): string {\n    let result = query;\n    for (const collection of collections) {\n      result = this.addExcludeCollection(collection.id, result);\n    }\n    return result;\n  }\n\n  /**\n   * Add an exclusion of a collection to a query\n   * @param collectionId    The collection's UUID\n   * @param query           The query to add the exclusion to\n   */\n  addExcludeCollection(collectionId: string, query: string): string {\n    const excludeQuery = `-search.resourceid:${collectionId}`;\n    if (isNotEmpty(query)) {\n      return `${query} AND ${excludeQuery}`;\n    } else {\n      return excludeQuery;\n    }\n  }\n\n  /**\n   * Switch the view to focus on the first tab\n   */\n  switchToFirstTab() {\n    this.tabs.select('browseTab');\n  }\n\n  /**\n   * When a cancel event is fired, return to the item page\n   */\n  onCancel() {\n    this.itemRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      take(1)\n    ).subscribe((item: Item) => {\n      this.router.navigate([getItemPageRoute(item)]);\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h2>{{'item.edit.move.head' | translate: {id: (itemRD$ | async)?.payload?.handle} }}</h2>\n            <p>{{'item.edit.move.description' | translate}}</p>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <ds-dso-input-suggestions #f id=\"search-form\"\n                                          [suggestions]=\"(collectionSearchResults | async)\"\n                                          [placeholder]=\"'item.edit.move.search.placeholder'| translate\"\n                                          [action]=\"getCurrentUrl()\"\n                                          [name]=\"'item-move'\"\n                                          [(ngModel)]=\"selectedCollectionName\"\n                                          (clickSuggestion)=\"onClick($event)\"\n                                          (typeSuggestion)=\"resetCollection($event)\"\n                                          (findSuggestions)=\"findSuggestions($event)\"\n                                          (click)=\"f.open()\"\n                                          ngDefaultControl>\n                    </ds-dso-input-suggestions>\n\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <p>\n                        <input type=\"checkbox\" name=\"tc\" [(ngModel)]=\"inheritPolicies\" id=\"inheritPoliciesCheckbox\">\n                        <label for=\"inheritPoliciesCheckbox\">{{'item.edit.move.inheritpolicies.checkbox' |\n                                translate}}</label>\n                    </p>\n                    <p>\n                        {{'item.edit.move.inheritpolicies.description' | translate}}\n                    </p>\n                </div>\n            </div>\n\n            <button (click)=\"moveCollection()\" class=\"btn btn-primary\" [disabled]=!canSubmit>\n                <span *ngIf=\"!processing\"> {{'item.edit.move.move' | translate}}</span>\n                <span *ngIf=\"processing\"><i class='fas fa-circle-notch fa-spin'></i>\n                    {{'item.edit.move.processing' | translate}}\n                </span>\n            </button>\n            <button [routerLink]=\"[(itemPageRoute$ | async), 'edit']\"\n                    class=\"btn btn-outline-secondary\">\n                {{'item.edit.move.cancel' | translate}}\n            </button>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { first, map } from 'rxjs/operators';\nimport { DSpaceObjectType } from '../../../core/shared/dspace-object-type.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { Item } from '../../../core/shared/item.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData, getAllSucceededRemoteDataPayload\n} from '../../../core/shared/operators';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { PaginatedSearchOptions } from '../../../shared/search/paginated-search-options.model';\nimport { SearchResult } from '../../../shared/search/search-result.model';\nimport { getItemEditRoute, getItemPageRoute } from '../../item-page-routing-paths';\n\n@Component({\n  selector: 'ds-item-move',\n  templateUrl: './item-move.component.html'\n})\n/**\n * Component that handles the moving of an item to a different collection\n */\nexport class ItemMoveComponent implements OnInit {\n  /**\n   * TODO: There is currently no backend support to change the owningCollection and inherit policies,\n   * TODO: when this is added, the inherit policies option should be used.\n   */\n\n  selectorType = DSpaceObjectType.COLLECTION;\n\n  inheritPolicies = false;\n  itemRD$: Observable<RemoteData<Item>>;\n  collectionSearchResults: Observable<any[]> = observableOf([]);\n  selectedCollectionName: string;\n  selectedCollection: Collection;\n  canSubmit = false;\n\n  item: Item;\n  processing = false;\n\n  pagination = new PaginationComponentOptions();\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute$: Observable<string>;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private searchService: SearchService,\n              private translateService: TranslateService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.data.pipe(map((data) => data.dso), getFirstSucceededRemoteData()) as Observable<RemoteData<Item>>;\n    this.itemPageRoute$ = this.itemRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((item) => getItemPageRoute(item))\n    );\n    this.itemRD$.subscribe((rd) => {\n        this.item = rd.payload;\n      }\n    );\n    this.pagination.pageSize = 5;\n    this.loadSuggestions('');\n  }\n\n  /**\n   * Find suggestions based on entered query\n   * @param query - Search query\n   */\n  findSuggestions(query): void {\n    this.loadSuggestions(query);\n  }\n\n  /**\n   * Load all available collections to move the item to.\n   *  TODO: When the API support it, only fetch collections where user has ADD rights to.\n   */\n  loadSuggestions(query): void {\n    this.collectionSearchResults = this.searchService.search(new PaginatedSearchOptions({\n      pagination: this.pagination,\n      dsoTypes: [DSpaceObjectType.COLLECTION],\n      query: query\n    })).pipe(\n      first(),\n      map((rd: RemoteData<PaginatedList<SearchResult<DSpaceObject>>>) => {\n        return rd.payload.page.map((searchResult) => {\n          return searchResult.indexableObject;\n        });\n      }) ,\n    );\n\n  }\n\n  /**\n   * Set the collection name and id based on the selected value\n   * @param data - obtained from the ds-input-suggestions component\n   */\n  onClick(data: any): void {\n    this.selectedCollection = data;\n    this.selectedCollectionName = data.name;\n    this.canSubmit = true;\n  }\n\n  /**\n   * @returns {string} the current URL\n   */\n  getCurrentUrl() {\n    return this.router.url;\n  }\n\n  /**\n   * Moves the item to a new collection based on the selected collection\n   */\n  moveCollection() {\n    this.processing = true;\n    this.itemDataService.moveToCollection(this.item.id, this.selectedCollection).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Collection>) => {\n        this.router.navigate([getItemEditRoute(this.item)]);\n        if (response.hasSucceeded) {\n          this.notificationsService.success(this.translateService.get('item.edit.move.success'));\n        } else {\n          this.notificationsService.error(this.translateService.get('item.edit.move.error'));\n        }\n        this.processing = false;\n      }\n    );\n  }\n\n  /**\n   * Resets the can submit when the user changes the content of the input field\n   * @param data\n   */\n  resetCollection(data: any) {\n    this.canSubmit = false;\n  }\n}\n","<div>\n    <div class=\"modal-header\">{{'virtual-metadata.delete-relationship.modal-head' | translate}}\n        <button type=\"button\" class=\"close\" (click)=\"close.emit()\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">×</span>\n        </button>\n    </div>\n    <div class=\"modal-body\">\n        <ng-container *ngFor=\"let item of items; trackBy: trackItem\">\n            <div *ngVar=\"(isSelectedVirtualMetadataItem(item) | async) as selected\"\n                 (click)=\"setSelectedVirtualMetadataItem(item, !selected)\"\n                 class=\"item d-flex flex-row\">\n                <div class=\"m-2\">\n                    <label>\n                        <input class=\"select\" type=\"checkbox\" [checked]=\"selected\">\n                    </label>\n                </div>\n                <div class=\"flex-column\">\n                    <ds-listable-object-component-loader [object]=\"item\">\n                    </ds-listable-object-component-loader>\n                    <div *ngFor=\"let metadata of virtualMetadata.get(item.uuid)\">\n                        <div class=\"font-weight-bold\">\n                            {{metadata.metadataField}}\n                        </div>\n                        <div>\n                            {{metadata.metadataValue.value}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <div class=\"d-flex flex-row-reverse m-2\">\n            <button class=\"btn btn-primary save\"\n                    (click)=\"save.emit()\">\n                <i class=\"fas fa-save\"></i> {{\"item.edit.metadata.save-button\" | translate}}\n            </button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Item} from '../../../core/shared/item.model';\nimport {MetadataValue} from '../../../core/shared/metadata.models';\nimport {ObjectUpdatesService} from '../../../core/data/object-updates/object-updates.service';\n\n@Component({\n  selector: 'ds-virtual-metadata',\n  templateUrl: './virtual-metadata.component.html'\n})\n/**\n * Component that lists both items of a relationship, along with their virtual metadata of the relationship.\n * The component is shown when a relationship is marked to be deleted.\n * Each item has a checkbox to indicate whether its virtual metadata should be saved as real metadata.\n */\nexport class VirtualMetadataComponent implements OnInit {\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  /**\n   * The id of the relationship to be deleted.\n   */\n  @Input() relationshipId: string;\n\n  /**\n   * The left item of the relationship to be deleted.\n   */\n  @Input() leftItem: Item;\n\n  /**\n   * The right item of the relationship to be deleted.\n   */\n  @Input() rightItem: Item;\n\n  /**\n   * Emits when the close button is pressed.\n   */\n  @Output() close = new EventEmitter();\n\n  /**\n   * Emits when the save button is pressed.\n   */\n  @Output() save = new EventEmitter();\n\n  /**\n   * Get an array of the left and the right item of the relationship to be deleted.\n   */\n  get items() {\n    return [this.leftItem, this.rightItem];\n  }\n\n  public virtualMetadata: Map<string, VirtualMetadata[]> = new Map<string, VirtualMetadata[]>();\n\n  constructor(\n    protected objectUpdatesService: ObjectUpdatesService,\n  ) {\n  }\n\n  /**\n   * Get the virtual metadata of a given item corresponding to this relationship.\n   * @param item  the item to get the virtual metadata for\n   */\n  getVirtualMetadata(item: Item): VirtualMetadata[] {\n\n    return Object.entries(item.metadata)\n      .map(([key, value]) =>\n        value\n          .filter((metadata: MetadataValue) =>\n            !key.startsWith('relation') && metadata.authority && metadata.authority.endsWith(this.relationshipId))\n          .map((metadata: MetadataValue) => {\n            return {\n              metadataField: key,\n              metadataValue: metadata,\n            };\n          })\n      )\n      .reduce((previous, current) => previous.concat(current), []);\n  }\n\n  /**\n   * Select/deselect the virtual metadata of an item to be saved as real metadata.\n   * @param item      the item for which (not) to save the virtual metadata as real metadata\n   * @param selected  whether or not to save the virtual metadata as real metadata\n   */\n  setSelectedVirtualMetadataItem(item: Item, selected: boolean) {\n    this.objectUpdatesService.setSelectedVirtualMetadata(this.url, this.relationshipId, item.uuid, selected);\n  }\n\n  /**\n   * Check whether the virtual metadata of a given item is selected to be saved as real metadata\n   * @param item  the item for which to check whether the virtual metadata is selected to be saved as real metadata\n   */\n  isSelectedVirtualMetadataItem(item: Item): Observable<boolean> {\n    return this.objectUpdatesService.isSelectedVirtualMetadata(this.url, this.relationshipId, item.uuid);\n  }\n\n  /**\n   * Prevent unnecessary rerendering so fields don't lose focus\n   */\n  trackItem(index, item: Item) {\n    return item && item.uuid;\n  }\n\n  ngOnInit(): void {\n    this.items.forEach((item) => {\n      this.virtualMetadata.set(item.uuid, this.getVirtualMetadata(item));\n    });\n  }\n}\n\n/**\n * Represents a virtual metadata entry.\n */\nexport interface VirtualMetadata {\n  metadataField: string;\n  metadataValue: MetadataValue;\n}\n","<div class=\"row\" *ngIf=\"relatedItem$ | async\">\n  <div class=\"col-10 relationship\">\n    <ds-listable-object-component-loader\n      [object]=\"relatedItem$ | async\"\n      [viewMode]=\"viewMode\"\n      [value]=\"nameVariant\"\n    >\n    </ds-listable-object-component-loader>\n  </div>\n  <div class=\"col-2\">\n    <div class=\"btn-group relationship-action-buttons\">\n      <button [disabled]=\"!canRemove()\" (click)=\"openVirtualMetadataModal(virtualMetadataModal)\"\n              class=\"btn btn-outline-danger btn-sm\"\n              title=\"{{'item.edit.metadata.edit.buttons.remove' | translate}}\">\n        <i class=\"fas fa-trash-alt fa-fw\"></i>\n      </button>\n      <button [disabled]=\"!canUndo()\" (click)=\"undo()\"\n              class=\"btn btn-outline-warning btn-sm\"\n              title=\"{{'item.edit.metadata.edit.buttons.undo' | translate}}\">\n        <i class=\"fas fa-undo-alt fa-fw\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n<ng-template #virtualMetadataModal>\n  <ds-virtual-metadata\n          [relationshipId]=\"relationship.id\"\n          [leftItem]=\"leftItem$ | async\"\n          [rightItem]=\"rightItem$ | async\"\n          [url]=\"url\"\n          (close)=\"closeVirtualMetadataModal()\"\n          (save)=\"remove()\"\n  >\n  </ds-virtual-metadata>\n</ng-template>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { combineLatest as observableCombineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport {\n  DeleteRelationship,\n  FieldUpdate,\n  RelationshipIdentifiable\n} from '../../../../core/data/object-updates/object-updates.reducer';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { Item } from '../../../../core/shared/item.model';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../../core/shared/operators';\nimport { ViewMode } from '../../../../core/shared/view-mode.model';\nimport { hasValue, isNotEmpty } from '../../../../shared/empty.util';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ds-edit-relationship',\n  styleUrls: ['./edit-relationship.component.scss'],\n  templateUrl: './edit-relationship.component.html',\n})\nexport class EditRelationshipComponent implements OnChanges {\n  /**\n   * The current field, value and state of the relationship\n   */\n  @Input() fieldUpdate: FieldUpdate;\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  /**\n   * The item being edited\n   */\n  @Input() editItem: Item;\n\n  /**\n   * The relationship being edited\n   */\n  get relationship() {\n    return this.update.relationship;\n  }\n\n  get update() {\n    return this.fieldUpdate.field as RelationshipIdentifiable;\n  }\n\n  get nameVariant() {\n    return this.update.nameVariant;\n  }\n\n  public leftItem$: Observable<Item>;\n  public rightItem$: Observable<Item>;\n\n  /**\n   * The related item of this relationship\n   */\n  relatedItem$: Observable<Item>;\n\n  /**\n   * The view-mode we're currently on\n   */\n  viewMode = ViewMode.ListElement;\n\n  /**\n   * Reference to NgbModal\n   */\n  public modalRef: NgbModalRef;\n\n  constructor(\n    private objectUpdatesService: ObjectUpdatesService,\n    private modalService: NgbModal,\n  ) {\n  }\n\n  /**\n   * Sets the current relationship based on the fieldUpdate input field\n   */\n  ngOnChanges(): void {\n    if (this.relationship) {\n      this.leftItem$ = this.relationship.leftItem.pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid))\n      );\n      this.rightItem$ = this.relationship.rightItem.pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid))\n      );\n      this.relatedItem$ = observableCombineLatest(\n        this.leftItem$,\n        this.rightItem$,\n      ).pipe(\n        map((items: Item[]) =>\n          items.find((item) => item.uuid !== this.editItem.uuid)\n        )\n      );\n    } else {\n      this.relatedItem$ = of(this.update.relatedItem);\n    }\n  }\n\n  /**\n   * Sends a new remove update for this field to the object updates service\n   */\n  remove(): void {\n    this.closeVirtualMetadataModal();\n    observableCombineLatest(\n      this.leftItem$,\n      this.rightItem$,\n    ).pipe(\n      map((items: Item[]) =>\n        items.map((item) => this.objectUpdatesService\n          .isSelectedVirtualMetadata(this.url, this.relationship.id, item.uuid))\n      ),\n      switchMap((selection$) => observableCombineLatest(selection$)),\n      map((selection: boolean[]) => {\n        return Object.assign({},\n          this.fieldUpdate.field,\n          {\n            keepLeftVirtualMetadata: selection[0] === true,\n            keepRightVirtualMetadata: selection[1] === true,\n          }\n        ) as DeleteRelationship;\n      }),\n      take(1),\n    ).subscribe((deleteRelationship: DeleteRelationship) =>\n      this.objectUpdatesService.saveRemoveFieldUpdate(this.url, deleteRelationship)\n    );\n  }\n\n  openVirtualMetadataModal(content: any) {\n    this.modalRef = this.modalService.open(content);\n  }\n\n  closeVirtualMetadataModal() {\n    this.modalRef.close();\n  }\n\n  /**\n   * Cancels the current update for this field in the object updates service\n   */\n  undo(): void {\n    this.objectUpdatesService.removeSingleFieldUpdate(this.url, this.fieldUpdate.field.uuid);\n  }\n\n  /**\n   * Check if a user should be allowed to remove this field\n   */\n  canRemove(): boolean {\n    return this.fieldUpdate.changeType !== FieldChangeType.REMOVE\n      && this.fieldUpdate.changeType !== FieldChangeType.ADD;\n  }\n\n  /**\n   * Check if a user should be allowed to cancel the update to this field\n   */\n  canUndo(): boolean {\n    return this.fieldUpdate.changeType >= 0;\n  }\n}\n","<h5>\n    {{getRelationshipMessageKey() | async | translate}}\n    <button class=\"ml-2 btn btn-success\" (click)=\"openLookup()\">\n        <i class=\"fas fa-plus\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.relationships.edit.buttons.add\" | translate}}</span>\n    </button>\n</h5>\n<ng-container *ngVar=\"updates$ | async as updates\">\n    <ng-container *ngIf=\"updates\">\n        <ng-container *ngVar=\"updates | dsObjectValues as updateValues\">\n            <ds-edit-relationship *ngFor=\"let updateValue of updateValues; trackBy: trackUpdate\"\n                                  class=\"relationship-row d-block alert\"\n                                  [fieldUpdate]=\"updateValue || {}\"\n                                  [url]=\"url\"\n                                  [editItem]=\"item\"\n                                  [ngClass]=\"{\n                                        'alert-success': updateValue.changeType === 1,\n                                        'alert-warning': updateValue.changeType === 0,\n                                        'alert-danger': updateValue.changeType === 2\n                                  }\">\n            </ds-edit-relationship>\n            <div *ngIf=\"updateValues.length === 0\">{{\"item.edit.relationships.no-relationships\" | translate}}</div>\n        </ng-container>\n    </ng-container>\n    <ds-loading *ngIf=\"!updates\"></ds-loading>\n</ng-container>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { LinkService } from '../../../../core/cache/builders/link.service';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { combineLatest as observableCombineLatest, Observable, of } from 'rxjs';\nimport {\n  FieldUpdate,\n  FieldUpdates,\n  RelationshipIdentifiable\n} from '../../../../core/data/object-updates/object-updates.reducer';\nimport { RelationshipService } from '../../../../core/data/relationship.service';\nimport { Item } from '../../../../core/shared/item.model';\nimport { defaultIfEmpty, map, mergeMap, switchMap, take, startWith } from 'rxjs/operators';\nimport { hasValue, hasValueOperator } from '../../../../shared/empty.util';\nimport { Relationship } from '../../../../core/shared/item-relationships/relationship.model';\nimport { RelationshipType } from '../../../../core/shared/item-relationships/relationship-type.model';\nimport {\n  getAllSucceededRemoteData,\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData, getFirstSucceededRemoteDataPayload,\n} from '../../../../core/shared/operators';\nimport { ItemType } from '../../../../core/shared/item-relationships/item-type.model';\nimport { DsDynamicLookupRelationModalComponent } from '../../../../shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { RelationshipOptions } from '../../../../shared/form/builder/models/relationship-options.model';\nimport { ItemSearchResult } from '../../../../shared/object-collection/shared/item-search-result.model';\nimport { SelectableListService } from '../../../../shared/object-list/selectable-list/selectable-list.service';\nimport { SearchResult } from '../../../../shared/search/search-result.model';\nimport { followLink } from '../../../../shared/utils/follow-link-config.model';\nimport { PaginatedList } from '../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { Collection } from '../../../../core/shared/collection.model';\n\n@Component({\n  selector: 'ds-edit-relationship-list',\n  styleUrls: ['./edit-relationship-list.component.scss'],\n  templateUrl: './edit-relationship-list.component.html',\n})\n/**\n * A component creating a list of editable relationships of a certain type\n * The relationships are rendered as a list of related items\n */\nexport class EditRelationshipListComponent implements OnInit {\n\n  /**\n   * The item to display related items for\n   */\n  @Input() item: Item;\n\n  @Input() itemType: ItemType;\n\n  /**\n   * The URL to the current page\n   * Used to fetch updates for the current item from the store\n   */\n  @Input() url: string;\n\n  /**\n   * The label of the relationship-type we're rendering a list for\n   */\n  @Input() relationshipType: RelationshipType;\n\n  private relatedEntityType$: Observable<ItemType>;\n\n  /**\n   * The list ID to save selected entities under\n   */\n  listId: string;\n\n  /**\n   * The FieldUpdates for the relationships in question\n   */\n  updates$: Observable<FieldUpdates>;\n\n  /**\n   * A reference to the lookup window\n   */\n  modalRef: NgbModalRef;\n\n  constructor(\n    protected objectUpdatesService: ObjectUpdatesService,\n    protected linkService: LinkService,\n    protected relationshipService: RelationshipService,\n    protected modalService: NgbModal,\n    protected selectableListService: SelectableListService,\n  ) {\n  }\n\n  /**\n   * Get the i18n message key for this relationship type\n   */\n  public getRelationshipMessageKey(): Observable<string> {\n\n    return observableCombineLatest(\n      this.getLabel(),\n      this.relatedEntityType$,\n    ).pipe(\n      map(([label, relatedEntityType]) => {\n        if (hasValue(label) && label.indexOf('is') > -1 && label.indexOf('Of') > -1) {\n          const relationshipLabel = `${label.substring(2, label.indexOf('Of'))}`;\n          if (relationshipLabel !== relatedEntityType.label) {\n            return `relationships.is${relationshipLabel}Of.${relatedEntityType.label}`;\n          } else {\n            return `relationships.is${relationshipLabel}Of`;\n          }\n        } else {\n          return label;\n        }\n      }),\n    );\n  }\n\n  /**\n   * Get the relevant label for this relationship type\n   */\n  private getLabel(): Observable<string> {\n    return observableCombineLatest([\n      this.relationshipType.leftType,\n      this.relationshipType.rightType,\n    ].map((itemTypeRD) => itemTypeRD.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    ))).pipe(\n      map((itemTypes: ItemType[]) => [\n        this.relationshipType.leftwardType,\n        this.relationshipType.rightwardType,\n      ][itemTypes.findIndex((itemType) => itemType.id === this.itemType.id)]),\n    );\n  }\n\n  /**\n   * Prevent unnecessary rerendering so fields don't lose focus\n   */\n  trackUpdate(index, update: FieldUpdate) {\n    return update && update.field ? update.field.uuid : undefined;\n  }\n\n  /**\n   * Open the dynamic lookup modal to search for items to add as relationships\n   */\n  openLookup() {\n\n    this.modalRef = this.modalService.open(DsDynamicLookupRelationModalComponent, {\n      size: 'lg'\n    });\n    const modalComp: DsDynamicLookupRelationModalComponent = this.modalRef.componentInstance;\n    modalComp.repeatable = true;\n    modalComp.listId = this.listId;\n    modalComp.item = this.item;\n    this.item.owningCollection.pipe(\n      getFirstSucceededRemoteDataPayload()\n    ).subscribe((collection: Collection) => {\n      modalComp.collection = collection;\n    });\n    modalComp.select = (...selectableObjects: SearchResult<Item>[]) => {\n      selectableObjects.forEach((searchResult) => {\n        const relatedItem: Item = searchResult.indexableObject;\n        this.getFieldUpdatesForRelatedItem(relatedItem)\n          .subscribe((identifiables) => {\n            identifiables.forEach((identifiable) =>\n              this.objectUpdatesService.removeSingleFieldUpdate(this.url, identifiable.uuid)\n            );\n            if (identifiables.length === 0) {\n              this.relationshipService.getNameVariant(this.listId, relatedItem.uuid)\n                .subscribe((nameVariant) => {\n                  const update = {\n                    uuid: this.relationshipType.id + '-' + relatedItem.uuid,\n                    nameVariant,\n                    type: this.relationshipType,\n                    relatedItem,\n                  } as RelationshipIdentifiable;\n                  this.objectUpdatesService.saveAddFieldUpdate(this.url, update);\n                });\n            }\n          });\n      });\n    };\n    modalComp.deselect = (...selectableObjects: SearchResult<Item>[]) => {\n      selectableObjects.forEach((searchResult) => {\n        const relatedItem: Item = searchResult.indexableObject;\n        this.objectUpdatesService.removeSingleFieldUpdate(this.url, this.relationshipType.id + '-' + relatedItem.uuid);\n        this.getFieldUpdatesForRelatedItem(relatedItem)\n          .subscribe((identifiables) =>\n            identifiables.forEach((identifiable) =>\n              this.objectUpdatesService.saveRemoveFieldUpdate(this.url, identifiable)\n            )\n          );\n      });\n    };\n    this.relatedEntityType$\n      .pipe(take(1))\n      .subscribe((relatedEntityType) => {\n        modalComp.relationshipOptions = Object.assign(\n          new RelationshipOptions(), {\n            relationshipType: relatedEntityType.label,\n            // filter: this.getRelationshipMessageKey(),\n            searchConfiguration: relatedEntityType.label.toLowerCase(),\n            nameVariants: true,\n          }\n        );\n      });\n\n    this.selectableListService.deselectAll(this.listId);\n    this.updates$.pipe(\n      switchMap((updates) =>\n        Object.values(updates).length > 0 ?\n          observableCombineLatest(\n            Object.values(updates)\n              .filter((update) => update.changeType !== FieldChangeType.REMOVE)\n              .map((update) => {\n                const field = update.field as RelationshipIdentifiable;\n                if (field.relationship) {\n                  return this.getRelatedItem(field.relationship);\n                } else {\n                  return of(field.relatedItem);\n                }\n              })\n          ) : of([])\n      ),\n      take(1),\n      map((items) => items.map((item) => {\n        const searchResult = new ItemSearchResult();\n        searchResult.indexableObject = item;\n        searchResult.hitHighlights = {};\n        return searchResult;\n      })),\n    ).subscribe((items) => {\n      this.selectableListService.select(this.listId, items);\n    });\n  }\n\n  /**\n   * Get the existing field updates regarding a relationship with a given item\n   * @param relatedItem The item for which to get the existing field updates\n   */\n  private getFieldUpdatesForRelatedItem(relatedItem: Item): Observable<RelationshipIdentifiable[]> {\n\n    return this.updates$.pipe(\n      take(1),\n      map((updates) => Object.values(updates)\n        .map((update) => update.field as RelationshipIdentifiable)\n        .filter((field) => field.relationship)\n      ),\n      mergeMap((identifiables) =>\n        observableCombineLatest(\n          identifiables.map((identifiable) => this.getRelatedItem(identifiable.relationship))\n        ).pipe(\n          defaultIfEmpty([]),\n          map((relatedItems) =>\n            identifiables.filter((identifiable, index) => relatedItems[index].uuid === relatedItem.uuid)\n          ),\n        )\n      ),\n    );\n  }\n\n  /**\n   * Get the related item for a given relationship\n   * @param relationship  The relationship for which to get the related item\n   */\n  private getRelatedItem(relationship: Relationship): Observable<Item> {\n    return this.relationshipService.isLeftItem(relationship, this.item).pipe(\n      switchMap((isLeftItem) => isLeftItem ? relationship.rightItem : relationship.leftItem),\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    ) as Observable<Item>;\n  }\n\n  ngOnInit(): void {\n\n    this.relatedEntityType$ =\n      observableCombineLatest([\n        this.relationshipType.leftType,\n        this.relationshipType.rightType,\n      ].map((type) => type.pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n      ))).pipe(\n        map((relatedTypes: ItemType[]) => relatedTypes.find((relatedType) => relatedType.uuid !== this.itemType.uuid)),\n        hasValueOperator()\n      );\n\n    this.relatedEntityType$.pipe(\n      take(1)\n    ).subscribe(\n      (relatedEntityType) => this.listId = `edit-relationship-${this.itemType.id}-${relatedEntityType.id}`\n    );\n\n    this.updates$ = this.getItemRelationships().pipe(\n      switchMap((relationships) =>\n        observableCombineLatest(\n          relationships.map((relationship) => this.relationshipService.isLeftItem(relationship, this.item))\n        ).pipe(\n          defaultIfEmpty([]),\n          map((isLeftItemArray) => isLeftItemArray.map((isLeftItem, index) => {\n            const relationship = relationships[index];\n            const nameVariant = isLeftItem ? relationship.rightwardValue : relationship.leftwardValue;\n            return {\n              uuid: relationship.id,\n              type: this.relationshipType,\n              relationship,\n              nameVariant,\n            } as RelationshipIdentifiable;\n          })),\n        )),\n      switchMap((initialFields) => this.objectUpdatesService.getFieldUpdates(this.url, initialFields).pipe(\n        map((fieldUpdates) => {\n          const fieldUpdatesFiltered: FieldUpdates = {};\n          Object.keys(fieldUpdates).forEach((uuid) => {\n            if (hasValue(fieldUpdates[uuid])) {\n              const field = fieldUpdates[uuid].field;\n              if ((field as RelationshipIdentifiable).type.id === this.relationshipType.id) {\n                fieldUpdatesFiltered[uuid] = fieldUpdates[uuid];\n              }\n            }\n          });\n          return fieldUpdatesFiltered;\n        }),\n      )),\n      startWith({}),\n    );\n  }\n\n  private getItemRelationships() {\n    this.linkService.resolveLink(this.item,\n      followLink('relationships', undefined, true, true, true,\n        followLink('relationshipType'),\n        followLink('leftItem'),\n        followLink('rightItem'),\n      ));\n    return this.item.relationships.pipe(\n      getAllSucceededRemoteData(),\n      map((relationships: RemoteData<PaginatedList<Relationship>>) => relationships.payload.page.filter((relationship: Relationship) => hasValue(relationship))),\n      switchMap((itemRelationships: Relationship[]) =>\n        observableCombineLatest(\n          itemRelationships\n            .map((relationship) => relationship.relationshipType.pipe(\n              getFirstSucceededRemoteData(),\n              getRemoteDataPayload(),\n            ))\n        ).pipe(\n          defaultIfEmpty([]),\n          map((relationshipTypes) => itemRelationships.filter(\n            (relationship, index) => relationshipTypes[index].id === this.relationshipType.id)\n          ),\n        )\n      ),\n    );\n  }\n}\n","<div class=\"item-relationships\">\n  <ng-container *ngVar=\"entityType$ | async as entityType\">\n    <ng-container *ngIf=\"entityType\">\n      <div class=\"button-row top d-flex\">\n        <button class=\"btn btn-danger ml-auto\" *ngIf=\"!(isReinstatable() | async)\"\n                [disabled]=\"!(hasChanges() | async)\"\n                (click)=\"discard()\"><i\n          class=\"fas fa-times\"></i>\n          <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-warning ml-auto\" *ngIf=\"isReinstatable() | async\"\n                (click)=\"reinstate()\"><i\n          class=\"fas fa-undo-alt\"></i>\n          <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async)\"\n                (click)=\"submit()\"><i\n          class=\"fas fa-save\"></i>\n          <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n        </button>\n      </div>\n      <ng-container *ngVar=\"relationshipTypes$ | async as relationshipTypes\">\n        <ng-container *ngIf=\"relationshipTypes\">\n          <div *ngFor=\"let relationshipType of relationshipTypes\" class=\"mb-4\">\n            <ds-edit-relationship-list\n              [url]=\"url\"\n              [item]=\"item\"\n              [itemType]=\"entityType$ | async\"\n              [relationshipType]=\"relationshipType\"\n            ></ds-edit-relationship-list>\n          </div>\n        </ng-container>\n        <ds-loading *ngIf=\"!relationshipTypes\"></ds-loading>\n      </ng-container>\n      <div class=\"button-row bottom\">\n        <div class=\"float-right\">\n          <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n                  [disabled]=\"!(hasChanges() | async)\"\n                  (click)=\"discard()\"><i\n            class=\"fas fa-times\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n          </button>\n          <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n                  (click)=\"reinstate()\"><i\n            class=\"fas fa-undo-alt\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n          </button>\n          <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async)\"\n                  (click)=\"submit()\"><i\n            class=\"fas fa-save\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n          </button>\n        </div>\n      </div>\n    </ng-container>\n    <div *ngIf=\"!entityType\"\n         class=\"alert alert-info mt-2\" role=\"alert\">\n      {{ 'item.edit.relationships.no-entity-type' | translate }}\n    </div>\n  </ng-container>\n</div>\n","import { ChangeDetectorRef, Component } from '@angular/core';\nimport { Item } from '../../../core/shared/item.model';\nimport {\n  DeleteRelationship,\n  FieldUpdate,\n  FieldUpdates,\n  RelationshipIdentifiable,\n} from '../../../core/data/object-updates/object-updates.reducer';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map, startWith, switchMap, take } from 'rxjs/operators';\nimport {\n  combineLatest as observableCombineLatest,\n  of as observableOf,\n  zip as observableZip\n} from 'rxjs';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { AbstractItemUpdateComponent } from '../abstract-item-update/abstract-item-update.component';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RelationshipService } from '../../../core/data/relationship.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { RequestService } from '../../../core/data/request.service';\nimport { RelationshipType } from '../../../core/shared/item-relationships/relationship-type.model';\nimport { ItemType } from '../../../core/shared/item-relationships/item-type.model';\nimport { EntityTypeService } from '../../../core/data/entity-type.service';\nimport { FieldChangeType } from '../../../core/data/object-updates/object-updates.actions';\nimport { Relationship } from '../../../core/shared/item-relationships/relationship.model';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { hasValue } from '../../../shared/empty.util';\n\n@Component({\n  selector: 'ds-item-relationships',\n  styleUrls: ['./item-relationships.component.scss'],\n  templateUrl: './item-relationships.component.html',\n})\n/**\n * Component for displaying an item's relationships edit page\n */\nexport class ItemRelationshipsComponent extends AbstractItemUpdateComponent {\n\n\n  /**\n   * The allowed relationship types for this type of item as an observable list\n   */\n  relationshipTypes$: Observable<RelationshipType[]>;\n\n  /**\n   * The item's entity type as an observable\n   */\n  entityType$: Observable<ItemType>;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute,\n    public relationshipService: RelationshipService,\n    public objectCache: ObjectCacheService,\n    public requestService: RequestService,\n    public entityTypeService: EntityTypeService,\n    public cdr: ChangeDetectorRef,\n  ) {\n    super(itemService, objectUpdatesService, router, notificationsService, translateService, route);\n  }\n\n  /**\n   * Initialize the values and updates of the current item's relationship fields\n   */\n  public initializeUpdates(): void {\n\n    const label = this.item.firstMetadataValue('dspace.entity.type');\n    if (label !== undefined) {\n\n      this.entityType$ = this.entityTypeService.getEntityTypeByLabel(label).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n      );\n\n      this.relationshipTypes$ = this.entityType$.pipe(\n        switchMap((entityType) =>\n          this.entityTypeService.getEntityTypeRelationships(\n            entityType.id,\n            true,\n            true,\n            followLink('leftType'),\n            followLink('rightType'))\n            .pipe(\n              getFirstSucceededRemoteData(),\n              getRemoteDataPayload(),\n              map((relationshipTypes) => relationshipTypes.page),\n            )\n        ),\n      );\n    } else {\n      this.entityType$ = observableOf(undefined);\n    }\n  }\n\n  /**\n   * Initialize the prefix for notification messages\n   */\n  public initializeNotificationsPrefix(): void {\n    this.notificationsPrefix = 'item.edit.relationships.notifications.';\n  }\n\n  /**\n   * Resolve the currently selected related items back to relationships and send a delete request for each of the relationships found\n   * Make sure the lists are refreshed afterwards and notifications are sent for success and errors\n   */\n  public submit(): void {\n\n    // Get all the relationships that should be removed\n    const removedRelationshipIDs$: Observable<DeleteRelationship[]> = this.relationshipService.getItemRelationshipsArray(this.item).pipe(\n      startWith([]),\n      map((relationships: Relationship[]) => relationships.map((relationship) =>\n        Object.assign(new Relationship(), relationship, { uuid: relationship.id })\n      )),\n      switchMap((relationships: Relationship[]) => {\n        return this.objectUpdatesService.getFieldUpdatesExclusive(this.url, relationships) as Observable<FieldUpdates>;\n      }),\n      map((fieldUpdates: FieldUpdates) =>\n        Object.values(fieldUpdates)\n          .filter((fieldUpdate: FieldUpdate) => fieldUpdate.changeType === FieldChangeType.REMOVE)\n          .map((fieldUpdate: FieldUpdate) => fieldUpdate.field as DeleteRelationship)\n      ),\n    );\n\n    const addRelatedItems$: Observable<RelationshipIdentifiable[]> = this.objectUpdatesService.getFieldUpdates(this.url, []).pipe(\n      map((fieldUpdates: FieldUpdates) =>\n        Object.values(fieldUpdates)\n          .filter((fieldUpdate: FieldUpdate) => hasValue(fieldUpdate))\n          .filter((fieldUpdate: FieldUpdate) => fieldUpdate.changeType === FieldChangeType.ADD)\n          .map((fieldUpdate: FieldUpdate) => fieldUpdate.field as RelationshipIdentifiable)\n      ),\n    );\n\n    observableCombineLatest(\n      removedRelationshipIDs$,\n      addRelatedItems$,\n    ).pipe(\n      take(1),\n    ).subscribe(([removeRelationshipIDs, addRelatedItems]) => {\n      const actions = [\n        this.deleteRelationships(removeRelationshipIDs),\n        this.addRelationships(addRelatedItems),\n      ];\n      actions.forEach((action) =>\n        action.subscribe((response) => {\n          if (response.length > 0) {\n            this.initializeOriginalFields();\n            this.cdr.detectChanges();\n            this.displayNotifications(response);\n          }\n        })\n      );\n    });\n  }\n\n  deleteRelationships(deleteRelationshipIDs: DeleteRelationship[]): Observable<RemoteData<NoContent>[]> {\n    return observableZip(...deleteRelationshipIDs.map((deleteRelationship) => {\n        let copyVirtualMetadata: string;\n        if (deleteRelationship.keepLeftVirtualMetadata && deleteRelationship.keepRightVirtualMetadata) {\n          copyVirtualMetadata = 'all';\n        } else if (deleteRelationship.keepLeftVirtualMetadata) {\n          copyVirtualMetadata = 'left';\n        } else if (deleteRelationship.keepRightVirtualMetadata) {\n          copyVirtualMetadata = 'right';\n        } else {\n          copyVirtualMetadata = 'none';\n        }\n        return this.relationshipService.deleteRelationship(deleteRelationship.uuid, copyVirtualMetadata);\n      }\n    ));\n  }\n\n  addRelationships(addRelatedItems: RelationshipIdentifiable[]): Observable<RemoteData<Relationship>[]> {\n    return observableZip(...addRelatedItems.map((addRelationship) =>\n      this.entityType$.pipe(\n        switchMap((entityType) => this.entityTypeService.isLeftType(addRelationship.type, entityType)),\n        switchMap((isLeftType) => {\n          let leftItem: Item;\n          let rightItem: Item;\n          let leftwardValue: string;\n          let rightwardValue: string;\n          if (isLeftType) {\n            leftItem = this.item;\n            rightItem = addRelationship.relatedItem;\n            leftwardValue = null;\n            rightwardValue = addRelationship.nameVariant;\n          } else {\n            leftItem = addRelationship.relatedItem;\n            rightItem = this.item;\n            leftwardValue = addRelationship.nameVariant;\n            rightwardValue = null;\n          }\n          return this.relationshipService.addRelationship(addRelationship.type.id, leftItem, rightItem, leftwardValue, rightwardValue);\n        }),\n      )\n    ));\n  }\n\n  /**\n   * Display notifications\n   * - Error notification for each failed response with their message\n   * - Success notification in case there's at least one successful response\n   * @param responses\n   */\n  displayNotifications(responses: RemoteData<NoContent>[]) {\n    const failedResponses = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n    const successfulResponses = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n\n    failedResponses.forEach((response: RemoteData<NoContent>) => {\n      this.notificationsService.error(this.getNotificationTitle('failed'), response.errorMessage);\n    });\n    if (successfulResponses.length > 0) {\n      this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved'));\n    }\n  }\n  /**\n   * Sends all initial values of this item to the object updates service\n   */\n  public initializeOriginalFields() {\n    console.log('init');\n    return this.relationshipService.getRelatedItems(this.item).pipe(\n      take(1),\n    ).subscribe((items: Item[]) => {\n      this.objectUpdatesService.initialize(this.url, items, this.item.lastModified);\n    });\n  }\n}\n","<div class=\"mt-4\">\n  <ds-alert [content]=\"'item.edit.tabs.versionhistory.under-construction'\" [type]=\"AlertTypeEnum.Warning\"></ds-alert>\n</div>\n<div class=\"mt-2\" *ngVar=\"(itemRD$ | async)?.payload as item\">\n  <ds-item-versions *ngIf=\"item\" [item]=\"item\" [displayWhenEmpty]=\"true\" [displayTitle]=\"false\"></ds-item-versions>\n</div>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { map } from 'rxjs/operators';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { AlertType } from '../../../shared/alert/aletr-type';\n\n@Component({\n  selector: 'ds-item-version-history',\n  templateUrl: './item-version-history.component.html'\n})\n/**\n * Component for listing and managing an item's version history\n */\nexport class ItemVersionHistoryComponent {\n  /**\n   * The item to display the version history for\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  AlertTypeEnum = AlertType;\n\n  constructor(private route: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.parent.data.pipe(map((data) => data.dso)).pipe(getFirstSucceededRemoteData()) as Observable<RemoteData<Item>>;\n  }\n}\n","<div class=\"container\">\n  <ds-alert [type]=\"'alert-info'\" [content]=\"'item.edit.authorizations.heading'\"></ds-alert>\n  <ds-resource-policies [resourceType]=\"'item'\" [resourceUUID]=\"(getItemUUID() | async)\"></ds-resource-policies>\n  <ng-container *ngFor=\"let bundle of (getItemBundles() | async); trackById\">\n    <ds-resource-policies [resourceType]=\"'bundle'\"\n                          [resourceUUID]=\"bundle.id\"></ds-resource-policies>\n    <ng-container *ngFor=\"let bitstream of (bundleBitstreamsMap.get(bundle.id) | async)?.page; trackById\">\n      <ds-resource-policies [resourceType]=\"'bitstream'\"\n                            [resourceUUID]=\"bitstream.id\"></ds-resource-policies>\n    </ng-container>\n  </ng-container>\n</div>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BehaviorSubject, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { catchError, filter, first, map, mergeMap, take } from 'rxjs/operators';\n\nimport { PaginatedList, buildPaginatedList } from '../../../core/data/paginated-list.model';\nimport {\n  getFirstSucceededRemoteDataPayload,\n  getFirstSucceededRemoteDataWithNotEmptyPayload\n} from '../../../core/shared/operators';\nimport { Item } from '../../../core/shared/item.model';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { LinkService } from '../../../core/cache/builders/link.service';\nimport { Bundle } from '../../../core/shared/bundle.model';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { Bitstream } from '../../../core/shared/bitstream.model';\nimport { FindListOptions } from '../../../core/data/request.models';\n\n/**\n * Interface for a bundle's bitstream map entry\n */\ninterface BundleBitstreamsMapEntry {\n  id: string;\n  bitstreams: Observable<PaginatedList<Bitstream>>;\n}\n\n@Component({\n  selector: 'ds-item-authorizations',\n  templateUrl: './item-authorizations.component.html'\n})\n/**\n * Component that handles the item Authorizations\n */\nexport class ItemAuthorizationsComponent implements OnInit, OnDestroy {\n\n  /**\n   * A map that contains all bitstream of the item's bundles\n   * @type {Observable<Map<string, Observable<PaginatedList<Bitstream>>>>}\n   */\n  public bundleBitstreamsMap: Map<string, Observable<PaginatedList<Bitstream>>> = new Map<string, Observable<PaginatedList<Bitstream>>>();\n\n  /**\n   * The list of bundle for the item\n   * @type {Observable<PaginatedList<Bundle>>}\n   */\n  private bundles$: BehaviorSubject<Bundle[]> = new BehaviorSubject<Bundle[]>([]);\n\n  /**\n   * The target editing item\n   * @type {Observable<Item>}\n   */\n  private item$: Observable<Item>;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {LinkService} linkService\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private linkService: LinkService,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the bundle and bitstream within the item\n   */\n  ngOnInit(): void {\n    this.item$ = this.route.data.pipe(\n      map((data) => data.dso),\n      getFirstSucceededRemoteDataWithNotEmptyPayload(),\n      map((item: Item) => this.linkService.resolveLink(\n        item,\n        followLink('bundles', new FindListOptions(), true, true, true, followLink('bitstreams'))\n      ))\n    ) as Observable<Item>;\n\n    const bundles$: Observable<PaginatedList<Bundle>> = this.item$.pipe(\n      filter((item: Item) => isNotEmpty(item.bundles)),\n      mergeMap((item: Item) => item.bundles),\n      getFirstSucceededRemoteDataWithNotEmptyPayload(),\n      catchError((error) => {\n        console.error(error);\n        return observableOf(buildPaginatedList(null, []));\n      })\n    );\n\n    this.subs.push(\n      bundles$.pipe(\n        take(1),\n        map((list: PaginatedList<Bundle>) => list.page)\n      ).subscribe((bundles: Bundle[]) => {\n        this.bundles$.next(bundles);\n      }),\n      bundles$.pipe(\n        take(1),\n        mergeMap((list: PaginatedList<Bundle>) => list.page),\n        map((bundle: Bundle) => ({ id: bundle.id, bitstreams: this.getBundleBitstreams(bundle) }))\n      ).subscribe((entry: BundleBitstreamsMapEntry) => {\n        this.bundleBitstreamsMap.set(entry.id, entry.bitstreams);\n      })\n    );\n  }\n\n  /**\n   * Return the item's UUID\n   */\n  getItemUUID(): Observable<string> {\n    return this.item$.pipe(\n      map((item: Item) => item.id),\n      first((UUID: string) => isNotEmpty(UUID))\n    );\n  }\n\n  /**\n   * Return all item's bundles\n   *\n   * @return an observable that emits all item's bundles\n   */\n  getItemBundles(): Observable<Bundle[]> {\n    return this.bundles$.asObservable();\n  }\n\n  /**\n   * Return all bundle's bitstreams\n   *\n   * @return an observable that emits all item's bundles\n   */\n  private getBundleBitstreams(bundle: Bundle): Observable<PaginatedList<Bitstream>> {\n    return bundle.bitstreams.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      catchError((error) => {\n        console.error(error);\n        return observableOf(buildPaginatedList(null, []));\n      })\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring reinstate rights\n */\nexport class ItemPageReinstateGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check reinstate authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.ReinstateItem);\n  }\n}\n","import { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Item } from '../../core/shared/item.model';\nimport { Injectable } from '@angular/core';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring withdraw rights\n */\nexport class ItemPageWithdrawGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check withdraw authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.WithdrawItem);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring edit metadata rights\n */\nexport class ItemPageMetadataGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check edit metadata authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanEditMetadata);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { DsoPageSomeFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-some-feature.guard';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring any of the rights required for\n * the status page\n */\nexport class ItemPageStatusGuard extends DsoPageSomeFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check authorization rights\n   */\n  getFeatureIDs(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID[]> {\n    return observableOf([FeatureID.CanManageMappings, FeatureID.WithdrawItem, FeatureID.ReinstateItem, FeatureID.CanManagePolicies, FeatureID.CanMakePrivate, FeatureID.CanDelete, FeatureID.CanMove]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage bitstreams rights\n */\nexport class ItemPageBitstreamsGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage bitstreams authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageBitstreamBundles);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage relationships rights\n */\nexport class ItemPageRelationshipsGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage relationships authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageRelationships);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage versions rights\n */\nexport class ItemPageVersionHistoryGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage versions authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageVersions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage mappings rights\n */\nexport class ItemPageCollectionMapperGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage mappings authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageMappings);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EditItemPageComponent } from './edit-item-page.component';\nimport { ItemWithdrawComponent } from './item-withdraw/item-withdraw.component';\nimport { ItemReinstateComponent } from './item-reinstate/item-reinstate.component';\nimport { ItemPrivateComponent } from './item-private/item-private.component';\nimport { ItemPublicComponent } from './item-public/item-public.component';\nimport { ItemDeleteComponent } from './item-delete/item-delete.component';\nimport { ItemStatusComponent } from './item-status/item-status.component';\nimport { ItemMetadataComponent } from './item-metadata/item-metadata.component';\nimport { ItemBitstreamsComponent } from './item-bitstreams/item-bitstreams.component';\nimport { ItemCollectionMapperComponent } from './item-collection-mapper/item-collection-mapper.component';\nimport { ItemMoveComponent } from './item-move/item-move.component';\nimport { ItemRelationshipsComponent } from './item-relationships/item-relationships.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ItemVersionHistoryComponent } from './item-version-history/item-version-history.component';\nimport { ItemAuthorizationsComponent } from './item-authorizations/item-authorizations.component';\nimport { ResourcePolicyTargetResolver } from '../../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyResolver } from '../../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyCreateComponent } from '../../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyEditComponent } from '../../shared/resource-policies/edit/resource-policy-edit.component';\nimport { I18nBreadcrumbsService } from '../../core/breadcrumbs/i18n-breadcrumbs.service';\nimport {\n  ITEM_EDIT_AUTHORIZATIONS_PATH,\n  ITEM_EDIT_DELETE_PATH,\n  ITEM_EDIT_MOVE_PATH,\n  ITEM_EDIT_PRIVATE_PATH,\n  ITEM_EDIT_PUBLIC_PATH,\n  ITEM_EDIT_REINSTATE_PATH,\n  ITEM_EDIT_WITHDRAW_PATH\n} from './edit-item-page.routing-paths';\nimport { ItemPageReinstateGuard } from './item-page-reinstate.guard';\nimport { ItemPageWithdrawGuard } from './item-page-withdraw.guard';\nimport { ItemPageMetadataGuard } from './item-page-metadata.guard';\nimport { ItemPageAdministratorGuard } from '../item-page-administrator.guard';\nimport { ItemPageStatusGuard } from './item-page-status.guard';\nimport { ItemPageBitstreamsGuard } from './item-page-bitstreams.guard';\nimport { ItemPageRelationshipsGuard } from './item-page-relationships.guard';\nimport { ItemPageVersionHistoryGuard } from './item-page-version-history.guard';\nimport { ItemPageCollectionMapperGuard } from './item-page-collection-mapper.guard';\n\n/**\n * Routing module that handles the routing for the Edit Item page administrator functionality\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { breadcrumbKey: 'item.edit' },\n        children: [\n          {\n            path: '',\n            component: EditItemPageComponent,\n            children: [\n              {\n                path: '',\n                redirectTo: 'status',\n                pathMatch: 'full'\n              },\n              {\n                path: 'status',\n                component: ItemStatusComponent,\n                data: { title: 'item.edit.tabs.status.title', showBreadcrumbs: true },\n                canActivate: [ItemPageStatusGuard]\n              },\n              {\n                path: 'bitstreams',\n                component: ItemBitstreamsComponent,\n                data: { title: 'item.edit.tabs.bitstreams.title', showBreadcrumbs: true },\n                canActivate: [ItemPageBitstreamsGuard]\n              },\n              {\n                path: 'metadata',\n                component: ItemMetadataComponent,\n                data: { title: 'item.edit.tabs.metadata.title', showBreadcrumbs: true },\n                canActivate: [ItemPageMetadataGuard]\n              },\n              {\n                path: 'relationships',\n                component: ItemRelationshipsComponent,\n                data: { title: 'item.edit.tabs.relationships.title', showBreadcrumbs: true },\n                canActivate: [ItemPageRelationshipsGuard]\n              },\n              /* TODO - uncomment & fix when view page exists\n              {\n                path: 'view',\n                component: ItemBitstreamsComponent,\n                data: { title: 'item.edit.tabs.view.title', showBreadcrumbs: true }\n              }, */\n              /* TODO - uncomment & fix when curate page exists\n              {\n                path: 'curate',\n                component: ItemBitstreamsComponent,\n                data: { title: 'item.edit.tabs.curate.title', showBreadcrumbs: true }\n              }, */\n              {\n                path: 'versionhistory',\n                component: ItemVersionHistoryComponent,\n                data: { title: 'item.edit.tabs.versionhistory.title', showBreadcrumbs: true },\n                canActivate: [ItemPageVersionHistoryGuard]\n              },\n              {\n                path: 'mapper',\n                component: ItemCollectionMapperComponent,\n                data: { title: 'item.edit.tabs.item-mapper.title', showBreadcrumbs: true },\n                canActivate: [ItemPageCollectionMapperGuard]\n              }\n            ]\n          },\n          {\n            path: 'mapper',\n            component: ItemCollectionMapperComponent,\n          },\n          {\n            path: ITEM_EDIT_WITHDRAW_PATH,\n            component: ItemWithdrawComponent,\n            canActivate: [ItemPageWithdrawGuard]\n          },\n          {\n            path: ITEM_EDIT_REINSTATE_PATH,\n            component: ItemReinstateComponent,\n            canActivate: [ItemPageReinstateGuard]\n          },\n          {\n            path: ITEM_EDIT_PRIVATE_PATH,\n            component: ItemPrivateComponent,\n          },\n          {\n            path: ITEM_EDIT_PUBLIC_PATH,\n            component: ItemPublicComponent,\n          },\n          {\n            path: ITEM_EDIT_DELETE_PATH,\n            component: ItemDeleteComponent,\n          },\n          {\n            path: ITEM_EDIT_MOVE_PATH,\n            component: ItemMoveComponent,\n            data: { title: 'item.edit.move.title' },\n          },\n          {\n            path: ITEM_EDIT_AUTHORIZATIONS_PATH,\n            children: [\n              {\n                path: 'create',\n                resolve: {\n                  resourcePolicyTarget: ResourcePolicyTargetResolver\n                },\n                component: ResourcePolicyCreateComponent,\n                data: { title: 'resource-policies.create.page.title' }\n              },\n              {\n                path: 'edit',\n                resolve: {\n                  resourcePolicy: ResourcePolicyResolver\n                },\n                component: ResourcePolicyEditComponent,\n                data: { title: 'resource-policies.edit.page.title' }\n              },\n              {\n                path: '',\n                component: ItemAuthorizationsComponent,\n                data: { title: 'item.edit.authorizations.title' }\n              }\n            ]\n          }\n        ]\n      }\n    ])\n  ],\n  providers: [\n    I18nBreadcrumbResolver,\n    I18nBreadcrumbsService,\n    ResourcePolicyResolver,\n    ResourcePolicyTargetResolver,\n    ItemPageReinstateGuard,\n    ItemPageWithdrawGuard,\n    ItemPageAdministratorGuard,\n    ItemPageMetadataGuard,\n    ItemPageStatusGuard,\n    ItemPageBitstreamsGuard,\n    ItemPageRelationshipsGuard,\n    ItemPageVersionHistoryGuard,\n    ItemPageCollectionMapperGuard,\n  ]\n})\nexport class EditItemPageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { EditItemPageRoutingModule } from './edit-item-page.routing.module';\nimport { EditItemPageComponent } from './edit-item-page.component';\nimport { ItemStatusComponent } from './item-status/item-status.component';\nimport { ItemOperationComponent } from './item-operation/item-operation.component';\nimport { ItemWithdrawComponent } from './item-withdraw/item-withdraw.component';\nimport { ItemReinstateComponent } from './item-reinstate/item-reinstate.component';\nimport { AbstractSimpleItemActionComponent } from './simple-item-action/abstract-simple-item-action.component';\nimport { ItemPrivateComponent } from './item-private/item-private.component';\nimport { ItemPublicComponent } from './item-public/item-public.component';\nimport { ItemDeleteComponent } from './item-delete/item-delete.component';\nimport { ItemMetadataComponent } from './item-metadata/item-metadata.component';\nimport { EditInPlaceFieldComponent } from './item-metadata/edit-in-place-field/edit-in-place-field.component';\nimport { ItemBitstreamsComponent } from './item-bitstreams/item-bitstreams.component';\nimport { ItemEditBitstreamComponent } from './item-bitstreams/item-edit-bitstream/item-edit-bitstream.component';\nimport { SearchPageModule } from '../../+search-page/search-page.module';\nimport { ItemCollectionMapperComponent } from './item-collection-mapper/item-collection-mapper.component';\nimport { ItemRelationshipsComponent } from './item-relationships/item-relationships.component';\nimport { EditRelationshipComponent } from './item-relationships/edit-relationship/edit-relationship.component';\nimport { EditRelationshipListComponent } from './item-relationships/edit-relationship-list/edit-relationship-list.component';\nimport { AbstractItemUpdateComponent } from './abstract-item-update/abstract-item-update.component';\nimport { ItemMoveComponent } from './item-move/item-move.component';\nimport { ItemEditBitstreamBundleComponent } from './item-bitstreams/item-edit-bitstream-bundle/item-edit-bitstream-bundle.component';\nimport { BundleDataService } from '../../core/data/bundle-data.service';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ItemEditBitstreamDragHandleComponent } from './item-bitstreams/item-edit-bitstream-drag-handle/item-edit-bitstream-drag-handle.component';\nimport { PaginatedDragAndDropBitstreamListComponent } from './item-bitstreams/item-edit-bitstream-bundle/paginated-drag-and-drop-bitstream-list/paginated-drag-and-drop-bitstream-list.component';\nimport { VirtualMetadataComponent } from './virtual-metadata/virtual-metadata.component';\nimport { ItemVersionHistoryComponent } from './item-version-history/item-version-history.component';\nimport { ItemAuthorizationsComponent } from './item-authorizations/item-authorizations.component';\nimport { ObjectValuesPipe } from '../../shared/utils/object-values-pipe';\n\n/**\n * Module that contains all components related to the Edit Item page administrator functionality\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    EditItemPageRoutingModule,\n    SearchPageModule,\n    DragDropModule\n  ],\n  declarations: [\n    EditItemPageComponent,\n    ItemOperationComponent,\n    AbstractSimpleItemActionComponent,\n    AbstractItemUpdateComponent,\n    ItemWithdrawComponent,\n    ItemReinstateComponent,\n    ItemPrivateComponent,\n    ItemPublicComponent,\n    ItemDeleteComponent,\n    ItemStatusComponent,\n    ItemMetadataComponent,\n    ItemRelationshipsComponent,\n    ItemBitstreamsComponent,\n    ItemVersionHistoryComponent,\n    EditInPlaceFieldComponent,\n    ItemEditBitstreamComponent,\n    ItemEditBitstreamBundleComponent,\n    PaginatedDragAndDropBitstreamListComponent,\n    EditInPlaceFieldComponent,\n    EditRelationshipComponent,\n    EditRelationshipListComponent,\n    ItemCollectionMapperComponent,\n    ItemMoveComponent,\n    ItemEditBitstreamDragHandleComponent,\n    VirtualMetadataComponent,\n    ItemAuthorizationsComponent\n  ],\n  providers: [\n    BundleDataService,\n    ObjectValuesPipe\n  ],\n  exports: [\n    ItemMetadataComponent\n  ]\n})\nexport class EditItemPageModule {\n\n}\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport {\n  FieldUpdate,\n  FieldUpdates\n} from '../../../core/data/object-updates/object-updates.reducer';\nimport { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { Item } from '../../../core/shared/item.model';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router, Data } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { first, map, switchMap, tap } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { AbstractTrackableComponent } from '../../../shared/trackable/abstract-trackable.component';\nimport { environment } from '../../../../environments/environment';\nimport { getItemPageRoute } from '../../item-page-routing-paths';\nimport { getAllSucceededRemoteData } from '../../../core/shared/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ITEM_PAGE_LINKS_TO_FOLLOW } from '../../item.resolver';\n\n@Component({\n  selector: 'ds-abstract-item-update',\n  template: ''\n})\n/**\n * Abstract component for managing object updates of an item\n */\nexport class AbstractItemUpdateComponent extends AbstractTrackableComponent implements OnInit, OnDestroy {\n  /**\n   * The item to display the edit page for\n   */\n  @Input() item: Item;\n  /**\n   * The current values and updates for all this item's fields\n   * Should be initialized in the initializeUpdates method of the child component\n   */\n  updates$: Observable<FieldUpdates>;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute: string;\n\n  /**\n   * A subscription that checks when the item is deleted in cache and reloads the item by sending a new request\n   * This is used to update the item in cache after bitstreams are deleted\n   */\n  itemUpdateSubscription: Subscription;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute\n  ) {\n    super(objectUpdatesService, notificationsService, translateService);\n  }\n\n  /**\n   * Initialize common properties between item-update components\n   */\n  ngOnInit(): void {\n    if (hasValue(this.item)) {\n      this.setItem(this.item);\n    } else {\n      // The item wasn't provided through an input, retrieve it from the route instead.\n      this.itemUpdateSubscription = observableCombineLatest([this.route.data, this.route.parent.data]).pipe(\n        map(([data, parentData]: [Data, Data]) => Object.assign({}, data, parentData)),\n        map((data: any) => data.dso),\n        tap((rd: RemoteData<Item>) => {\n          this.item = rd.payload;\n        }),\n        switchMap((rd: RemoteData<Item>) => {\n          return this.itemService.findByHref(rd.payload._links.self.href, true, true, ...ITEM_PAGE_LINKS_TO_FOLLOW);\n        }),\n        getAllSucceededRemoteData()\n      ).subscribe((rd: RemoteData<Item>) => {\n        this.setItem(rd.payload);\n      });\n    }\n\n    this.discardTimeOut = environment.item.edit.undoTimeout;\n    this.url = this.router.url;\n    if (this.url.indexOf('?') > 0) {\n      this.url = this.url.substr(0, this.url.indexOf('?'));\n    }\n    this.hasChanges().pipe(first()).subscribe((hasChanges) => {\n      if (!hasChanges) {\n        this.initializeOriginalFields();\n      } else {\n        this.checkLastModified();\n      }\n    });\n\n    this.initializeNotificationsPrefix();\n    this.initializeUpdates();\n  }\n\n  setItem(item: Item) {\n    this.item = item;\n    this.itemPageRoute = getItemPageRoute(this.item);\n    this.postItemInit();\n    this.initializeUpdates();\n  }\n\n  ngOnDestroy() {\n    if (hasValue(this.itemUpdateSubscription)) {\n      this.itemUpdateSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Actions to perform after the item has been initialized\n   * Abstract method: Should be overwritten in the sub class\n   */\n  postItemInit(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Initialize the values and updates of the current item's fields\n   * Abstract method: Should be overwritten in the sub class\n   */\n  initializeUpdates(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Initialize the prefix for notification messages\n   * Abstract method: Should be overwritten in the sub class\n   */\n  initializeNotificationsPrefix(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Sends all initial values of this item to the object updates service\n   * Abstract method: Should be overwritten in the sub class\n   */\n  initializeOriginalFields(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Submit the current changes\n   * Abstract method: Should be overwritten in the sub class\n   */\n  submit(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Prevent unnecessary rerendering so fields don't lose focus\n   */\n  trackUpdate(index, update: FieldUpdate) {\n    return update && update.field ? update.field.uuid : undefined;\n  }\n\n  /**\n   * Check if the current page is entirely valid\n   */\n  public isValid() {\n    return this.objectUpdatesService.isValidPage(this.url);\n  }\n\n  /**\n   * Checks if the current item is still in sync with the version in the store\n   * If it's not, a notification is shown and the changes are removed\n   */\n  private checkLastModified() {\n    const currentVersion = this.item.lastModified;\n    this.objectUpdatesService.getLastModified(this.url).pipe(first()).subscribe(\n      (updateVersion: Date) => {\n        if (updateVersion.getDate() !== currentVersion.getDate()) {\n          this.notificationsService.warning(this.getNotificationTitle('outdated'), this.getNotificationContent('outdated'));\n          this.initializeOriginalFields();\n        }\n      }\n    );\n  }\n}\n","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { DSOBreadcrumbsService } from './dso-breadcrumbs.service';\nimport { DataService } from '../data/data.service';\nimport { getRemoteDataPayload, getFirstCompletedRemoteData } from '../shared/operators';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { hasValue } from '../../shared/empty.util';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a DSpaceObject\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class DSOBreadcrumbResolver<T extends ChildHALResource & DSpaceObject> implements Resolve<BreadcrumbConfig<T>> {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: DataService<T>) {\n  }\n\n  /**\n   * Method for resolving a breadcrumb config object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<T>> {\n    const uuid = route.params.id;\n    return this.dataService.findById(uuid, true, false, ...this.followLinks).pipe(\n      getFirstCompletedRemoteData(),\n      getRemoteDataPayload(),\n      map((object: T) => {\n        if (hasValue(object)) {\n          const fullPath = state.url;\n          const url = fullPath.substr(0, fullPath.indexOf(uuid)) + uuid;\n          return {provider: this.breadcrumbService, key: object, url: url};\n        } else {\n          return undefined;\n        }\n      })\n    );\n  }\n\n  /**\n   * Method that returns the follow links to already resolve\n   * The self links defined in this list are expected to be requested somewhere in the near future\n   * Requesting them as embeds will limit the number of requests\n   */\n  abstract get followLinks(): FollowLinkConfig<T>[];\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n/**\n * Assemble the correct i18n key for the configuration search page's title depending on the current route's configuration parameter.\n * The format of the key will be \"{configuration}.search.title\" with:\n * - configuration: The current configuration stored in route.params\n */\nexport class ConfigurationSearchPageGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    const configuration = route.params.configuration;\n\n    const newTitle = configuration + '.search.title';\n\n    route.data = { title: newTitle };\n    return true;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-search-page',\n  templateUrl: './search-page.component.html',\n})\n/**\n * This component represents the whole search page\n * It renders search results depending on the current search options\n */\nexport class SearchPageComponent {\n}\n","<ds-search></ds-search>\n<ds-search-tracker></ds-search-tracker>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { Angulartics2 } from 'angulartics2';\nimport { map, switchMap } from 'rxjs/operators';\nimport { SearchComponent } from './search.component';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { HostWindowService } from '../shared/host-window.service';\nimport { SEARCH_CONFIG_SERVICE } from '../+my-dspace-page/my-dspace-page.component';\nimport { RouteService } from '../core/services/route.service';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { PaginatedSearchOptions } from '../shared/search/paginated-search-options.model';\nimport { SearchObjects } from '../shared/search/search-objects.model';\nimport { Router } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { DSpaceObject } from '../core/shared/dspace-object.model';\nimport { getFirstSucceededRemoteData } from '../core/shared/operators';\n\n/**\n * This component triggers a page view statistic\n */\n@Component({\n  selector: 'ds-search-tracker',\n  styleUrls: ['./search-tracker.component.scss'],\n  templateUrl: './search-tracker.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\nexport class SearchTrackerComponent extends SearchComponent implements OnInit {\n\n  constructor(\n    protected service: SearchService,\n    protected sidebarService: SidebarService,\n    protected windowService: HostWindowService,\n    @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n    protected routeService: RouteService,\n    public angulartics2: Angulartics2,\n    protected router: Router\n  ) {\n    super(service, sidebarService, windowService, searchConfigService, routeService, router);\n  }\n\n  ngOnInit(): void {\n    // super.ngOnInit();\n    this.getSearchOptions().pipe(\n      switchMap((options: PaginatedSearchOptions) =>\n        this.service.searchEntries(options).pipe(\n          getFirstSucceededRemoteData(),\n          map((rd: RemoteData<SearchObjects<DSpaceObject>>) => ({\n            config: options,\n            searchQueryResponse: rd.payload\n          }))\n        )),\n    ).subscribe(({ config, searchQueryResponse }) => {\n        const filters: { filter: string, operator: string, value: string, label: string; }[] = [];\n        const appliedFilters = searchQueryResponse.appliedFilters || [];\n        for (let i = 0, filtersLength = appliedFilters.length; i < filtersLength; i++) {\n          const appliedFilter = appliedFilters[i];\n          filters.push(appliedFilter);\n        }\n        this.angulartics2.eventTrack.next({\n          action: 'search',\n          properties: {\n            searchOptions: config,\n            page: {\n              size: config.pagination.size, // same as searchQueryResponse.page.elementsPerPage\n              totalElements: searchQueryResponse.pageInfo.totalElements,\n              totalPages: searchQueryResponse.pageInfo.totalPages,\n              number: config.pagination.currentPage, // same as searchQueryResponse.page.currentPage\n            },\n            sort: {\n              by: config.sort.field,\n              order: config.sort.direction\n            },\n            filters: filters,\n          },\n        });\n      });\n  }\n}\n","&nbsp;\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { FindListOptions } from '../core/data/request.models';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const ITEM_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Item>[] = [\n  followLink('owningCollection', undefined, true, true, true,\n    followLink('parentCommunity', undefined, true, true, true,\n      followLink('parentCommunity'))\n  ),\n  followLink('bundles', new FindListOptions(), true, true, true, followLink('bitstreams')),\n  followLink('relationships'),\n  followLink('version', undefined, true, true, true, followLink('versionhistory')),\n];\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ItemResolver implements Resolve<RemoteData<Item>> {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    const itemRD$ = this.itemService.findById(route.params.id,\n      true,\n      false,\n      ...ITEM_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    itemRD$.subscribe((itemRD: RemoteData<Item>) => {\n      this.store.dispatch(new ResolvedAction(state.url, itemRD.payload));\n    });\n\n    return itemRD$;\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}