{"version":3,"sources":["webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.ts","webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.html","webpack:///src/app/profile-page/profile-page-metadata-form/profile-page-metadata-form.component.html","webpack:///src/app/profile-page/profile-page-metadata-form/profile-page-metadata-form.component.ts","webpack:///src/app/profile-page/profile-page.component.html","webpack:///src/app/profile-page/profile-page.component.ts"],"names":["ProfilePageSecurityFormComponent","formService","translate","epersonService","notificationsService","isInvalid","EventEmitter","passwordValue","formModel","id","name","inputType","passwordCanBeEmpty","subs","this","formGroup","createFormGroup","validators","checkPasswordsEqual","checkPasswordLength","checkPasswordEmpty","updateFieldTranslations","onLangChange","subscribe","push","statusChanges","pipe","status","emit","valueChanges","valueChange","password","forEach","fieldModel","label","instant","FORM_PREFIX","group","get","value","notSame","pass","length","notLongEnough","emptyPassword","filter","sub","unsubscribe","ProfilePageMetadataFormComponent","formBuilderService","readOnly","required","errorMessages","LABEL_PREFIX","ERROR_PREFIX","NOTIFICATION_PREFIX","activeLangs","environment","languages","MyLangConfig","active","setFormValues","user","email","firstMetadataValue","options","map","langConfig","Object","assign","code","keys","key","valid","newMetadata","cloneDeep","metadata","changed","hasOwnProperty","language","update","success","ProfilePageComponent","authService","NOTIFICATIONS_PREFIX","PASSWORD_NOTIFICATIONS_PREFIX","user$","getAuthenticatedUserFromStore","switchMap","findById","tap","currentUser","groupsRD$","groups","metadataChanged","metadataForm","updateProfile","securityChanged","updateSecurity","warning","$event","invalidSecurity","passEntered","error","patch","op","path","g","response","hasSucceeded","errorMessage"],"mappings":"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","file":"x","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DynamicFormControlModel, DynamicFormService, DynamicInputModel } from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormGroup } from '@angular/forms';\nimport { hasValue, isEmpty } from '../../shared/empty.util';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ds-profile-page-security-form',\n  templateUrl: './profile-page-security-form.component.html'\n})\n/**\n * Component for a user to edit their security information\n * Displays a form containing a password field and a confirmation of the password\n */\nexport class ProfilePageSecurityFormComponent implements OnInit {\n\n  /**\n   * Emits the validity of the password\n   */\n  @Output() isInvalid = new EventEmitter<boolean>();\n  /**\n   * Emits the value of the password\n   */\n  @Output() passwordValue = new EventEmitter<string>();\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'password',\n      name: 'password',\n      inputType: 'password'\n    }),\n    new DynamicInputModel({\n      id: 'passwordrepeat',\n      name: 'passwordrepeat',\n      inputType: 'password'\n    })\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Indicates whether the \"checkPasswordEmpty\" needs to be added or not\n   */\n  @Input()\n  passwordCanBeEmpty = true;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  @Input()\n  FORM_PREFIX: string;\n  private subs: Subscription[] = [];\n\n  constructor(protected formService: DynamicFormService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    if (this.passwordCanBeEmpty) {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength]});\n    } else {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength, this.checkPasswordEmpty]});\n    }\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n\n    this.subs.push(this.formGroup.statusChanges.pipe(\n      debounceTime(300),\n      map((status: string) => {\n        if (status !== 'VALID') {\n          return true;\n        } else {\n          return false;\n        }\n      })).subscribe((status) => this.isInvalid.emit(status))\n    );\n\n    this.subs.push(this.formGroup.valueChanges.pipe(\n      debounceTime(300),\n    ).subscribe((valueChange) => {\n      this.passwordValue.emit(valueChange.password);\n    }));\n  }\n\n  /**\n   * Update the translations of the field labels\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.FORM_PREFIX + 'label.' + fieldModel.id);\n      }\n    );\n  }\n\n  /**\n   * Check if both password fields are filled in and equal\n   * @param group The FormGroup to validate\n   */\n  checkPasswordsEqual(group: FormGroup) {\n    const pass = group.get('password').value;\n    const repeatPass = group.get('passwordrepeat').value;\n\n    return pass === repeatPass ? null : {notSame: true};\n  }\n\n  /**\n   * Check if the password is at least 6 characters long\n   * @param group The FormGroup to validate\n   */\n  checkPasswordLength(group: FormGroup) {\n    const pass = group.get('password').value;\n\n    return isEmpty(pass) || pass.length >= 6 ? null : {notLongEnough: true};\n  }\n\n  /**\n   * Checks if the password is empty\n   * @param group The FormGroup to validate\n   */\n  checkPasswordEmpty(group: FormGroup) {\n    const pass = group.get('password').value;\n    return isEmpty(pass) ? {emptyPassword: true} : null;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"container-fluid mb-4\">{{FORM_PREFIX + 'info' | translate}}</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"FORM_PREFIX\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n<div id=\"notLongEnough\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notLongEnough')\">{{FORM_PREFIX + 'error.password-length' | translate}}</div>\n<div id=\"notSame\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notSame')\">{{FORM_PREFIX + 'error.matching-passwords' | translate}}</div>\n<div id=\"emptyPassword\" class=\"container-fluid text-danger\" *ngIf=\"(formGroup.dirty || formGroup.touched) && formGroup.hasError('emptyPassword')\">{{FORM_PREFIX + 'error.empty-password' | translate}}</div>\n","<ds-form *ngIf=\"formModel\"\n         [formId]=\"'profile-page-metadata-form-id'\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  DynamicFormControlModel,\n  DynamicFormValueControlModel,\n  DynamicInputModel,\n  DynamicSelectModel\n} from '@ng-dynamic-forms/core';\nimport { FormGroup } from '@angular/forms';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { TranslateService } from '@ngx-translate/core';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { LangConfig } from '../../../config/lang-config.interface';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { cloneDeep } from 'lodash';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../core/shared/operators';\nimport { FormBuilderService } from '../../shared/form/builder/form-builder.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'ds-profile-page-metadata-form',\n  templateUrl: './profile-page-metadata-form.component.html'\n})\n/**\n * Component for a user to edit their metadata\n * Displays a form containing:\n * - readonly email field,\n * - required first name text field\n * - required last name text field\n * - phone text field\n * - language dropdown\n */\nexport class ProfilePageMetadataFormComponent implements OnInit {\n  /**\n   * The user to display the form for\n   */\n  @Input() user: EPerson;\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'email',\n      name: 'email',\n      readOnly: true\n    }),\n    new DynamicInputModel({\n      id: 'firstname',\n      name: 'eperson.firstname',\n      required: true,\n      validators: {\n        required: null\n      },\n      errorMessages: {\n        required: 'This field is required'\n      },\n    }),\n    new DynamicInputModel({\n      id: 'lastname',\n      name: 'eperson.lastname',\n      required: true,\n      validators: {\n        required: null\n      },\n      errorMessages: {\n        required: 'This field is required'\n      },\n    }),\n    new DynamicInputModel({\n      id: 'phone',\n      name: 'eperson.phone'\n    }),\n    new DynamicSelectModel<string>({\n      id: 'language',\n      name: 'eperson.language'\n    })\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  LABEL_PREFIX = 'profile.metadata.form.label.';\n\n  /**\n   * Prefix for the form's error messages of this component\n   */\n  ERROR_PREFIX = 'profile.metadata.form.error.';\n\n  /**\n   * Prefix for the notification messages of this component\n   */\n  NOTIFICATION_PREFIX = 'profile.metadata.form.notifications.';\n\n  /**\n   * All of the configured active languages\n   * Used to populate the language dropdown\n   */\n  activeLangs: LangConfig[];\n\n  constructor(protected formBuilderService: FormBuilderService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    this.activeLangs = environment.languages.filter((MyLangConfig) => MyLangConfig.active === true);\n    this.setFormValues();\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n  }\n\n  /**\n   * Loop over all the form's input models and set their values depending on the user's metadata\n   * Create the FormGroup\n   */\n  setFormValues() {\n    this.formModel.forEach(\n      (fieldModel: any) => {\n        if (fieldModel.name === 'email') {\n          fieldModel.value = this.user.email;\n        } else {\n          fieldModel.value = this.user.firstMetadataValue(fieldModel.name);\n        }\n        if (fieldModel.id === 'language') {\n          (fieldModel as DynamicSelectModel<string>).options =\n            this.activeLangs.map((langConfig) => Object.assign({ value: langConfig.code, label: langConfig.label }));\n        }\n      }\n    );\n    this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n  }\n\n  /**\n   * Update the translations of the field labels and error messages\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.LABEL_PREFIX + fieldModel.id);\n        if (isNotEmpty(fieldModel.validators)) {\n          fieldModel.errorMessages = {};\n          Object.keys(fieldModel.validators).forEach((key) => {\n            fieldModel.errorMessages[key] = this.translate.instant(this.ERROR_PREFIX + fieldModel.id + '.' + key);\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Update the user's metadata\n   *\n   * Sends a patch request for updating the user's metadata when at least one value changed or got added/removed and the\n   * form is valid.\n   * Nothing happens when the form is invalid or no metadata changed.\n   *\n   * Returns false when nothing happened.\n   */\n  updateProfile(): boolean {\n    if (!this.formGroup.valid) {\n      return false;\n    }\n\n    const newMetadata = cloneDeep(this.user.metadata);\n    let changed = false;\n    this.formModel.filter((fieldModel) => fieldModel.id !== 'email').forEach((fieldModel: DynamicFormValueControlModel<string>) => {\n      if (newMetadata.hasOwnProperty(fieldModel.name) && newMetadata[fieldModel.name].length > 0) {\n        if (hasValue(fieldModel.value)) {\n          if (newMetadata[fieldModel.name][0].value !== fieldModel.value) {\n            newMetadata[fieldModel.name][0].value = fieldModel.value;\n            changed = true;\n          }\n        } else {\n          newMetadata[fieldModel.name] = [];\n          changed = true;\n        }\n      } else if (hasValue(fieldModel.value)) {\n        newMetadata[fieldModel.name] = [{\n          value: fieldModel.value,\n          language: null\n        } as any];\n        changed = true;\n      }\n    });\n\n    if (changed) {\n      this.epersonService.update(Object.assign(cloneDeep(this.user), {metadata: newMetadata})).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload()\n      ).subscribe((user) => {\n        this.user = user;\n        this.setFormValues();\n        this.notificationsService.success(\n          this.translate.instant(this.NOTIFICATION_PREFIX + 'success.title'),\n          this.translate.instant(this.NOTIFICATION_PREFIX + 'success.content')\n        );\n      });\n    }\n\n    return changed;\n  }\n}\n","<ng-container *ngVar=\"(user$ | async) as user\">\n  <div class=\"container\" *ngIf=\"user\">\n    <h3 class=\"mb-4\">{{'profile.head' | translate}}</h3>\n    <div class=\"card mb-4\">\n      <div class=\"card-header\">{{'profile.card.identify' | translate}}</div>\n      <div class=\"card-body\">\n        <ds-profile-page-metadata-form [user]=\"user\"></ds-profile-page-metadata-form>\n      </div>\n    </div>\n    <div class=\"card mb-4\">\n      <div class=\"card-header\">{{'profile.card.security' | translate}}</div>\n      <div class=\"card-body\">\n        <ds-profile-page-security-form\n                [FORM_PREFIX]=\"'profile.security.form.'\"\n                (isInvalid)=\"setInvalid($event)\"\n                (passwordValue)=\"setPasswordValue($event)\"\n        ></ds-profile-page-security-form>\n      </div>\n    </div>\n    <div class=\"col-12 text-right pr-0\">\n      <button class=\"btn btn-primary\" (click)=\"updateProfile()\"><i class=\"fas fa-edit\"></i> {{'profile.form.submit' | translate}}</button>\n    </div>\n\n    <ng-container *ngVar=\"(groupsRD$ | async)?.payload?.page as groups\">\n      <div *ngIf=\"groups\">\n        <h3 class=\"mt-4\">{{'profile.groups.head' | translate}}</h3>\n        <ul class=\"list-group list-group-flush\">\n          <li *ngFor=\"let group of groups\" class=\"list-group-item\">{{group.name}}</li>\n        </ul>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { EPerson } from '../core/eperson/models/eperson.model';\nimport { ProfilePageMetadataFormComponent } from './profile-page-metadata-form/profile-page-metadata-form.component';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Group } from '../core/eperson/models/group.model';\nimport { RemoteData } from '../core/data/remote-data';\nimport { PaginatedList } from '../core/data/paginated-list.model';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { EPersonDataService } from '../core/eperson/eperson-data.service';\nimport {\n  getAllSucceededRemoteData,\n  getRemoteDataPayload,\n  getFirstCompletedRemoteData\n} from '../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { followLink } from '../shared/utils/follow-link-config.model';\nimport { AuthService } from '../core/auth/auth.service';\nimport { Operation } from 'fast-json-patch';\n\n@Component({\n  selector: 'ds-profile-page',\n  styleUrls: ['./profile-page.component.scss'],\n  templateUrl: './profile-page.component.html'\n})\n/**\n * Component for a user to edit their profile information\n */\nexport class ProfilePageComponent implements OnInit {\n  /**\n   * A reference to the metadata form component\n   */\n  @ViewChild(ProfilePageMetadataFormComponent) metadataForm: ProfilePageMetadataFormComponent;\n\n  /**\n   * The authenticated user as observable\n   */\n  user$: Observable<EPerson>;\n\n  /**\n   * The groups the user belongs to\n   */\n  groupsRD$: Observable<RemoteData<PaginatedList<Group>>>;\n\n  /**\n   * Prefix for the notification messages of this component\n   */\n  NOTIFICATIONS_PREFIX = 'profile.notifications.';\n\n  /**\n   * Prefix for the notification messages of this security form\n   */\n  PASSWORD_NOTIFICATIONS_PREFIX = 'profile.security.form.notifications.';\n\n  /**\n   * The validity of the password filled in, in the security form\n   */\n  private invalidSecurity: boolean;\n\n  /**\n   * The password filled in, in the security form\n   */\n  private password: string;\n\n  /**\n   * The authenticated user\n   */\n  private currentUser: EPerson;\n\n  constructor(private authService: AuthService,\n              private notificationsService: NotificationsService,\n              private translate: TranslateService,\n              private epersonService: EPersonDataService) {\n  }\n\n  ngOnInit(): void {\n    this.user$ = this.authService.getAuthenticatedUserFromStore().pipe(\n      filter((user: EPerson) => hasValue(user.id)),\n      switchMap((user: EPerson) => this.epersonService.findById(user.id, true, true, followLink('groups'))),\n      getAllSucceededRemoteData(),\n      getRemoteDataPayload(),\n      tap((user: EPerson) => this.currentUser = user)\n    );\n    this.groupsRD$ = this.user$.pipe(switchMap((user: EPerson) => user.groups));\n  }\n\n  /**\n   * Fire an update on both the metadata and security forms\n   * Show a warning notification when no changes were made in both forms\n   */\n  updateProfile() {\n    const metadataChanged = this.metadataForm.updateProfile();\n    const securityChanged = this.updateSecurity();\n    if (!metadataChanged && !securityChanged) {\n      this.notificationsService.warning(\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'warning.no-changes.title'),\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'warning.no-changes.content')\n      );\n    }\n  }\n\n  /**\n   * Sets the validity of the password based on an emitted of the form\n   * @param $event\n   */\n  setInvalid($event: boolean) {\n    this.invalidSecurity = $event;\n  }\n\n  /**\n   * Update the user's security details\n   *\n   * Sends a patch request for changing the user's password when a new password is present and the password confirmation\n   * matches the new password.\n   * Nothing happens when no passwords are filled in.\n   * An error notification is displayed when the password confirmation does not match the new password.\n   *\n   * Returns false when the password was empty\n   */\n  updateSecurity() {\n    const passEntered = isNotEmpty(this.password);\n\n    if (this.invalidSecurity) {\n      this.notificationsService.error(this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'error.general'));\n    }\n    if (!this.invalidSecurity && passEntered) {\n      const operation = {op: 'add', path: '/password', value: this.password} as Operation;\n      this.epersonService.patch(this.currentUser, [operation]).pipe(\n        getFirstCompletedRemoteData()\n      ).subscribe((response: RemoteData<EPerson>) => {\n        if (response.hasSucceeded) {\n          this.notificationsService.success(\n            this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'success.title'),\n            this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'success.content')\n          );\n        } else {\n          this.notificationsService.error(\n            this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'error.title'), response.errorMessage\n          );\n        }\n      });\n    }\n    return passEntered;\n  }\n\n  /**\n   * Set the password value based on the value emitted from the security form\n   * @param $event\n   */\n  setPasswordValue($event: string) {\n    this.password = $event;\n  }\n\n  /**\n   * Submit of the security form that triggers the updateProfile method\n   */\n  submit() {\n    this.updateProfile();\n  }\n}\n"]}