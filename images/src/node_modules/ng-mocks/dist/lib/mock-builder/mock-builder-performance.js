"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockBuilderPerformance = void 0;
var testing_1 = require("@angular/core/testing");
var core_helpers_1 = require("../common/core.helpers");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var mock_builder_promise_1 = require("./mock-builder-promise");
var MockBuilderPerformance = /** @class */ (function (_super) {
    __extends(MockBuilderPerformance, _super);
    function MockBuilderPerformance() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MockBuilderPerformance.prototype.build = function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j;
        var ngModule;
        if (ng_mocks_universe_1.default.global.has('builder:module') &&
            ng_mocks_universe_1.default.global.has('builder:config') &&
            this.equalsTo(ng_mocks_universe_1.default.global.get('builder:config'))) {
            ngModule = ng_mocks_universe_1.default.global.get('builder:module');
            // avoiding influences on cache when users extend the testing module.
            return {
                declarations: __spread(ngModule.declarations),
                imports: __spread(ngModule.imports),
                providers: __spread(ngModule.providers),
            };
        }
        // removal of cached promise in case of mismatch
        if (ng_mocks_universe_1.default.global.has('builder:module')) {
            ng_mocks_universe_1.default.global.delete(ng_mocks_universe_1.default.global.get('builder:module'));
        }
        var initialConfig = {
            beforeCC: new Set(),
            configDef: new Map(),
            defProviders: new Map(),
            defValue: new Map(),
            excludeDef: new Set(),
            keepDef: new Set(),
            mockDef: new Set(),
            providerDef: new Map(),
            replaceDef: new Set(),
        };
        try {
            for (var _k = __values(core_helpers_1.mapValues(this.beforeCC)), _l = _k.next(); !_l.done; _l = _k.next()) {
                var value = _l.value;
                initialConfig.beforeCC.add(value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_a = _k.return)) _a.call(_k);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _m = __values(core_helpers_1.mapEntries(this.configDef)), _o = _m.next(); !_o.done; _o = _m.next()) {
                var _p = __read(_o.value, 2), key = _p[0], value = _p[1];
                initialConfig.configDef.set(key, value);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_b = _m.return)) _b.call(_m);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _q = __values(core_helpers_1.mapEntries(this.defProviders)), _r = _q.next(); !_r.done; _r = _q.next()) {
                var _s = __read(_r.value, 2), key = _s[0], value = _s[1];
                initialConfig.defProviders.set(key, value);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_c = _q.return)) _c.call(_q);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _t = __values(core_helpers_1.mapEntries(this.defValue)), _u = _t.next(); !_u.done; _u = _t.next()) {
                var _v = __read(_u.value, 2), key = _v[0], value = _v[1];
                initialConfig.defValue.set(key, value);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_u && !_u.done && (_d = _t.return)) _d.call(_t);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _w = __values(core_helpers_1.mapValues(this.excludeDef)), _x = _w.next(); !_x.done; _x = _w.next()) {
                var value = _x.value;
                initialConfig.excludeDef.add(value);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_x && !_x.done && (_e = _w.return)) _e.call(_w);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _y = __values(core_helpers_1.mapValues(this.keepDef)), _z = _y.next(); !_z.done; _z = _y.next()) {
                var value = _z.value;
                initialConfig.keepDef.add(value);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_z && !_z.done && (_f = _y.return)) _f.call(_y);
            }
            finally { if (e_6) throw e_6.error; }
        }
        try {
            for (var _0 = __values(core_helpers_1.mapValues(this.mockDef)), _1 = _0.next(); !_1.done; _1 = _0.next()) {
                var value = _1.value;
                initialConfig.mockDef.add(value);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_1 && !_1.done && (_g = _0.return)) _g.call(_0);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            for (var _2 = __values(core_helpers_1.mapEntries(this.providerDef)), _3 = _2.next(); !_3.done; _3 = _2.next()) {
                var _4 = __read(_3.value, 2), key = _4[0], value = _4[1];
                initialConfig.providerDef.set(key, value);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_3 && !_3.done && (_h = _2.return)) _h.call(_2);
            }
            finally { if (e_8) throw e_8.error; }
        }
        try {
            for (var _5 = __values(core_helpers_1.mapValues(this.replaceDef)), _6 = _5.next(); !_6.done; _6 = _5.next()) {
                var value = _6.value;
                initialConfig.replaceDef.add(value);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_6 && !_6.done && (_j = _5.return)) _j.call(_5);
            }
            finally { if (e_9) throw e_9.error; }
        }
        ng_mocks_universe_1.default.global.set('builder:config', initialConfig);
        ngModule = _super.prototype.build.call(this);
        ng_mocks_universe_1.default.global.set('builder:module', ngModule);
        // avoiding influences on cache when users extend the testing module.
        return {
            declarations: __spread(ngModule.declarations),
            imports: __spread(ngModule.imports),
            providers: __spread(ngModule.providers),
        };
    };
    MockBuilderPerformance.prototype.then = function (fulfill, reject) {
        if (ng_mocks_universe_1.default.global.has('bullet') &&
            ng_mocks_universe_1.default.global.has('builder:module') &&
            ng_mocks_universe_1.default.global.has('builder:config') &&
            this.equalsTo(ng_mocks_universe_1.default.global.get('builder:config'))) {
            return ng_mocks_universe_1.default.global.get(ng_mocks_universe_1.default.global.get('builder:module')).then(fulfill, reject);
        }
        // we need to reset testing module in case if we are in bullet mode but current module doesn't match.
        if (ng_mocks_universe_1.default.global.has('bullet') && ng_mocks_universe_1.default.global.has('bullet:reset')) {
            // tslint:disable-next-line:no-console
            console.warn('ngMocks.faster has zero effect due to changes in testing module between runs');
            ng_mocks_universe_1.default.global.delete('bullet');
            testing_1.TestBed.resetTestingModule();
            ng_mocks_universe_1.default.global.set('bullet', true);
        }
        var promise = _super.prototype.then.call(this, fulfill, reject);
        ng_mocks_universe_1.default.global.set(ng_mocks_universe_1.default.global.get('builder:module'), promise);
        return promise;
    };
    // tslint:disable-next-line:prefer-function-over-method
    MockBuilderPerformance.prototype.equalProviders = function (prototype, source) {
        // a case of multi vs non-multi
        if (Array.isArray(prototype) !== Array.isArray(source)) {
            return false;
        }
        var prototypeDefs = core_helpers_1.flatten(prototype);
        var thisDefs = core_helpers_1.flatten(source);
        if (prototypeDefs.length !== thisDefs.length) {
            return false;
        }
        for (var index = 0; index < prototypeDefs.length; index += 1) {
            var prototypeDef = prototypeDefs[index];
            var thisDef = thisDefs[index];
            if (prototypeDef && thisDef && prototypeDef.multi !== thisDef.multi) {
                return false;
            }
            if (prototypeDef &&
                thisDef &&
                prototypeDef.useValue &&
                thisDef.useValue &&
                prototypeDef.useValue === thisDef.useValue) {
                continue;
            }
            if (prototypeDef &&
                thisDef &&
                prototypeDef.useClass &&
                thisDef.useClass &&
                prototypeDef.useClass === thisDef.useClass) {
                continue;
            }
            if (prototypeDef &&
                thisDef &&
                prototypeDef.useFactory &&
                thisDef.useFactory &&
                prototypeDef.useFactory === thisDef.useFactory) {
                continue;
            }
            if (prototypeDef &&
                thisDef &&
                prototypeDef.useExisting &&
                thisDef.useExisting &&
                prototypeDef.useExisting === thisDef.useExisting) {
                continue;
            }
            if (prototypeDef === thisDef) {
                continue;
            }
            return false;
        }
        return true;
    };
    // tslint:disable-next-line:prefer-function-over-method
    MockBuilderPerformance.prototype.equalRender = function (prototype, source) {
        if (prototype === source) {
            return true;
        }
        if ((typeof prototype === 'boolean' || typeof source === 'boolean') && prototype !== source) {
            return false;
        }
        if (prototype.$implicit !== source.$implicit) {
            return false;
        }
        if (!this.equalVariables(prototype.variables, source.variables)) {
            return false;
        }
        return true;
    };
    MockBuilderPerformance.prototype.equalsTo = function (prototype) {
        var e_10, _a, e_11, _b, e_12, _c, e_13, _d, e_14, _e, e_15, _f, e_16, _g, e_17, _h, e_18, _j, e_19, _k;
        if (!prototype.beforeCC || prototype.beforeCC.size !== this.beforeCC.size) {
            return false;
        }
        try {
            for (var _l = __values(core_helpers_1.mapValues(this.beforeCC)), _m = _l.next(); !_m.done; _m = _l.next()) {
                var value = _m.value;
                if (!prototype.beforeCC.has(value)) {
                    return false;
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_a = _l.return)) _a.call(_l);
            }
            finally { if (e_10) throw e_10.error; }
        }
        if (!prototype.keepDef || prototype.keepDef.size !== this.keepDef.size) {
            return false;
        }
        try {
            for (var _o = __values(core_helpers_1.mapValues(this.keepDef)), _p = _o.next(); !_p.done; _p = _o.next()) {
                var value = _p.value;
                if (!prototype.keepDef.has(value)) {
                    return false;
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_b = _o.return)) _b.call(_o);
            }
            finally { if (e_11) throw e_11.error; }
        }
        if (!prototype.replaceDef || prototype.replaceDef.size !== this.replaceDef.size) {
            return false;
        }
        try {
            for (var _q = __values(core_helpers_1.mapValues(this.replaceDef)), _r = _q.next(); !_r.done; _r = _q.next()) {
                var value = _r.value;
                if (!prototype.replaceDef.has(value)) {
                    return false;
                }
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_c = _q.return)) _c.call(_q);
            }
            finally { if (e_12) throw e_12.error; }
        }
        if (!prototype.excludeDef || prototype.excludeDef.size !== this.excludeDef.size) {
            return false;
        }
        try {
            for (var _s = __values(core_helpers_1.mapValues(this.excludeDef)), _t = _s.next(); !_t.done; _t = _s.next()) {
                var value = _t.value;
                if (!prototype.excludeDef.has(value)) {
                    return false;
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_t && !_t.done && (_d = _s.return)) _d.call(_s);
            }
            finally { if (e_13) throw e_13.error; }
        }
        if (!prototype.mockDef || prototype.mockDef.size !== this.mockDef.size) {
            return false;
        }
        try {
            for (var _u = __values(core_helpers_1.mapValues(this.mockDef)), _v = _u.next(); !_v.done; _v = _u.next()) {
                var value = _v.value;
                if (!prototype.mockDef.has(value)) {
                    return false;
                }
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_v && !_v.done && (_e = _u.return)) _e.call(_u);
            }
            finally { if (e_14) throw e_14.error; }
        }
        if (!prototype.providerDef || prototype.providerDef.size !== this.providerDef.size) {
            return false;
        }
        try {
            for (var _w = __values(core_helpers_1.mapKeys(this.providerDef)), _x = _w.next(); !_x.done; _x = _w.next()) {
                var value = _x.value;
                if (!prototype.providerDef.has(value)) {
                    return false;
                }
                if (!this.equalProviders(prototype.providerDef.get(value), this.providerDef.get(value))) {
                    return false;
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_x && !_x.done && (_f = _w.return)) _f.call(_w);
            }
            finally { if (e_15) throw e_15.error; }
        }
        if (!prototype.defProviders || prototype.defProviders.size !== this.defProviders.size) {
            return false;
        }
        try {
            for (var _y = __values(core_helpers_1.mapKeys(this.defProviders)), _z = _y.next(); !_z.done; _z = _y.next()) {
                var value = _z.value;
                if (!prototype.defProviders.has(value)) {
                    return false;
                }
                if (!this.equalProviders(prototype.defProviders.get(value), this.defProviders.get(value))) {
                    return false;
                }
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_z && !_z.done && (_g = _y.return)) _g.call(_y);
            }
            finally { if (e_16) throw e_16.error; }
        }
        if (!prototype.defValue || prototype.defValue.size !== this.defValue.size) {
            return false;
        }
        try {
            for (var _0 = __values(core_helpers_1.mapKeys(this.defValue)), _1 = _0.next(); !_1.done; _1 = _0.next()) {
                var value = _1.value;
                if (!prototype.defValue.has(value)) {
                    return false;
                }
                if (prototype.defValue.get(value) !== this.defValue.get(value)) {
                    return false;
                }
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_1 && !_1.done && (_h = _0.return)) _h.call(_0);
            }
            finally { if (e_17) throw e_17.error; }
        }
        if (!prototype.configDef || prototype.configDef.size !== this.configDef.size) {
            return false;
        }
        try {
            for (var _2 = __values(core_helpers_1.mapKeys(this.configDef)), _3 = _2.next(); !_3.done; _3 = _2.next()) {
                var value = _3.value;
                if (!prototype.configDef.has(value)) {
                    return false;
                }
                var configPrototype = prototype.configDef.get(value);
                var configThis = this.configDef.get(value);
                if (configPrototype === configThis) {
                    continue;
                }
                if (configPrototype.dependency !== configThis.dependency) {
                    return false;
                }
                if (configPrototype.export !== configThis.export) {
                    return false;
                }
                if (configPrototype.exportAll !== configThis.exportAll) {
                    return false;
                }
                if (!this.equalRender(configPrototype.render, configThis.render)) {
                    return false;
                }
                if (typeof configPrototype.render !== 'object' || typeof configThis.render !== 'object') {
                    continue;
                }
                if (Object.keys(configPrototype.render).length !== Object.keys(configThis.render).length) {
                    return false;
                }
                try {
                    for (var _4 = (e_19 = void 0, __values(Object.keys(configPrototype.render))), _5 = _4.next(); !_5.done; _5 = _4.next()) {
                        var key = _5.value;
                        if (!this.equalRender(configPrototype.render[key], configThis.render[key])) {
                            return false;
                        }
                    }
                }
                catch (e_19_1) { e_19 = { error: e_19_1 }; }
                finally {
                    try {
                        if (_5 && !_5.done && (_k = _4.return)) _k.call(_4);
                    }
                    finally { if (e_19) throw e_19.error; }
                }
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (_3 && !_3.done && (_j = _2.return)) _j.call(_2);
            }
            finally { if (e_18) throw e_18.error; }
        }
        return true;
    };
    // tslint:disable-next-line:prefer-function-over-method
    MockBuilderPerformance.prototype.equalVariables = function (prototype, source) {
        var e_20, _a;
        if (prototype === source) {
            return true;
        }
        if (prototype && !source) {
            return false;
        }
        if (!prototype && source) {
            return false;
        }
        var prototypeKeys = Object.keys(prototype);
        var sourceKeys = Object.keys(source);
        if (prototypeKeys.length !== sourceKeys.length) {
            return false;
        }
        try {
            for (var prototypeKeys_1 = __values(prototypeKeys), prototypeKeys_1_1 = prototypeKeys_1.next(); !prototypeKeys_1_1.done; prototypeKeys_1_1 = prototypeKeys_1.next()) {
                var key = prototypeKeys_1_1.value;
                if (prototype[key] !== source[key]) {
                    return false;
                }
            }
        }
        catch (e_20_1) { e_20 = { error: e_20_1 }; }
        finally {
            try {
                if (prototypeKeys_1_1 && !prototypeKeys_1_1.done && (_a = prototypeKeys_1.return)) _a.call(prototypeKeys_1);
            }
            finally { if (e_20) throw e_20.error; }
        }
        return true;
    };
    return MockBuilderPerformance;
}(mock_builder_promise_1.MockBuilderPromise));
exports.MockBuilderPerformance = MockBuilderPerformance;
//# sourceMappingURL=data:application/json;base64,