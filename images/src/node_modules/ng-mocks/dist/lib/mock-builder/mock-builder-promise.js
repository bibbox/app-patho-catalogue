"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockBuilderPromise = void 0;
var testing_1 = require("@angular/core/testing");
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_1 = require("../common/core.reflect");
var core_tokens_1 = require("../common/core.tokens");
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var mock_component_1 = require("../mock-component/mock-component");
var mock_directive_1 = require("../mock-directive/mock-directive");
var mock_helper_1 = require("../mock-helper/mock-helper");
var mock_module_1 = require("../mock-module/mock-module");
var mock_pipe_1 = require("../mock-pipe/mock-pipe");
var helper_1 = require("../mock-service/helper");
var mock_provider_1 = require("../mock-service/mock-provider");
var mock_service_1 = require("../mock-service/mock-service");
var mock_builder_promise_extract_dep_1 = require("./mock-builder-promise.extract-dep");
var mock_builder_promise_skip_dep_1 = require("./mock-builder-promise.skip-dep");
var defaultMock = {}; // simulating Symbol
var MockBuilderPromise = /** @class */ (function () {
    function MockBuilderPromise() {
        this.beforeCC = new Set();
        this.configDef = new Map();
        this.defProviders = new Map();
        this.defValue = new Map();
        this.excludeDef = new Set();
        this.keepDef = new Set();
        this.mockDef = new Set();
        this.providerDef = new Map();
        this.replaceDef = new Set();
    }
    MockBuilderPromise.prototype.beforeCompileComponents = function (callback) {
        this.beforeCC.add(callback);
        return this;
    };
    MockBuilderPromise.prototype.build = function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h, e_9, _j, e_10, _k, e_11, _l, e_12, _m, e_13, _o, e_14, _p, e_15, _q, e_16, _r, e_17, _s, e_18, _t;
        var backup = {
            builtDeclarations: ng_mocks_universe_1.default.builtDeclarations,
            builtProviders: ng_mocks_universe_1.default.builtProviders,
            cacheDeclarations: ng_mocks_universe_1.default.cacheDeclarations,
            cacheProviders: ng_mocks_universe_1.default.cacheProviders,
            config: ng_mocks_universe_1.default.config,
            flags: ng_mocks_universe_1.default.flags,
            touches: ng_mocks_universe_1.default.touches,
        };
        ng_mocks_universe_1.default.builtDeclarations = new Map();
        ng_mocks_universe_1.default.builtProviders = new Map();
        ng_mocks_universe_1.default.cacheDeclarations = new Map();
        ng_mocks_universe_1.default.cacheProviders = new Map();
        ng_mocks_universe_1.default.config = new Map();
        ng_mocks_universe_1.default.flags = new Set([
            'cacheComponent',
            'cacheDirective',
            'cacheModule',
            'cachePipe',
            'cacheProvider',
            'correctModuleExports',
        ]);
        ng_mocks_universe_1.default.touches = new Set();
        ng_mocks_universe_1.default.config.set('multi', new Set()); // collecting multi flags of providers.
        ng_mocks_universe_1.default.config.set('deps', new Set()); // collecting all deps of providers.
        ng_mocks_universe_1.default.config.set('depsSkip', new Set()); // collecting all declarations of kept modules.
        ng_mocks_universe_1.default.config.set('resolution', new Map()); // flags to understand how to mock nested declarations.
        try {
            for (var _u = __values(core_helpers_1.mapEntries(this.configDef)), _v = _u.next(); !_v.done; _v = _u.next()) {
                var _w = __read(_v.value, 2), k = _w[0], v = _w[1];
                ng_mocks_universe_1.default.config.set(k, v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_v && !_v.done && (_a = _u.return)) _a.call(_u);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _x = __values(core_helpers_1.mapValues(this.keepDef)), _y = _x.next(); !_y.done; _y = _x.next()) {
                var def = _y.value;
                ng_mocks_universe_1.default.builtDeclarations.set(def, def);
                ng_mocks_universe_1.default.builtProviders.set(def, def);
                ng_mocks_universe_1.default.config.get('resolution').set(def, 'keep');
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_y && !_y.done && (_b = _x.return)) _b.call(_x);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _z = __values(core_helpers_1.mapValues(this.replaceDef)), _0 = _z.next(); !_0.done; _0 = _z.next()) {
                var def = _0.value;
                ng_mocks_universe_1.default.builtDeclarations.set(def, this.defValue.get(def));
                ng_mocks_universe_1.default.config.get('resolution').set(def, 'replace');
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_0 && !_0.done && (_c = _z.return)) _c.call(_z);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _1 = __values(__spread(core_helpers_1.mapValues(this.excludeDef))), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                var def = _2.value;
                ng_mocks_universe_1.default.builtDeclarations.set(def, null);
                ng_mocks_universe_1.default.builtProviders.set(def, null);
                ng_mocks_universe_1.default.config.get('resolution').set(def, 'exclude');
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_2 && !_2.done && (_d = _1.return)) _d.call(_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var _loop_1 = function (def) {
            ng_mocks_universe_1.default.config.get('resolution').set(def, 'mock');
            if (func_is_ng_def_1.isNgDef(def, 'c')) {
                ng_mocks_universe_1.default.builtDeclarations.set(def, mock_component_1.MockComponent(def));
            }
            if (func_is_ng_def_1.isNgDef(def, 'd')) {
                ng_mocks_universe_1.default.builtDeclarations.set(def, mock_directive_1.MockDirective(def));
            }
            if (func_is_ng_def_1.isNgDef(def, 'p')) {
                var instance = this_1.defValue.get(def);
                ng_mocks_universe_1.default.builtDeclarations.set(def, typeof instance === 'function'
                    ? mock_pipe_1.MockPipe(def, instance)
                    : instance && typeof instance === 'object' && typeof instance.transform === 'function'
                        ? mock_pipe_1.MockPipe(def, instance.transform)
                        : mock_pipe_1.MockPipe(def));
            }
            if (func_is_ng_def_1.isNgDef(def, 'i') && this_1.defValue.has(def)) {
                var instance_1 = this_1.defValue.get(def);
                var isFunc_1 = func_is_ng_def_1.isNgDef(def, 'p') && typeof instance_1 === 'function';
                ng_mocks_universe_1.default.builtProviders.set(def, helper_1.default.useFactory(def, function () {
                    return isFunc_1 ? mock_helper_1.ngMocks.stub(mock_service_1.MockService(def), { transform: instance_1 }) : instance_1;
                }));
            }
            else if (func_is_ng_def_1.isNgDef(def, 'i')) {
                ng_mocks_universe_1.default.builtProviders.set(def, mock_provider_1.default(def));
            }
            if (!func_is_ng_def_1.isNgDef(def) && this_1.defValue.has(def)) {
                var instance_2 = this_1.defValue.get(def);
                ng_mocks_universe_1.default.builtProviders.set(def, helper_1.default.useFactory(def, function () { return instance_2; }));
            }
            else if (!func_is_ng_def_1.isNgDef(def)) {
                ng_mocks_universe_1.default.builtProviders.set(def, mock_provider_1.default(def));
            }
            ng_mocks_universe_1.default.touches.delete(def);
        };
        var this_1 = this;
        try {
            // Mocking requested things.
            for (var _3 = __values(core_helpers_1.mapValues(this.mockDef)), _4 = _3.next(); !_4.done; _4 = _3.next()) {
                var def = _4.value;
                _loop_1(def);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_4 && !_4.done && (_e = _3.return)) _e.call(_3);
            }
            finally { if (e_5) throw e_5.error; }
        }
        // Now we need to run through requested modules.
        var defProviders = new Map();
        try {
            for (var _5 = __values(__spread(core_helpers_1.mapValues(this.keepDef), core_helpers_1.mapValues(this.mockDef), core_helpers_1.mapValues(this.replaceDef))), _6 = _5.next(); !_6.done; _6 = _5.next()) {
                var def = _6.value;
                if (!func_is_ng_def_1.isNgDef(def, 'm')) {
                    continue;
                }
                if (this.defProviders.has(def) && this.mockDef.has(def)) {
                    var _7 = __read(mock_module_1.MockNgDef({ providers: this.defProviders.get(def) }), 2), loDef = _7[1];
                    defProviders.set(def, loDef.providers);
                }
                else if (this.defProviders.has(def)) {
                    defProviders.set(def, this.defProviders.get(def));
                }
                ng_mocks_universe_1.default.builtDeclarations.set(def, mock_module_1.MockModule(def));
                ng_mocks_universe_1.default.touches.delete(def);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_6 && !_6.done && (_f = _5.return)) _f.call(_5);
            }
            finally { if (e_6) throw e_6.error; }
        }
        // Setting up TestBed.
        var imports = [];
        var declarations = [];
        var providers = [];
        try {
            // Adding suitable leftovers.
            for (var _8 = __values(__spread(core_helpers_1.mapValues(this.mockDef), core_helpers_1.mapValues(this.keepDef), core_helpers_1.mapValues(this.replaceDef))), _9 = _8.next(); !_9.done; _9 = _8.next()) {
                var def = _9.value;
                if (func_is_ng_def_1.isNgDef(def, 'i') || !func_is_ng_def_1.isNgDef(def)) {
                    continue;
                }
                if (ng_mocks_universe_1.default.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                if (func_is_ng_def_1.isNgDef(def, 'm')) {
                    var loModule = ng_mocks_universe_1.default.builtDeclarations.get(def);
                    var loProviders = defProviders.has(def) ? defProviders.get(def) : undefined;
                    imports.push(loProviders
                        ? {
                            ngModule: loModule,
                            providers: loProviders,
                        }
                        : loModule);
                }
                else {
                    declarations.push(ng_mocks_universe_1.default.builtDeclarations.get(def));
                }
                ng_mocks_universe_1.default.touches.add(def);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_9 && !_9.done && (_g = _8.return)) _g.call(_8);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            // Adding missed kept providers to test bed.
            for (var _10 = __values(core_helpers_1.mapValues(this.keepDef)), _11 = _10.next(); !_11.done; _11 = _10.next()) {
                var def = _11.value;
                if (!func_is_ng_def_1.isNgDef(def, 'i') && func_is_ng_def_1.isNgDef(def)) {
                    continue;
                }
                if (ng_mocks_universe_1.default.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                if (func_is_ng_injection_token_1.isNgInjectionToken(def)) {
                    ng_mocks_universe_1.default.touches.add(def);
                    continue;
                }
                providers.push(def);
                ng_mocks_universe_1.default.touches.add(def);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_11 && !_11.done && (_h = _10.return)) _h.call(_10);
            }
            finally { if (e_8) throw e_8.error; }
        }
        try {
            // Adding missed mock providers to test bed.
            for (var _12 = __values(core_helpers_1.mapValues(this.mockDef)), _13 = _12.next(); !_13.done; _13 = _12.next()) {
                var def = _13.value;
                if (!func_is_ng_def_1.isNgDef(def, 'i') && func_is_ng_def_1.isNgDef(def)) {
                    continue;
                }
                if (ng_mocks_universe_1.default.touches.has(def)) {
                    continue;
                }
                var config = this.configDef.get(def);
                if (config && config.dependency) {
                    continue;
                }
                var mock = ng_mocks_universe_1.default.builtProviders.get(def);
                providers.push(mock || { provide: def, useValue: undefined });
                ng_mocks_universe_1.default.touches.add(def);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_13 && !_13.done && (_j = _12.return)) _j.call(_12);
            }
            finally { if (e_9) throw e_9.error; }
        }
        try {
            // Adding requested providers to test bed.
            for (var _14 = __values(core_helpers_1.mapValues(this.providerDef)), _15 = _14.next(); !_15.done; _15 = _14.next()) {
                var provider = _15.value;
                providers.push(provider);
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_15 && !_15.done && (_k = _14.return)) _k.call(_14);
            }
            finally { if (e_10) throw e_10.error; }
        }
        try {
            // Analyzing providers.
            for (var _16 = __values(core_helpers_1.flatten(providers)), _17 = _16.next(); !_17.done; _17 = _16.next()) {
                var provider = _17.value;
                var provide = typeof provider === 'object' && provider.provide ? provider.provide : provider;
                ng_mocks_universe_1.default.touches.add(provide);
                if (provide !== provider && provider.deps) {
                    core_helpers_1.extractDependency(provider.deps, ng_mocks_universe_1.default.config.get('deps'));
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_17 && !_17.done && (_l = _16.return)) _l.call(_16);
            }
            finally { if (e_11) throw e_11.error; }
        }
        // Mocking root providers.
        var parameters = new Set();
        if (!this.keepDef.has(core_tokens_1.NG_MOCKS_ROOT_PROVIDERS)) {
            // We need buckets here to process first all depsSkip, then deps and only after that all other defs.
            var buckets = [];
            buckets.push(core_helpers_1.mapValues(ng_mocks_universe_1.default.config.get('depsSkip')));
            buckets.push(core_helpers_1.mapValues(ng_mocks_universe_1.default.config.get('deps')));
            buckets.push(core_helpers_1.mapValues(ng_mocks_universe_1.default.touches));
            // Also we need to track what has been touched to check params recursively, but avoiding duplicates.
            var touched = [].concat.apply([], __spread(buckets));
            try {
                for (var buckets_1 = __values(buckets), buckets_1_1 = buckets_1.next(); !buckets_1_1.done; buckets_1_1 = buckets_1.next()) {
                    var bucket = buckets_1_1.value;
                    try {
                        for (var bucket_1 = (e_13 = void 0, __values(bucket)), bucket_1_1 = bucket_1.next(); !bucket_1_1.done; bucket_1_1 = bucket_1.next()) {
                            var def = bucket_1_1.value;
                            if (!mock_builder_promise_skip_dep_1.default(def)) {
                                if (this.mockDef.has(core_tokens_1.NG_MOCKS_ROOT_PROVIDERS) || !ng_mocks_universe_1.default.config.get('depsSkip').has(def)) {
                                    parameters.add(def);
                                }
                            }
                            try {
                                for (var _18 = (e_14 = void 0, __values(core_reflect_1.jitReflector.parameters(def))), _19 = _18.next(); !_19.done; _19 = _18.next()) {
                                    var decorators = _19.value;
                                    var provide = mock_builder_promise_extract_dep_1.default(decorators);
                                    if (mock_builder_promise_skip_dep_1.default(provide)) {
                                        continue;
                                    }
                                    if (ng_mocks_universe_1.default.config.get('depsSkip').has(provide)) {
                                        continue;
                                    }
                                    if (typeof provide === 'function' && touched.indexOf(provide) === -1) {
                                        touched.push(provide);
                                        bucket.push(provide);
                                    }
                                    if (this.mockDef.has(core_tokens_1.NG_MOCKS_ROOT_PROVIDERS) || !ng_mocks_universe_1.default.config.get('depsSkip').has(def)) {
                                        parameters.add(provide);
                                    }
                                    else {
                                        ng_mocks_universe_1.default.config.get('depsSkip').add(provide);
                                    }
                                }
                            }
                            catch (e_14_1) { e_14 = { error: e_14_1 }; }
                            finally {
                                try {
                                    if (_19 && !_19.done && (_p = _18.return)) _p.call(_18);
                                }
                                finally { if (e_14) throw e_14.error; }
                            }
                        }
                    }
                    catch (e_13_1) { e_13 = { error: e_13_1 }; }
                    finally {
                        try {
                            if (bucket_1_1 && !bucket_1_1.done && (_o = bucket_1.return)) _o.call(bucket_1);
                        }
                        finally { if (e_13) throw e_13.error; }
                    }
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (buckets_1_1 && !buckets_1_1.done && (_m = buckets_1.return)) _m.call(buckets_1);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        // Adding missed providers.
        if (parameters.size) {
            var parametersMap = new Map();
            var _loop_2 = function (parameter) {
                var mock = helper_1.default.resolveProvider(parameter, parametersMap);
                if (mock) {
                    providers.push(mock);
                }
                else if (func_is_ng_injection_token_1.isNgInjectionToken(parameter)) {
                    var multi_1 = ng_mocks_universe_1.default.config.has('multi') && ng_mocks_universe_1.default.config.get('multi').has(parameter);
                    providers.push(helper_1.default.useFactory(parameter, function () { return (multi_1 ? [] : undefined); }));
                }
            };
            try {
                for (var _20 = __values(core_helpers_1.mapValues(parameters)), _21 = _20.next(); !_21.done; _21 = _20.next()) {
                    var parameter = _21.value;
                    _loop_2(parameter);
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (_21 && !_21.done && (_q = _20.return)) _q.call(_20);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
        var mocks = new Map();
        try {
            for (var _22 = __values(__spread(core_helpers_1.mapEntries(ng_mocks_universe_1.default.builtProviders), core_helpers_1.mapEntries(ng_mocks_universe_1.default.builtDeclarations), core_helpers_1.mapEntries(ng_mocks_universe_1.default.cacheDeclarations), core_helpers_1.mapEntries(ng_mocks_universe_1.default.cacheProviders))), _23 = _22.next(); !_23.done; _23 = _22.next()) {
                var _24 = __read(_23.value, 2), key = _24[0], value = _24[1];
                if (mocks.has(key)) {
                    continue;
                }
                mocks.set(key, value);
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_23 && !_23.done && (_r = _22.return)) _r.call(_22);
            }
            finally { if (e_16) throw e_16.error; }
        }
        providers.push({
            provide: core_tokens_1.NG_MOCKS,
            useValue: mocks,
        });
        // Redefining providers for kept declarations.
        var touches = new Set();
        providers.push({
            provide: core_tokens_1.NG_MOCKS_TOUCHES,
            useValue: touches,
        });
        var overrides = new Map();
        providers.push({
            provide: core_tokens_1.NG_MOCKS_OVERRIDES,
            useValue: overrides,
        });
        try {
            for (var _25 = __values(core_helpers_1.mapValues(ng_mocks_universe_1.default.touches)), _26 = _25.next(); !_26.done; _26 = _25.next()) {
                var proto = _26.value;
                var source = proto;
                var value = ng_mocks_universe_1.default.builtDeclarations.get(source);
                // kept declarations should be based on their source.
                if (value === undefined) {
                    value = source;
                }
                touches.add(source);
                touches.add(value);
                // no reason to touch mocks
                if (ng_mocks_universe_1.default.cacheDeclarations.has(value)) {
                    continue;
                }
                // no customizations in replacements
                if (this.replaceDef.has(source) && value === this.defValue.get(source)) {
                    continue;
                }
                var meta = void 0;
                if (func_is_ng_def_1.isNgDef(value, 'c')) {
                    meta = core_reflect_1.directiveResolver.resolve(value);
                }
                else if (func_is_ng_def_1.isNgDef(value, 'd')) {
                    meta = core_reflect_1.directiveResolver.resolve(value);
                }
                else {
                    continue;
                }
                var skipMock = ng_mocks_universe_1.default.flags.has('skipMock');
                /* istanbul ignore else */
                if (!skipMock) {
                    ng_mocks_universe_1.default.flags.add('skipMock');
                }
                var _27 = __read(mock_module_1.MockNgDef({ providers: meta.providers }), 2), changed = _27[0], def = _27[1];
                /* istanbul ignore else */
                if (!skipMock) {
                    ng_mocks_universe_1.default.flags.delete('skipMock');
                }
                if (!changed) {
                    continue;
                }
                var override = {
                    set: def,
                };
                overrides.set(value, override);
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_26 && !_26.done && (_s = _25.return)) _s.call(_25);
            }
            finally { if (e_17) throw e_17.error; }
        }
        try {
            for (var _28 = __values(Object.keys(backup)), _29 = _28.next(); !_29.done; _29 = _28.next()) {
                var key = _29.value;
                ng_mocks_universe_1.default[key] = backup[key];
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (_29 && !_29.done && (_t = _28.return)) _t.call(_28);
            }
            finally { if (e_18) throw e_18.error; }
        }
        return {
            declarations: declarations,
            imports: imports,
            providers: providers,
        };
    };
    MockBuilderPromise.prototype.exclude = function (def) {
        this.wipe(def);
        this.excludeDef.add(def);
        return this;
    };
    MockBuilderPromise.prototype.keep = function (input, config) {
        var _a = func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(input)
            ? { def: input.ngModule, providers: input.providers }
            : { def: input, providers: undefined }, def = _a.def, providers = _a.providers;
        var existing = this.keepDef.has(def) ? this.defProviders.get(def) : [];
        this.wipe(def);
        this.keepDef.add(def);
        // a magic to support modules with providers.
        if (providers) {
            this.defProviders.set(def, __spread(existing, providers));
        }
        if (config) {
            this.configDef.set(def, config);
        }
        else {
            this.configDef.delete(def);
        }
        return this;
    };
    MockBuilderPromise.prototype.mock = function (input, a1, a2) {
        if (a1 === void 0) { a1 = defaultMock; }
        var _a = func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(input)
            ? { def: input.ngModule, providers: input.providers }
            : { def: input, providers: undefined }, def = _a.def, providers = _a.providers;
        var mock = def === a1 ? defaultMock : a1;
        var config = a2 ? a2 : a1 !== defaultMock ? a1 : undefined;
        if (func_is_ng_def_1.isNgDef(def, 'p') && typeof a1 === 'function') {
            mock = a1;
            config = a2;
        }
        else if (func_is_ng_def_1.isNgDef(def, 'i') || !func_is_ng_def_1.isNgDef(def)) {
            config = a2;
        }
        mock = mock === config ? defaultMock : mock;
        var existing = this.mockDef.has(def) ? this.defProviders.get(def) : [];
        this.wipe(def);
        this.mockDef.add(def);
        // a magic to support modules with providers.
        if (providers) {
            this.defProviders.set(def, __spread(existing, providers));
        }
        if (mock !== defaultMock) {
            this.defValue.set(def, mock);
        }
        else {
            this.defValue.delete(def);
        }
        if (config) {
            this.configDef.set(def, config);
        }
        else {
            this.configDef.delete(def);
        }
        return this;
    };
    MockBuilderPromise.prototype.provide = function (def) {
        var e_19, _a;
        try {
            for (var _b = __values(core_helpers_1.flatten(def)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var provider = _c.value;
                var provide = typeof provider === 'object' && provider.provide ? provider.provide : provider;
                var multi = typeof provider === 'object' && provider.provide && provider.multi;
                var existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];
                this.wipe(provide);
                this.providerDef.set(provide, multi ? __spread(existing, [provider]) : provider);
            }
        }
        catch (e_19_1) { e_19 = { error: e_19_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_19) throw e_19.error; }
        }
        return this;
    };
    MockBuilderPromise.prototype.replace = function (source, destination, config) {
        if (!func_is_ng_def_1.isNgDef(destination) || !func_is_ng_def_1.isNgDef(source) || func_is_ng_def_1.isNgDef(destination, 'i') || func_is_ng_def_1.isNgDef(source, 'i')) {
            throw new Error('Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe, for Providers use `.mock` or `.provide`');
        }
        this.wipe(source);
        this.replaceDef.add(source);
        this.defValue.set(source, destination);
        if (config) {
            this.configDef.set(source, config);
        }
        else {
            this.configDef.delete(source);
        }
        return this;
    };
    MockBuilderPromise.prototype.then = function (fulfill, reject) {
        var _this = this;
        var promise = new Promise(function (resolve) {
            var e_20, _a;
            var testBed = testing_1.TestBed.configureTestingModule(_this.build());
            try {
                for (var _b = __values(core_helpers_1.mapValues(_this.beforeCC)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var callback = _c.value;
                    callback(testBed);
                }
            }
            catch (e_20_1) { e_20 = { error: e_20_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_20) throw e_20.error; }
            }
            var testBedPromise = testBed.compileComponents();
            testBedPromise.then(function () {
                resolve({ testBed: testBed });
            });
        });
        return promise.then(fulfill, reject);
    };
    MockBuilderPromise.prototype.wipe = function (def) {
        this.defProviders.delete(def);
        this.defValue.delete(def);
        this.excludeDef.delete(def);
        this.keepDef.delete(def);
        this.mockDef.delete(def);
        this.providerDef.delete(def);
        this.replaceDef.delete(def);
    };
    return MockBuilderPromise;
}());
exports.MockBuilderPromise = MockBuilderPromise;
//# sourceMappingURL=data:application/json;base64,