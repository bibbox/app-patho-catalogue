import { InjectionToken, NgModule, Provider } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { Type } from '../common/core.types';
import { IMockBuilder, IMockBuilderConfig, IMockBuilderResult } from './types';
export declare class MockBuilderPromise implements PromiseLike<IMockBuilderResult>, IMockBuilder {
    protected beforeCC: Set<(testBed: typeof TestBed) => void>;
    protected configDef: Map<Type<any> | InjectionToken<any>, any>;
    protected defProviders: Map<Type<any> | InjectionToken<any>, Provider[]>;
    protected defValue: Map<Type<any> | InjectionToken<any>, any>;
    protected excludeDef: Set<Type<any> | InjectionToken<any>>;
    protected keepDef: Set<Type<any> | InjectionToken<any>>;
    protected mockDef: Set<Type<any> | InjectionToken<any>>;
    protected providerDef: Map<Type<any> | InjectionToken<any>, Provider>;
    protected replaceDef: Set<Type<any> | InjectionToken<any>>;
    beforeCompileComponents(callback: (testBed: typeof TestBed) => void): this;
    build(): NgModule;
    exclude(def: any): this;
    keep(input: any, config?: IMockBuilderConfig): this;
    mock(input: any, a1?: any, a2?: any): this;
    provide(def: Provider): this;
    replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this;
    then<TResult1 = IMockBuilderResult, TResult2 = never>(fulfill?: (value: IMockBuilderResult) => PromiseLike<TResult1>, reject?: (reason: any) => PromiseLike<TResult2>): PromiseLike<TResult1 | TResult2>;
    private wipe;
}
