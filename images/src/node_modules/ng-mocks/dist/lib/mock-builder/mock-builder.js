"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockBuilder = void 0;
var testing_1 = require("@angular/core/testing");
var core_helpers_1 = require("../common/core.helpers");
var core_tokens_1 = require("../common/core.tokens");
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var mock_helper_1 = require("../mock-helper/mock-helper");
var mock_builder_performance_1 = require("./mock-builder-performance");
/**
 * @see https://github.com/ike18t/ng-mocks#mockbuilder
 */
function MockBuilder(keepDeclaration, itsModuleToMock) {
    if (!testing_1.TestBed.ngMocks) {
        var configureTestingModule_1 = testing_1.TestBed.configureTestingModule;
        testing_1.TestBed.configureTestingModule = function (moduleDef) {
            var e_1, _a, e_2, _b;
            ng_mocks_universe_1.default.global.set('bullet:customized', true);
            var mocks;
            var overrides = new Map();
            try {
                for (var _c = __values(core_helpers_1.flatten(moduleDef.providers || [])), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var provide = _d.value;
                    if (typeof provide !== 'object') {
                        continue;
                    }
                    if (provide.provide === core_tokens_1.NG_MOCKS) {
                        mocks = provide.useValue;
                    }
                    if (provide.provide === core_tokens_1.NG_MOCKS_OVERRIDES) {
                        overrides = provide.useValue;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (mocks) {
                mock_helper_1.ngMocks.flushTestBed();
            }
            var testBed = configureTestingModule_1.call(testing_1.TestBed, moduleDef);
            if (!mocks) {
                return testBed;
            }
            /* istanbul ignore else */
            // Now we can apply overrides.
            if (!testing_1.TestBed.ngMocksOverrides) {
                testing_1.TestBed.ngMocksOverrides = new Set();
            }
            try {
                for (var _e = __values(core_helpers_1.mapEntries(overrides)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var _g = __read(_f.value, 2), def = _g[0], override = _g[1];
                    testing_1.TestBed.ngMocksOverrides.add(def);
                    /* istanbul ignore else */
                    if (func_is_ng_def_1.isNgDef(def, 'c')) {
                        testBed.overrideComponent(def, override);
                    }
                    else if (func_is_ng_def_1.isNgDef(def, 'd')) {
                        testBed.overrideDirective(def, override);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return testBed;
        };
        var resetTestingModule_1 = testing_1.TestBed.resetTestingModule;
        testing_1.TestBed.resetTestingModule = function () {
            var e_3, _a;
            if (ng_mocks_universe_1.default.global.has('bullet')) {
                if (ng_mocks_universe_1.default.global.has('bullet:customized')) {
                    ng_mocks_universe_1.default.global.set('bullet:reset', true);
                }
                return testing_1.TestBed;
            }
            ng_mocks_universe_1.default.global.delete('bullet:customized');
            ng_mocks_universe_1.default.global.delete('bullet:reset');
            // Thanks Ivy and its TestBed.override - it doesn't clean up leftovers.
            if (testing_1.TestBed.ngMocksOverrides) {
                mock_helper_1.ngMocks.flushTestBed();
                try {
                    for (var _b = __values(testing_1.TestBed.ngMocksOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var def = _c.value;
                        /* istanbul ignore else */
                        if (func_is_ng_def_1.isNgDef(def, 'c')) {
                            testing_1.TestBed.overrideComponent(def, {});
                        }
                        else if (func_is_ng_def_1.isNgDef(def, 'd')) {
                            testing_1.TestBed.overrideDirective(def, {});
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                testing_1.TestBed.ngMocksOverrides = undefined;
            }
            return resetTestingModule_1.call(testing_1.TestBed);
        };
        testing_1.TestBed.ngMocks = true;
    }
    var instance = new mock_builder_performance_1.MockBuilderPerformance();
    if (keepDeclaration) {
        instance.keep(keepDeclaration, {
            export: true,
        });
    }
    if (itsModuleToMock) {
        instance.mock(itsModuleToMock, {
            exportAll: true,
        });
    }
    return instance;
}
exports.MockBuilder = MockBuilder;
//# sourceMappingURL=data:application/json;base64,