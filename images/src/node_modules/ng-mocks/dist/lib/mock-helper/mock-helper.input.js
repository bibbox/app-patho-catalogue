"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_reflect_1 = require("../common/core.reflect");
var mock_helper_get_1 = require("./mock-helper.get");
var defaultNotFoundValue = {}; // simulating Symbol
exports.default = (function () {
    var e_1, _a, e_2, _b;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var el = args[0];
    var sel = args[1];
    var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
    try {
        for (var _c = __values(el.providerTokens), _d = _c.next(); !_d.done; _d = _c.next()) {
            var token = _d.value;
            var meta = void 0;
            try {
                meta = core_reflect_1.directiveResolver.resolve(token);
            }
            catch (e) {
                /* istanbul ignore next */
                throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
            }
            var inputs = meta.inputs;
            /* istanbul ignore if */
            if (!inputs) {
                continue;
            }
            try {
                for (var inputs_1 = (e_2 = void 0, __values(inputs)), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                    var inputDef = inputs_1_1.value;
                    var _e = __read(inputDef.split(':', 2).map(function (v) { return v.trim(); }), 2), prop = _e[0], _f = _e[1], alias = _f === void 0 ? '' : _f;
                    if (!alias && prop !== sel) {
                        continue;
                    }
                    if (alias && alias !== sel) {
                        continue;
                    }
                    var directive = mock_helper_get_1.default(el, token);
                    return directive[prop];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (inputs_1_1 && !inputs_1_1.done && (_b = inputs_1.return)) _b.call(inputs_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find " + sel + " input via ngMocks.input");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvbW9jay1oZWxwZXIvbW9jay1oZWxwZXIuaW5wdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSx1REFBMkQ7QUFHM0QscURBQW9DO0FBRXBDLElBQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUMsb0JBQW9CO0FBRXJELG1CQUFlOztJQUFDLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQseUJBQWM7O0lBQzVCLElBQU0sRUFBRSxHQUF1QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBTSxHQUFHLEdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLElBQU0sYUFBYSxHQUFRLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDOztRQUU5RSxLQUFvQixJQUFBLEtBQUEsU0FBQSxFQUFFLENBQUMsY0FBYyxDQUFBLGdCQUFBLDRCQUFFO1lBQWxDLElBQU0sS0FBSyxXQUFBO1lBQ2QsSUFBSSxJQUFJLFNBQWdCLENBQUM7WUFDekIsSUFBSTtnQkFDRixJQUFJLEdBQUcsZ0NBQWlCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsMEJBQTBCO2dCQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7YUFDaEY7WUFFTyxJQUFBLE1BQU0sR0FBSyxJQUFJLE9BQVQsQ0FBVTtZQUN4Qix3QkFBd0I7WUFDeEIsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxTQUFTO2FBQ1Y7O2dCQUNELEtBQXVCLElBQUEsMEJBQUEsU0FBQSxNQUFNLENBQUEsQ0FBQSw4QkFBQSxrREFBRTtvQkFBMUIsSUFBTSxRQUFRLG1CQUFBO29CQUNYLElBQUEsS0FBQSxPQUFxQixRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQVIsQ0FBUSxDQUFDLElBQUEsRUFBN0QsSUFBSSxRQUFBLEVBQUUsVUFBVSxFQUFWLEtBQUssbUJBQUcsRUFBRSxLQUE2QyxDQUFDO29CQUNyRSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7d0JBQzFCLFNBQVM7cUJBQ1Y7b0JBQ0QsSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLEdBQUcsRUFBRTt3QkFDMUIsU0FBUztxQkFDVjtvQkFDRCxJQUFNLFNBQVMsR0FBUSx5QkFBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFDdEMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3hCOzs7Ozs7Ozs7U0FDRjs7Ozs7Ozs7O0lBQ0QsSUFBSSxhQUFhLEtBQUssb0JBQW9CLEVBQUU7UUFDMUMsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFlLEdBQUcsNkJBQTBCLENBQUMsQ0FBQztBQUNoRSxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb3JlIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuXG5pbXBvcnQgeyBkaXJlY3RpdmVSZXNvbHZlciB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnJlZmxlY3QnO1xuaW1wb3J0IHsgTW9ja2VkRGVidWdFbGVtZW50IH0gZnJvbSAnLi4vbW9jay1yZW5kZXIvdHlwZXMnO1xuXG5pbXBvcnQgZ2V0IGZyb20gJy4vbW9jay1oZWxwZXIuZ2V0JztcblxuY29uc3QgZGVmYXVsdE5vdEZvdW5kVmFsdWUgPSB7fTsgLy8gc2ltdWxhdGluZyBTeW1ib2xcblxuZXhwb3J0IGRlZmF1bHQgKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVsOiBNb2NrZWREZWJ1Z0VsZW1lbnQgPSBhcmdzWzBdO1xuICBjb25zdCBzZWw6IHN0cmluZyA9IGFyZ3NbMV07XG4gIGNvbnN0IG5vdEZvdW5kVmFsdWU6IGFueSA9IGFyZ3MubGVuZ3RoID09PSAzID8gYXJnc1syXSA6IGRlZmF1bHROb3RGb3VuZFZhbHVlO1xuXG4gIGZvciAoY29uc3QgdG9rZW4gb2YgZWwucHJvdmlkZXJUb2tlbnMpIHtcbiAgICBsZXQgbWV0YTogY29yZS5EaXJlY3RpdmU7XG4gICAgdHJ5IHtcbiAgICAgIG1ldGEgPSBkaXJlY3RpdmVSZXNvbHZlci5yZXNvbHZlKHRva2VuKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCduZy1tb2NrcyBpcyBub3QgaW4gSklUIG1vZGUgYW5kIGNhbm5vdCByZXNvbHZlIGRlY2xhcmF0aW9ucycpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaW5wdXRzIH0gPSBtZXRhO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5wdXRzKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpbnB1dERlZiBvZiBpbnB1dHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wLCBhbGlhcyA9ICcnXSA9IGlucHV0RGVmLnNwbGl0KCc6JywgMikubWFwKHYgPT4gdi50cmltKCkpO1xuICAgICAgaWYgKCFhbGlhcyAmJiBwcm9wICE9PSBzZWwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoYWxpYXMgJiYgYWxpYXMgIT09IHNlbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpcmVjdGl2ZTogYW55ID0gZ2V0KGVsLCB0b2tlbik7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlW3Byb3BdO1xuICAgIH1cbiAgfVxuICBpZiAobm90Rm91bmRWYWx1ZSAhPT0gZGVmYXVsdE5vdEZvdW5kVmFsdWUpIHtcbiAgICByZXR1cm4gbm90Rm91bmRWYWx1ZTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kICR7c2VsfSBpbnB1dCB2aWEgbmdNb2Nrcy5pbnB1dGApO1xufTtcbiJdfQ==