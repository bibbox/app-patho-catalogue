"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_1 = require("../common/core.reflect");
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var mock_component_1 = require("../mock-component/mock-component");
var mock_directive_1 = require("../mock-directive/mock-directive");
var mock_module_1 = require("../mock-module/mock-module");
var mock_pipe_1 = require("../mock-pipe/mock-pipe");
var mock_provider_1 = require("../mock-service/mock-provider");
exports.default = (function (keep, mock, exclude) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
    if (mock === void 0) { mock = null; }
    if (exclude === void 0) { exclude = null; }
    var declarations = [];
    var imports = [];
    var providers = [];
    var keepFlat = [];
    try {
        for (var _f = __values(keep ? core_helpers_1.flatten(keep) : []), _g = _f.next(); !_g.done; _g = _f.next()) {
            var def = _g.value;
            if (keepFlat.indexOf(def) === -1) {
                keepFlat.push(def);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var mockFlat = [];
    try {
        for (var _h = __values(mock ? core_helpers_1.flatten(mock) : []), _j = _h.next(); !_j.done; _j = _h.next()) {
            var def = _j.value;
            if (mockFlat.indexOf(def) === -1) {
                mockFlat.push(def);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
        }
        finally { if (e_2) throw e_2.error; }
    }
    var excludeFlat = [];
    try {
        for (var _k = __values(exclude ? core_helpers_1.flatten(exclude) : []), _l = _k.next(); !_l.done; _l = _k.next()) {
            var def = _l.value;
            if (excludeFlat.indexOf(def) === -1) {
                excludeFlat.push(def);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var skip = [];
    var resolveProvider = function (def) {
        var provider = typeof def === 'object' && def.provide ? def.provide : def;
        if (skip.indexOf(provider) === -1) {
            skip.push(provider);
        }
        if (excludeFlat.indexOf(provider) !== -1) {
            return;
        }
        var providerDef = keepFlat.indexOf(provider) === -1 ? mock_provider_1.default(def) : def;
        if (providerDef) {
            providers.push(providerDef);
        }
    };
    var resolve = function (def, skipDestruction) {
        var e_6, _a, e_7, _b;
        if (skipDestruction === void 0) { skipDestruction = true; }
        if (!def) {
            return;
        }
        if (func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(def)) {
            if (skip.indexOf(def.ngModule) !== -1) {
                return;
            }
            skip.push(def.ngModule);
            if (excludeFlat.indexOf(def.ngModule) !== -1) {
                return;
            }
            imports.push(keepFlat.indexOf(def.ngModule) === -1 ? mock_module_1.MockModule(def) : def);
            return;
        }
        if (func_is_ng_def_1.isNgDef(def, 'm') && keepFlat.indexOf(def) !== -1) {
            if (skip.indexOf(def) !== -1) {
                return;
            }
            skip.push(def);
            if (excludeFlat.indexOf(def) !== -1) {
                return;
            }
            imports.push(def);
            return;
        }
        if (func_is_ng_def_1.isNgDef(def, 'm') && skipDestruction && keepFlat.indexOf(def) === -1) {
            if (skip.indexOf(def) !== -1) {
                return;
            }
            skip.push(def);
            if (excludeFlat.indexOf(def) !== -1) {
                return;
            }
            imports.push(mock_module_1.MockModule(def));
            return;
        }
        if (func_is_ng_def_1.isNgDef(def, 'm') && keepFlat.indexOf(def) === -1) {
            /* istanbul ignore if: unreachable due to the skipDestruction flag */
            if (skip.indexOf(def) !== -1) {
                return;
            }
            skip.push(def);
            if (excludeFlat.indexOf(def) !== -1) {
                return;
            }
            var meta = void 0;
            try {
                meta = core_reflect_1.ngModuleResolver.resolve(def);
            }
            catch (e) {
                /* istanbul ignore next */
                throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
            }
            try {
                for (var _c = __values(core_helpers_1.flatten([meta.declarations, meta.imports])), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var toMock = _d.value;
                    resolve(toMock);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_6) throw e_6.error; }
            }
            try {
                for (var _e = __values(meta.providers ? core_helpers_1.flatten(meta.providers) : []), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var toMock = _f.value;
                    resolveProvider(toMock);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_7) throw e_7.error; }
            }
            return;
        }
        if (func_is_ng_def_1.isNgDef(def, 'c')) {
            if (skip.indexOf(def) !== -1) {
                return;
            }
            skip.push(def);
            if (excludeFlat.indexOf(def) !== -1) {
                return;
            }
            declarations.push(keepFlat.indexOf(def) === -1 ? mock_component_1.MockComponent(def) : def);
            return;
        }
        if (func_is_ng_def_1.isNgDef(def, 'd')) {
            if (skip.indexOf(def) !== -1) {
                return;
            }
            skip.push(def);
            if (excludeFlat.indexOf(def) !== -1) {
                return;
            }
            declarations.push(keepFlat.indexOf(def) === -1 ? mock_directive_1.MockDirective(def) : def);
            return;
        }
        if (func_is_ng_def_1.isNgDef(def, 'p')) {
            if (skip.indexOf(def) !== -1) {
                return;
            }
            skip.push(def);
            if (excludeFlat.indexOf(def) !== -1) {
                return;
            }
            declarations.push(keepFlat.indexOf(def) === -1 ? mock_pipe_1.MockPipe(def) : def);
            return;
        }
        resolveProvider(def);
    };
    try {
        for (var mockFlat_1 = __values(mockFlat), mockFlat_1_1 = mockFlat_1.next(); !mockFlat_1_1.done; mockFlat_1_1 = mockFlat_1.next()) {
            var def = mockFlat_1_1.value;
            resolve(def, false);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (mockFlat_1_1 && !mockFlat_1_1.done && (_d = mockFlat_1.return)) _d.call(mockFlat_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    try {
        for (var keepFlat_1 = __values(keepFlat), keepFlat_1_1 = keepFlat_1.next(); !keepFlat_1_1.done; keepFlat_1_1 = keepFlat_1.next()) {
            var def = keepFlat_1_1.value;
            if (skip.indexOf(def) !== -1) {
                continue;
            }
            if (excludeFlat.indexOf(def) !== -1) {
                continue;
            }
            if (func_is_ng_def_1.isNgDef(def, 'm')) {
                imports.push(def);
                continue;
            }
            if (func_is_ng_def_1.isNgDef(def, 'c')) {
                declarations.push(def);
                continue;
            }
            if (func_is_ng_def_1.isNgDef(def, 'd')) {
                declarations.push(def);
                continue;
            }
            if (func_is_ng_def_1.isNgDef(def, 'p')) {
                declarations.push(def);
                providers.push(def);
                continue;
            }
            if (func_is_ng_injection_token_1.isNgInjectionToken(def)) {
                continue;
            }
            providers.push(def);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (keepFlat_1_1 && !keepFlat_1_1.done && (_e = keepFlat_1.return)) _e.call(keepFlat_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return {
        declarations: declarations,
        imports: imports,
        providers: providers,
    };
});
//# sourceMappingURL=data:application/json;base64,