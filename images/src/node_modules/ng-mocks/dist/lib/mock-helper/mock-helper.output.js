"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_reflect_1 = require("../common/core.reflect");
var mock_helper_get_1 = require("./mock-helper.get");
var defaultNotFoundValue = {}; // simulating Symbol
exports.default = (function () {
    var e_1, _a, e_2, _b;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var el = args[0];
    var sel = args[1];
    var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
    try {
        for (var _c = __values(el.providerTokens), _d = _c.next(); !_d.done; _d = _c.next()) {
            var token = _d.value;
            var meta = void 0;
            try {
                meta = core_reflect_1.directiveResolver.resolve(token);
            }
            catch (e) {
                /* istanbul ignore next */
                throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
            }
            var outputs = meta.outputs;
            /* istanbul ignore if */
            if (!outputs) {
                continue;
            }
            try {
                for (var outputs_1 = (e_2 = void 0, __values(outputs)), outputs_1_1 = outputs_1.next(); !outputs_1_1.done; outputs_1_1 = outputs_1.next()) {
                    var outputDef = outputs_1_1.value;
                    var _e = __read(outputDef.split(':', 2).map(function (v) { return v.trim(); }), 2), prop = _e[0], _f = _e[1], alias = _f === void 0 ? '' : _f;
                    if (!alias && prop !== sel) {
                        continue;
                    }
                    if (alias && alias !== sel) {
                        continue;
                    }
                    var directive = mock_helper_get_1.default(el, token);
                    return directive[prop];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (outputs_1_1 && !outputs_1_1.done && (_b = outputs_1.return)) _b.call(outputs_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find " + sel + " output via ngMocks.output");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIub3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21vY2staGVscGVyL21vY2staGVscGVyLm91dHB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLHVEQUEyRDtBQUczRCxxREFBb0M7QUFFcEMsSUFBTSxvQkFBb0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7QUFFckQsbUJBQWU7O0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDNUIsSUFBTSxFQUFFLEdBQXVCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxJQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsSUFBTSxhQUFhLEdBQVEsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUM7O1FBRTlFLEtBQW9CLElBQUEsS0FBQSxTQUFBLEVBQUUsQ0FBQyxjQUFjLENBQUEsZ0JBQUEsNEJBQUU7WUFBbEMsSUFBTSxLQUFLLFdBQUE7WUFDZCxJQUFJLElBQUksU0FBZ0IsQ0FBQztZQUN6QixJQUFJO2dCQUNGLElBQUksR0FBRyxnQ0FBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekM7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDViwwQkFBMEI7Z0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkRBQTZELENBQUMsQ0FBQzthQUNoRjtZQUVPLElBQUEsT0FBTyxHQUFLLElBQUksUUFBVCxDQUFVO1lBQ3pCLHdCQUF3QjtZQUN4QixJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLFNBQVM7YUFDVjs7Z0JBQ0QsS0FBd0IsSUFBQSwyQkFBQSxTQUFBLE9BQU8sQ0FBQSxDQUFBLGdDQUFBLHFEQUFFO29CQUE1QixJQUFNLFNBQVMsb0JBQUE7b0JBQ1osSUFBQSxLQUFBLE9BQXFCLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBUixDQUFRLENBQUMsSUFBQSxFQUE5RCxJQUFJLFFBQUEsRUFBRSxVQUFVLEVBQVYsS0FBSyxtQkFBRyxFQUFFLEtBQThDLENBQUM7b0JBQ3RFLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRTt3QkFDMUIsU0FBUztxQkFDVjtvQkFDRCxJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFO3dCQUMxQixTQUFTO3FCQUNWO29CQUNELElBQU0sU0FBUyxHQUFRLHlCQUFHLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUN0QyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDeEI7Ozs7Ozs7OztTQUNGOzs7Ozs7Ozs7SUFDRCxJQUFJLGFBQWEsS0FBSyxvQkFBb0IsRUFBRTtRQUMxQyxPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWUsR0FBRywrQkFBNEIsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvcmUgfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5cbmltcG9ydCB7IGRpcmVjdGl2ZVJlc29sdmVyIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUucmVmbGVjdCc7XG5pbXBvcnQgeyBNb2NrZWREZWJ1Z0VsZW1lbnQgfSBmcm9tICcuLi9tb2NrLXJlbmRlci90eXBlcyc7XG5cbmltcG9ydCBnZXQgZnJvbSAnLi9tb2NrLWhlbHBlci5nZXQnO1xuXG5jb25zdCBkZWZhdWx0Tm90Rm91bmRWYWx1ZSA9IHt9OyAvLyBzaW11bGF0aW5nIFN5bWJvbFxuXG5leHBvcnQgZGVmYXVsdCAoLi4uYXJnczogYW55W10pID0+IHtcbiAgY29uc3QgZWw6IE1vY2tlZERlYnVnRWxlbWVudCA9IGFyZ3NbMF07XG4gIGNvbnN0IHNlbDogc3RyaW5nID0gYXJnc1sxXTtcbiAgY29uc3Qgbm90Rm91bmRWYWx1ZTogYW55ID0gYXJncy5sZW5ndGggPT09IDMgPyBhcmdzWzJdIDogZGVmYXVsdE5vdEZvdW5kVmFsdWU7XG5cbiAgZm9yIChjb25zdCB0b2tlbiBvZiBlbC5wcm92aWRlclRva2Vucykge1xuICAgIGxldCBtZXRhOiBjb3JlLkRpcmVjdGl2ZTtcbiAgICB0cnkge1xuICAgICAgbWV0YSA9IGRpcmVjdGl2ZVJlc29sdmVyLnJlc29sdmUodG9rZW4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25nLW1vY2tzIGlzIG5vdCBpbiBKSVQgbW9kZSBhbmQgY2Fubm90IHJlc29sdmUgZGVjbGFyYXRpb25zJyk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBvdXRwdXRzIH0gPSBtZXRhO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghb3V0cHV0cykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgb3V0cHV0RGVmIG9mIG91dHB1dHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wLCBhbGlhcyA9ICcnXSA9IG91dHB1dERlZi5zcGxpdCgnOicsIDIpLm1hcCh2ID0+IHYudHJpbSgpKTtcbiAgICAgIGlmICghYWxpYXMgJiYgcHJvcCAhPT0gc2VsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGFsaWFzICYmIGFsaWFzICE9PSBzZWwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkaXJlY3RpdmU6IGFueSA9IGdldChlbCwgdG9rZW4pO1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZVtwcm9wXTtcbiAgICB9XG4gIH1cbiAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IGRlZmF1bHROb3RGb3VuZFZhbHVlKSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCAke3NlbH0gb3V0cHV0IHZpYSBuZ01vY2tzLm91dHB1dGApO1xufTtcbiJdfQ==