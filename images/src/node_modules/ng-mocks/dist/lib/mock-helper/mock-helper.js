"use strict";
// tslint:disable:variable-name
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngMocks = exports.MockHelper = void 0;
var mock_helper_faster_1 = require("./mock-helper.faster");
var mock_helper_find_1 = require("./mock-helper.find");
var mock_helper_findAll_1 = require("./mock-helper.findAll");
var mock_helper_findInstance_1 = require("./mock-helper.findInstance");
var mock_helper_findInstances_1 = require("./mock-helper.findInstances");
var mock_helper_flushTestBed_1 = require("./mock-helper.flushTestBed");
var mock_helper_get_1 = require("./mock-helper.get");
var mock_helper_guts_1 = require("./mock-helper.guts");
var mock_helper_input_1 = require("./mock-helper.input");
var mock_helper_output_1 = require("./mock-helper.output");
var mock_helper_reset_1 = require("./mock-helper.reset");
var mock_helper_stub_1 = require("./mock-helper.stub");
/* istanbul ignore next */
/**
 * @deprecated use ngMocks instead
 */
exports.MockHelper = {
    getInput: function (debugNode, input) { return exports.ngMocks.input(debugNode, input, undefined); },
    getInputOrFail: function (debugNode, input) { return exports.ngMocks.input(debugNode, input); },
    getOutput: function (debugNode, output) { return exports.ngMocks.output(debugNode, output, undefined); },
    getOutputOrFail: function (debugNode, output) { return exports.ngMocks.output(debugNode, output); },
    getDirectiveOrFail: function (debugNode, directive) { return exports.ngMocks.get(debugNode, directive); },
    getDirective: function (debugNode, directive) {
        return exports.ngMocks.get(debugNode, directive, undefined);
    },
    findDirectiveOrFail: function (debugNode, directive) {
        return exports.ngMocks.findInstance(debugNode, directive);
    },
    findDirective: function (debugNode, directive) {
        return exports.ngMocks.findInstance(debugNode, directive, undefined);
    },
    findDirectives: function (debugNode, directive) {
        return exports.ngMocks.findInstances(debugNode, directive);
    },
    findOrFail: function (el, sel) { return exports.ngMocks.find(el, sel); },
    // tslint:disable-next-line:no-null-keyword
    find: function (el, sel) { return exports.ngMocks.find(el, sel, null); },
    findAll: function (el, sel) { return exports.ngMocks.findAll(el, sel); },
    mockService: function (instance, override, style) {
        if (typeof override !== 'object') {
            return exports.ngMocks.stub(instance, override, style);
        }
        return exports.ngMocks.stub(instance, override);
    },
};
/**
 * @see https://github.com/ike18t/ng-mocks#ngmocks
 */
exports.ngMocks = {
    faster: mock_helper_faster_1.default,
    find: mock_helper_find_1.default,
    findAll: mock_helper_findAll_1.default,
    findInstance: mock_helper_findInstance_1.default,
    findInstances: mock_helper_findInstances_1.default,
    flushTestBed: mock_helper_flushTestBed_1.default,
    get: mock_helper_get_1.default,
    guts: mock_helper_guts_1.default,
    input: mock_helper_input_1.default,
    output: mock_helper_output_1.default,
    reset: mock_helper_reset_1.default,
    stub: mock_helper_stub_1.default,
};
//# sourceMappingURL=data:application/json;base64,