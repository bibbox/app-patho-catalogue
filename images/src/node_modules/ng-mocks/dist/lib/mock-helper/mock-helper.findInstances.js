"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var func_get_source_of_mock_1 = require("../common/func.get-source-of-mock");
var func_get_last_fixture_1 = require("./func.get-last-fixture");
function nestedCheck(result, node, callback) {
    var element = callback(node);
    if (element) {
        result.push(element);
    }
    var childNodes = (node === null || node === void 0 ? void 0 : node.childNodes) || [];
    childNodes.forEach(function (childNode) {
        nestedCheck(result, childNode, callback);
    });
}
exports.default = (function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var el = typeof args[0] !== 'object' ? undefined : args[0].debugElement ? args[0].debugElement : args[0];
    var sel = el ? args[1] : args[0];
    var debugElement = el || ((_a = func_get_last_fixture_1.default()) === null || _a === void 0 ? void 0 : _a.debugElement);
    var result = [];
    nestedCheck(result, debugElement, function (node) {
        try {
            return node.injector.get(func_get_source_of_mock_1.getSourceOfMock(sel));
        }
        catch (error) {
            return undefined;
        }
    });
    return result;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuZmluZEluc3RhbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2NrLWhlbHBlci9tb2NrLWhlbHBlci5maW5kSW5zdGFuY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkVBQW9FO0FBR3BFLGlFQUFxRDtBQUVyRCxTQUFTLFdBQVcsQ0FDbEIsTUFBVyxFQUNYLElBQTBELEVBQzFELFFBQWtEO0lBRWxELElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEI7SUFDRCxJQUFNLFVBQVUsR0FBRyxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxVQUFVLEtBQUksRUFBRSxDQUFDO0lBQzFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO1FBQzFCLFdBQVcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELG1CQUFlOztJQUFJLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQseUJBQWM7O0lBQy9CLElBQU0sRUFBRSxHQUNOLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEcsSUFBTSxHQUFHLEdBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU5QyxJQUFNLFlBQVksR0FBRyxFQUFFLFdBQUksK0JBQWMsRUFBRSwwQ0FBRSxZQUFZLENBQUEsQ0FBQztJQUUxRCxJQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7SUFDdkIsV0FBVyxDQUFJLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBQSxJQUFJO1FBQ3ZDLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHlDQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9jb21tb24vY29yZS50eXBlcyc7XG5pbXBvcnQgeyBnZXRTb3VyY2VPZk1vY2sgfSBmcm9tICcuLi9jb21tb24vZnVuYy5nZXQtc291cmNlLW9mLW1vY2snO1xuaW1wb3J0IHsgTW9ja2VkRGVidWdFbGVtZW50LCBNb2NrZWREZWJ1Z05vZGUgfSBmcm9tICcuLi9tb2NrLXJlbmRlci90eXBlcyc7XG5cbmltcG9ydCBnZXRMYXN0Rml4dHVyZSBmcm9tICcuL2Z1bmMuZ2V0LWxhc3QtZml4dHVyZSc7XG5cbmZ1bmN0aW9uIG5lc3RlZENoZWNrPFQ+KFxuICByZXN1bHQ6IFRbXSxcbiAgbm9kZTogTW9ja2VkRGVidWdOb2RlICYgeyBjaGlsZE5vZGVzPzogTW9ja2VkRGVidWdOb2RlW10gfSxcbiAgY2FsbGJhY2s6IChub2RlOiBNb2NrZWREZWJ1Z05vZGUpID0+IHVuZGVmaW5lZCB8IFRcbikge1xuICBjb25zdCBlbGVtZW50ID0gY2FsbGJhY2sobm9kZSk7XG4gIGlmIChlbGVtZW50KSB7XG4gICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gIH1cbiAgY29uc3QgY2hpbGROb2RlcyA9IG5vZGU/LmNoaWxkTm9kZXMgfHwgW107XG4gIGNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgIG5lc3RlZENoZWNrKHJlc3VsdCwgY2hpbGROb2RlLCBjYWxsYmFjayk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCA8VD4oLi4uYXJnczogYW55W10pOiBUW10gPT4ge1xuICBjb25zdCBlbDogdW5kZWZpbmVkIHwgTW9ja2VkRGVidWdFbGVtZW50ID1cbiAgICB0eXBlb2YgYXJnc1swXSAhPT0gJ29iamVjdCcgPyB1bmRlZmluZWQgOiBhcmdzWzBdLmRlYnVnRWxlbWVudCA/IGFyZ3NbMF0uZGVidWdFbGVtZW50IDogYXJnc1swXTtcbiAgY29uc3Qgc2VsOiBUeXBlPGFueT4gPSBlbCA/IGFyZ3NbMV0gOiBhcmdzWzBdO1xuXG4gIGNvbnN0IGRlYnVnRWxlbWVudCA9IGVsIHx8IGdldExhc3RGaXh0dXJlKCk/LmRlYnVnRWxlbWVudDtcblxuICBjb25zdCByZXN1bHQ6IFRbXSA9IFtdO1xuICBuZXN0ZWRDaGVjazxUPihyZXN1bHQsIGRlYnVnRWxlbWVudCwgbm9kZSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBub2RlLmluamVjdG9yLmdldChnZXRTb3VyY2VPZk1vY2soc2VsKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXX0=