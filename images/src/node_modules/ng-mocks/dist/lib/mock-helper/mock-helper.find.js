"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var platform_browser_1 = require("@angular/platform-browser");
var func_get_source_of_mock_1 = require("../common/func.get-source-of-mock");
var func_get_last_fixture_1 = require("./func.get-last-fixture");
var defaultNotFoundValue = {}; // simulating Symbol
exports.default = (function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var el = typeof args[0] !== 'object' ? undefined : args[0].debugElement ? args[0].debugElement : args[0];
    var sel = el ? args[1] : args[0];
    var notFoundValue = el && args.length === 3 ? args[2] : !el && args.length === 2 ? args[1] : defaultNotFoundValue;
    var debugElement = el || ((_a = func_get_last_fixture_1.default()) === null || _a === void 0 ? void 0 : _a.debugElement);
    var term = typeof sel === 'string' ? platform_browser_1.By.css(sel) : platform_browser_1.By.directive(func_get_source_of_mock_1.getSourceOfMock(sel));
    var result = debugElement === null || debugElement === void 0 ? void 0 : debugElement.query(term);
    if (result) {
        return result;
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find an element via ngMocks.find(" + (typeof sel === 'string' ? sel : sel.name) + ")");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuZmluZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2NrLWhlbHBlci9tb2NrLWhlbHBlci5maW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOERBQStDO0FBRy9DLDZFQUFvRTtBQUdwRSxpRUFBcUQ7QUFFckQsSUFBTSxvQkFBb0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7QUFFckQsbUJBQWU7O0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDNUIsSUFBTSxFQUFFLEdBQ04sT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRyxJQUFNLEdBQUcsR0FBdUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxJQUFNLGFBQWEsR0FDakIsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO0lBRWhHLElBQU0sWUFBWSxHQUFHLEVBQUUsV0FBSSwrQkFBYyxFQUFFLDBDQUFFLFlBQVksQ0FBQSxDQUFDO0lBRTFELElBQU0sSUFBSSxHQUFHLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFFLENBQUMsU0FBUyxDQUFDLHlDQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RixJQUFNLE1BQU0sR0FBRyxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLElBQUksTUFBTSxFQUFFO1FBQ1YsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELElBQUksYUFBYSxLQUFLLG9CQUFvQixFQUFFO1FBQzFDLE9BQU8sYUFBYSxDQUFDO0tBQ3RCO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBMkMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQUcsQ0FBQyxDQUFDO0FBQzFHLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9jb21tb24vY29yZS50eXBlcyc7XG5pbXBvcnQgeyBnZXRTb3VyY2VPZk1vY2sgfSBmcm9tICcuLi9jb21tb24vZnVuYy5nZXQtc291cmNlLW9mLW1vY2snO1xuaW1wb3J0IHsgTW9ja2VkRGVidWdFbGVtZW50IH0gZnJvbSAnLi4vbW9jay1yZW5kZXIvdHlwZXMnO1xuXG5pbXBvcnQgZ2V0TGFzdEZpeHR1cmUgZnJvbSAnLi9mdW5jLmdldC1sYXN0LWZpeHR1cmUnO1xuXG5jb25zdCBkZWZhdWx0Tm90Rm91bmRWYWx1ZSA9IHt9OyAvLyBzaW11bGF0aW5nIFN5bWJvbFxuXG5leHBvcnQgZGVmYXVsdCAoLi4uYXJnczogYW55W10pID0+IHtcbiAgY29uc3QgZWw6IHVuZGVmaW5lZCB8IE1vY2tlZERlYnVnRWxlbWVudCA9XG4gICAgdHlwZW9mIGFyZ3NbMF0gIT09ICdvYmplY3QnID8gdW5kZWZpbmVkIDogYXJnc1swXS5kZWJ1Z0VsZW1lbnQgPyBhcmdzWzBdLmRlYnVnRWxlbWVudCA6IGFyZ3NbMF07XG4gIGNvbnN0IHNlbDogc3RyaW5nIHwgVHlwZTxhbnk+ID0gZWwgPyBhcmdzWzFdIDogYXJnc1swXTtcbiAgY29uc3Qgbm90Rm91bmRWYWx1ZTogYW55ID1cbiAgICBlbCAmJiBhcmdzLmxlbmd0aCA9PT0gMyA/IGFyZ3NbMl0gOiAhZWwgJiYgYXJncy5sZW5ndGggPT09IDIgPyBhcmdzWzFdIDogZGVmYXVsdE5vdEZvdW5kVmFsdWU7XG5cbiAgY29uc3QgZGVidWdFbGVtZW50ID0gZWwgfHwgZ2V0TGFzdEZpeHR1cmUoKT8uZGVidWdFbGVtZW50O1xuXG4gIGNvbnN0IHRlcm0gPSB0eXBlb2Ygc2VsID09PSAnc3RyaW5nJyA/IEJ5LmNzcyhzZWwpIDogQnkuZGlyZWN0aXZlKGdldFNvdXJjZU9mTW9jayhzZWwpKTtcbiAgY29uc3QgcmVzdWx0ID0gZGVidWdFbGVtZW50Py5xdWVyeSh0ZXJtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IGRlZmF1bHROb3RGb3VuZFZhbHVlKSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBhbiBlbGVtZW50IHZpYSBuZ01vY2tzLmZpbmQoJHt0eXBlb2Ygc2VsID09PSAnc3RyaW5nJyA/IHNlbCA6IHNlbC5uYW1lfSlgKTtcbn07XG4iXX0=