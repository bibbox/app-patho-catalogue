"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var func_get_source_of_mock_1 = require("../common/func.get-source-of-mock");
var defaultNotFoundValue = {}; // simulating Symbol
exports.default = (function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var el = args[0];
    var sel = args[1];
    var notFoundValue = args.length === 3 ? args[2] : defaultNotFoundValue;
    // Looking for related attribute directive.
    try {
        return el.injector.get(func_get_source_of_mock_1.getSourceOfMock(sel));
    }
    catch (error) {
        // looks like the directive is structural.
    }
    // Looking for related structural directive.
    // It's located as prev node.
    var prevNode = el.nativeNode.previousSibling;
    var matches = !prevNode || prevNode.nodeName !== '#comment' || !el || !el.parent
        ? []
        : el.parent.queryAllNodes(function (node) { return node.nativeNode === prevNode; });
    var matchedNode = matches[0];
    try {
        return matchedNode.injector.get(func_get_source_of_mock_1.getSourceOfMock(sel));
    }
    catch (error) {
        // nothing to do
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find " + sel.name + " directive via ngMocks.get");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21vY2staGVscGVyL21vY2staGVscGVyLmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDZFQUFvRTtBQUdwRSxJQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQjtBQUVyRCxtQkFBZTtJQUFJLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQseUJBQWM7O0lBQy9CLElBQU0sRUFBRSxHQUF1QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBTSxHQUFHLEdBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQU0sYUFBYSxHQUFRLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO0lBRTlFLDJDQUEyQztJQUMzQyxJQUFJO1FBQ0YsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyx5Q0FBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDOUM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLDBDQUEwQztLQUMzQztJQUVELDRDQUE0QztJQUM1Qyw2QkFBNkI7SUFDN0IsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUM7SUFDL0MsSUFBTSxPQUFPLEdBQ1gsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTTtRQUNoRSxDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUSxFQUE1QixDQUE0QixDQUFDLENBQUM7SUFDcEUsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLElBQUk7UUFDRixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHlDQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN2RDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsZ0JBQWdCO0tBQ2pCO0lBQ0QsSUFBSSxhQUFhLEtBQUssb0JBQW9CLEVBQUU7UUFDMUMsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFlLEdBQUcsQ0FBQyxJQUFJLCtCQUE0QixDQUFDLENBQUM7QUFDdkUsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCB7IGdldFNvdXJjZU9mTW9jayB9IGZyb20gJy4uL2NvbW1vbi9mdW5jLmdldC1zb3VyY2Utb2YtbW9jayc7XG5pbXBvcnQgeyBNb2NrZWREZWJ1Z0VsZW1lbnQgfSBmcm9tICcuLi9tb2NrLXJlbmRlci90eXBlcyc7XG5cbmNvbnN0IGRlZmF1bHROb3RGb3VuZFZhbHVlID0ge307IC8vIHNpbXVsYXRpbmcgU3ltYm9sXG5cbmV4cG9ydCBkZWZhdWx0IDxUPiguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICBjb25zdCBlbDogTW9ja2VkRGVidWdFbGVtZW50ID0gYXJnc1swXTtcbiAgY29uc3Qgc2VsOiBUeXBlPFQ+ID0gYXJnc1sxXTtcbiAgY29uc3Qgbm90Rm91bmRWYWx1ZTogYW55ID0gYXJncy5sZW5ndGggPT09IDMgPyBhcmdzWzJdIDogZGVmYXVsdE5vdEZvdW5kVmFsdWU7XG5cbiAgLy8gTG9va2luZyBmb3IgcmVsYXRlZCBhdHRyaWJ1dGUgZGlyZWN0aXZlLlxuICB0cnkge1xuICAgIHJldHVybiBlbC5pbmplY3Rvci5nZXQoZ2V0U291cmNlT2ZNb2NrKHNlbCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIGxvb2tzIGxpa2UgdGhlIGRpcmVjdGl2ZSBpcyBzdHJ1Y3R1cmFsLlxuICB9XG5cbiAgLy8gTG9va2luZyBmb3IgcmVsYXRlZCBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZS5cbiAgLy8gSXQncyBsb2NhdGVkIGFzIHByZXYgbm9kZS5cbiAgY29uc3QgcHJldk5vZGUgPSBlbC5uYXRpdmVOb2RlLnByZXZpb3VzU2libGluZztcbiAgY29uc3QgbWF0Y2hlcyA9XG4gICAgIXByZXZOb2RlIHx8IHByZXZOb2RlLm5vZGVOYW1lICE9PSAnI2NvbW1lbnQnIHx8ICFlbCB8fCAhZWwucGFyZW50XG4gICAgICA/IFtdXG4gICAgICA6IGVsLnBhcmVudC5xdWVyeUFsbE5vZGVzKG5vZGUgPT4gbm9kZS5uYXRpdmVOb2RlID09PSBwcmV2Tm9kZSk7XG4gIGNvbnN0IG1hdGNoZWROb2RlID0gbWF0Y2hlc1swXTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbWF0Y2hlZE5vZGUuaW5qZWN0b3IuZ2V0KGdldFNvdXJjZU9mTW9jayhzZWwpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBub3RoaW5nIHRvIGRvXG4gIH1cbiAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IGRlZmF1bHROb3RGb3VuZFZhbHVlKSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCAke3NlbC5uYW1lfSBkaXJlY3RpdmUgdmlhIG5nTW9ja3MuZ2V0YCk7XG59O1xuIl19