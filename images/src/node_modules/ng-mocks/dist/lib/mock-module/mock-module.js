"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockNgDef = exports.MockModule = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_config_1 = require("../common/core.config");
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_1 = require("../common/core.reflect");
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var mock_1 = require("../common/mock");
var mock_of_1 = require("../common/mock-of");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var mock_component_1 = require("../mock-component/mock-component");
var mock_directive_1 = require("../mock-directive/mock-directive");
var mock_pipe_1 = require("../mock-pipe/mock-pipe");
var helper_1 = require("../mock-service/helper");
function MockModule(module) {
    var _a, _b;
    var ngModule;
    var ngModuleProviders;
    var mockModule;
    var mockModuleProviders;
    var mockModuleDef;
    var toggleSkipMockFlag = false;
    if (func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(module)) {
        ngModule = module.ngModule;
        if (module.providers) {
            ngModuleProviders = module.providers;
        }
    }
    else {
        ngModule = module;
    }
    // We are inside of an 'it'.
    // It's fine to to return a mock copy or to throw an exception if it wasn't replaced with its mock copy in TestBed.
    if (!ngModuleProviders && testing_1.getTestBed()._instantiated) {
        try {
            return func_get_mocked_ng_def_of_1.getMockedNgDefOf(ngModule, 'm');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    // Every module should be replaced with its mock copy only once to avoid errors like:
    // Failed: Type ...Component is part of the declarations of 2 modules: ...Module and ...Module...
    if (ng_mocks_universe_1.default.flags.has('cacheModule') && ng_mocks_universe_1.default.cacheDeclarations.has(ngModule)) {
        mockModule = ng_mocks_universe_1.default.cacheDeclarations.get(ngModule);
    }
    var resolution = (_a = ng_mocks_universe_1.default.config
        .get('resolution')) === null || _a === void 0 ? void 0 : _a.get(ngModule);
    if (resolution === 'mock' && ng_mocks_universe_1.default.flags.has('skipMock')) {
        toggleSkipMockFlag = true;
        ng_mocks_universe_1.default.flags.delete('skipMock');
    }
    if (resolution === 'keep' && !ng_mocks_universe_1.default.flags.has('skipMock')) {
        toggleSkipMockFlag = true;
        ng_mocks_universe_1.default.flags.add('skipMock');
    }
    if (resolution === 'replace' && !ng_mocks_universe_1.default.flags.has('skipMock')) {
        toggleSkipMockFlag = true;
        ng_mocks_universe_1.default.flags.add('skipMock');
    }
    if (core_config_1.default.neverMockModule.indexOf(ngModule) !== -1 && !ng_mocks_universe_1.default.flags.has('skipMock')) {
        toggleSkipMockFlag = true;
        ng_mocks_universe_1.default.flags.add('skipMock');
    }
    // Now we check if we need to keep the original module or to replace it with some other.
    if (!mockModule && ng_mocks_universe_1.default.builtDeclarations.has(ngModule)) {
        var instance = ng_mocks_universe_1.default.builtDeclarations.get(ngModule);
        if (func_is_ng_def_1.isNgDef(instance, 'm') && instance !== ngModule) {
            mockModule = instance;
        }
    }
    if (!mockModule) {
        var meta = void 0;
        try {
            meta = core_reflect_1.ngModuleResolver.resolve(ngModule);
        }
        catch (e) {
            /* istanbul ignore next */
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
        var _c = __read(MockNgDef(meta, ngModule), 2), changed = _c[0], ngModuleDef = _c[1];
        if (changed) {
            mockModuleDef = ngModuleDef;
        }
    }
    if (mockModuleDef) {
        var parent_1 = ng_mocks_universe_1.default.flags.has('skipMock') ? ngModule : mock_1.Mock;
        mockModule = core_helpers_1.extendClass(parent_1);
        // the last thing is to apply decorators.
        core_1.NgModule(mockModuleDef)(mockModule);
        mock_of_1.MockOf(ngModule)(mockModule);
    }
    if (!mockModule) {
        mockModule = ngModule;
    }
    // We should always cache the result, in global scope it always will be a mock.
    // In MockBuilder scope it will be reset later anyway.
    /* istanbul ignore else */
    if (ng_mocks_universe_1.default.flags.has('cacheModule')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(ngModule, mockModule);
    }
    if (ng_mocks_universe_1.default.flags.has('skipMock')) {
        (_b = ng_mocks_universe_1.default.config.get('depsSkip')) === null || _b === void 0 ? void 0 : _b.add(mockModule);
    }
    if (ngModuleProviders) {
        var _d = __read(MockNgDef({ providers: ngModuleProviders }), 2), changed = _d[0], ngModuleDef = _d[1];
        mockModuleProviders = changed ? ngModuleDef.providers : ngModuleProviders;
    }
    if (toggleSkipMockFlag && ng_mocks_universe_1.default.flags.has('skipMock')) {
        ng_mocks_universe_1.default.flags.delete('skipMock');
    }
    else if (toggleSkipMockFlag && !ng_mocks_universe_1.default.flags.has('skipMock')) {
        ng_mocks_universe_1.default.flags.add('skipMock');
    }
    return mockModule === ngModule && mockModuleProviders === ngModuleProviders
        ? module
        : func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(module)
            ? __assign({ ngModule: mockModule }, (mockModuleProviders ? { providers: mockModuleProviders } : {})) : mockModule;
}
exports.MockModule = MockModule;
/**
 * Can be changed at any time.
 *
 * @internal
 */
function MockNgDef(ngModuleDef, ngModule) {
    var e_1, _a;
    var changed = !ng_mocks_universe_1.default.flags.has('skipMock');
    var mockModuleDef = {};
    var _b = ngModuleDef.bootstrap, bootstrap = _b === void 0 ? [] : _b, _c = ngModuleDef.declarations, declarations = _c === void 0 ? [] : _c, _d = ngModuleDef.entryComponents, entryComponents = _d === void 0 ? [] : _d, _e = ngModuleDef.exports, exports = _e === void 0 ? [] : _e, _f = ngModuleDef.imports, imports = _f === void 0 ? [] : _f, _g = ngModuleDef.providers, providers = _g === void 0 ? [] : _g;
    var resolutions = new Map();
    // resolveProvider is a special case because of the def structure.
    var resolveProvider = function (def) {
        return helper_1.default.resolveProvider(def, resolutions, function (flag) {
            changed = changed || flag;
        });
    };
    var resolve = function (def) {
        var _a;
        var mockDef;
        if (resolutions.has(def)) {
            return resolutions.get(def);
        }
        // skipping excluded things
        if (ng_mocks_universe_1.default.builtDeclarations.has(def) && ng_mocks_universe_1.default.builtDeclarations.get(def) === null) {
            changed = changed || true;
            resolutions.set(def, undefined);
            return;
        }
        ng_mocks_universe_1.default.touches.add(func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(def) ? def.ngModule : def);
        // First we mock modules.
        if (func_is_ng_def_1.isNgDef(def, 'm')) {
            mockDef = MockModule(def);
        }
        if (!mockDef && func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(def)) {
            mockDef = MockModule(def);
            resolutions.set(def.ngModule, mockDef.ngModule);
        }
        // Then we check decisions whether we should keep or replace a def.
        if (!mockDef && ng_mocks_universe_1.default.builtDeclarations.has(def)) {
            mockDef = ng_mocks_universe_1.default.builtDeclarations.get(def);
        }
        // And then we mock what we have if it wasn't blocked by the skipMock.
        if (!mockDef && ng_mocks_universe_1.default.flags.has('skipMock')) {
            mockDef = def;
        }
        if (!mockDef && func_is_ng_def_1.isNgDef(def, 'c')) {
            mockDef = mock_component_1.MockComponent(def);
        }
        if (!mockDef && func_is_ng_def_1.isNgDef(def, 'd')) {
            mockDef = mock_directive_1.MockDirective(def);
        }
        if (!mockDef && func_is_ng_def_1.isNgDef(def, 'p')) {
            mockDef = mock_pipe_1.MockPipe(def);
        }
        if (ng_mocks_universe_1.default.flags.has('skipMock')) {
            (_a = ng_mocks_universe_1.default.config.get('depsSkip')) === null || _a === void 0 ? void 0 : _a.add(mockDef);
        }
        resolutions.set(def, mockDef);
        changed = changed || mockDef !== def;
        return mockDef;
    };
    if (declarations && declarations.length) {
        mockModuleDef.declarations = core_helpers_1.flatten(declarations)
            .map(resolve)
            .filter(function (declaration) { return declaration; });
    }
    if (entryComponents && entryComponents.length) {
        mockModuleDef.entryComponents = core_helpers_1.flatten(entryComponents)
            .map(resolve)
            .filter(function (declaration) { return declaration; });
    }
    if (bootstrap && bootstrap.length) {
        mockModuleDef.bootstrap = core_helpers_1.flatten(bootstrap)
            .map(resolve)
            .filter(function (declaration) { return declaration; });
    }
    if (providers && providers.length) {
        mockModuleDef.providers = core_helpers_1.flatten(providers)
            .map(resolveProvider)
            .filter(function (declaration) { return declaration; });
    }
    // mock imports should be the latest step before exports to ensure
    // that everything has been replaced with its mock copy already
    if (imports && imports.length) {
        mockModuleDef.imports = core_helpers_1.flatten(imports)
            .map(resolve)
            .filter(function (declaration) { return declaration; });
    }
    // Default exports.
    if (exports && exports.length) {
        mockModuleDef.exports = core_helpers_1.flatten(exports)
            .map(resolve)
            .filter(function (declaration) { return declaration; });
    }
    // if we are in the skipMock mode we need to export only the default exports.
    // if we are in the correctModuleExports mode we need to export only default exports.
    var correctExports = ng_mocks_universe_1.default.flags.has('skipMock') || ng_mocks_universe_1.default.flags.has('correctModuleExports');
    try {
        // When we mock a module, only exported declarations are accessible inside of a test.
        // Because of that we have to export whatever a module imports or declares.
        // Unfortunately, in this case tests won't fail when a module has missed exports.
        // MockBuilder doesn't have have this issue.
        for (var _h = __values(core_helpers_1.flatten([imports, declarations])), _j = _h.next(); !_j.done; _j = _h.next()) {
            var def = _j.value;
            var moduleConfig = ng_mocks_universe_1.default.config.get(ngModule) || {};
            var instance = func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders(def) ? def.ngModule : def;
            var mockDef = resolve(instance);
            if (!mockDef) {
                continue;
            }
            // If we export a declaration, then we have to export its module too.
            var config = ng_mocks_universe_1.default.config.get(instance) || {};
            if (config.export && ngModule) {
                if (!moduleConfig.export) {
                    ng_mocks_universe_1.default.config.set(ngModule, __assign(__assign({}, moduleConfig), { export: true }));
                }
            }
            if (correctExports && !config.export && !moduleConfig.exportAll) {
                continue;
            }
            if (mockModuleDef.exports && mockModuleDef.exports.indexOf(mockDef) !== -1) {
                continue;
            }
            changed = true;
            mockModuleDef.exports = mockModuleDef.exports || [];
            mockModuleDef.exports.push(mockDef);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return [changed, mockModuleDef];
}
exports.MockNgDef = MockNgDef;
//# sourceMappingURL=data:application/json;base64,