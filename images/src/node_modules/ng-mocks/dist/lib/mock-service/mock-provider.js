"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_config_1 = require("../common/core.config");
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var helper_use_factory_1 = require("./helper.use-factory");
var mock_service_1 = require("./mock-service");
var neverMockProvidedFunction = core_config_1.default.neverMockProvidedFunction, neverMockToken = core_config_1.default.neverMockToken;
function default_1(provider) {
    var provide = typeof provider === 'object' && provider.provide ? provider.provide : provider;
    if (typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1) {
        return provider;
    }
    if (func_is_ng_injection_token_1.isNgInjectionToken(provide) && neverMockToken.indexOf(provide.toString()) !== -1) {
        return undefined;
    }
    // Only pure provides should be cached to avoid their influence on
    // another different declarations.
    if (provide === provider &&
        ng_mocks_universe_1.default.flags.has('cacheProvider') &&
        ng_mocks_universe_1.default.cacheProviders.has(provide)) {
        return ng_mocks_universe_1.default.cacheProviders.get(provide);
    }
    var mockProvider;
    if (typeof provide === 'function') {
        mockProvider = helper_use_factory_1.default(provide, function () {
            var e_1, _a;
            var instance = mock_service_1.MockService(provide);
            // Magic below adds missed properties to the instance to
            // fulfill missed abstract methods.
            if (provide !== provider && Object.keys(provider).indexOf('useClass') !== -1) {
                var existing = Object.getOwnPropertyNames(instance);
                var child = mock_service_1.MockService(provider.useClass);
                try {
                    for (var _b = __values(Object.getOwnPropertyNames(child)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var name_1 = _c.value;
                        if (existing.indexOf(name_1) !== -1) {
                            continue;
                        }
                        var def = Object.getOwnPropertyDescriptor(child, name_1);
                        /* istanbul ignore else */
                        if (def) {
                            Object.defineProperty(instance, name_1, def);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return instance;
        });
    }
    if (provide === provider && mockProvider && ng_mocks_universe_1.default.flags.has('cacheProvider')) {
        ng_mocks_universe_1.default.cacheProviders.set(provide, mockProvider);
    }
    if (mockProvider) {
        return mockProvider;
    }
    // Not sure if this case is possible, all classes should be already
    // replaced with their mock coplies by the code above, below we
    // should have only tokens and string literals with a proper definition.
    if (provide === provider) {
        return undefined;
    }
    // Tokens are special subject, we can skip adding them because in a mock module they are useless.
    // The main problem is that providing undefined to HTTP_INTERCEPTORS and others breaks their code.
    // If a testing module / component requires omitted tokens then they should be provided manually
    // during creation of TestBed module.
    if (provider.multi) {
        if (ng_mocks_universe_1.default.config.has('multi')) {
            ng_mocks_universe_1.default.config.get('multi').add(provide);
        }
        return undefined;
    }
    // if a token has a primitive type, we can return its initial state.
    if (Object.keys(provider).indexOf('useValue') !== -1) {
        mockProvider =
            provider.useValue && typeof provider.useValue === 'object'
                ? helper_use_factory_1.default(provide, function () { return mock_service_1.MockService(provider.useValue); })
                : {
                    provide: provide,
                    useValue: typeof provider.useValue === 'boolean'
                        ? false
                        : typeof provider.useValue === 'number'
                            ? 0
                            : typeof provider.useValue === 'string'
                                ? ''
                                : provider.useValue === null
                                    ? null
                                    : undefined,
                };
    }
    if (!mockProvider && Object.keys(provider).indexOf('useExisting') !== -1) {
        mockProvider = provider;
    }
    if (!mockProvider && Object.keys(provider).indexOf('useClass') !== -1) {
        mockProvider =
            ng_mocks_universe_1.default.builtProviders.has(provider.useClass) &&
                ng_mocks_universe_1.default.builtProviders.get(provider.useClass) === provider.useClass
                ? provider
                : helper_use_factory_1.default(provide, function () { return mock_service_1.MockService(provider.useClass); });
    }
    if (!mockProvider && Object.keys(provider).indexOf('useFactory') !== -1) {
        mockProvider = helper_use_factory_1.default(provide, function () { return ({}); });
    }
    return mockProvider;
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,