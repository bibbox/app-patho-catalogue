"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../common/core.helpers");
var core_tokens_1 = require("../common/core.tokens");
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var helper_1 = require("./helper");
var mock_provider_1 = require("./mock-provider");
// tries to resolve a provider based on current universe state.
exports.default = (function (def, resolutions, changed) {
    var _a;
    var provider = typeof def === 'object' && def.provide ? def.provide : def;
    var multi = def !== provider && !!def.multi;
    //  we shouldn't touch our system providers.
    if (typeof def === 'object' && def.useExisting && def.useExisting.__ngMocksSkip) {
        return def;
    }
    var mockDef;
    if (resolutions.has(provider)) {
        mockDef = resolutions.get(provider);
        var existingMock = ng_mocks_universe_1.default.builtProviders.get(provider);
        if (existingMock) {
            mockDef = existingMock;
        }
        // A case when a provider is actually a component, directive, pipe.
        if (typeof mockDef === 'function') {
            mockDef = {
                provide: provider,
                useClass: mockDef,
            };
        }
        return multi && typeof mockDef === 'object' ? __assign(__assign({}, mockDef), { multi: multi }) : mockDef;
    }
    //  we shouldn't touch excluded providers.
    if (ng_mocks_universe_1.default.builtProviders.has(provider) && ng_mocks_universe_1.default.builtProviders.get(provider) === null) {
        /* istanbul ignore else */
        if (changed) {
            changed(true);
        }
        return;
    }
    if (provider !== def && def.deps) {
        core_helpers_1.extractDependency(def.deps, ng_mocks_universe_1.default.config.get('deps'));
    }
    if (ng_mocks_universe_1.default.builtProviders.has(core_tokens_1.NG_MOCKS_INTERCEPTORS) &&
        ng_mocks_universe_1.default.builtProviders.get(core_tokens_1.NG_MOCKS_INTERCEPTORS) === null &&
        func_is_ng_injection_token_1.isNgInjectionToken(provider) &&
        provider.toString() === 'InjectionToken HTTP_INTERCEPTORS' &&
        provider !== def) {
        if (def.useFactory || def.useValue) {
            /* istanbul ignore else */
            if (changed) {
                changed(true);
            }
            return;
        }
        var interceptor = def.useExisting || def.useClass;
        if (!ng_mocks_universe_1.default.builtProviders.has(interceptor) || ng_mocks_universe_1.default.builtProviders.get(interceptor) === null) {
            /* istanbul ignore else */
            if (changed) {
                changed(true);
            }
            return;
        }
    }
    // Then we check decisions whether we should keep or replace a def.
    if (ng_mocks_universe_1.default.builtProviders.has(provider)) {
        mockDef = ng_mocks_universe_1.default.builtProviders.get(provider);
        if (mockDef === provider) {
            mockDef = def;
        }
        else if (mockDef === undefined) {
            mockDef = {
                provide: provider,
                useValue: undefined,
            };
        }
    }
    if (!mockDef && ng_mocks_universe_1.default.flags.has('skipMock')) {
        (_a = ng_mocks_universe_1.default.config.get('depsSkip')) === null || _a === void 0 ? void 0 : _a.add(provider);
        mockDef = def;
    }
    if (!mockDef) {
        mockDef = mock_provider_1.default(def);
    }
    // if provider is a value, we need to go through the value and to replace all mock instances.
    if (provider !== def && mockDef && mockDef.useValue) {
        var useValue = helper_1.default.replaceWithMocks(mockDef.useValue);
        mockDef =
            useValue === mockDef.useValue
                ? mockDef
                : __assign(__assign({}, mockDef), { useValue: useValue });
    }
    if (!func_is_ng_injection_token_1.isNgInjectionToken(provider) || def !== mockDef) {
        resolutions.set(provider, mockDef);
    }
    var differs = false;
    if (def === provider && mockDef !== def) {
        differs = true;
    }
    else if (def !== provider &&
        (!mockDef ||
            def.provide !== mockDef.provide ||
            def.useValue !== mockDef.useValue ||
            def.useClass !== mockDef.useClass ||
            def.useExisting !== mockDef.useExisting ||
            def.useFactory !== mockDef.useFactory ||
            def.deps !== mockDef.deps)) {
        differs = true;
    }
    if (changed && differs) {
        changed(true);
    }
    // Touching only when we really provide a value.
    if (mockDef) {
        ng_mocks_universe_1.default.touches.add(provider);
    }
    return multi && typeof mockDef === 'object' ? __assign(__assign({}, mockDef), { multi: multi }) : mockDef;
});
//# sourceMappingURL=data:application/json;base64,