"use strict";
// tslint:disable:no-misused-new unified-signatures
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockService = void 0;
var func_is_class_1 = require("./func.is-class");
var func_is_func_1 = require("./func.is-func");
var func_is_inst_1 = require("./func.is-inst");
var helper_1 = require("./helper");
function MockService(service, mockNamePrefix) {
    var e_1, _a;
    // mocking all methods / properties of a class / object.
    var value;
    if (func_is_class_1.default(service)) {
        value = helper_1.default.createMockFromPrototype(service.prototype);
    }
    else if (func_is_func_1.default(service)) {
        value = helper_1.default.mockFunction("func:" + (mockNamePrefix ? mockNamePrefix : service.name || 'arrow-function'));
    }
    else if (Array.isArray(service)) {
        value = [];
    }
    else if (func_is_inst_1.default(service)) {
        value = helper_1.default.createMockFromPrototype(service.constructor.prototype);
        try {
            for (var _b = __values(Object.keys(service)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                var mock = MockService(service[property], (mockNamePrefix ? mockNamePrefix : 'instance') + "." + property);
                if (mock !== undefined) {
                    value[property] = mock;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        Object.setPrototypeOf(value, Object.getPrototypeOf(service));
    }
    return value;
}
exports.MockService = MockService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21vY2stc2VydmljZS9tb2NrLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1EQUFtRDs7Ozs7Ozs7Ozs7Ozs7QUFFbkQsaURBQXNDO0FBQ3RDLCtDQUFvQztBQUNwQywrQ0FBb0M7QUFDcEMsbUNBQXlDO0FBZ0J6QyxTQUFnQixXQUFXLENBQUMsT0FBWSxFQUFFLGNBQXVCOztJQUMvRCx3REFBd0Q7SUFDeEQsSUFBSSxLQUFVLENBQUM7SUFDZixJQUFJLHVCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDcEIsS0FBSyxHQUFHLGdCQUFpQixDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN0RTtTQUFNLElBQUksc0JBQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMxQixLQUFLLEdBQUcsZ0JBQWlCLENBQUMsWUFBWSxDQUNwQyxXQUFRLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLGdCQUFnQixDQUFFLENBQzdFLENBQUM7S0FDSDtTQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNqQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0tBQ1o7U0FBTSxJQUFJLHNCQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDMUIsS0FBSyxHQUFHLGdCQUFpQixDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7O1lBQ2pGLEtBQXVCLElBQUEsS0FBQSxTQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQXhDLElBQU0sUUFBUSxXQUFBO2dCQUNqQixJQUFNLElBQUksR0FBUSxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFVBQVUsVUFBSSxRQUFVLENBQUMsQ0FBQztnQkFDaEgsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO29CQUN0QixLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO2lCQUN4QjthQUNGOzs7Ozs7Ozs7UUFDRCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDOUQ7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUF2QkQsa0NBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6bm8tbWlzdXNlZC1uZXcgdW5pZmllZC1zaWduYXR1cmVzXG5cbmltcG9ydCBpc0NsYXNzIGZyb20gJy4vZnVuYy5pcy1jbGFzcyc7XG5pbXBvcnQgaXNGdW5jIGZyb20gJy4vZnVuYy5pcy1mdW5jJztcbmltcG9ydCBpc0luc3QgZnJvbSAnLi9mdW5jLmlzLWluc3QnO1xuaW1wb3J0IG1vY2tTZXJ2aWNlSGVscGVyIGZyb20gJy4vaGVscGVyJztcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjaG93LXRvLW1vY2stYS1zZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNb2NrU2VydmljZShzZXJ2aWNlPzogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IG51bGwsIG1vY2tOYW1lUHJlZml4Pzogc3RyaW5nKTogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2lrZTE4dC9uZy1tb2NrcyNob3ctdG8tbW9jay1hLXNlcnZpY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1vY2tTZXJ2aWNlPFQ+KHNlcnZpY2U6IG5ldyAoLi4uYXJnczogYW55W10pID0+IFQsIG1vY2tOYW1lUHJlZml4Pzogc3RyaW5nKTogVDtcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjaG93LXRvLW1vY2stYS1zZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNb2NrU2VydmljZTxUID0gYW55PihzZXJ2aWNlOiBvYmplY3QsIG1vY2tOYW1lUHJlZml4Pzogc3RyaW5nKTogVDtcbmV4cG9ydCBmdW5jdGlvbiBNb2NrU2VydmljZShzZXJ2aWNlOiBhbnksIG1vY2tOYW1lUHJlZml4Pzogc3RyaW5nKTogYW55IHtcbiAgLy8gbW9ja2luZyBhbGwgbWV0aG9kcyAvIHByb3BlcnRpZXMgb2YgYSBjbGFzcyAvIG9iamVjdC5cbiAgbGV0IHZhbHVlOiBhbnk7XG4gIGlmIChpc0NsYXNzKHNlcnZpY2UpKSB7XG4gICAgdmFsdWUgPSBtb2NrU2VydmljZUhlbHBlci5jcmVhdGVNb2NrRnJvbVByb3RvdHlwZShzZXJ2aWNlLnByb3RvdHlwZSk7XG4gIH0gZWxzZSBpZiAoaXNGdW5jKHNlcnZpY2UpKSB7XG4gICAgdmFsdWUgPSBtb2NrU2VydmljZUhlbHBlci5tb2NrRnVuY3Rpb24oXG4gICAgICBgZnVuYzoke21vY2tOYW1lUHJlZml4ID8gbW9ja05hbWVQcmVmaXggOiBzZXJ2aWNlLm5hbWUgfHwgJ2Fycm93LWZ1bmN0aW9uJ31gXG4gICAgKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlcnZpY2UpKSB7XG4gICAgdmFsdWUgPSBbXTtcbiAgfSBlbHNlIGlmIChpc0luc3Qoc2VydmljZSkpIHtcbiAgICB2YWx1ZSA9IG1vY2tTZXJ2aWNlSGVscGVyLmNyZWF0ZU1vY2tGcm9tUHJvdG90eXBlKHNlcnZpY2UuY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIE9iamVjdC5rZXlzKHNlcnZpY2UpKSB7XG4gICAgICBjb25zdCBtb2NrOiBhbnkgPSBNb2NrU2VydmljZShzZXJ2aWNlW3Byb3BlcnR5XSwgYCR7bW9ja05hbWVQcmVmaXggPyBtb2NrTmFtZVByZWZpeCA6ICdpbnN0YW5jZSd9LiR7cHJvcGVydHl9YCk7XG4gICAgICBpZiAobW9jayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlW3Byb3BlcnR5XSA9IG1vY2s7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih2YWx1ZSwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNlcnZpY2UpKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==