"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerMockFunction = void 0;
var helper_create_mock_from_prototype_1 = require("./helper.create-mock-from-prototype");
var helper_extract_methods_from_prototype_1 = require("./helper.extract-methods-from-prototype");
var helper_extract_properties_from_prototype_1 = require("./helper.extract-properties-from-prototype");
var helper_extract_property_descriptor_1 = require("./helper.extract-property-descriptor");
var helper_mock_1 = require("./helper.mock");
var helper_mock_function_1 = require("./helper.mock-function");
var helper_replace_with_mocks_1 = require("./helper.replace-with-mocks");
var helper_resolve_provider_1 = require("./helper.resolve-provider");
var helper_use_factory_1 = require("./helper.use-factory");
/* istanbul ignore next */
var getGlobal = function () { return window || global; };
// We need a single pointer to the object among all environments.
getGlobal().ngMocksMockServiceHelper = getGlobal().ngMocksMockServiceHelper || {
    mockFunction: helper_mock_function_1.default,
    registerMockFunction: function (func) {
        getGlobal().ngMocksMockServiceHelper.mockFunction.customMockFunction = func;
    },
    createMockFromPrototype: helper_create_mock_from_prototype_1.default,
    extractMethodsFromPrototype: helper_extract_methods_from_prototype_1.default,
    extractPropertiesFromPrototype: helper_extract_properties_from_prototype_1.default,
    extractPropertyDescriptor: helper_extract_property_descriptor_1.default,
    mock: helper_mock_1.default,
    replaceWithMocks: helper_replace_with_mocks_1.default,
    resolveProvider: helper_resolve_provider_1.default,
    useFactory: helper_use_factory_1.default,
};
/**
 * DO NOT USE this object outside of the library.
 * It can be changed any time without a notice.
 *
 * @internal
 */
exports.default = (function () { return getGlobal().ngMocksMockServiceHelper; })();
exports.registerMockFunction = getGlobal().ngMocksMockServiceHelper
    .registerMockFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21vY2stc2VydmljZS9oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUZBQTBFO0FBQzFFLGlHQUFrRjtBQUNsRix1R0FBd0Y7QUFDeEYsMkZBQTZFO0FBQzdFLDZDQUFpQztBQUNqQywrREFBa0Q7QUFDbEQseUVBQTJEO0FBQzNELHFFQUF3RDtBQUN4RCwyREFBOEM7QUFHOUMsMEJBQTBCO0FBQzFCLElBQU0sU0FBUyxHQUFHLGNBQVcsT0FBQSxNQUFNLElBQUksTUFBTSxFQUFoQixDQUFnQixDQUFDO0FBRTlDLGlFQUFpRTtBQUNqRSxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsR0FBRyxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsSUFBSTtJQUM3RSxZQUFZLGdDQUFBO0lBRVosb0JBQW9CLEVBQUUsVUFBQyxJQUFvQztRQUN6RCxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0lBQzlFLENBQUM7SUFFRCx1QkFBdUIsNkNBQUE7SUFDdkIsMkJBQTJCLGlEQUFBO0lBQzNCLDhCQUE4QixvREFBQTtJQUM5Qix5QkFBeUIsOENBQUE7SUFDekIsSUFBSSx1QkFBQTtJQUNKLGdCQUFnQixxQ0FBQTtJQUNoQixlQUFlLG1DQUFBO0lBQ2YsVUFBVSw4QkFBQTtDQUNYLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILGtCQUFlLENBQUMsY0FBTSxPQUFBLFNBQVMsRUFBRSxDQUFDLHdCQUF3QixFQUFwQyxDQUFvQyxDQUFDLEVBQUUsQ0FBQztBQUVqRCxRQUFBLG9CQUFvQixHQUFtRCxTQUFTLEVBQUUsQ0FBQyx3QkFBd0I7S0FDckgsb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTW9ja0Zyb21Qcm90b3R5cGUgZnJvbSAnLi9oZWxwZXIuY3JlYXRlLW1vY2stZnJvbS1wcm90b3R5cGUnO1xuaW1wb3J0IGV4dHJhY3RNZXRob2RzRnJvbVByb3RvdHlwZSBmcm9tICcuL2hlbHBlci5leHRyYWN0LW1ldGhvZHMtZnJvbS1wcm90b3R5cGUnO1xuaW1wb3J0IGV4dHJhY3RQcm9wZXJ0aWVzRnJvbVByb3RvdHlwZSBmcm9tICcuL2hlbHBlci5leHRyYWN0LXByb3BlcnRpZXMtZnJvbS1wcm90b3R5cGUnO1xuaW1wb3J0IGV4dHJhY3RQcm9wZXJ0eURlc2NyaXB0b3IgZnJvbSAnLi9oZWxwZXIuZXh0cmFjdC1wcm9wZXJ0eS1kZXNjcmlwdG9yJztcbmltcG9ydCBtb2NrIGZyb20gJy4vaGVscGVyLm1vY2snO1xuaW1wb3J0IG1vY2tGdW5jdGlvbiBmcm9tICcuL2hlbHBlci5tb2NrLWZ1bmN0aW9uJztcbmltcG9ydCByZXBsYWNlV2l0aE1vY2tzIGZyb20gJy4vaGVscGVyLnJlcGxhY2Utd2l0aC1tb2Nrcyc7XG5pbXBvcnQgcmVzb2x2ZVByb3ZpZGVyIGZyb20gJy4vaGVscGVyLnJlc29sdmUtcHJvdmlkZXInO1xuaW1wb3J0IHVzZUZhY3RvcnkgZnJvbSAnLi9oZWxwZXIudXNlLWZhY3RvcnknO1xuaW1wb3J0IHsgQ3VzdG9tTW9ja0Z1bmN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBnZXRHbG9iYWwgPSAoKTogYW55ID0+IHdpbmRvdyB8fCBnbG9iYWw7XG5cbi8vIFdlIG5lZWQgYSBzaW5nbGUgcG9pbnRlciB0byB0aGUgb2JqZWN0IGFtb25nIGFsbCBlbnZpcm9ubWVudHMuXG5nZXRHbG9iYWwoKS5uZ01vY2tzTW9ja1NlcnZpY2VIZWxwZXIgPSBnZXRHbG9iYWwoKS5uZ01vY2tzTW9ja1NlcnZpY2VIZWxwZXIgfHwge1xuICBtb2NrRnVuY3Rpb24sXG5cbiAgcmVnaXN0ZXJNb2NrRnVuY3Rpb246IChmdW5jOiBDdXN0b21Nb2NrRnVuY3Rpb24gfCB1bmRlZmluZWQpID0+IHtcbiAgICBnZXRHbG9iYWwoKS5uZ01vY2tzTW9ja1NlcnZpY2VIZWxwZXIubW9ja0Z1bmN0aW9uLmN1c3RvbU1vY2tGdW5jdGlvbiA9IGZ1bmM7XG4gIH0sXG5cbiAgY3JlYXRlTW9ja0Zyb21Qcm90b3R5cGUsXG4gIGV4dHJhY3RNZXRob2RzRnJvbVByb3RvdHlwZSxcbiAgZXh0cmFjdFByb3BlcnRpZXNGcm9tUHJvdG90eXBlLFxuICBleHRyYWN0UHJvcGVydHlEZXNjcmlwdG9yLFxuICBtb2NrLFxuICByZXBsYWNlV2l0aE1vY2tzLFxuICByZXNvbHZlUHJvdmlkZXIsXG4gIHVzZUZhY3RvcnksXG59O1xuXG4vKipcbiAqIERPIE5PVCBVU0UgdGhpcyBvYmplY3Qgb3V0c2lkZSBvZiB0aGUgbGlicmFyeS5cbiAqIEl0IGNhbiBiZSBjaGFuZ2VkIGFueSB0aW1lIHdpdGhvdXQgYSBub3RpY2UuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICgoKSA9PiBnZXRHbG9iYWwoKS5uZ01vY2tzTW9ja1NlcnZpY2VIZWxwZXIpKCk7XG5cbmV4cG9ydCBjb25zdCByZWdpc3Rlck1vY2tGdW5jdGlvbjogKGZ1bmM6IEN1c3RvbU1vY2tGdW5jdGlvbiB8IHVuZGVmaW5lZCkgPT4gdm9pZCA9IGdldEdsb2JhbCgpLm5nTW9ja3NNb2NrU2VydmljZUhlbHBlclxuICAucmVnaXN0ZXJNb2NrRnVuY3Rpb247XG4iXX0=