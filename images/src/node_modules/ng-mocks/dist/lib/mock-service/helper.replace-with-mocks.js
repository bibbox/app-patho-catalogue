"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_tokens_1 = require("../common/core.tokens");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var replaceWithMocks = function (value) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, _e;
    if (ng_mocks_universe_1.default.cacheDeclarations.has(value)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(value);
    }
    if (typeof value !== 'object') {
        return value;
    }
    var mock;
    var updated = false;
    if (Array.isArray(value)) {
        mock = [];
        try {
            for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var valueItem = value_1_1.value;
                if (ng_mocks_universe_1.default.builtDeclarations.has(valueItem) &&
                    ng_mocks_universe_1.default.builtDeclarations.get(valueItem) === null) {
                    updated = updated || true;
                    continue;
                }
                mock.push(replaceWithMocks(valueItem));
                updated = updated || mock[mock.length - 1] !== valueItem;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else if (value) {
        mock = {};
        try {
            for (var _f = __values(Object.keys(value)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var key = _g.value;
                if (ng_mocks_universe_1.default.builtDeclarations.has(value[key]) &&
                    ng_mocks_universe_1.default.builtDeclarations.get(value[key]) === null) {
                    updated = updated || true;
                    continue;
                }
                mock[key] = replaceWithMocks(value[key]);
                updated = updated || mock[key] !== value[key];
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            // Removal of guards.
            for (var _h = __values(['canActivate', 'canActivateChild', 'canDeactivate', 'canLoad']), _j = _h.next(); !_j.done; _j = _h.next()) {
                var section = _j.value;
                if (!Array.isArray(mock[section])) {
                    continue;
                }
                var guards = [];
                try {
                    for (var _k = (e_4 = void 0, __values(mock[section])), _l = _k.next(); !_l.done; _l = _k.next()) {
                        var guard = _l.value;
                        if (ng_mocks_universe_1.default.builtDeclarations.has(guard) && ng_mocks_universe_1.default.builtDeclarations.get(guard) !== null) {
                            guards.push(guard);
                            continue;
                        }
                        if (ng_mocks_universe_1.default.builtDeclarations.has(core_tokens_1.NG_MOCKS_GUARDS) &&
                            ng_mocks_universe_1.default.builtDeclarations.get(core_tokens_1.NG_MOCKS_GUARDS) === null) {
                            continue;
                        }
                        guards.push(guard);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_l && !_l.done && (_d = _k.return)) _d.call(_k);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                if (mock[section].length !== guards.length) {
                    updated = updated || true;
                    mock = __assign(__assign({}, mock), (_e = {}, _e[section] = guards, _e));
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    if (updated) {
        Object.setPrototypeOf(mock, Object.getPrototypeOf(value));
        return mock;
    }
    return value;
};
exports.default = (function () { return replaceWithMocks; })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLnJlcGxhY2Utd2l0aC1tb2Nrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2NrLXNlcnZpY2UvaGVscGVyLnJlcGxhY2Utd2l0aC1tb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBd0Q7QUFDeEQsaUVBQTBEO0FBRTFELElBQU0sZ0JBQWdCLEdBQUcsVUFBQyxLQUFVOztJQUNsQyxJQUFJLDJCQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2hELE9BQU8sMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckQ7SUFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxJQUFTLENBQUM7SUFDZCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFcEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLElBQUksR0FBRyxFQUFFLENBQUM7O1lBQ1YsS0FBd0IsSUFBQSxVQUFBLFNBQUEsS0FBSyxDQUFBLDRCQUFBLCtDQUFFO2dCQUExQixJQUFNLFNBQVMsa0JBQUE7Z0JBQ2xCLElBQ0UsMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO29CQUNoRCwyQkFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQ3pEO29CQUNBLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDO29CQUMxQixTQUFTO2lCQUNWO2dCQUNELElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7YUFDMUQ7Ozs7Ozs7OztLQUNGO1NBQU0sSUFBSSxLQUFLLEVBQUU7UUFDaEIsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7WUFDVixLQUFrQixJQUFBLEtBQUEsU0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO2dCQUFqQyxJQUFNLEdBQUcsV0FBQTtnQkFDWixJQUNFLDJCQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDakQsMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUMxRDtvQkFDQSxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQztvQkFDMUIsU0FBUztpQkFDVjtnQkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvQzs7Ozs7Ozs7OztZQUVELHFCQUFxQjtZQUNyQixLQUFzQixJQUFBLEtBQUEsU0FBQSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsU0FBUyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQWxGLElBQU0sT0FBTyxXQUFBO2dCQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtvQkFDakMsU0FBUztpQkFDVjtnQkFFRCxJQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7O29CQUN6QixLQUFvQixJQUFBLG9CQUFBLFNBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUEsZ0JBQUEsNEJBQUU7d0JBQTlCLElBQU0sS0FBSyxXQUFBO3dCQUNkLElBQUksMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFOzRCQUN6RyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUNuQixTQUFTO3lCQUNWO3dCQUNELElBQ0UsMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsNkJBQWUsQ0FBQzs0QkFDdEQsMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsNkJBQWUsQ0FBQyxLQUFLLElBQUksRUFDL0Q7NEJBQ0EsU0FBUzt5QkFDVjt3QkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNwQjs7Ozs7Ozs7O2dCQUNELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUMxQyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQztvQkFDMUIsSUFBSSx5QkFDQyxJQUFJLGdCQUNOLE9BQU8sSUFBRyxNQUFNLE1BQ2xCLENBQUM7aUJBQ0g7YUFDRjs7Ozs7Ozs7O0tBQ0Y7SUFFRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUM7QUFFRixrQkFBZSxDQUFDLGNBQU0sT0FBQSxnQkFBZ0IsRUFBaEIsQ0FBZ0IsQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR19NT0NLU19HVUFSRFMgfSBmcm9tICcuLi9jb21tb24vY29yZS50b2tlbnMnO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG5jb25zdCByZXBsYWNlV2l0aE1vY2tzID0gKHZhbHVlOiBhbnkpOiBhbnkgPT4ge1xuICBpZiAobmdNb2Nrc1VuaXZlcnNlLmNhY2hlRGVjbGFyYXRpb25zLmhhcyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gbmdNb2Nrc1VuaXZlcnNlLmNhY2hlRGVjbGFyYXRpb25zLmdldCh2YWx1ZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBsZXQgbW9jazogYW55O1xuICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIG1vY2sgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlSXRlbSBvZiB2YWx1ZSkge1xuICAgICAgaWYgKFxuICAgICAgICBuZ01vY2tzVW5pdmVyc2UuYnVpbHREZWNsYXJhdGlvbnMuaGFzKHZhbHVlSXRlbSkgJiZcbiAgICAgICAgbmdNb2Nrc1VuaXZlcnNlLmJ1aWx0RGVjbGFyYXRpb25zLmdldCh2YWx1ZUl0ZW0pID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlZCA9IHVwZGF0ZWQgfHwgdHJ1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBtb2NrLnB1c2gocmVwbGFjZVdpdGhNb2Nrcyh2YWx1ZUl0ZW0pKTtcbiAgICAgIHVwZGF0ZWQgPSB1cGRhdGVkIHx8IG1vY2tbbW9jay5sZW5ndGggLSAxXSAhPT0gdmFsdWVJdGVtO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgIG1vY2sgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh2YWx1ZSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgbmdNb2Nrc1VuaXZlcnNlLmJ1aWx0RGVjbGFyYXRpb25zLmhhcyh2YWx1ZVtrZXldKSAmJlxuICAgICAgICBuZ01vY2tzVW5pdmVyc2UuYnVpbHREZWNsYXJhdGlvbnMuZ2V0KHZhbHVlW2tleV0pID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlZCA9IHVwZGF0ZWQgfHwgdHJ1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBtb2NrW2tleV0gPSByZXBsYWNlV2l0aE1vY2tzKHZhbHVlW2tleV0pO1xuICAgICAgdXBkYXRlZCA9IHVwZGF0ZWQgfHwgbW9ja1trZXldICE9PSB2YWx1ZVtrZXldO1xuICAgIH1cblxuICAgIC8vIFJlbW92YWwgb2YgZ3VhcmRzLlxuICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiBbJ2NhbkFjdGl2YXRlJywgJ2NhbkFjdGl2YXRlQ2hpbGQnLCAnY2FuRGVhY3RpdmF0ZScsICdjYW5Mb2FkJ10pIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShtb2NrW3NlY3Rpb25dKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZ3VhcmRzOiBhbnlbXSA9IFtdO1xuICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBtb2NrW3NlY3Rpb25dKSB7XG4gICAgICAgIGlmIChuZ01vY2tzVW5pdmVyc2UuYnVpbHREZWNsYXJhdGlvbnMuaGFzKGd1YXJkKSAmJiBuZ01vY2tzVW5pdmVyc2UuYnVpbHREZWNsYXJhdGlvbnMuZ2V0KGd1YXJkKSAhPT0gbnVsbCkge1xuICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgbmdNb2Nrc1VuaXZlcnNlLmJ1aWx0RGVjbGFyYXRpb25zLmhhcyhOR19NT0NLU19HVUFSRFMpICYmXG4gICAgICAgICAgbmdNb2Nrc1VuaXZlcnNlLmJ1aWx0RGVjbGFyYXRpb25zLmdldChOR19NT0NLU19HVUFSRFMpID09PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkKTtcbiAgICAgIH1cbiAgICAgIGlmIChtb2NrW3NlY3Rpb25dLmxlbmd0aCAhPT0gZ3VhcmRzLmxlbmd0aCkge1xuICAgICAgICB1cGRhdGVkID0gdXBkYXRlZCB8fCB0cnVlO1xuICAgICAgICBtb2NrID0ge1xuICAgICAgICAgIC4uLm1vY2ssXG4gICAgICAgICAgW3NlY3Rpb25dOiBndWFyZHMsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHVwZGF0ZWQpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YobW9jaywgT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSk7XG4gICAgcmV0dXJuIG1vY2s7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKCgpID0+IHJlcGxhY2VXaXRoTW9ja3MpKCk7XG4iXX0=