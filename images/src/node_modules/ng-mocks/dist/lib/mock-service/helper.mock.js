"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var helper_1 = require("./helper");
exports.default = (function (instance, name) {
    var _a;
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var accessType;
    var mockName;
    if (args.length && args[0] !== 'get' && args[0] !== 'set') {
        mockName = args[0];
    }
    else if (args.length && (args[0] === 'get' || args[0] === 'set')) {
        accessType = args[0];
        mockName = args[1];
    }
    var def = Object.getOwnPropertyDescriptor(instance, name);
    if (def && def[accessType || 'value']) {
        return def[accessType || 'value'];
    }
    /* istanbul ignore next */
    var detectedMockName = (mockName
        ? mockName
        : typeof instance.prototype === 'function'
            ? instance.prototype.name
            : typeof instance.constructor === 'function'
                ? instance.constructor.name
                : 'unknown') + "." + name + (accessType ? ":" + accessType : '');
    var mock = helper_1.default.mockFunction(detectedMockName, !!accessType);
    var mockDef = __assign(__assign(__assign(__assign({}, (accessType === 'get' && def && def.set
        ? {
            set: def.set,
        }
        : {})), (accessType === 'set' && def && def.get
        ? {
            get: def.get,
        }
        : {})), (accessType
        ? {}
        : {
            writable: true,
        })), (_a = {}, _a[accessType || 'value'] = mock, _a.configurable = true, _a.enumerable = true, _a));
    if (mockDef.get && mockDef.set && mockDef.get.__ngMocks && mockDef.set.__ngMocks) {
        mockDef.set.__ngMocksSet(function (val) { return mockDef.get.__ngMocksGet(val); });
    }
    Object.defineProperty(instance, name, mockDef);
    return mock;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLm1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvbW9jay1zZXJ2aWNlL2hlbHBlci5tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBeUM7QUFHekMsbUJBQWUsVUFBcUIsUUFBYSxFQUFFLElBQVk7O0lBQUUsY0FBaUI7U0FBakIsVUFBaUIsRUFBakIscUJBQWlCLEVBQWpCLElBQWlCO1FBQWpCLDZCQUFpQjs7SUFDaEYsSUFBSSxVQUFxQyxDQUFDO0lBQzFDLElBQUksUUFBNEIsQ0FBQztJQUVqQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO1FBQ3pELFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEI7U0FBTSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtRQUNsRSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBUSxDQUFDO1FBQzVCLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEI7SUFFRCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLEVBQUU7UUFDckMsT0FBTyxHQUFHLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO0lBRUQsMEJBQTBCO0lBQzFCLElBQU0sZ0JBQWdCLEdBQUcsQ0FDdkIsUUFBUTtRQUNOLENBQUMsQ0FBQyxRQUFRO1FBQ1YsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLFNBQVMsS0FBSyxVQUFVO1lBQzFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUk7WUFDekIsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLFdBQVcsS0FBSyxVQUFVO2dCQUM1QyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUMzQixDQUFDLENBQUMsU0FBUyxVQUNYLElBQUksSUFBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQUksVUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQztJQUNoRCxJQUFNLElBQUksR0FBUSxnQkFBaUIsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRWpGLElBQU0sT0FBTywyQ0FFUixDQUFDLFVBQVUsS0FBSyxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHO1FBQ3hDLENBQUMsQ0FBQztZQUNFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztTQUNiO1FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUdKLENBQUMsVUFBVSxLQUFLLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUc7UUFDeEMsQ0FBQyxDQUFDO1lBQ0UsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1NBQ2I7UUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLEdBR0osQ0FBQyxVQUFVO1FBQ1osQ0FBQyxDQUFDLEVBQUU7UUFDSixDQUFDLENBQUM7WUFDRSxRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsZ0JBRUwsVUFBVSxJQUFJLE9BQU8sSUFBRyxJQUFJLEVBQzdCLGVBQVksR0FBRSxJQUFJLEVBQ2xCLGFBQVUsR0FBRSxJQUFJLE1BQ2pCLENBQUM7SUFFRixJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSyxPQUFPLENBQUMsR0FBVyxDQUFDLFNBQVMsSUFBSyxPQUFPLENBQUMsR0FBVyxDQUFDLFNBQVMsRUFBRTtRQUNqRyxPQUFPLENBQUMsR0FBVyxDQUFDLFlBQVksQ0FBQyxVQUFDLEdBQVEsSUFBSyxPQUFDLE9BQU8sQ0FBQyxHQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUF0QyxDQUFzQyxDQUFDLENBQUM7S0FDekY7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0MsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9ja1NlcnZpY2VIZWxwZXIgZnJvbSAnLi9oZWxwZXInO1xuaW1wb3J0IHsgTW9ja2VkRnVuY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgPFQgPSBNb2NrZWRGdW5jdGlvbj4oaW5zdGFuY2U6IGFueSwgbmFtZTogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IFQgPT4ge1xuICBsZXQgYWNjZXNzVHlwZTogJ2dldCcgfCAnc2V0JyB8IHVuZGVmaW5lZDtcbiAgbGV0IG1vY2tOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICYmIGFyZ3NbMF0gIT09ICdnZXQnICYmIGFyZ3NbMF0gIT09ICdzZXQnKSB7XG4gICAgbW9ja05hbWUgPSBhcmdzWzBdO1xuICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoICYmIChhcmdzWzBdID09PSAnZ2V0JyB8fCBhcmdzWzBdID09PSAnc2V0JykpIHtcbiAgICBhY2Nlc3NUeXBlID0gYXJnc1swXSBhcyBhbnk7XG4gICAgbW9ja05hbWUgPSBhcmdzWzFdO1xuICB9XG5cbiAgY29uc3QgZGVmID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpbnN0YW5jZSwgbmFtZSk7XG4gIGlmIChkZWYgJiYgZGVmW2FjY2Vzc1R5cGUgfHwgJ3ZhbHVlJ10pIHtcbiAgICByZXR1cm4gZGVmW2FjY2Vzc1R5cGUgfHwgJ3ZhbHVlJ107XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBjb25zdCBkZXRlY3RlZE1vY2tOYW1lID0gYCR7XG4gICAgbW9ja05hbWVcbiAgICAgID8gbW9ja05hbWVcbiAgICAgIDogdHlwZW9mIGluc3RhbmNlLnByb3RvdHlwZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBpbnN0YW5jZS5wcm90b3R5cGUubmFtZVxuICAgICAgOiB0eXBlb2YgaW5zdGFuY2UuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbidcbiAgICAgID8gaW5zdGFuY2UuY29uc3RydWN0b3IubmFtZVxuICAgICAgOiAndW5rbm93bidcbiAgfS4ke25hbWV9JHthY2Nlc3NUeXBlID8gYDoke2FjY2Vzc1R5cGV9YCA6ICcnfWA7XG4gIGNvbnN0IG1vY2s6IGFueSA9IG1vY2tTZXJ2aWNlSGVscGVyLm1vY2tGdW5jdGlvbihkZXRlY3RlZE1vY2tOYW1lLCAhIWFjY2Vzc1R5cGUpO1xuXG4gIGNvbnN0IG1vY2tEZWY6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgICAvLyBrZWVwaW5nIHNldHRlciBpZiB3ZSBhZGRpbmcgZ2V0dGVyXG4gICAgLi4uKGFjY2Vzc1R5cGUgPT09ICdnZXQnICYmIGRlZiAmJiBkZWYuc2V0XG4gICAgICA/IHtcbiAgICAgICAgICBzZXQ6IGRlZi5zZXQsXG4gICAgICAgIH1cbiAgICAgIDoge30pLFxuXG4gICAgLy8ga2VlcGluZyBnZXR0ZXIgaWYgd2UgYWRkaW5nIHNldHRlclxuICAgIC4uLihhY2Nlc3NUeXBlID09PSAnc2V0JyAmJiBkZWYgJiYgZGVmLmdldFxuICAgICAgPyB7XG4gICAgICAgICAgZ2V0OiBkZWYuZ2V0LFxuICAgICAgICB9XG4gICAgICA6IHt9KSxcblxuICAgIC8vIHRvIGFsbG93IHJlcGxhY2VtZW50IGZvciBmdW5jdGlvbnNcbiAgICAuLi4oYWNjZXNzVHlwZVxuICAgICAgPyB7fVxuICAgICAgOiB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pLFxuXG4gICAgW2FjY2Vzc1R5cGUgfHwgJ3ZhbHVlJ106IG1vY2ssXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gIH07XG5cbiAgaWYgKG1vY2tEZWYuZ2V0ICYmIG1vY2tEZWYuc2V0ICYmIChtb2NrRGVmLmdldCBhcyBhbnkpLl9fbmdNb2NrcyAmJiAobW9ja0RlZi5zZXQgYXMgYW55KS5fX25nTW9ja3MpIHtcbiAgICAobW9ja0RlZi5zZXQgYXMgYW55KS5fX25nTW9ja3NTZXQoKHZhbDogYW55KSA9PiAobW9ja0RlZi5nZXQgYXMgYW55KS5fX25nTW9ja3NHZXQodmFsKSk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW5zdGFuY2UsIG5hbWUsIG1vY2tEZWYpO1xuICByZXR1cm4gbW9jaztcbn07XG4iXX0=