"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockPipe = exports.MockPipes = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_reflect_1 = require("../common/core.reflect");
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var mock_1 = require("../common/mock");
var mock_of_1 = require("../common/mock-of");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
/**
 * @see https://github.com/ike18t/ng-mocks#how-to-mock-a-pipe
 */
function MockPipes() {
    var pipes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        pipes[_i] = arguments[_i];
    }
    return pipes.map(function (pipe) { return MockPipe(pipe, undefined); });
}
exports.MockPipes = MockPipes;
var defaultTransform = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return undefined;
};
function MockPipe(pipe, transform) {
    if (transform === void 0) { transform = defaultTransform; }
    // We are inside of an 'it'.
    // It's fine to to return a mock copy or to throw an exception if it wasn't replaced with its mock copy in TestBed.
    if (testing_1.getTestBed()._instantiated) {
        try {
            return func_get_mocked_ng_def_of_1.getMockedNgDefOf(pipe, 'p');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    /* istanbul ignore next */
    if (ng_mocks_universe_1.default.flags.has('cachePipe') && ng_mocks_universe_1.default.cacheDeclarations.has(pipe)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(pipe);
    }
    var meta;
    try {
        meta = core_reflect_1.pipeResolver.resolve(pipe);
    }
    catch (e) {
        /* istanbul ignore next */
        throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
    }
    var name = meta.name;
    var options = {
        name: name,
    };
    var PipeMock = /** @class */ (function (_super) {
        __extends(PipeMock, _super);
        function PipeMock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // tslint:disable-next-line:prefer-function-over-method
        PipeMock.prototype.transform = function (value) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return transform.apply(void 0, __spread([value], args));
        };
        PipeMock = __decorate([
            core_1.Pipe(options),
            mock_of_1.MockOf(pipe)
        ], PipeMock);
        return PipeMock;
    }(mock_1.Mock));
    if (ng_mocks_universe_1.default.flags.has('cachePipe')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(pipe, PipeMock);
    }
    return PipeMock;
}
exports.MockPipe = MockPipe;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21vY2stcGlwZS9tb2NrLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0Esc0NBQW9EO0FBQ3BELGlEQUFtRDtBQUVuRCx1REFBc0Q7QUFFdEQsaUZBQXVFO0FBQ3ZFLHVDQUFzQztBQUN0Qyw2Q0FBMkM7QUFDM0MsaUVBQTBEO0FBSTFEOztHQUVHO0FBQ0gsU0FBZ0IsU0FBUztJQUFDLGVBQW9DO1NBQXBDLFVBQW9DLEVBQXBDLHFCQUFvQyxFQUFwQyxJQUFvQztRQUFwQywwQkFBb0M7O0lBQzVELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQXpCLENBQXlCLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRkQsOEJBRUM7QUFFRCxJQUFNLGdCQUFnQixHQUFHO0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFBVyxPQUFBLFNBQVM7QUFBVCxDQUFTLENBQUM7QUFTN0QsU0FBZ0IsUUFBUSxDQUN0QixJQUFpQixFQUNqQixTQUFnRDtJQUFoRCwwQkFBQSxFQUFBLDRCQUFnRDtJQUVoRCw0QkFBNEI7SUFDNUIsbUhBQW1IO0lBQ25ILElBQUssb0JBQVUsRUFBVSxDQUFDLGFBQWEsRUFBRTtRQUN2QyxJQUFJO1lBQ0YsT0FBTyw0Q0FBZ0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDcEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLDhCQUE4QjtTQUMvQjtLQUNGO0lBQ0QsMEJBQTBCO0lBQzFCLElBQUksMkJBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLDJCQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3pGLE9BQU8sMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDcEQ7SUFFRCxJQUFJLElBQWUsQ0FBQztJQUNwQixJQUFJO1FBQ0YsSUFBSSxHQUFHLDJCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ25DO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDViwwQkFBMEI7UUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO0tBQ2hGO0lBRU8sSUFBQSxJQUFJLEdBQUssSUFBSSxLQUFULENBQVU7SUFFdEIsSUFBTSxPQUFPLEdBQVM7UUFDcEIsSUFBSSxNQUFBO0tBQ0wsQ0FBQztJQUlGO1FBQXVCLDRCQUFJO1FBQTNCOztRQUtBLENBQUM7UUFKQyx1REFBdUQ7UUFDaEQsNEJBQVMsR0FBaEIsVUFBaUIsS0FBVTtZQUFFLGNBQWM7aUJBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztnQkFBZCw2QkFBYzs7WUFDekMsT0FBTyxTQUFTLHlCQUFDLEtBQUssR0FBSyxJQUFJLEdBQUU7UUFDbkMsQ0FBQztRQUpHLFFBQVE7WUFGYixXQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2IsZ0JBQU0sQ0FBQyxJQUFJLENBQUM7V0FDUCxRQUFRLENBS2I7UUFBRCxlQUFDO0tBQUEsQUFMRCxDQUF1QixXQUFJLEdBSzFCO0lBRUQsSUFBSSwyQkFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDMUMsMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsT0FBTyxRQUFlLENBQUM7QUFDekIsQ0FBQztBQTlDRCw0QkE4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb3JlIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0VGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IHBpcGVSZXNvbHZlciB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnJlZmxlY3QnO1xuaW1wb3J0IHsgQW55VHlwZSwgVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCB7IGdldE1vY2tlZE5nRGVmT2YgfSBmcm9tICcuLi9jb21tb24vZnVuYy5nZXQtbW9ja2VkLW5nLWRlZi1vZic7XG5pbXBvcnQgeyBNb2NrIH0gZnJvbSAnLi4vY29tbW9uL21vY2snO1xuaW1wb3J0IHsgTW9ja09mIH0gZnJvbSAnLi4vY29tbW9uL21vY2stb2YnO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG5pbXBvcnQgeyBNb2NrZWRQaXBlIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vaWtlMTh0L25nLW1vY2tzI2hvdy10by1tb2NrLWEtcGlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gTW9ja1BpcGVzKC4uLnBpcGVzOiBBcnJheTxUeXBlPFBpcGVUcmFuc2Zvcm0+Pik6IEFycmF5PFR5cGU8UGlwZVRyYW5zZm9ybT4+IHtcbiAgcmV0dXJuIHBpcGVzLm1hcChwaXBlID0+IE1vY2tQaXBlKHBpcGUsIHVuZGVmaW5lZCkpO1xufVxuXG5jb25zdCBkZWZhdWx0VHJhbnNmb3JtID0gKC4uLmFyZ3M6IGFueVtdKTogdm9pZCA9PiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vaWtlMTh0L25nLW1vY2tzI2hvdy10by1tb2NrLWEtcGlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gTW9ja1BpcGU8VFBpcGUgZXh0ZW5kcyBQaXBlVHJhbnNmb3JtPihcbiAgcGlwZTogQW55VHlwZTxUUGlwZT4sXG4gIHRyYW5zZm9ybT86IFRQaXBlWyd0cmFuc2Zvcm0nXVxuKTogVHlwZTxNb2NrZWRQaXBlPFRQaXBlPj47XG5leHBvcnQgZnVuY3Rpb24gTW9ja1BpcGU8VFBpcGUgZXh0ZW5kcyBQaXBlVHJhbnNmb3JtPihcbiAgcGlwZTogVHlwZTxUUGlwZT4sXG4gIHRyYW5zZm9ybTogVFBpcGVbJ3RyYW5zZm9ybSddID0gZGVmYXVsdFRyYW5zZm9ybVxuKTogVHlwZTxNb2NrZWRQaXBlPFRQaXBlPj4ge1xuICAvLyBXZSBhcmUgaW5zaWRlIG9mIGFuICdpdCcuXG4gIC8vIEl0J3MgZmluZSB0byB0byByZXR1cm4gYSBtb2NrIGNvcHkgb3IgdG8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGl0IHdhc24ndCByZXBsYWNlZCB3aXRoIGl0cyBtb2NrIGNvcHkgaW4gVGVzdEJlZC5cbiAgaWYgKChnZXRUZXN0QmVkKCkgYXMgYW55KS5faW5zdGFudGlhdGVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRNb2NrZWROZ0RlZk9mKHBpcGUsICdwJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIGxvb2tzIGxpa2UgYW4gaW4tdGVzdCBtb2NrLlxuICAgIH1cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAobmdNb2Nrc1VuaXZlcnNlLmZsYWdzLmhhcygnY2FjaGVQaXBlJykgJiYgbmdNb2Nrc1VuaXZlcnNlLmNhY2hlRGVjbGFyYXRpb25zLmhhcyhwaXBlKSkge1xuICAgIHJldHVybiBuZ01vY2tzVW5pdmVyc2UuY2FjaGVEZWNsYXJhdGlvbnMuZ2V0KHBpcGUpO1xuICB9XG5cbiAgbGV0IG1ldGE6IGNvcmUuUGlwZTtcbiAgdHJ5IHtcbiAgICBtZXRhID0gcGlwZVJlc29sdmVyLnJlc29sdmUocGlwZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRocm93IG5ldyBFcnJvcignbmctbW9ja3MgaXMgbm90IGluIEpJVCBtb2RlIGFuZCBjYW5ub3QgcmVzb2x2ZSBkZWNsYXJhdGlvbnMnKTtcbiAgfVxuXG4gIGNvbnN0IHsgbmFtZSB9ID0gbWV0YTtcblxuICBjb25zdCBvcHRpb25zOiBQaXBlID0ge1xuICAgIG5hbWUsXG4gIH07XG5cbiAgQFBpcGUob3B0aW9ucylcbiAgQE1vY2tPZihwaXBlKVxuICBjbGFzcyBQaXBlTW9jayBleHRlbmRzIE1vY2sgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZ1bmN0aW9uLW92ZXItbWV0aG9kXG4gICAgcHVibGljIHRyYW5zZm9ybSh2YWx1ZTogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKHZhbHVlLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBpZiAobmdNb2Nrc1VuaXZlcnNlLmZsYWdzLmhhcygnY2FjaGVQaXBlJykpIHtcbiAgICBuZ01vY2tzVW5pdmVyc2UuY2FjaGVEZWNsYXJhdGlvbnMuc2V0KHBpcGUsIFBpcGVNb2NrKTtcbiAgfVxuXG4gIHJldHVybiBQaXBlTW9jayBhcyBhbnk7XG59XG4iXX0=