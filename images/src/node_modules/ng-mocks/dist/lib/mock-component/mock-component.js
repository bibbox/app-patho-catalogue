"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockComponent = exports.MockComponents = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var forms_1 = require("@angular/forms");
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_1 = require("../common/core.reflect");
var decorate_inputs_1 = require("../common/decorate.inputs");
var decorate_outputs_1 = require("../common/decorate.outputs");
var decorate_queries_1 = require("../common/decorate.queries");
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var mock_control_value_accessor_1 = require("../common/mock-control-value-accessor");
var mock_of_1 = require("../common/mock-of");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var helper_1 = require("../mock-service/helper");
function MockComponents() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return components.map(function (component) { return MockComponent(component, undefined); });
}
exports.MockComponents = MockComponents;
function MockComponent(component, metaData) {
    var e_1, _a;
    // we are inside of an 'it'.
    // It's fine to to return a mock copy or to throw an exception if it wasn't replaced with its mock copy in TestBed.
    if (testing_1.getTestBed()._instantiated) {
        try {
            return func_get_mocked_ng_def_of_1.getMockedNgDefOf(component, 'c');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    if (ng_mocks_universe_1.default.flags.has('cacheComponent') && ng_mocks_universe_1.default.cacheDeclarations.has(component)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(component);
    }
    var meta = metaData;
    /* istanbul ignore else */
    if (!meta) {
        try {
            meta = core_reflect_1.directiveResolver.resolve(component);
        }
        catch (e) {
            /* istanbul ignore next */
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
    }
    var exportAs = meta.exportAs, inputs = meta.inputs, outputs = meta.outputs, queries = meta.queries, selector = meta.selector, providers = meta.providers;
    var template = "<ng-content></ng-content>";
    var viewChildRefs = new Map();
    /* istanbul ignore else */
    if (queries) {
        var queriesKeys = Object.keys(queries);
        var templateQueries = queriesKeys
            .map(function (key) {
            var query = queries[key];
            if (query.isViewQuery) {
                return ''; // ignoring all internal @ViewChild.
            }
            if (typeof query.selector !== 'string') {
                return ''; // in case of a mock component, Type based selector doesn't work properly anyway.
            }
            viewChildRefs.set(query.selector, key);
            queries["__mockView_" + key] = new core_1.ViewChild("__" + query.selector, {
                read: core_1.ViewContainerRef,
                static: false,
            });
            return "<div *ngIf=\"mockRender_" + query.selector + "\" data-key=\"" + query.selector + "\"><ng-template #__" + query.selector + "></ng-template></div>";
        })
            .join('');
        if (templateQueries) {
            template = "\n        " + template + "\n        " + templateQueries + "\n      ";
        }
    }
    var options = {
        exportAs: exportAs,
        providers: [
            {
                provide: component,
                useExisting: (function () {
                    var value = core_1.forwardRef(function () { return ComponentMock; });
                    value.__ngMocksSkip = true;
                    return value;
                })(),
            },
        ],
        selector: selector,
        template: template,
    };
    var resolutions = new Map();
    var resolveProvider = function (def) { return helper_1.default.resolveProvider(def, resolutions); };
    var setNgValueAccessor;
    try {
        for (var _b = __values(core_helpers_1.flatten(providers || [])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var providerDef = _c.value;
            var provide = providerDef && typeof providerDef === 'object' && providerDef.provide ? providerDef.provide : providerDef;
            if (options.providers && provide === forms_1.NG_VALIDATORS) {
                options.providers.push({
                    multi: true,
                    provide: provide,
                    useExisting: (function () {
                        var value = core_1.forwardRef(function () { return ComponentMock; });
                        value.__ngMocksSkip = true;
                        return value;
                    })(),
                });
                continue;
            }
            if (setNgValueAccessor === undefined && options.providers && provide === forms_1.NG_VALUE_ACCESSOR) {
                setNgValueAccessor = false;
                options.providers.push({
                    multi: true,
                    provide: provide,
                    useExisting: (function () {
                        var value = core_1.forwardRef(function () { return ComponentMock; });
                        value.__ngMocksSkip = true;
                        return value;
                    })(),
                });
                continue;
            }
            var mock = resolveProvider(providerDef);
            /* istanbul ignore else */
            if (options.providers && mock) {
                options.providers.push(mock);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (setNgValueAccessor === undefined) {
        setNgValueAccessor =
            helper_1.default.extractMethodsFromPrototype(component.prototype).indexOf('writeValue') !== -1;
    }
    var config = ng_mocks_universe_1.default.config.get(component);
    var ComponentMock = /** @class */ (function (_super) {
        __extends(ComponentMock, _super);
        /* istanbul ignore next */
        function ComponentMock(changeDetector, injector) {
            var _this = _super.call(this, injector) || this;
            _this.__ngMocksInstall(changeDetector, injector);
            return _this;
        }
        ComponentMock.prototype.ngAfterContentInit = function () {
            var e_2, _a;
            if (!this.__rendered && config && config.render) {
                try {
                    for (var _b = __values(Object.keys(config.render)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var block = _c.value;
                        var _d = config.render[block] !== true
                            ? config.render[block]
                            : {
                                $implicit: undefined,
                                variables: {},
                            }, $implicit = _d.$implicit, variables = _d.variables;
                        this.__render(block, $implicit, variables);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                this.__rendered = true;
            }
        };
        ComponentMock.prototype.__ngMocksInstall = function (changeDetector, injector) {
            var _this = this;
            // Providing method to hide any @ContentChild based on its selector.
            this.__hide = function (contentChildSelector) {
                var key = viewChildRefs.get(contentChildSelector);
                if (key) {
                    _this["mockRender_" + contentChildSelector] = false;
                    changeDetector.detectChanges();
                }
            };
            // Providing a method to render any @ContentChild based on its selector.
            this.__render = function (contentChildSelector, $implicit, variables) {
                var key = viewChildRefs.get(contentChildSelector);
                var templateRef;
                var viewContainer;
                if (key) {
                    _this["mockRender_" + contentChildSelector] = true;
                    changeDetector.detectChanges();
                    viewContainer = _this["__mockView_" + key];
                    templateRef = _this[key];
                    if (viewContainer && templateRef) {
                        viewContainer.clear();
                        viewContainer.createEmbeddedView(templateRef, __assign(__assign({}, variables), { $implicit: $implicit }));
                        changeDetector.detectChanges();
                    }
                }
            };
        };
        ComponentMock = __decorate([
            core_1.Component(options),
            mock_of_1.MockOf(component, { outputs: outputs, setNgValueAccessor: setNgValueAccessor }),
            __metadata("design:paramtypes", [core_1.ChangeDetectorRef, core_1.Injector])
        ], ComponentMock);
        return ComponentMock;
    }(mock_control_value_accessor_1.MockControlValueAccessor));
    /* istanbul ignore else */
    if (queries) {
        decorate_inputs_1.default(ComponentMock, inputs, Object.keys(queries));
    }
    decorate_outputs_1.default(ComponentMock, outputs);
    decorate_queries_1.default(ComponentMock, queries);
    /* istanbul ignore else */
    if (ng_mocks_universe_1.default.flags.has('cacheComponent')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(component, ComponentMock);
    }
    return ComponentMock;
}
exports.MockComponent = MockComponent;
//# sourceMappingURL=data:application/json;base64,