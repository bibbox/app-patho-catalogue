"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRender = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var rxjs_1 = require("rxjs");
var core_reflect_1 = require("../common/core.reflect");
var mock_helper_1 = require("../mock-helper/mock-helper");
var helper_1 = require("../mock-service/helper");
function solveOutput(output) {
    if (typeof output === 'function') {
        return '($event)';
    }
    if (output && typeof output === 'object' && output instanceof core_1.EventEmitter) {
        return '.emit($event)';
    }
    if (output && typeof output === 'object' && output instanceof rxjs_1.Subject) {
        return '.next($event)';
    }
    return '=$event';
}
function MockRender(template, params, flags) {
    var e_1, _a;
    var _b;
    if (flags === void 0) { flags = true; }
    var flagsObject = typeof flags === 'boolean' ? { detectChanges: flags } : flags;
    var isComponent = typeof template !== 'string';
    var noParams = !params;
    var inputs = [];
    var outputs = [];
    var selector = '';
    var mockTemplate = '';
    if (typeof template === 'string') {
        mockTemplate = template;
    }
    else {
        var meta = void 0;
        try {
            meta = core_reflect_1.directiveResolver.resolve(template);
        }
        catch (e) {
            /* istanbul ignore next */
            throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
        }
        inputs = meta.inputs;
        outputs = meta.outputs;
        selector = meta.selector;
        mockTemplate += selector ? "<" + selector : '';
        if (selector && inputs) {
            inputs.forEach(function (definition) {
                var _a = __read(definition.split(': '), 2), property = _a[0], alias = _a[1];
                /* istanbul ignore else */
                if (alias && params) {
                    mockTemplate += " [" + alias + "]=\"" + alias + "\"";
                }
                else if (property && params) {
                    mockTemplate += " [" + property + "]=\"" + property + "\"";
                }
                else if (alias && noParams) {
                    mockTemplate += " [" + alias + "]=\"" + property + "\"";
                }
                else if (noParams) {
                    mockTemplate += " [" + property + "]=\"" + property + "\"";
                }
            });
        }
        if (selector && outputs) {
            outputs.forEach(function (definition) {
                var _a = __read(definition.split(': '), 2), property = _a[0], alias = _a[1];
                /* istanbul ignore else */
                if (alias && params) {
                    mockTemplate += " (" + alias + ")=\"" + alias + solveOutput(params[alias]) + "\"";
                }
                else if (property && params) {
                    mockTemplate += " (" + property + ")=\"" + property + solveOutput(params[property]) + "\"";
                }
                else if (alias && noParams) {
                    mockTemplate += " (" + alias + ")=\"" + property + ".emit($event)\"";
                }
                else if (noParams) {
                    mockTemplate += " (" + property + ")=\"" + property + ".emit($event)\"";
                }
            });
        }
        mockTemplate += selector ? "></" + selector + ">" : '';
    }
    var options = {
        providers: flagsObject.providers,
        selector: 'mock-render',
        template: mockTemplate,
    };
    var component = core_1.Component(options)(/** @class */ (function () {
        function MockRenderComponent() {
            var e_2, _a, e_3, _b, e_4, _c;
            try {
                for (var _d = __values(Object.keys(params || {})), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var key = _e.value;
                    this[key] = params[key];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (noParams && isComponent && inputs && inputs.length) {
                try {
                    for (var inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                        var definition = inputs_1_1.value;
                        var _f = __read(definition.split(': '), 1), property = _f[0];
                        this[property] = undefined;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (inputs_1_1 && !inputs_1_1.done && (_b = inputs_1.return)) _b.call(inputs_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            if (noParams && isComponent && outputs && outputs.length) {
                try {
                    for (var outputs_1 = __values(outputs), outputs_1_1 = outputs_1.next(); !outputs_1_1.done; outputs_1_1 = outputs_1.next()) {
                        var definition = outputs_1_1.value;
                        var _g = __read(definition.split(': '), 1), property = _g[0];
                        this[property] = new core_1.EventEmitter();
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (outputs_1_1 && !outputs_1_1.done && (_c = outputs_1.return)) _c.call(outputs_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        return MockRenderComponent;
    }()));
    // Soft reset of TestBed.
    mock_helper_1.ngMocks.flushTestBed();
    // Injection of our template.
    testing_1.TestBed.configureTestingModule({
        declarations: [component],
    });
    var fixture = testing_1.TestBed.createComponent(component);
    if (flagsObject.detectChanges) {
        fixture.detectChanges();
    }
    fixture.point = fixture.debugElement.children[0];
    if (!fixture.point) {
        fixture.point = fixture.debugElement.childNodes[0];
    }
    var pointComponentInstance;
    try {
        // ivy throws Error: Expecting instance of DOM Element
        pointComponentInstance = (_b = fixture.point) === null || _b === void 0 ? void 0 : _b.componentInstance;
    }
    catch (e) {
        // nothing to do
    }
    if (noParams && pointComponentInstance) {
        var keys = __spread(helper_1.default.extractPropertiesFromPrototype(Object.getPrototypeOf(pointComponentInstance)), helper_1.default.extractMethodsFromPrototype(Object.getPrototypeOf(pointComponentInstance)), Object.keys(pointComponentInstance));
        var exists = __spread(Object.getOwnPropertyNames(fixture.componentInstance), Object.keys(fixture.componentInstance));
        var _loop_1 = function (key) {
            if (exists.indexOf(key) !== -1) {
                return "continue";
            }
            var def = helper_1.default.extractPropertyDescriptor(Object.getPrototypeOf(pointComponentInstance), key);
            var keyType = def ? undefined : typeof pointComponentInstance[key];
            if ((def === null || def === void 0 ? void 0 : def.value) || keyType === 'function') {
                Object.defineProperty(fixture.componentInstance, key, {
                    value: function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        return pointComponentInstance[key].apply(pointComponentInstance, __spread(args));
                    },
                    configurable: true,
                    enumerable: true,
                    writable: true,
                });
            }
            else {
                Object.defineProperty(fixture.componentInstance, key, {
                    get: function () { return pointComponentInstance[key]; },
                    set: function (v) { return (pointComponentInstance[key] = v); },
                    configurable: true,
                    enumerable: true,
                });
            }
            exists.push(key);
        };
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                _loop_1(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return fixture;
}
exports.MockRender = MockRender;
//# sourceMappingURL=data:application/json;base64,