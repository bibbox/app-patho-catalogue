"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JitReflector = void 0;
var core_1 = require("@angular/core");
var JitReflector = /** @class */ (function () {
    function JitReflector() {
        this.componentModuleUrl = function (type) { return "./" + core_1.ɵstringify(type); };
        // This does not exist in Angular 5.1.x but is required to exist in 5.2+
        this.guards = function () { return ({}); };
        this.resolveExternalReference = function (ref) { return ref.runtime; };
        this.shallowAnnotations = function () {
            throw new Error('Not supported in JIT mode');
        };
        this._reflectionCapabilities = new core_1.ɵReflectionCapabilities();
    }
    JitReflector.prototype.annotations = function (typeOrFunc) {
        return this._reflectionCapabilities.annotations(typeOrFunc);
    };
    JitReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
        return this._reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    JitReflector.prototype.parameters = function (typeOrFunc) {
        return this._reflectionCapabilities.parameters(typeOrFunc);
    };
    JitReflector.prototype.propMetadata = function (typeOrFunc) {
        return this._reflectionCapabilities.propMetadata(typeOrFunc);
    };
    JitReflector.prototype.tryAnnotations = function (typeOrFunc) {
        return this.annotations(typeOrFunc);
    };
    return JitReflector;
}());
exports.JitReflector = JitReflector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaml0LXJlZmxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tb24vaml0LXJlZmxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBMkc7QUFFM0c7SUFHRTtRQVFBLHVCQUFrQixHQUFHLFVBQUMsSUFBUyxJQUFLLE9BQUEsT0FBSyxpQkFBUyxDQUFDLElBQUksQ0FBRyxFQUF0QixDQUFzQixDQUFDO1FBRTNELHdFQUF3RTtRQUN4RSxXQUFNLEdBQUcsY0FBOEIsT0FBQSxDQUFDLEVBQUUsQ0FBQyxFQUFKLENBQUksQ0FBQztRQWM1Qyw2QkFBd0IsR0FBRyxVQUFDLEdBQXNCLElBQVUsT0FBQSxHQUFHLENBQUMsT0FBTyxFQUFYLENBQVcsQ0FBQztRQUV4RSx1QkFBa0IsR0FBRztZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDO1FBNUJBLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLDhCQUFzQixFQUFFLENBQUM7SUFDOUQsQ0FBQztJQUVELGtDQUFXLEdBQVgsVUFBWSxVQUFlO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBT0QsdUNBQWdCLEdBQWhCLFVBQWlCLElBQVMsRUFBRSxVQUFrQjtRQUM1QyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELGlDQUFVLEdBQVYsVUFBVyxVQUFlO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsbUNBQVksR0FBWixVQUFhLFVBQWU7UUFDMUIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFRRCxxQ0FBYyxHQUFkLFVBQWUsVUFBZTtRQUM1QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXJDRCxJQXFDQztBQXJDWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVSZWZsZWN0b3IsIEV4dGVybmFsUmVmZXJlbmNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuaW1wb3J0IHsgybVSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzIGFzIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMsIMm1c3RyaW5naWZ5IGFzIHN0cmluZ2lmeSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgSml0UmVmbGVjdG9yIGltcGxlbWVudHMgQ29tcGlsZVJlZmxlY3RvciB7XG4gIHByb3RlY3RlZCBfcmVmbGVjdGlvbkNhcGFiaWxpdGllczogUmVmbGVjdGlvbkNhcGFiaWxpdGllcztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzID0gbmV3IFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMoKTtcbiAgfVxuXG4gIGFubm90YXRpb25zKHR5cGVPckZ1bmM6IGFueSk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmbGVjdGlvbkNhcGFiaWxpdGllcy5hbm5vdGF0aW9ucyh0eXBlT3JGdW5jKTtcbiAgfVxuXG4gIGNvbXBvbmVudE1vZHVsZVVybCA9ICh0eXBlOiBhbnkpID0+IGAuLyR7c3RyaW5naWZ5KHR5cGUpfWA7XG5cbiAgLy8gVGhpcyBkb2VzIG5vdCBleGlzdCBpbiBBbmd1bGFyIDUuMS54IGJ1dCBpcyByZXF1aXJlZCB0byBleGlzdCBpbiA1LjIrXG4gIGd1YXJkcyA9ICgpOiBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+ID0+ICh7fSk7XG5cbiAgaGFzTGlmZWN5Y2xlSG9vayh0eXBlOiBhbnksIGxjUHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLmhhc0xpZmVjeWNsZUhvb2sodHlwZSwgbGNQcm9wZXJ0eSk7XG4gIH1cblxuICBwYXJhbWV0ZXJzKHR5cGVPckZ1bmM6IGFueSk6IGFueVtdW10ge1xuICAgIHJldHVybiB0aGlzLl9yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnBhcmFtZXRlcnModHlwZU9yRnVuYyk7XG4gIH1cblxuICBwcm9wTWV0YWRhdGEodHlwZU9yRnVuYzogYW55KTogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9IHtcbiAgICByZXR1cm4gdGhpcy5fcmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm9wTWV0YWRhdGEodHlwZU9yRnVuYyk7XG4gIH1cblxuICByZXNvbHZlRXh0ZXJuYWxSZWZlcmVuY2UgPSAocmVmOiBFeHRlcm5hbFJlZmVyZW5jZSk6IGFueSA9PiByZWYucnVudGltZTtcblxuICBzaGFsbG93QW5ub3RhdGlvbnMgPSAoKTogYW55W10gPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBpbiBKSVQgbW9kZScpO1xuICB9O1xuXG4gIHRyeUFubm90YXRpb25zKHR5cGVPckZ1bmM6IGFueSk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5hbm5vdGF0aW9ucyh0eXBlT3JGdW5jKTtcbiAgfVxufVxuIl19