"use strict";
// tslint:disable: no-bitwise variable-name interface-over-type-literal
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mock = void 0;
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var helper_1 = require("../mock-service/helper");
var ng_mocks_universe_1 = require("./ng-mocks-universe");
var Mock = /** @class */ (function () {
    function Mock(injector) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        this.__ngMocksMock = true;
        var mockOf = this.constructor.mockOf;
        if (injector && this.__ngMocksConfig && this.__ngMocksConfig.setNgValueAccessor) {
            try {
                var ngControl = injector.get(/* A5 */ forms_1.NgControl, undefined, 10);
                if (ngControl && !ngControl.valueAccessor) {
                    ngControl.valueAccessor = this;
                }
            }
            catch (e) {
                // nothing to do.
            }
        }
        // setting outputs
        var mockOutputs = [];
        try {
            for (var _g = __values(this.__ngMocksConfig && this.__ngMocksConfig.outputs ? this.__ngMocksConfig.outputs : []), _h = _g.next(); !_h.done; _h = _g.next()) {
                var output = _h.value;
                mockOutputs.push(output.split(':')[0]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var mockOutputs_1 = __values(mockOutputs), mockOutputs_1_1 = mockOutputs_1.next(); !mockOutputs_1_1.done; mockOutputs_1_1 = mockOutputs_1.next()) {
                var output = mockOutputs_1_1.value;
                if (this[output] || Object.getOwnPropertyDescriptor(this, output)) {
                    continue;
                }
                this[output] = new core_1.EventEmitter();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (mockOutputs_1_1 && !mockOutputs_1_1.done && (_b = mockOutputs_1.return)) _b.call(mockOutputs_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // setting our mock methods and props
        var prototype = Object.getPrototypeOf(this);
        try {
            for (var _j = __values(helper_1.default.extractMethodsFromPrototype(prototype)), _k = _j.next(); !_k.done; _k = _j.next()) {
                var method = _k.value;
                var descriptor = helper_1.default.extractPropertyDescriptor(prototype, method);
                /* istanbul ignore next */
                if (!descriptor) {
                    continue;
                }
                Object.defineProperty(this, method, descriptor);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _l = __values(helper_1.default.extractPropertiesFromPrototype(prototype)), _m = _l.next(); !_m.done; _m = _l.next()) {
                var prop = _m.value;
                var descriptor = helper_1.default.extractPropertyDescriptor(prototype, prop);
                /* istanbul ignore next */
                if (!descriptor) {
                    continue;
                }
                Object.defineProperty(this, prop, descriptor);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            // setting mocks for original class methods and props
            for (var _o = __values(helper_1.default.extractMethodsFromPrototype(mockOf.prototype)), _p = _o.next(); !_p.done; _p = _o.next()) {
                var method = _p.value;
                if (this[method] || Object.getOwnPropertyDescriptor(this, method)) {
                    continue;
                }
                helper_1.default.mock(this, method);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_e = _o.return)) _e.call(_o);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _q = __values(helper_1.default.extractPropertiesFromPrototype(mockOf.prototype)), _r = _q.next(); !_r.done; _r = _q.next()) {
                var prop = _r.value;
                if (this[prop] || Object.getOwnPropertyDescriptor(this, prop)) {
                    continue;
                }
                helper_1.default.mock(this, prop, 'get');
                helper_1.default.mock(this, prop, 'set');
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_f = _q.return)) _f.call(_q);
            }
            finally { if (e_6) throw e_6.error; }
        }
        // and faking prototype
        Object.setPrototypeOf(this, mockOf.prototype);
        var config = ng_mocks_universe_1.default.config.get(mockOf);
        if (config && config.init && config.init) {
            config.init(this, injector);
        }
    }
    Mock = __decorate([
        __param(0, core_1.Optional()),
        __metadata("design:paramtypes", [core_1.Injector])
    ], Mock);
    return Mock;
}());
exports.Mock = Mock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tb24vbW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsdUVBQXVFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUV2RSxzQ0FBaUU7QUFDakUsd0NBQTJDO0FBRTNDLGlEQUF1RDtBQUV2RCx5REFBa0Q7QUFPbEQ7SUFLRSxjQUF3QixRQUFtQjs7UUFKM0Isa0JBQWEsR0FBUyxJQUFJLENBQUM7UUFLekMsSUFBTSxNQUFNLEdBQUksSUFBSSxDQUFDLFdBQW1CLENBQUMsTUFBTSxDQUFDO1FBRWhELElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRTtZQUMvRSxJQUFJO2dCQUNGLElBQU0sU0FBUyxHQUFJLFFBQVEsQ0FBQyxHQUFXLENBQUMsUUFBUSxDQUFDLGlCQUFTLEVBQUUsU0FBUyxFQUFFLEVBQU0sQ0FBQyxDQUFDO2dCQUMvRSxJQUFJLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUU7b0JBQ3pDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2lCQUNoQzthQUNGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsaUJBQWlCO2FBQ2xCO1NBQ0Y7UUFFRCxrQkFBa0I7UUFFbEIsSUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDOztZQUN2QixLQUFxQixJQUFBLEtBQUEsU0FBQSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLGdCQUFBLDRCQUFFO2dCQUExRyxJQUFNLE1BQU0sV0FBQTtnQkFDZixXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFD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SUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7SUExRVUsSUFBSTtRQUtGLFdBQUEsZUFBUSxFQUFFLENBQUE7eUNBQVksZUFBUTtPQUxoQyxJQUFJLENBMkVoQjtJQUFELFdBQUM7Q0FBQSxBQTNFRCxJQTJFQztBQTNFWSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBuby1iaXR3aXNlIHZhcmlhYmxlLW5hbWUgaW50ZXJmYWNlLW92ZXItdHlwZS1saXRlcmFsXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCBtb2NrU2VydmljZUhlbHBlciBmcm9tICcuLi9tb2NrLXNlcnZpY2UvaGVscGVyJztcblxuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuL25nLW1vY2tzLXVuaXZlcnNlJztcblxuZXhwb3J0IHR5cGUgbmdNb2Nrc01vY2tDb25maWcgPSB7XG4gIG91dHB1dHM/OiBzdHJpbmdbXTtcbiAgc2V0TmdWYWx1ZUFjY2Vzc29yPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjbGFzcyBNb2NrIHtcbiAgcHVibGljIHJlYWRvbmx5IF9fbmdNb2Nrc01vY2s6IHRydWUgPSB0cnVlO1xuXG4gIHByb3RlY3RlZCByZWFkb25seSBfX25nTW9ja3NDb25maWc/OiBuZ01vY2tzTW9ja0NvbmZpZztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBpbmplY3Rvcj86IEluamVjdG9yKSB7XG4gICAgY29uc3QgbW9ja09mID0gKHRoaXMuY29uc3RydWN0b3IgYXMgYW55KS5tb2NrT2Y7XG5cbiAgICBpZiAoaW5qZWN0b3IgJiYgdGhpcy5fX25nTW9ja3NDb25maWcgJiYgdGhpcy5fX25nTW9ja3NDb25maWcuc2V0TmdWYWx1ZUFjY2Vzc29yKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBuZ0NvbnRyb2wgPSAoaW5qZWN0b3IuZ2V0IGFzIGFueSkoLyogQTUgKi8gTmdDb250cm9sLCB1bmRlZmluZWQsIDBiMTAxMCk7XG4gICAgICAgIGlmIChuZ0NvbnRyb2wgJiYgIW5nQ29udHJvbC52YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgICAgbmdDb250cm9sLnZhbHVlQWNjZXNzb3IgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG8uXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0dGluZyBvdXRwdXRzXG5cbiAgICBjb25zdCBtb2NrT3V0cHV0cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIHRoaXMuX19uZ01vY2tzQ29uZmlnICYmIHRoaXMuX19uZ01vY2tzQ29uZmlnLm91dHB1dHMgPyB0aGlzLl9fbmdNb2Nrc0NvbmZpZy5vdXRwdXRzIDogW10pIHtcbiAgICAgIG1vY2tPdXRwdXRzLnB1c2gob3V0cHV0LnNwbGl0KCc6JylbMF0pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIG1vY2tPdXRwdXRzKSB7XG4gICAgICBpZiAoKHRoaXMgYXMgYW55KVtvdXRwdXRdIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgb3V0cHV0KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgICh0aGlzIGFzIGFueSlbb3V0cHV0XSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIH1cblxuICAgIC8vIHNldHRpbmcgb3VyIG1vY2sgbWV0aG9kcyBhbmQgcHJvcHNcbiAgICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7XG4gICAgZm9yIChjb25zdCBtZXRob2Qgb2YgbW9ja1NlcnZpY2VIZWxwZXIuZXh0cmFjdE1ldGhvZHNGcm9tUHJvdG90eXBlKHByb3RvdHlwZSkpIHtcbiAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBtb2NrU2VydmljZUhlbHBlci5leHRyYWN0UHJvcGVydHlEZXNjcmlwdG9yKHByb3RvdHlwZSwgbWV0aG9kKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbWV0aG9kLCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG1vY2tTZXJ2aWNlSGVscGVyLmV4dHJhY3RQcm9wZXJ0aWVzRnJvbVByb3RvdHlwZShwcm90b3R5cGUpKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yID0gbW9ja1NlcnZpY2VIZWxwZXIuZXh0cmFjdFByb3BlcnR5RGVzY3JpcHRvcihwcm90b3R5cGUsIHByb3ApO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmICghZGVzY3JpcHRvcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wLCBkZXNjcmlwdG9yKTtcbiAgICB9XG5cbiAgICAvLyBzZXR0aW5nIG1vY2tzIGZvciBvcmlnaW5hbCBjbGFzcyBtZXRob2RzIGFuZCBwcm9wc1xuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1vY2tTZXJ2aWNlSGVscGVyLmV4dHJhY3RNZXRob2RzRnJvbVByb3RvdHlwZShtb2NrT2YucHJvdG90eXBlKSkge1xuICAgICAgaWYgKCh0aGlzIGFzIGFueSlbbWV0aG9kXSB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIG1ldGhvZCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBtb2NrU2VydmljZUhlbHBlci5tb2NrKHRoaXMsIG1ldGhvZCk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBtb2NrU2VydmljZUhlbHBlci5leHRyYWN0UHJvcGVydGllc0Zyb21Qcm90b3R5cGUobW9ja09mLnByb3RvdHlwZSkpIHtcbiAgICAgIGlmICgodGhpcyBhcyBhbnkpW3Byb3BdIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgcHJvcCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBtb2NrU2VydmljZUhlbHBlci5tb2NrKHRoaXMsIHByb3AsICdnZXQnKTtcbiAgICAgIG1vY2tTZXJ2aWNlSGVscGVyLm1vY2sodGhpcywgcHJvcCwgJ3NldCcpO1xuICAgIH1cblxuICAgIC8vIGFuZCBmYWtpbmcgcHJvdG90eXBlXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG1vY2tPZi5wcm90b3R5cGUpO1xuXG4gICAgY29uc3QgY29uZmlnID0gbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZy5nZXQobW9ja09mKTtcbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5pbml0ICYmIGNvbmZpZy5pbml0KSB7XG4gICAgICBjb25maWcuaW5pdCh0aGlzLCBpbmplY3Rvcik7XG4gICAgfVxuICB9XG59XG4iXX0=