"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
// Looks like an A9 bug, that queries from @Component aren't processed.
// Also we have to pass prototype, not the class.
// The same issue happens with outputs, but time to time
// (when I restart tests with refreshing browser manually).
// https://github.com/ike18t/ng-mocks/issues/109
function default_1(cls, inputs, exclude) {
    var e_1, _a;
    /* istanbul ignore else */
    if (inputs) {
        try {
            for (var inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
                var input = inputs_1_1.value;
                var _b = __read(input.split(': '), 2), key = _b[0], alias = _b[1];
                if (exclude && exclude.indexOf(key) !== -1) {
                    continue;
                }
                core_1.Input(alias)(cls.prototype, key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (inputs_1_1 && !inputs_1_1.done && (_a = inputs_1.return)) _a.call(inputs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdGUuaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1vbi9kZWNvcmF0ZS5pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBc0M7QUFJdEMsdUVBQXVFO0FBQ3ZFLGlEQUFpRDtBQUNqRCx3REFBd0Q7QUFDeEQsMkRBQTJEO0FBQzNELGdEQUFnRDtBQUNoRCxtQkFBeUIsR0FBYyxFQUFFLE1BQWlCLEVBQUUsT0FBa0I7O0lBQzVFLDBCQUEwQjtJQUMxQixJQUFJLE1BQU0sRUFBRTs7WUFDVixLQUFvQixJQUFBLFdBQUEsU0FBQSxNQUFNLENBQUEsOEJBQUEsa0RBQUU7Z0JBQXZCLElBQU0sS0FBSyxtQkFBQTtnQkFDUixJQUFBLEtBQUEsT0FBZSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFBLEVBQS9CLEdBQUcsUUFBQSxFQUFFLEtBQUssUUFBcUIsQ0FBQztnQkFDdkMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDMUMsU0FBUztpQkFDVjtnQkFDRCxZQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNsQzs7Ozs7Ozs7O0tBQ0Y7QUFDSCxDQUFDO0FBWEQsNEJBV0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi9jb3JlLnR5cGVzJztcblxuLy8gTG9va3MgbGlrZSBhbiBBOSBidWcsIHRoYXQgcXVlcmllcyBmcm9tIEBDb21wb25lbnQgYXJlbid0IHByb2Nlc3NlZC5cbi8vIEFsc28gd2UgaGF2ZSB0byBwYXNzIHByb3RvdHlwZSwgbm90IHRoZSBjbGFzcy5cbi8vIFRoZSBzYW1lIGlzc3VlIGhhcHBlbnMgd2l0aCBvdXRwdXRzLCBidXQgdGltZSB0byB0aW1lXG4vLyAod2hlbiBJIHJlc3RhcnQgdGVzdHMgd2l0aCByZWZyZXNoaW5nIGJyb3dzZXIgbWFudWFsbHkpLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2lrZTE4dC9uZy1tb2Nrcy9pc3N1ZXMvMTA5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY2xzOiBUeXBlPGFueT4sIGlucHV0cz86IHN0cmluZ1tdLCBleGNsdWRlPzogc3RyaW5nW10pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGlucHV0cykge1xuICAgIGZvciAoY29uc3QgaW5wdXQgb2YgaW5wdXRzKSB7XG4gICAgICBjb25zdCBba2V5LCBhbGlhc10gPSBpbnB1dC5zcGxpdCgnOiAnKTtcbiAgICAgIGlmIChleGNsdWRlICYmIGV4Y2x1ZGUuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIElucHV0KGFsaWFzKShjbHMucHJvdG90eXBlLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuIl19