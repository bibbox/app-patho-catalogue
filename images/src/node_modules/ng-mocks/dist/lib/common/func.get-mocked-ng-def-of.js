"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockedNgDefOf = void 0;
var core_helpers_1 = require("./core.helpers");
var core_tokens_1 = require("./core.tokens");
var func_is_mocked_ng_def_of_1 = require("./func.is-mocked-ng-def-of");
var ng_mocks_universe_1 = require("./ng-mocks-universe");
function getMockedNgDefOf(declaration, type) {
    var source = declaration.mockOf ? declaration.mockOf : declaration;
    var mocks = core_helpers_1.getTestBedInjection(core_tokens_1.NG_MOCKS);
    var mock;
    // If mocks exists, we are in the MockBuilder env and it's enough for the check.
    if (mocks && mocks.has(source)) {
        mock = mocks.get(source);
    }
    else if (mocks) {
        throw new Error("There is no mock for " + source.name);
    }
    // If we are not in the MockBuilder env we can rely on the current cache.
    if (!mock && source !== declaration) {
        mock = declaration;
    }
    else if (!mock && ng_mocks_universe_1.default.cacheDeclarations.has(source)) {
        mock = ng_mocks_universe_1.default.cacheDeclarations.get(source);
    }
    if (mock && !type) {
        return mock;
    }
    if (mock && type && func_is_mocked_ng_def_of_1.isMockedNgDefOf(mock, source, type)) {
        return mock;
    }
    // Looks like the def hasn't been replaced with its mock copy.
    throw new Error("There is no mock for " + source.name);
}
exports.getMockedNgDefOf = getMockedNgDefOf;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5nZXQtbW9ja2VkLW5nLWRlZi1vZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tb24vZnVuYy5nZXQtbW9ja2VkLW5nLWRlZi1vZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSwrQ0FBcUQ7QUFDckQsNkNBQXlDO0FBRXpDLHVFQUE2RDtBQUM3RCx5REFBa0Q7QUFxQ2xELFNBQWdCLGdCQUFnQixDQUFDLFdBQWdCLEVBQUUsSUFBVTtJQUMzRCxJQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDckUsSUFBTSxLQUFLLEdBQUcsa0NBQW1CLENBQUMsc0JBQVEsQ0FBQyxDQUFDO0lBRTVDLElBQUksSUFBUyxDQUFDO0lBRWQsZ0ZBQWdGO0lBQ2hGLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDOUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDMUI7U0FBTSxJQUFJLEtBQUssRUFBRTtRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUF3QixNQUFNLENBQUMsSUFBTSxDQUFDLENBQUM7S0FDeEQ7SUFFRCx5RUFBeUU7SUFDekUsSUFBSSxDQUFDLElBQUksSUFBSSxNQUFNLEtBQUssV0FBVyxFQUFFO1FBQ25DLElBQUksR0FBRyxXQUFXLENBQUM7S0FDcEI7U0FBTSxJQUFJLENBQUMsSUFBSSxJQUFJLDJCQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2pFLElBQUksR0FBRywyQkFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN0RDtJQUVELElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksMENBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ3ZELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCw4REFBOEQ7SUFDOUQsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBd0IsTUFBTSxDQUFDLElBQU0sQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUE3QkQsNENBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9ja2VkQ29tcG9uZW50IH0gZnJvbSAnLi4vbW9jay1jb21wb25lbnQvdHlwZXMnO1xuaW1wb3J0IHsgTW9ja2VkRGlyZWN0aXZlIH0gZnJvbSAnLi4vbW9jay1kaXJlY3RpdmUvdHlwZXMnO1xuaW1wb3J0IHsgTW9ja2VkTW9kdWxlIH0gZnJvbSAnLi4vbW9jay1tb2R1bGUvdHlwZXMnO1xuaW1wb3J0IHsgTW9ja2VkUGlwZSB9IGZyb20gJy4uL21vY2stcGlwZS90eXBlcyc7XG5cbmltcG9ydCB7IGdldFRlc3RCZWRJbmplY3Rpb24gfSBmcm9tICcuL2NvcmUuaGVscGVycyc7XG5pbXBvcnQgeyBOR19NT0NLUyB9IGZyb20gJy4vY29yZS50b2tlbnMnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4vY29yZS50eXBlcyc7XG5pbXBvcnQgeyBpc01vY2tlZE5nRGVmT2YgfSBmcm9tICcuL2Z1bmMuaXMtbW9ja2VkLW5nLWRlZi1vZic7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIG1vZHVsZSBiYXNlZCBvbiBhIG1vY2sgbW9kdWxlIG9yIGEgc291cmNlIG1vZHVsZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjZ2V0bW9ja2VkbmdkZWZvZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZjxUPihkZWNsYXJhdGlvbjogVHlwZTxUPiwgdHlwZTogJ20nKTogVHlwZTxNb2NrZWRNb2R1bGU8VD4+O1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIGNvbXBvbmVudCBiYXNlZCBvbiBhIG1vY2sgY29tcG9uZW50IG9yIGEgc291cmNlIGNvbXBvbmVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjZ2V0bW9ja2VkbmdkZWZvZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZjxUPihkZWNsYXJhdGlvbjogVHlwZTxUPiwgdHlwZTogJ2MnKTogVHlwZTxNb2NrZWRDb21wb25lbnQ8VD4+O1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIGRpcmVjdGl2ZSBiYXNlZCBvbiBhIG1vY2sgZGlyZWN0aXZlIG9yIGEgc291cmNlIGRpcmVjdGl2ZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjZ2V0bW9ja2VkbmdkZWZvZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZjxUPihkZWNsYXJhdGlvbjogVHlwZTxUPiwgdHlwZTogJ2QnKTogVHlwZTxNb2NrZWREaXJlY3RpdmU8VD4+O1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIHBpcGUgYmFzZWQgb24gYSBtb2NrIHBpcGUgb3IgYSBzb3VyY2UgcGlwZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjZ2V0bW9ja2VkbmdkZWZvZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZjxUPihkZWNsYXJhdGlvbjogVHlwZTxUPiwgdHlwZTogJ3AnKTogVHlwZTxNb2NrZWRQaXBlPFQ+PjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZGVmIG9mIGEgbW9jayBjbGFzcyBiYXNlZCBvbiBhIG1vY2sgY2xhc3Mgb3IgYSBzb3VyY2UgY2xhc3MgZGVjb3JhdGVkIGJ5IGEgbmcgdHlwZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2UxOHQvbmctbW9ja3MjZ2V0bW9ja2VkbmdkZWZvZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZihkZWNsYXJhdGlvbjogVHlwZTxhbnk+KTogVHlwZTxhbnk+O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZihkZWNsYXJhdGlvbjogYW55LCB0eXBlPzogYW55KTogYW55IHtcbiAgY29uc3Qgc291cmNlID0gZGVjbGFyYXRpb24ubW9ja09mID8gZGVjbGFyYXRpb24ubW9ja09mIDogZGVjbGFyYXRpb247XG4gIGNvbnN0IG1vY2tzID0gZ2V0VGVzdEJlZEluamVjdGlvbihOR19NT0NLUyk7XG5cbiAgbGV0IG1vY2s6IGFueTtcblxuICAvLyBJZiBtb2NrcyBleGlzdHMsIHdlIGFyZSBpbiB0aGUgTW9ja0J1aWxkZXIgZW52IGFuZCBpdCdzIGVub3VnaCBmb3IgdGhlIGNoZWNrLlxuICBpZiAobW9ja3MgJiYgbW9ja3MuaGFzKHNvdXJjZSkpIHtcbiAgICBtb2NrID0gbW9ja3MuZ2V0KHNvdXJjZSk7XG4gIH0gZWxzZSBpZiAobW9ja3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG1vY2sgZm9yICR7c291cmNlLm5hbWV9YCk7XG4gIH1cblxuICAvLyBJZiB3ZSBhcmUgbm90IGluIHRoZSBNb2NrQnVpbGRlciBlbnYgd2UgY2FuIHJlbHkgb24gdGhlIGN1cnJlbnQgY2FjaGUuXG4gIGlmICghbW9jayAmJiBzb3VyY2UgIT09IGRlY2xhcmF0aW9uKSB7XG4gICAgbW9jayA9IGRlY2xhcmF0aW9uO1xuICB9IGVsc2UgaWYgKCFtb2NrICYmIG5nTW9ja3NVbml2ZXJzZS5jYWNoZURlY2xhcmF0aW9ucy5oYXMoc291cmNlKSkge1xuICAgIG1vY2sgPSBuZ01vY2tzVW5pdmVyc2UuY2FjaGVEZWNsYXJhdGlvbnMuZ2V0KHNvdXJjZSk7XG4gIH1cblxuICBpZiAobW9jayAmJiAhdHlwZSkge1xuICAgIHJldHVybiBtb2NrO1xuICB9XG4gIGlmIChtb2NrICYmIHR5cGUgJiYgaXNNb2NrZWROZ0RlZk9mKG1vY2ssIHNvdXJjZSwgdHlwZSkpIHtcbiAgICByZXR1cm4gbW9jaztcbiAgfVxuXG4gIC8vIExvb2tzIGxpa2UgdGhlIGRlZiBoYXNuJ3QgYmVlbiByZXBsYWNlZCB3aXRoIGl0cyBtb2NrIGNvcHkuXG4gIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gbW9jayBmb3IgJHtzb3VyY2UubmFtZX1gKTtcbn1cbiJdfQ==