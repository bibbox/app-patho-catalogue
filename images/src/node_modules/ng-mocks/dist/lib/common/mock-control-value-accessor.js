"use strict";
// tslint:disable:variable-name
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockControlValueAccessor = void 0;
var mock_1 = require("./mock");
var MockControlValueAccessor = /** @class */ (function (_super) {
    __extends(MockControlValueAccessor, _super);
    function MockControlValueAccessor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.__ngMocksMockControlValueAccessor = true;
        /* istanbul ignore next */
        _this.__simulateChange = function (value) { };
        /* istanbul ignore next */
        _this.__simulateTouch = function () { };
        /* istanbul ignore next */
        _this.__simulateValidatorChange = function () { };
        _this.setDisabledState = function (isDisabled) { };
        _this.validate = function (control) { return null; };
        _this.writeValue = function (value) { };
        return _this;
    }
    MockControlValueAccessor.prototype.registerOnChange = function (fn) {
        this.__simulateChange = fn;
    };
    MockControlValueAccessor.prototype.registerOnTouched = function (fn) {
        this.__simulateTouch = fn;
    };
    MockControlValueAccessor.prototype.registerOnValidatorChange = function (fn) {
        this.__simulateValidatorChange = fn;
    };
    return MockControlValueAccessor;
}(mock_1.Mock));
exports.MockControlValueAccessor = MockControlValueAccessor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1jb250cm9sLXZhbHVlLWFjY2Vzc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1vbi9tb2NrLWNvbnRyb2wtdmFsdWUtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtCQUErQjs7Ozs7Ozs7Ozs7Ozs7OztBQUkvQiwrQkFBOEI7QUFFOUI7SUFBOEMsNENBQUk7SUFBbEQ7UUFBQSxxRUE2QkM7UUE1QmlCLHVDQUFpQyxHQUFTLElBQUksQ0FBQztRQUUvRCwwQkFBMEI7UUFDMUIsc0JBQWdCLEdBQUcsVUFBQyxLQUFVLElBQU0sQ0FBQyxDQUFDO1FBRXRDLDBCQUEwQjtRQUMxQixxQkFBZSxHQUFHLGNBQU8sQ0FBQyxDQUFDO1FBRTNCLDBCQUEwQjtRQUMxQiwrQkFBeUIsR0FBRyxjQUFPLENBQUMsQ0FBQztRQWNyQyxzQkFBZ0IsR0FBRyxVQUFDLFVBQW1CLElBQVksQ0FBQyxDQUFDO1FBRXJELGNBQVEsR0FBRyxVQUFDLE9BQXdCLElBQThCLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztRQUV2RSxnQkFBVSxHQUFHLFVBQUMsS0FBVSxJQUFNLENBQUMsQ0FBQzs7SUFDbEMsQ0FBQztJQWpCQyxtREFBZ0IsR0FBaEIsVUFBaUIsRUFBd0I7UUFDdkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsb0RBQWlCLEdBQWpCLFVBQWtCLEVBQWM7UUFDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELDREQUF5QixHQUF6QixVQUEwQixFQUFjO1FBQ3RDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQU9ILCtCQUFDO0FBQUQsQ0FBQyxBQTdCRCxDQUE4QyxXQUFJLEdBNkJqRDtBQTdCWSw0REFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lXG5cbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTW9jayB9IGZyb20gJy4vbW9jayc7XG5cbmV4cG9ydCBjbGFzcyBNb2NrQ29udHJvbFZhbHVlQWNjZXNzb3IgZXh0ZW5kcyBNb2NrIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gIHB1YmxpYyByZWFkb25seSBfX25nTW9ja3NNb2NrQ29udHJvbFZhbHVlQWNjZXNzb3I6IHRydWUgPSB0cnVlO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIF9fc2ltdWxhdGVDaGFuZ2UgPSAodmFsdWU6IGFueSkgPT4ge307XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgX19zaW11bGF0ZVRvdWNoID0gKCkgPT4ge307XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgX19zaW11bGF0ZVZhbGlkYXRvckNoYW5nZSA9ICgpID0+IHt9O1xuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fX3NpbXVsYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX19zaW11bGF0ZVRvdWNoID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fX3NpbXVsYXRlVmFsaWRhdG9yQ2hhbmdlID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlID0gKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkID0+IHt9O1xuXG4gIHZhbGlkYXRlID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IG51bGw7XG5cbiAgd3JpdGVWYWx1ZSA9ICh2YWx1ZTogYW55KSA9PiB7fTtcbn1cbiJdfQ==