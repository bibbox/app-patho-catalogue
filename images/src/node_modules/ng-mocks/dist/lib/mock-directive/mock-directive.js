"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDirective = exports.MockDirectives = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var forms_1 = require("@angular/forms");
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_1 = require("../common/core.reflect");
var decorate_inputs_1 = require("../common/decorate.inputs");
var decorate_outputs_1 = require("../common/decorate.outputs");
var decorate_queries_1 = require("../common/decorate.queries");
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var mock_control_value_accessor_1 = require("../common/mock-control-value-accessor");
var mock_of_1 = require("../common/mock-of");
var ng_mocks_universe_1 = require("../common/ng-mocks-universe");
var helper_1 = require("../mock-service/helper");
function MockDirectives() {
    var directives = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        directives[_i] = arguments[_i];
    }
    return directives.map(MockDirective);
}
exports.MockDirectives = MockDirectives;
function MockDirective(directive) {
    var e_1, _a;
    // We are inside of an 'it'.
    // It's fine to to return a mock copy or to throw an exception if it wasn't replaced with its mock copy in TestBed.
    if (testing_1.getTestBed()._instantiated) {
        try {
            return func_get_mocked_ng_def_of_1.getMockedNgDefOf(directive, 'd');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    if (ng_mocks_universe_1.default.flags.has('cacheDirective') && ng_mocks_universe_1.default.cacheDeclarations.has(directive)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(directive);
    }
    var meta;
    try {
        meta = core_reflect_1.directiveResolver.resolve(directive);
    }
    catch (e) {
        /* istanbul ignore next */
        throw new Error('ng-mocks is not in JIT mode and cannot resolve declarations');
    }
    var selector = meta.selector, exportAs = meta.exportAs, inputs = meta.inputs, outputs = meta.outputs, queries = meta.queries, providers = meta.providers;
    var options = {
        exportAs: exportAs,
        providers: [
            {
                provide: directive,
                useExisting: (function () {
                    var value = core_1.forwardRef(function () { return DirectiveMock; });
                    value.__ngMocksSkip = true;
                    return value;
                })(),
            },
        ],
        selector: selector,
    };
    var resolutions = new Map();
    var resolveProvider = function (def) { return helper_1.default.resolveProvider(def, resolutions); };
    var setNgValueAccessor;
    try {
        for (var _b = __values(core_helpers_1.flatten(providers || [])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var providerDef = _c.value;
            var provide = providerDef && typeof providerDef === 'object' && providerDef.provide ? providerDef.provide : providerDef;
            if (options.providers && provide === forms_1.NG_VALIDATORS) {
                options.providers.push({
                    multi: true,
                    provide: provide,
                    useExisting: (function () {
                        var value = core_1.forwardRef(function () { return DirectiveMock; });
                        value.__ngMocksSkip = true;
                        return value;
                    })(),
                });
                continue;
            }
            if (setNgValueAccessor === undefined && options.providers && provide === forms_1.NG_VALUE_ACCESSOR) {
                setNgValueAccessor = false;
                options.providers.push({
                    multi: true,
                    provide: provide,
                    useExisting: (function () {
                        var value = core_1.forwardRef(function () { return DirectiveMock; });
                        value.__ngMocksSkip = true;
                        return value;
                    })(),
                });
                continue;
            }
            var mock = resolveProvider(providerDef);
            /* istanbul ignore else */
            if (options.providers && mock) {
                options.providers.push(mock);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (setNgValueAccessor === undefined) {
        setNgValueAccessor =
            helper_1.default.extractMethodsFromPrototype(directive.prototype).indexOf('writeValue') !== -1;
    }
    var config = ng_mocks_universe_1.default.config.get(directive);
    var DirectiveMock = /** @class */ (function (_super) {
        __extends(DirectiveMock, _super);
        /* istanbul ignore next */
        function DirectiveMock(injector, element, template, viewContainer) {
            var _this = _super.call(this, injector) || this;
            _this.__ngMocksInstall(element, template, viewContainer);
            return _this;
        }
        DirectiveMock.prototype.ngOnInit = function () {
            if (config && config.render) {
                var _a = config.render !== true
                    ? config.render
                    : {
                        $implicit: undefined,
                        variables: {},
                    }, $implicit = _a.$implicit, variables = _a.variables;
                this.__render($implicit, variables);
            }
        };
        DirectiveMock.prototype.__ngMocksInstall = function (element, template, viewContainer) {
            // Basically any directive on ng-template is treated as structural, even it doesn't control render process.
            // In our case we don't if we should render it or not and due to this we do nothing.
            this.__element = element;
            this.__template = template;
            this.__viewContainer = viewContainer;
            this.__isStructural = template && viewContainer;
            // Providing method to render mock values.
            this.__render = function ($implicit, variables) {
                if (viewContainer && template) {
                    viewContainer.clear();
                    viewContainer.createEmbeddedView(template, __assign(__assign({}, variables), { $implicit: $implicit }));
                }
            };
        };
        DirectiveMock = __decorate([
            core_1.Directive(options),
            mock_of_1.MockOf(directive, { outputs: outputs, setNgValueAccessor: setNgValueAccessor }),
            __param(1, core_1.Optional()),
            __param(2, core_1.Optional()),
            __param(3, core_1.Optional()),
            __metadata("design:paramtypes", [core_1.Injector,
                core_1.ElementRef,
                core_1.TemplateRef,
                core_1.ViewContainerRef])
        ], DirectiveMock);
        return DirectiveMock;
    }(mock_control_value_accessor_1.MockControlValueAccessor));
    /* istanbul ignore else */
    if (queries) {
        decorate_inputs_1.default(DirectiveMock, inputs, Object.keys(queries));
    }
    decorate_outputs_1.default(DirectiveMock, outputs);
    decorate_queries_1.default(DirectiveMock, queries);
    /* istanbul ignore else */
    if (ng_mocks_universe_1.default.flags.has('cacheDirective')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(directive, DirectiveMock);
    }
    return DirectiveMock;
}
exports.MockDirective = MockDirective;
//# sourceMappingURL=data:application/json;base64,