{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/core/breadcrumbs/dso-breadcrumbs.service.ts","webpack:///src/app/+browse-by/+browse-by-switcher/browse-by-decorator.ts","webpack:///src/app/+browse-by/browse-by-guard.ts","webpack:///src/app/+browse-by/browse-by-dso-breadcrumb.resolver.ts","webpack:///src/app/+browse-by/browse-by-i18n-breadcrumb.resolver.ts","webpack:///src/app/+browse-by/+browse-by-switcher/themed-browse-by-switcher.component.ts","webpack:///src/app/+browse-by/browse-by-routing.module.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/core/browse/browse-entry-search-options.model.ts","webpack:///src/app/+browse-by/+browse-by-metadata-page/browse-by-metadata-page.component.html","webpack:///src/app/+browse-by/+browse-by-metadata-page/browse-by-metadata-page.component.ts","webpack:///src/app/+browse-by/+browse-by-title-page/browse-by-title-page.component.ts","webpack:///src/app/+browse-by/browse-by.module.ts","webpack:///src/app/+browse-by/+browse-by-date-page/browse-by-date-page.component.ts","webpack:///src/app/+browse-by/browse-by-page.module.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/\\+browse\\-by\\/\\+browse\\-by\\-switcher\\/browse\\-by\\-switcher\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","breadcrumbService","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","DSOBreadcrumbsService","linkService","dsoNameService","label","getName","crumb","propertyName","getParentLinkKey","resolveLink","pipe","parentRD","hasSucceeded","statusCode","payload","parent","getBreadcrumbs","breadcrumbs","BrowseByType","Title","Metadata","Date","DEFAULT_BROWSE_BY_TYPE","BROWSE_BY_COMPONENT_FACTORY","InjectionToken","providedIn","factory","getComponentByBrowseByType","map","Map","rendersBrowseBy","browseByType","component","get","set","comp","BrowseByGuard","BrowseByDSOBreadcrumbResolver","BrowseByI18nBreadcrumbResolver","dsoService","translate","title","id","params","queryParams","metadataField","config","environment","browseBy","types","find","conf","scope","value","metadataTranslated","instant","findById","dsoRD","createData","name","collection","field","Object","assign","dataService","uuid","object","super","ThemedBrowseBySwitcherComponent","BrowseByRoutingModule","themeName","forChild","path","resolve","breadcrumb","children","canActivate","BrowseEntrySearchOptions","metadataDefinition","pagination","sort","startsWith","BrowseByMetadataPageComponent","browseService","paginationService","router","paginationConfig","currentPage","pageSize","subs","defaultBrowseId","browseId","startsWithType","text","sortConfig","ASC","updatePage","currentPagination$","getCurrentPagination","currentSort$","getCurrentSort","push","routeParams","currentSort","subscribe","searchOptions","browseParamsToOptions","updatePageWithItems","updateParent","updateStartsWithTextOptions","startsWithOptions","split","browseEntries$","getBrowseEntriesFor","items$","console","log","getBrowseItemsFor","parent$","items","getPrevBrowseItems","entries","getPrevBrowseEntries","getNextBrowseItems","getNextBrowseEntries","filter","sub","forEach","unsubscribe","clearPagination","metadata","BrowseByTitlePageComponent","BrowseByDatePageComponent","BrowseByModule","BrowseByPageModule","ENTRY_COMPONENTS","cdRef","defaultMetadataField","date","updateStartsWithOptions","definition","getFirstItemFor","firstItemRD","lowerLimit","defaultLowerLimit","firstMetadataValue","getUTCFullYear","options","currentYear","getFullYear","oneYearBreak","Math","floor","oneYearLimit","fiveYearBreak","fiveYearLimit","i","detectChanges","ngModule","providers","provide","withEntryComponents","webpackAsyncContext","req","__webpack_require__","o","Promise","then","e","code","ids","all","slice","keys","module","exports","I18nBreadcrumbsService","Breadcrumb"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { DSONameService } from './dso-name.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { LinkService } from '../cache/builders/link.service';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { find, map, switchMap } from 'rxjs/operators';\nimport { RemoteData } from '../data/remote-data';\nimport { hasValue } from '../../shared/empty.util';\nimport { Injectable } from '@angular/core';\nimport { getDSORoute } from '../../app-routing-paths';\n\n/**\n * Service to calculate DSpaceObject breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DSOBreadcrumbsService implements BreadcrumbsProviderService<ChildHALResource & DSpaceObject> {\n  constructor(\n    private linkService: LinkService,\n    private dsoNameService: DSONameService\n  ) {\n\n  }\n\n  /**\n   * Method to recursively calculate the breadcrumbs\n   * This method returns the name and url of the key and all its parent DSOs recursively, top down\n   * @param key The key (a DSpaceObject) used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: ChildHALResource & DSpaceObject, url: string): Observable<Breadcrumb[]> {\n    const label = this.dsoNameService.getName(key);\n    const crumb = new Breadcrumb(label, url);\n    const propertyName = key.getParentLinkKey();\n    return this.linkService.resolveLink(key, followLink(propertyName))[propertyName].pipe(\n      find((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => parentRD.hasSucceeded || parentRD.statusCode === 204),\n      switchMap((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => {\n        if (hasValue(parentRD.payload)) {\n          const parent = parentRD.payload;\n          return this.getBreadcrumbs(parent, getDSORoute(parent));\n        }\n        return observableOf([]);\n\n      }),\n      map((breadcrumbs: Breadcrumb[]) => [...breadcrumbs, crumb])\n    );\n  }\n}\n","import { hasNoValue } from '../../shared/empty.util';\nimport { InjectionToken } from '@angular/core';\nimport { GenericConstructor } from '../../core/shared/generic-constructor';\n\nexport enum BrowseByType {\n  Title = 'title',\n  Metadata = 'metadata',\n  Date = 'date'\n}\n\nexport const DEFAULT_BROWSE_BY_TYPE = BrowseByType.Metadata;\n\nexport const BROWSE_BY_COMPONENT_FACTORY = new InjectionToken<(browseByType) => GenericConstructor<any>>('getComponentByBrowseByType', {\n  providedIn: 'root',\n  factory: () => getComponentByBrowseByType\n});\n\nconst map = new Map();\n\n/**\n * Decorator used for rendering Browse-By pages by type\n * @param browseByType  The type of page\n */\nexport function rendersBrowseBy(browseByType: BrowseByType) {\n  return function decorator(component: any) {\n    if (hasNoValue(map.get(browseByType))) {\n      map.set(browseByType, component);\n    } else {\n      throw new Error(`There can't be more than one component to render Browse-By of type \"${browseByType}\"`);\n    }\n  };\n}\n\n/**\n * Get the component used for rendering a Browse-By page by type\n * @param browseByType  The type of page\n */\nexport function getComponentByBrowseByType(browseByType) {\n  const comp = map.get(browseByType);\n  if (hasNoValue(comp)) {\n    map.get(DEFAULT_BROWSE_BY_TYPE);\n  }\n  return comp;\n}\n","import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { DSpaceObjectDataService } from '../core/data/dspace-object-data.service';\nimport { hasNoValue, hasValue } from '../shared/empty.util';\nimport { map } from 'rxjs/operators';\nimport { getFirstSucceededRemoteData } from '../core/shared/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { of as observableOf } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\n/**\n * A guard taking care of the correct route.data being set for the Browse-By components\n */\nexport class BrowseByGuard implements CanActivate {\n\n  constructor(protected dsoService: DSpaceObjectDataService,\n              protected translate: TranslateService) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const title = route.data.title;\n    const id = route.params.id || route.queryParams.id || route.data.id;\n    let metadataField = route.data.metadataField;\n    if (hasNoValue(metadataField) && hasValue(id)) {\n      const config = environment.browseBy.types.find((conf) => conf.id === id);\n      if (hasValue(config) && hasValue(config.metadataField)) {\n        metadataField = config.metadataField;\n      }\n    }\n    const scope = route.queryParams.scope;\n    const value = route.queryParams.value;\n    const metadataTranslated = this.translate.instant('browse.metadata.' + id);\n    if (hasValue(scope)) {\n      const dsoAndMetadata$ = this.dsoService.findById(scope).pipe(getFirstSucceededRemoteData());\n      return dsoAndMetadata$.pipe(\n        map((dsoRD) => {\n          const name = dsoRD.payload.name;\n          route.data = this.createData(title, id, metadataField, name, metadataTranslated, value, route);\n          return true;\n        })\n      );\n    } else {\n      route.data = this.createData(title, id, metadataField, '', metadataTranslated, value, route);\n      return observableOf(true);\n    }\n  }\n\n  private createData(title, id, metadataField, collection, field, value, route) {\n    return Object.assign({}, route.data, {\n      title: title,\n      id: id,\n      metadataField: metadataField,\n      collection: collection,\n      field: field,\n      value: hasValue(value) ? `\"${value}\"` : ''\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Community } from '../core/shared/community.model';\nimport { DSpaceObjectDataService } from '../core/data/dspace-object-data.service';\nimport { DSOBreadcrumbsService } from '../core/breadcrumbs/dso-breadcrumbs.service';\nimport { Collection } from '../core/shared/collection.model';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BreadcrumbConfig } from '../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Observable } from 'rxjs';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../core/shared/operators';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getDSORoute } from '../app-routing-paths';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a DSpaceObject on a browse by page\n */\n@Injectable()\nexport class BrowseByDSOBreadcrumbResolver {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: DSpaceObjectDataService) {\n  }\n\n  /**\n   * Method for resolving a breadcrumb config object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<Community | Collection>> {\n    const uuid = route.queryParams.scope;\n    if (hasValue(uuid)) {\n      return this.dataService.findById(uuid).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((object: Community | Collection) => {\n          return { provider: this.breadcrumbService, key: object, url: getDSORoute(object) };\n        })\n      );\n    }\n    return undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from '../core/breadcrumbs/i18n-breadcrumbs.service';\nimport { BreadcrumbConfig } from '../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\n\n/**\n * This class resolves a BreadcrumbConfig object with an i18n key string for a route\n * It adds the metadata field of the current browse-by page\n */\n@Injectable()\nexport class BrowseByI18nBreadcrumbResolver extends I18nBreadcrumbResolver {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n    super(breadcrumbService);\n  }\n\n  /**\n   * Method for resolving a browse-by i18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object for a browse-by page\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const extendedBreadcrumbKey = route.data.breadcrumbKey + '.' + route.params.id;\n    route.data = Object.assign({}, route.data, { breadcrumbKey: extendedBreadcrumbKey });\n    return super.resolve(route, state);\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { BrowseBySwitcherComponent } from './browse-by-switcher.component';\n\n/**\n * Themed wrapper for BrowseBySwitcherComponent\n */\n@Component({\n  selector: 'ds-themed-browse-by-switcher',\n  styleUrls: [],\n  templateUrl: '../../shared/theme-support/themed.component.html'\n})\nexport class ThemedBrowseBySwitcherComponent extends ThemedComponent<BrowseBySwitcherComponent> {\n  protected getComponentName(): string {\n    return 'BrowseBySwitcherComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/+browse-by/+browse-by-switcher/browse-by-switcher.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./browse-by-switcher.component`);\n  }\n\n\n}\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { BrowseByGuard } from './browse-by-guard';\nimport { BrowseByDSOBreadcrumbResolver } from './browse-by-dso-breadcrumb.resolver';\nimport { BrowseByI18nBreadcrumbResolver } from './browse-by-i18n-breadcrumb.resolver';\nimport { ThemedBrowseBySwitcherComponent } from './+browse-by-switcher/themed-browse-by-switcher.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: { breadcrumb: BrowseByDSOBreadcrumbResolver },\n        children: [\n          {\n            path: ':id',\n            component: ThemedBrowseBySwitcherComponent,\n            canActivate: [BrowseByGuard],\n            resolve: { breadcrumb: BrowseByI18nBreadcrumbResolver },\n            data: { title: 'browse.title', breadcrumbKey: 'browse.metadata' }\n          }\n        ]\n      }])\n  ],\n  providers: [\n    BrowseByI18nBreadcrumbResolver,\n    BrowseByDSOBreadcrumbResolver\n  ]\n})\nexport class BrowseByRoutingModule {\n\n}\n","<ng-template #vcr></ng-template>\n","import { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortOptions } from '../cache/models/sort-options.model';\n\n/**\n * A class that defines the search options to be used for fetching browse entries or items\n * - metadataDefinition:  The metadata definition to fetch entries or items for\n * - pagination:          Optional pagination options to use\n * - sort:                Optional sorting options to use\n * - scope:               An optional scope to limit the results within a specific collection or community\n */\nexport class BrowseEntrySearchOptions {\n  constructor(public metadataDefinition: string,\n              public pagination?: PaginationComponentOptions,\n              public sort?: SortOptions,\n              public startsWith?: string,\n              public scope?: string) {\n  }\n}\n","<div class=\"container\">\n    <ng-container *ngVar=\"(parent$ | async) as parent\">\n    <ng-container *ngIf=\"parent?.payload as parentContext\">\n    <header class=\"comcol-header border-bottom mb-4 pb-4\">\n        <!-- Parent Name -->\n        <ds-comcol-page-header [name]=\"parentContext.name\">\n        </ds-comcol-page-header>\n        <!-- Handle -->\n        <ds-comcol-page-handle\n            [content]=\"parentContext.handle\"\n            [title]=\"parentContext.type+'.page.handle'\" >\n        </ds-comcol-page-handle>\n        <!-- Introductory text -->\n        <ds-comcol-page-content [content]=\"parentContext.introductoryText\" [hasInnerHtml]=\"true\">\n        </ds-comcol-page-content>\n        <!-- News -->\n        <ds-comcol-page-content [content]=\"parentContext.sidebarText\" [hasInnerHtml]=\"true\" [title]=\"'community.page.news'\">\n        </ds-comcol-page-content>\n      </header>\n      <!-- Browse-By Links -->\n      <ds-comcol-page-browse-by [id]=\"parentContext.id\" [contentType]=\"parentContext.type\"></ds-comcol-page-browse-by>\n      </ng-container></ng-container>\n\n    <section class=\"comcol-page-browse-section\">\n    <div class=\"browse-by-metadata w-100\">\n    <ds-browse-by *ngIf=\"startsWithOptions\" class=\"col-xs-12 w-100\"\n      title=\"{{'browse.title' | translate:{collection: (parent$ | async)?.payload?.name || '', field: 'browse.metadata.' + browseId | translate, value: (value)? '&quot;' + value + '&quot;': ''} }}\"\n      parentname=\"{{(parent$ | async)?.payload?.name || ''}}\"\n      [objects$]=\"(items$ !== undefined)? items$ : browseEntries$\"\n      [paginationConfig]=\"(currentPagination$ |async)\"\n      [sortConfig]=\"(currentSort$ |async)\"\n      [type]=\"startsWithType\"\n      [startsWithOptions]=\"startsWithOptions\"\n      [enableArrows]=\"true\"\n      (prev)=\"goPrev()\"\n      (next)=\"goNext()\">\n    </ds-browse-by>\n    <ds-loading *ngIf=\"!startsWithOptions\" message=\"{{'loading.browse-by-page' | translate}}\"></ds-loading>\n  </div>\n  </section>\n  <ng-container *ngVar=\"(parent$ | async) as parent\">\n    <ng-container *ngIf=\"parent?.payload as parentContext\">\n  <footer *ngIf=\"parentContext.copyrightText\" class=\"border-top my-5 pt-4\">\n    <div >\n\n      <!-- Copyright -->\n      <ds-comcol-page-content [content]=\"parentContext.copyrightText\" [hasInnerHtml]=\"true\">\n      </ds-comcol-page-content>\n    </div>\n  </footer>\n</ng-container>\n</ng-container>\n</div>\n","import { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { BrowseService } from '../../core/browse/browse.service';\nimport { BrowseEntry } from '../../core/shared/browse-entry.model';\nimport { Item } from '../../core/shared/item.model';\nimport { BrowseEntrySearchOptions } from '../../core/browse/browse-entry-search-options.model';\nimport { getFirstSucceededRemoteData } from '../../core/shared/operators';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { StartsWithType } from '../../shared/starts-with/starts-with-decorator';\nimport { BrowseByType, rendersBrowseBy } from '../+browse-by-switcher/browse-by-decorator';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'ds-browse-by-metadata-page',\n  styleUrls: ['./browse-by-metadata-page.component.scss'],\n  templateUrl: './browse-by-metadata-page.component.html'\n})\n/**\n * Component for browsing (items) by metadata definition\n * A metadata definition (a.k.a. browse id) is a short term used to describe one or multiple metadata fields.\n * An example would be 'author' for 'dc.contributor.*'\n */\n@rendersBrowseBy(BrowseByType.Metadata)\nexport class BrowseByMetadataPageComponent implements OnInit {\n\n  /**\n   * The list of browse-entries to display\n   */\n  browseEntries$: Observable<RemoteData<PaginatedList<BrowseEntry>>>;\n\n  /**\n   * The list of items to display when a value is present\n   */\n  items$: Observable<RemoteData<PaginatedList<Item>>>;\n\n  /**\n   * The current Community or Collection we're browsing metadata/items in\n   */\n  parent$: Observable<RemoteData<DSpaceObject>>;\n\n  /**\n   * The pagination config used to display the values\n   */\n  paginationConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'bbm',\n    currentPage: 1,\n    pageSize: 20\n  });\n\n  /**\n   * The pagination observable\n   */\n  currentPagination$: Observable<PaginationComponentOptions>;\n\n  /**\n   * The sorting config observable\n   */\n  currentSort$: Observable<SortOptions>;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * The default browse id to resort to when none is provided\n   */\n  defaultBrowseId = 'author';\n\n  /**\n   * The current browse id\n   */\n  browseId = this.defaultBrowseId;\n\n  /**\n   * The type of StartsWith options to render\n   * Defaults to text\n   */\n  startsWithType = StartsWithType.text;\n\n  /**\n   * The list of StartsWith options\n   * Should be defined after ngOnInit is called!\n   */\n  startsWithOptions;\n\n  /**\n   * The value we're browing items for\n   * - When the value is not empty, we're browsing items\n   * - When the value is empty, we're browsing browse-entries (values for the given metadata definition)\n   */\n  value = '';\n\n  /**\n   * The current startsWith option (fetched and updated from query-params)\n   */\n  startsWith: string;\n\n  public constructor(protected route: ActivatedRoute,\n                     protected browseService: BrowseService,\n                     protected dsoService: DSpaceObjectDataService,\n                     protected paginationService: PaginationService,\n                     protected router: Router) {\n  }\n\n  ngOnInit(): void {\n    const sortConfig = new SortOptions('default', SortDirection.ASC);\n    this.updatePage(new BrowseEntrySearchOptions(this.defaultBrowseId, this.paginationConfig, sortConfig));\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    this.currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, sortConfig);\n    this.subs.push(\n      observableCombineLatest([this.route.params, this.route.queryParams, this.currentPagination$, this.currentSort$]).pipe(\n        map(([routeParams, queryParams, currentPage, currentSort]) => {\n          return [Object.assign({}, routeParams, queryParams),currentPage,currentSort];\n        })\n      ).subscribe(([params, currentPage, currentSort]: [Params, PaginationComponentOptions, SortOptions]) => {\n          this.browseId = params.id || this.defaultBrowseId;\n          this.value = +params.value || params.value || '';\n          this.startsWith = +params.startsWith || params.startsWith;\n          const searchOptions = browseParamsToOptions(params, currentPage, currentSort, this.browseId);\n          if (isNotEmpty(this.value)) {\n            this.updatePageWithItems(searchOptions, this.value);\n          } else {\n            this.updatePage(searchOptions);\n          }\n          this.updateParent(params.scope);\n        }));\n    this.updateStartsWithTextOptions();\n  }\n\n  /**\n   * Update the StartsWith options with text values\n   * It adds the value \"0-9\" as well as all letters from A to Z\n   */\n  updateStartsWithTextOptions() {\n    this.startsWithOptions = ['0-9', ...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')];\n  }\n\n  /**\n   * Updates the current page with searchOptions\n   * @param searchOptions   Options to narrow down your search:\n   *                        { metadata: string\n   *                          pagination: PaginationComponentOptions,\n   *                          sort: SortOptions,\n   *                          scope: string }\n   */\n  updatePage(searchOptions: BrowseEntrySearchOptions) {\n    this.browseEntries$ = this.browseService.getBrowseEntriesFor(searchOptions);\n    this.items$ = undefined;\n  }\n\n  /**\n   * Updates the current page with searchOptions and display items linked to the given value\n   * @param searchOptions   Options to narrow down your search:\n   *                        { metadata: string\n   *                          pagination: PaginationComponentOptions,\n   *                          sort: SortOptions,\n   *                          scope: string }\n   * @param value          The value of the browse-entry to display items for\n   */\n  updatePageWithItems(searchOptions: BrowseEntrySearchOptions, value: string) {\n    console.log('updatePAge', searchOptions);\n    this.items$ = this.browseService.getBrowseItemsFor(value, searchOptions);\n  }\n\n  /**\n   * Update the parent Community or Collection using their scope\n   * @param scope   The UUID of the Community or Collection to fetch\n   */\n  updateParent(scope: string) {\n    if (hasValue(scope)) {\n      this.parent$ = this.dsoService.findById(scope).pipe(\n        getFirstSucceededRemoteData()\n      );\n    }\n  }\n\n  /**\n   * Navigate to the previous page\n   */\n  goPrev() {\n    if (this.items$) {\n      this.items$.pipe(getFirstSucceededRemoteData()).subscribe((items) => {\n        this.items$ = this.browseService.getPrevBrowseItems(items);\n      });\n    } else if (this.browseEntries$) {\n      this.browseEntries$.pipe(getFirstSucceededRemoteData()).subscribe((entries) => {\n        this.browseEntries$ = this.browseService.getPrevBrowseEntries(entries);\n      });\n    }\n  }\n\n  /**\n   * Navigate to the next page\n   */\n  goNext() {\n    if (this.items$) {\n      this.items$.pipe(getFirstSucceededRemoteData()).subscribe((items) => {\n        this.items$ = this.browseService.getNextBrowseItems(items);\n      });\n    } else if (this.browseEntries$) {\n      this.browseEntries$.pipe(getFirstSucceededRemoteData()).subscribe((entries) => {\n        this.browseEntries$ = this.browseService.getNextBrowseEntries(entries);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.paginationConfig.id);\n  }\n\n\n}\n\n/**\n * Function to transform query and url parameters into searchOptions used to fetch browse entries or items\n * @param params            URL and query parameters\n * @param paginationConfig  Pagination configuration\n * @param sortConfig        Sorting configuration\n * @param metadata          Optional metadata definition to fetch browse entries/items for\n */\nexport function browseParamsToOptions(params: any,\n                                      paginationConfig: PaginationComponentOptions,\n                                      sortConfig: SortOptions,\n                                      metadata?: string): BrowseEntrySearchOptions {\n  return new BrowseEntrySearchOptions(\n    metadata,\n    paginationConfig,\n    sortConfig,\n    +params.startsWith || params.startsWith,\n    params.scope\n  );\n}\n","import { combineLatest as observableCombineLatest } from 'rxjs';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { hasValue } from '../../shared/empty.util';\nimport {\n  BrowseByMetadataPageComponent,\n  browseParamsToOptions\n} from '../+browse-by-metadata-page/browse-by-metadata-page.component';\nimport { BrowseEntrySearchOptions } from '../../core/browse/browse-entry-search-options.model';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { BrowseService } from '../../core/browse/browse.service';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { BrowseByType, rendersBrowseBy } from '../+browse-by-switcher/browse-by-decorator';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { map } from 'rxjs/operators';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\n\n@Component({\n  selector: 'ds-browse-by-title-page',\n  styleUrls: ['../+browse-by-metadata-page/browse-by-metadata-page.component.scss'],\n  templateUrl: '../+browse-by-metadata-page/browse-by-metadata-page.component.html'\n})\n/**\n * Component for browsing items by title (dc.title)\n */\n@rendersBrowseBy(BrowseByType.Title)\nexport class BrowseByTitlePageComponent extends BrowseByMetadataPageComponent {\n\n  public constructor(protected route: ActivatedRoute,\n                     protected browseService: BrowseService,\n                     protected dsoService: DSpaceObjectDataService,\n                     protected paginationService: PaginationService,\n                     protected router: Router) {\n    super(route, browseService, dsoService, paginationService, router);\n  }\n\n  ngOnInit(): void {\n    const sortConfig = new SortOptions('dc.title', SortDirection.ASC);\n    this.updatePage(new BrowseEntrySearchOptions(this.defaultBrowseId, this.paginationConfig, sortConfig));\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    this.currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, sortConfig);\n    this.subs.push(\n      observableCombineLatest([this.route.params, this.route.queryParams, this.currentPagination$, this.currentSort$]).pipe(\n        map(([routeParams, queryParams, currentPage, currentSort]) => {\n          return [Object.assign({}, routeParams, queryParams),currentPage,currentSort];\n        })\n      ).subscribe(([params, currentPage, currentSort]: [Params, PaginationComponentOptions, SortOptions]) => {\n        this.browseId = params.id || this.defaultBrowseId;\n        this.updatePageWithItems(browseParamsToOptions(params, currentPage, currentSort, this.browseId), undefined);\n        this.updateParent(params.scope);\n      }));\n    this.updateStartsWithTextOptions();\n  }\n\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowseByTitlePageComponent } from './+browse-by-title-page/browse-by-title-page.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { BrowseByMetadataPageComponent } from './+browse-by-metadata-page/browse-by-metadata-page.component';\nimport { BrowseByDatePageComponent } from './+browse-by-date-page/browse-by-date-page.component';\nimport { BrowseBySwitcherComponent } from './+browse-by-switcher/browse-by-switcher.component';\nimport { ThemedBrowseBySwitcherComponent } from './+browse-by-switcher/themed-browse-by-switcher.component';\n\nconst ENTRY_COMPONENTS = [\n  // put only entry components that use custom decorator\n  BrowseByTitlePageComponent,\n  BrowseByMetadataPageComponent,\n  BrowseByDatePageComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule\n  ],\n  declarations: [\n    BrowseBySwitcherComponent,\n    ThemedBrowseBySwitcherComponent,\n    ...ENTRY_COMPONENTS\n  ],\n  exports: [\n    BrowseBySwitcherComponent\n  ]\n})\nexport class BrowseByModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during CSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: SharedModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({provide: component}))\n    };\n  }\n}\n","import { ChangeDetectorRef, Component } from '@angular/core';\nimport {\n  BrowseByMetadataPageComponent,\n  browseParamsToOptions\n} from '../+browse-by-metadata-page/browse-by-metadata-page.component';\nimport { BrowseEntrySearchOptions } from '../../core/browse/browse-entry-search-options.model';\nimport { combineLatest as observableCombineLatest } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { BrowseService } from '../../core/browse/browse.service';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { StartsWithType } from '../../shared/starts-with/starts-with-decorator';\nimport { BrowseByType, rendersBrowseBy } from '../+browse-by-switcher/browse-by-decorator';\nimport { environment } from '../../../environments/environment';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { map } from 'rxjs/operators';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\n\n@Component({\n  selector: 'ds-browse-by-date-page',\n  styleUrls: ['../+browse-by-metadata-page/browse-by-metadata-page.component.scss'],\n  templateUrl: '../+browse-by-metadata-page/browse-by-metadata-page.component.html'\n})\n/**\n * Component for browsing items by metadata definition of type 'date'\n * A metadata definition (a.k.a. browse id) is a short term used to describe one or multiple metadata fields.\n * An example would be 'dateissued' for 'dc.date.issued'\n */\n@rendersBrowseBy(BrowseByType.Date)\nexport class BrowseByDatePageComponent extends BrowseByMetadataPageComponent {\n\n  /**\n   * The default metadata-field to use for determining the lower limit of the StartsWith dropdown options\n   */\n  defaultMetadataField = 'dc.date.issued';\n\n  public constructor(protected route: ActivatedRoute,\n                     protected browseService: BrowseService,\n                     protected dsoService: DSpaceObjectDataService,\n                     protected router: Router,\n                     protected paginationService: PaginationService,\n                     protected cdRef: ChangeDetectorRef) {\n    super(route, browseService, dsoService, paginationService, router);\n  }\n\n  ngOnInit(): void {\n    const sortConfig = new SortOptions('default', SortDirection.ASC);\n    this.startsWithType = StartsWithType.date;\n    this.updatePage(new BrowseEntrySearchOptions(this.defaultBrowseId, this.paginationConfig, sortConfig));\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    this.currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, sortConfig);\n    this.subs.push(\n      observableCombineLatest([this.route.params, this.route.queryParams, this.route.data,\n        this.currentPagination$, this.currentSort$]).pipe(\n        map(([routeParams, queryParams, data, currentPage, currentSort]) => {\n          return [Object.assign({}, routeParams, queryParams, data), currentPage, currentSort];\n        })\n      ).subscribe(([params, currentPage, currentSort]: [Params, PaginationComponentOptions, SortOptions]) => {\n        const metadataField = params.metadataField || this.defaultMetadataField;\n        this.browseId = params.id || this.defaultBrowseId;\n        this.startsWith = +params.startsWith || params.startsWith;\n        const searchOptions = browseParamsToOptions(params, currentPage, currentSort, this.browseId);\n        this.updatePageWithItems(searchOptions, this.value);\n        this.updateParent(params.scope);\n        this.updateStartsWithOptions(this.browseId, metadataField, params.scope);\n      }));\n  }\n\n  /**\n   * Update the StartsWith options\n   * In this implementation, it creates a list of years starting from now, going all the way back to the earliest\n   * date found on an item within this scope. The further back in time, the bigger the change in years become to avoid\n   * extremely long lists with a one-year difference.\n   * To determine the change in years, the config found under GlobalConfig.BrowseBy is used for this.\n   * @param definition      The metadata definition to fetch the first item for\n   * @param metadataField   The metadata field to fetch the earliest date from (expects a date field)\n   * @param scope           The scope under which to fetch the earliest item for\n   */\n  updateStartsWithOptions(definition: string, metadataField: string, scope?: string) {\n    this.subs.push(\n      this.browseService.getFirstItemFor(definition, scope).subscribe((firstItemRD: RemoteData<Item>) => {\n        let lowerLimit = environment.browseBy.defaultLowerLimit;\n        if (hasValue(firstItemRD.payload)) {\n          const date = firstItemRD.payload.firstMetadataValue(metadataField);\n          if (hasValue(date)) {\n            const dateObj = new Date(date);\n            // TODO: it appears that getFullYear (based on local time) is sometimes unreliable. Switching to UTC.\n            lowerLimit = dateObj.getUTCFullYear();\n          }\n        }\n        const options = [];\n        const currentYear = new Date().getFullYear();\n        const oneYearBreak = Math.floor((currentYear - environment.browseBy.oneYearLimit) / 5) * 5;\n        const fiveYearBreak = Math.floor((currentYear - environment.browseBy.fiveYearLimit) / 10) * 10;\n        if (lowerLimit <= fiveYearBreak) {\n          lowerLimit -= 10;\n        } else if (lowerLimit <= oneYearBreak) {\n          lowerLimit -= 5;\n        } else {\n          lowerLimit -= 1;\n        }\n        let i = currentYear;\n        while (i > lowerLimit) {\n          options.push(i);\n          if (i <= fiveYearBreak) {\n            i -= 10;\n          } else if (i <= oneYearBreak) {\n            i -= 5;\n          } else {\n            i--;\n          }\n        }\n        if (isNotEmpty(options)) {\n          this.startsWithOptions = options;\n          this.cdRef.detectChanges();\n        }\n      })\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowseByRoutingModule } from './browse-by-routing.module';\nimport { BrowseByModule } from './browse-by.module';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { BrowseService } from '../core/browse/browse.service';\nimport { BrowseByGuard } from './browse-by-guard';\n\n@NgModule({\n  imports: [\n    BrowseByRoutingModule,\n    BrowseByModule.withEntryComponents()\n  ],\n  providers: [\n    ItemDataService,\n    BrowseService,\n    BrowseByGuard\n  ]\n})\nexport class BrowseByPageModule {\n\n}\n","var map = {\n\t\"./custom/app/+browse-by/+browse-by-switcher/browse-by-switcher.component\": [\n\t\t\"EAdw\",\n\t\t0,\n\t\t41\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"ixu2\";\nmodule.exports = webpackAsyncContext;","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}