{"version":3,"sources":["webpack:///src/app/+bitstream-page/edit-bitstream-page/edit-bitstream-page.component.html","webpack:///src/app/+bitstream-page/edit-bitstream-page/edit-bitstream-page.component.ts","webpack:///src/app/+bitstream-page/bitstream-page.resolver.ts","webpack:///src/app/+bitstream-page/bitstream-page.module.ts","webpack:///src/app/+bitstream-page/bitstream-page-routing.module.ts"],"names":["EditBitstreamPageComponent","BitstreamPageResolver","BitstreamPageModule","BitstreamPageRoutingModule","route","router","location","formService","translate","bitstreamService","notificationsService","bitstreamFormatService","KEY_PREFIX","LABEL_KEY_SUFFIX","HINT_KEY_SUFFIX","NOTIFICATIONS_PREFIX","findAllOptions","elementsPerPage","fileNameModel","id","name","required","validators","errorMessages","primaryBitstreamModel","descriptionModel","rows","embargoModel","disabled","selectedFormatModel","newFormatModel","inputModels","this","formModel","group","newFormatBaseLayout","formLayout","fileName","grid","host","primaryBitstream","description","embargo","selectedFormat","newFormat","fileNamePrimaryContainer","descriptionContainer","embargoContainer","formatContainer","subs","formGroup","createFormGroup","itemId","snapshot","queryParams","entityType","bitstreamRD$","data","pipe","map","bitstream","bitstreamFormatsRD$","findAll","bitstream$","allFormats$","push","subscribe","allFormats","formats","page","updateFormatModel","updateForm","updateFieldTranslations","onLangChange","patchValue","firstMetadataValue","firstMetadata","value","format","originalFormat","updateNewFormatLayout","options","Object","assign","label","isUnknownFormat","instant","shortDescription","selectedId","find","f","supportLevel","Unknown","forEach","fieldModel","updateFieldTranslation","hint","event","model","updatedValues","getRawValue","updatedBitstream","formToBitstream","updateFormat","g","formatResponse","hasFailed","payload","error","errorMessage","switchMap","update","commitUpdates","success","navigateToItemEditBitstreams","rawForm","cloneDeep","newMetadata","metadata","setFirstValue","navigate","bundle","mergeMap","item","filter","subscription","unsubscribe","state","findById","params","followLinks","undefined","forChild","path","component","resolve","canActivate"],"mappings":"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","file":"x","sourcesContent":["<ng-container *ngVar=\"(bitstreamRD$ | async) as bitstreamRD\">\n  <div class=\"container\" *ngVar=\"(bitstreamFormatsRD$ | async) as formatsRD\">\n    <div class=\"row\" *ngIf=\"bitstreamRD?.hasSucceeded && formatsRD?.hasSucceeded\">\n      <div class=\"col-md-2\">\n        <ds-thumbnail [thumbnail]=\"bitstreamRD?.payload\"></ds-thumbnail>\n      </div>\n      <div class=\"col-md-10\">\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <h3>{{bitstreamRD?.payload?.name}} <span class=\"text-muted\">({{bitstreamRD?.payload?.sizeBytes | dsFileSize}})</span></h3>\n            </div>\n          </div>\n        </div>\n        <ds-form  [formId]=\"'edit-bitstream-form-id'\"\n                  [formGroup]=\"formGroup\"\n                  [formModel]=\"formModel\"\n                  [formLayout]=\"formLayout\"\n                  [submitLabel]=\"'form.save'\"\n                  (submitForm)=\"onSubmit()\"\n                  (cancel)=\"onCancel()\"\n                  (dfChange)=\"onChange($event)\"></ds-form>\n      </div>\n    </div>\n    <ds-error *ngIf=\"bitstreamRD?.hasFailed\" message=\"{{'error.bitstream' | translate}}\"></ds-error>\n    <ds-loading *ngIf=\"!bitstreamRD || !formatsRD || bitstreamRD?.isLoading || formatsRD?.isLoading\"\n                message=\"{{'loading.bitstream' | translate}}\"></ds-loading>\n  </div>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { Bitstream } from '../../core/shared/bitstream.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, mergeMap, switchMap } from 'rxjs/operators';\nimport { combineLatest as observableCombineLatest, Observable, of as observableOf, Subscription } from 'rxjs';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicSelectModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { FormGroup } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DynamicCustomSwitchModel } from '../../shared/form/builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.model';\nimport { cloneDeep } from 'lodash';\nimport { BitstreamDataService } from '../../core/data/bitstream-data.service';\nimport {\n  getAllSucceededRemoteDataPayload,\n  getFirstSucceededRemoteDataPayload,\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData\n} from '../../core/shared/operators';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { BitstreamFormatDataService } from '../../core/data/bitstream-format-data.service';\nimport { BitstreamFormat } from '../../core/shared/bitstream-format.model';\nimport { BitstreamFormatSupportLevel } from '../../core/shared/bitstream-format-support-level';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { Metadata } from '../../core/shared/metadata.utils';\nimport { Location } from '@angular/common';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { getEntityEditRoute, getItemEditRoute } from '../../+item-page/item-page-routing-paths';\nimport { Bundle } from '../../core/shared/bundle.model';\n\n@Component({\n  selector: 'ds-edit-bitstream-page',\n  styleUrls: ['./edit-bitstream-page.component.scss'],\n  templateUrl: './edit-bitstream-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Page component for editing a bitstream\n */\nexport class EditBitstreamPageComponent implements OnInit, OnDestroy {\n\n  /**\n   * The bitstream's remote data observable\n   * Tracks changes and updates the view\n   */\n  bitstreamRD$: Observable<RemoteData<Bitstream>>;\n\n  /**\n   * The formats their remote data observable\n   * Tracks changes and updates the view\n   */\n  bitstreamFormatsRD$: Observable<RemoteData<PaginatedList<BitstreamFormat>>>;\n\n  /**\n   * The bitstream to edit\n   */\n  bitstream: Bitstream;\n\n  /**\n   * The originally selected format\n   */\n  originalFormat: BitstreamFormat;\n\n  /**\n   * A list of all available bitstream formats\n   */\n  formats: BitstreamFormat[];\n\n  /**\n   * @type {string} Key prefix used to generate form messages\n   */\n  KEY_PREFIX = 'bitstream.edit.form.';\n\n  /**\n   * @type {string} Key suffix used to generate form labels\n   */\n  LABEL_KEY_SUFFIX = '.label';\n\n  /**\n   * @type {string} Key suffix used to generate form labels\n   */\n  HINT_KEY_SUFFIX = '.hint';\n\n  /**\n   * @type {string} Key prefix used to generate notification messages\n   */\n  NOTIFICATIONS_PREFIX = 'bitstream.edit.notifications.';\n\n  /**\n   * Options for fetching all bitstream formats\n   */\n  findAllOptions = { elementsPerPage: 9999 };\n\n  /**\n   * The Dynamic Input Model for the file's name\n   */\n  fileNameModel = new DynamicInputModel({\n    id: 'fileName',\n    name: 'fileName',\n    required: true,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must provide a file name for the bitstream'\n    }\n  });\n\n  /**\n   * The Dynamic Switch Model for the file's name\n   */\n  primaryBitstreamModel = new DynamicCustomSwitchModel({\n    id: 'primaryBitstream',\n    name: 'primaryBitstream'\n  });\n\n  /**\n   * The Dynamic TextArea Model for the file's description\n   */\n  descriptionModel = new DynamicTextAreaModel({\n    id: 'description',\n    name: 'description',\n    rows: 10\n  });\n\n  /**\n   * The Dynamic Input Model for the file's embargo (disabled on this page)\n   */\n  embargoModel = new DynamicInputModel({\n    id: 'embargo',\n    name: 'embargo',\n    disabled: true\n  });\n\n  /**\n   * The Dynamic Input Model for the selected format\n   */\n  selectedFormatModel = new DynamicSelectModel({\n    id: 'selectedFormat',\n    name: 'selectedFormat'\n  });\n\n  /**\n   * The Dynamic Input Model for supplying more format information\n   */\n  newFormatModel = new DynamicInputModel({\n    id: 'newFormat',\n    name: 'newFormat'\n  });\n\n  /**\n   * All input models in a simple array for easier iterations\n   */\n  inputModels = [this.fileNameModel, this.primaryBitstreamModel, this.descriptionModel, this.embargoModel, this.selectedFormatModel, this.newFormatModel];\n\n  /**\n   * The dynamic form fields used for editing the information of a bitstream\n   * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicFormGroupModel({\n      id: 'fileNamePrimaryContainer',\n      group: [\n        this.fileNameModel,\n        this.primaryBitstreamModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'descriptionContainer',\n      group: [\n        this.descriptionModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'embargoContainer',\n      group: [\n        this.embargoModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'formatContainer',\n      group: [\n        this.selectedFormatModel,\n        this.newFormatModel\n      ]\n    })\n  ];\n\n  /**\n   * The base layout of the \"Other Format\" input\n   */\n  newFormatBaseLayout = 'col col-sm-6 d-inline-block';\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    fileName: {\n      grid: {\n        host: 'col col-sm-8 d-inline-block'\n      }\n    },\n    primaryBitstream: {\n      grid: {\n        host: 'col col-sm-4 d-inline-block switch'\n      }\n    },\n    description: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    embargo: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    selectedFormat: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    newFormat: {\n      grid: {\n        host: this.newFormatBaseLayout + ' invisible'\n      }\n    },\n    fileNamePrimaryContainer: {\n      grid: {\n        host: 'row position-relative'\n      }\n    },\n    descriptionContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    embargoContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    formatContainer: {\n      grid: {\n        host: 'row'\n      }\n    }\n  };\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * The ID of the item the bitstream originates from\n   * Taken from the current query parameters when present\n   * This will determine the route of the item edit page to return to\n   */\n  itemId: string;\n\n  /**\n   * The entity type of the item the bitstream originates from\n   * Taken from the current query parameters when present\n   * This will determine the route of the item edit page to return to\n   */\n  entityType: string;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private location: Location,\n              private formService: DynamicFormService,\n              private translate: TranslateService,\n              private bitstreamService: BitstreamDataService,\n              private notificationsService: NotificationsService,\n              private bitstreamFormatService: BitstreamFormatDataService) {\n  }\n\n  /**\n   * Initialize the component\n   * - Create a FormGroup using the FormModel defined earlier\n   * - Subscribe on the route data to fetch the bitstream to edit and update the form values\n   * - Translate the form labels and hints\n   */\n  ngOnInit(): void {\n    this.formGroup = this.formService.createFormGroup(this.formModel);\n\n    this.itemId = this.route.snapshot.queryParams.itemId;\n    this.entityType = this.route.snapshot.queryParams.entityType;\n    this.bitstreamRD$ = this.route.data.pipe(map((data) => data.bitstream));\n    this.bitstreamFormatsRD$ = this.bitstreamFormatService.findAll(this.findAllOptions);\n\n    const bitstream$ = this.bitstreamRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload()\n    );\n\n    const allFormats$ = this.bitstreamFormatsRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload()\n    );\n\n    this.subs.push(\n      observableCombineLatest(\n        bitstream$,\n        allFormats$\n      ).subscribe(([bitstream, allFormats]) => {\n        this.bitstream = bitstream as Bitstream;\n        this.formats = allFormats.page;\n        this.updateFormatModel();\n        this.updateForm(this.bitstream);\n      })\n    );\n\n    this.updateFieldTranslations();\n\n    this.subs.push(\n      this.translate.onLangChange\n        .subscribe(() => {\n        this.updateFieldTranslations();\n      })\n    );\n  }\n\n  /**\n   * Update the current form values with bitstream properties\n   * @param bitstream\n   */\n  updateForm(bitstream: Bitstream) {\n    this.formGroup.patchValue({\n      fileNamePrimaryContainer: {\n        fileName: bitstream.name,\n        primaryBitstream: false\n      },\n      descriptionContainer: {\n        description: bitstream.firstMetadataValue('dc.description')\n      },\n      formatContainer: {\n        newFormat: hasValue(bitstream.firstMetadata('dc.format')) ? bitstream.firstMetadata('dc.format').value : undefined\n      }\n    });\n    this.bitstream.format.pipe(\n      getAllSucceededRemoteDataPayload()\n    ).subscribe((format: BitstreamFormat) => {\n      this.originalFormat = format;\n      this.formGroup.patchValue({\n        formatContainer: {\n          selectedFormat: format.id\n        }\n      });\n      this.updateNewFormatLayout(format.id);\n    });\n  }\n\n  /**\n   * Create the list of unknown format IDs an add options to the selectedFormatModel\n   */\n  updateFormatModel() {\n    this.selectedFormatModel.options = this.formats.map((format: BitstreamFormat) =>\n      Object.assign({\n        value: format.id,\n        label: this.isUnknownFormat(format.id) ? this.translate.instant(this.KEY_PREFIX + 'selectedFormat.unknown') : format.shortDescription\n      }));\n  }\n\n  /**\n   * Update the layout of the \"Other Format\" input depending on the selected format\n   * @param selectedId\n   */\n  updateNewFormatLayout(selectedId: string) {\n    if (this.isUnknownFormat(selectedId)) {\n      this.formLayout.newFormat.grid.host = this.newFormatBaseLayout;\n    } else {\n      this.formLayout.newFormat.grid.host = this.newFormatBaseLayout + ' invisible';\n    }\n  }\n\n  /**\n   * Is the provided format (id) part of the list of unknown formats?\n   * @param id\n   */\n  isUnknownFormat(id: string): boolean {\n    const format = this.formats.find((f: BitstreamFormat) => f.id === id);\n    return hasValue(format) && format.supportLevel === BitstreamFormatSupportLevel.Unknown;\n  }\n\n  /**\n   * Used to update translations of labels and hints on init and on language change\n   */\n  private updateFieldTranslations() {\n    this.inputModels.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        this.updateFieldTranslation(fieldModel);\n      }\n    );\n  }\n\n  /**\n   * Update the translations of a DynamicFormControlModel\n   * @param fieldModel\n   */\n  private updateFieldTranslation(fieldModel) {\n    fieldModel.label = this.translate.instant(this.KEY_PREFIX + fieldModel.id + this.LABEL_KEY_SUFFIX);\n    if (fieldModel.id !== this.primaryBitstreamModel.id) {\n      fieldModel.hint = this.translate.instant(this.KEY_PREFIX + fieldModel.id + this.HINT_KEY_SUFFIX);\n    }\n  }\n\n  /**\n   * Fired whenever the form receives an update and changes the layout of the \"Other Format\" input, depending on the selected format\n   * @param event\n   */\n  onChange(event) {\n    const model = event.model;\n    if (model.id === this.selectedFormatModel.id) {\n      this.updateNewFormatLayout(model.value);\n    }\n  }\n\n  /**\n   * Check for changes against the bitstream and send update requests to the REST API\n   */\n  onSubmit() {\n    const updatedValues = this.formGroup.getRawValue();\n    const updatedBitstream = this.formToBitstream(updatedValues);\n    const selectedFormat = this.formats.find((f: BitstreamFormat) => f.id === updatedValues.formatContainer.selectedFormat);\n    const isNewFormat = selectedFormat.id !== this.originalFormat.id;\n\n    let bitstream$;\n\n    if (isNewFormat) {\n      bitstream$ = this.bitstreamService.updateFormat(this.bitstream, selectedFormat).pipe(\n        getFirstCompletedRemoteData(),\n        map((formatResponse: RemoteData<Bitstream>) => {\n          if (hasValue(formatResponse) && formatResponse.hasFailed) {\n            this.notificationsService.error(\n              this.translate.instant(this.NOTIFICATIONS_PREFIX + 'error.format.title'),\n              formatResponse.errorMessage\n            );\n          } else {\n            return formatResponse.payload;\n          }\n        })\n      );\n    } else {\n      bitstream$ = observableOf(this.bitstream);\n    }\n\n    bitstream$.pipe(\n      switchMap(() => {\n        return this.bitstreamService.update(updatedBitstream).pipe(\n          getFirstSucceededRemoteDataPayload()\n        );\n      })\n    ).subscribe(() => {\n      this.bitstreamService.commitUpdates();\n      this.notificationsService.success(\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'saved.title'),\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'saved.content')\n      );\n      this.navigateToItemEditBitstreams();\n    });\n  }\n\n  /**\n   * Parse form data to an updated bitstream object\n   * @param rawForm   Raw form data\n   */\n  formToBitstream(rawForm): Bitstream {\n    const updatedBitstream = cloneDeep(this.bitstream);\n    const newMetadata = updatedBitstream.metadata;\n    // TODO: Set bitstream to primary when supported\n    const primary = rawForm.fileNamePrimaryContainer.primaryBitstream;\n    Metadata.setFirstValue(newMetadata, 'dc.title', rawForm.fileNamePrimaryContainer.fileName);\n    Metadata.setFirstValue(newMetadata, 'dc.description', rawForm.descriptionContainer.description);\n    if (isNotEmpty(rawForm.formatContainer.newFormat)) {\n      Metadata.setFirstValue(newMetadata, 'dc.format', rawForm.formatContainer.newFormat);\n    }\n    updatedBitstream.metadata = newMetadata;\n    return updatedBitstream;\n  }\n\n  /**\n   * Cancel the form and return to the previous page\n   */\n  onCancel() {\n    this.navigateToItemEditBitstreams();\n  }\n\n  /**\n   * When the item ID is present, navigate back to the item's edit bitstreams page,\n   * otherwise retrieve the item ID based on the owning bundle's link\n   */\n  navigateToItemEditBitstreams() {\n    if (hasValue(this.itemId)) {\n      this.router.navigate([getEntityEditRoute(this.entityType, this.itemId), 'bitstreams']);\n    } else {\n      this.bitstream.bundle.pipe(getFirstSucceededRemoteDataPayload(),\n          mergeMap((bundle: Bundle) => bundle.item.pipe(getFirstSucceededRemoteDataPayload())))\n          .subscribe((item) => {\n            this.router.navigate(([getItemEditRoute(item), 'bitstreams']));\n          });\n    }\n  }\n\n  /**\n   * Unsubscribe from open subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { Bitstream } from '../core/shared/bitstream.model';\nimport { BitstreamDataService } from '../core/data/bitstream-data.service';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific bitstream before the route is activated\n */\n@Injectable()\nexport class BitstreamPageResolver implements Resolve<RemoteData<Bitstream>> {\n  constructor(private bitstreamService: BitstreamDataService) {\n  }\n\n  /**\n   * Method for resolving a bitstream based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found bitstream based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Bitstream>> {\n    return this.bitstreamService.findById(route.params.id, true, false, ...this.followLinks)\n      .pipe(\n        getFirstCompletedRemoteData(),\n      );\n  }\n    /**\n     * Method that returns the follow links to already resolve\n     * The self links defined in this list are expected to be requested somewhere in the near future\n     * Requesting them as embeds will limit the number of requests\n     */\n    get followLinks(): FollowLinkConfig<Bitstream>[] {\n        return [\n            followLink('bundle', undefined, true, true, true, followLink('item')),\n            followLink('format')\n        ];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { EditBitstreamPageComponent } from './edit-bitstream-page/edit-bitstream-page.component';\nimport { BitstreamPageRoutingModule } from './bitstream-page-routing.module';\n\n/**\n * This module handles all components that are necessary for Bitstream related pages\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    BitstreamPageRoutingModule\n  ],\n  declarations: [\n    EditBitstreamPageComponent\n  ]\n})\nexport class BitstreamPageModule {\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EditBitstreamPageComponent } from './edit-bitstream-page/edit-bitstream-page.component';\nimport { AuthenticatedGuard } from '../core/auth/authenticated.guard';\nimport { BitstreamPageResolver } from './bitstream-page.resolver';\nimport { BitstreamDownloadPageComponent } from '../shared/bitstream-download-page/bitstream-download-page.component';\n\nconst EDIT_BITSTREAM_PATH = ':id/edit';\n\n/**\n * Routing module to help navigate Bitstream pages\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path:':id/download',\n        component: BitstreamDownloadPageComponent,\n        resolve: {\n          bitstream: BitstreamPageResolver\n        },\n      },\n      {\n        path: EDIT_BITSTREAM_PATH,\n        component: EditBitstreamPageComponent,\n        resolve: {\n          bitstream: BitstreamPageResolver\n        },\n        canActivate: [AuthenticatedGuard]\n      }\n    ])\n  ],\n  providers: [\n    BitstreamPageResolver,\n  ]\n})\nexport class BitstreamPageRoutingModule {\n}\n"]}