{"version":3,"sources":["webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.ts","webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.html","webpack:///src/app/register-page/create-profile/create-profile.component.ts","webpack:///src/app/register-page/create-profile/create-profile.component.html"],"names":["ProfilePageSecurityFormComponent","formService","translate","epersonService","notificationsService","isInvalid","EventEmitter","passwordValue","formModel","id","name","inputType","passwordCanBeEmpty","subs","this","formGroup","createFormGroup","validators","checkPasswordsEqual","checkPasswordLength","checkPasswordEmpty","updateFieldTranslations","onLangChange","subscribe","push","statusChanges","pipe","status","emit","valueChanges","valueChange","password","forEach","fieldModel","label","instant","FORM_PREFIX","group","get","value","notSame","pass","length","notLongEnough","emptyPassword","filter","sub","unsubscribe","CreateProfileComponent","translateService","ePersonDataService","store","router","route","formBuilder","endUserAgreementService","isInValidPassword","registration$","data","registration","email","token","activeLangs","languages","MyLangConfig","active","userInfoForm","firstName","FormControl","Validators","required","lastName","contactPhone","language","$event","invalid","values","metadata","canLogIn","requireCertificate","isCookieAccepted","String","removeCookieAccepted","eperson","Object","assign","createEPersonForToken","g","rd","hasSucceeded","success","dispatch","navigate","error","submitEperson","setInValid","setPasswordValue"],"mappings":"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","file":"x","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DynamicFormControlModel, DynamicFormService, DynamicInputModel } from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormGroup } from '@angular/forms';\nimport { hasValue, isEmpty } from '../../shared/empty.util';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ds-profile-page-security-form',\n  templateUrl: './profile-page-security-form.component.html'\n})\n/**\n * Component for a user to edit their security information\n * Displays a form containing a password field and a confirmation of the password\n */\nexport class ProfilePageSecurityFormComponent implements OnInit {\n\n  /**\n   * Emits the validity of the password\n   */\n  @Output() isInvalid = new EventEmitter<boolean>();\n  /**\n   * Emits the value of the password\n   */\n  @Output() passwordValue = new EventEmitter<string>();\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'password',\n      name: 'password',\n      inputType: 'password'\n    }),\n    new DynamicInputModel({\n      id: 'passwordrepeat',\n      name: 'passwordrepeat',\n      inputType: 'password'\n    })\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Indicates whether the \"checkPasswordEmpty\" needs to be added or not\n   */\n  @Input()\n  passwordCanBeEmpty = true;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  @Input()\n  FORM_PREFIX: string;\n  private subs: Subscription[] = [];\n\n  constructor(protected formService: DynamicFormService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    if (this.passwordCanBeEmpty) {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength]});\n    } else {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength, this.checkPasswordEmpty]});\n    }\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n\n    this.subs.push(this.formGroup.statusChanges.pipe(\n      debounceTime(300),\n      map((status: string) => {\n        if (status !== 'VALID') {\n          return true;\n        } else {\n          return false;\n        }\n      })).subscribe((status) => this.isInvalid.emit(status))\n    );\n\n    this.subs.push(this.formGroup.valueChanges.pipe(\n      debounceTime(300),\n    ).subscribe((valueChange) => {\n      this.passwordValue.emit(valueChange.password);\n    }));\n  }\n\n  /**\n   * Update the translations of the field labels\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.FORM_PREFIX + 'label.' + fieldModel.id);\n      }\n    );\n  }\n\n  /**\n   * Check if both password fields are filled in and equal\n   * @param group The FormGroup to validate\n   */\n  checkPasswordsEqual(group: FormGroup) {\n    const pass = group.get('password').value;\n    const repeatPass = group.get('passwordrepeat').value;\n\n    return pass === repeatPass ? null : {notSame: true};\n  }\n\n  /**\n   * Check if the password is at least 6 characters long\n   * @param group The FormGroup to validate\n   */\n  checkPasswordLength(group: FormGroup) {\n    const pass = group.get('password').value;\n\n    return isEmpty(pass) || pass.length >= 6 ? null : {notLongEnough: true};\n  }\n\n  /**\n   * Checks if the password is empty\n   * @param group The FormGroup to validate\n   */\n  checkPasswordEmpty(group: FormGroup) {\n    const pass = group.get('password').value;\n    return isEmpty(pass) ? {emptyPassword: true} : null;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"container-fluid mb-4\">{{FORM_PREFIX + 'info' | translate}}</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"FORM_PREFIX\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n<div id=\"notLongEnough\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notLongEnough')\">{{FORM_PREFIX + 'error.password-length' | translate}}</div>\n<div id=\"notSame\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notSame')\">{{FORM_PREFIX + 'error.matching-passwords' | translate}}</div>\n<div id=\"emptyPassword\" class=\"container-fluid text-danger\" *ngIf=\"(formGroup.dirty || formGroup.touched) && formGroup.hasError('emptyPassword')\">{{FORM_PREFIX + 'error.empty-password' | translate}}</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { Registration } from '../../core/shared/registration.model';\nimport { Observable } from 'rxjs';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { LangConfig } from '../../../config/lang-config.interface';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../../core/core.reducers';\nimport { AuthenticateAction } from '../../core/auth/auth.actions';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { environment } from '../../../environments/environment';\nimport { isEmpty } from '../../shared/empty.util';\nimport { RemoteData } from '../../core/data/remote-data';\nimport {\n  END_USER_AGREEMENT_METADATA_FIELD,\n  EndUserAgreementService\n} from '../../core/end-user-agreement/end-user-agreement.service';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n/**\n * Component that renders the create profile page to be used by a user registering through a token\n */\n@Component({\n  selector: 'ds-create-profile',\n  styleUrls: ['./create-profile.component.scss'],\n  templateUrl: './create-profile.component.html'\n})\nexport class CreateProfileComponent implements OnInit {\n  registration$: Observable<Registration>;\n\n  email: string;\n  token: string;\n\n  isInValidPassword = true;\n  password: string;\n\n  userInfoForm: FormGroup;\n  activeLangs: LangConfig[];\n\n  constructor(\n    private translateService: TranslateService,\n    private ePersonDataService: EPersonDataService,\n    private store: Store<CoreState>,\n    private router: Router,\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private notificationsService: NotificationsService,\n    private endUserAgreementService: EndUserAgreementService\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.registration$ = this.route.data.pipe(\n      map((data) => data.registration as Registration),\n    );\n    this.registration$.subscribe((registration: Registration) => {\n      this.email = registration.email;\n      this.token = registration.token;\n    });\n    this.activeLangs = environment.languages.filter((MyLangConfig) => MyLangConfig.active === true);\n\n    this.userInfoForm = this.formBuilder.group({\n      firstName: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      lastName: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      contactPhone: new FormControl(''),\n      language: new FormControl(''),\n    });\n\n  }\n\n  /**\n   * Sets the validity of the password based on a value emitted from the form\n   * @param $event\n   */\n  setInValid($event: boolean) {\n    this.isInValidPassword = $event || isEmpty(this.password);\n  }\n\n  /**\n   * Sets the value of the password based on a value emitted from the form\n   * @param $event\n   */\n  setPasswordValue($event: string) {\n    this.password = $event;\n    this.isInValidPassword = this.isInValidPassword || isEmpty(this.password);\n  }\n\n  get firstName() {\n    return this.userInfoForm.get('firstName');\n  }\n\n  get lastName() {\n    return this.userInfoForm.get('lastName');\n  }\n\n  get contactPhone() {\n    return this.userInfoForm.get('contactPhone');\n  }\n\n  get language() {\n    return this.userInfoForm.get('language');\n  }\n\n  /**\n   * Submits the eperson to the service to be created.\n   * The submission will not be made when the form or the password is not valid.\n   */\n  submitEperson() {\n    if (!(this.userInfoForm.invalid || this.isInValidPassword)) {\n      const values = {\n        metadata: {\n          'eperson.firstname': [\n            {\n              value: this.firstName.value\n            }\n          ],\n          'eperson.lastname': [\n            {\n              value: this.lastName.value\n            },\n          ],\n          'eperson.phone': [\n            {\n              value: this.contactPhone.value\n            }\n          ],\n          'eperson.language': [\n            {\n              value: this.language.value\n            }\n          ]\n        },\n        email: this.email,\n        password: this.password,\n        canLogIn: true,\n        requireCertificate: false\n      };\n\n      // If the End User Agreement cookie is accepted, add end-user agreement metadata to the user\n      if (this.endUserAgreementService.isCookieAccepted()) {\n        values.metadata[END_USER_AGREEMENT_METADATA_FIELD] = [\n          {\n            value: String(true)\n          }\n        ];\n        this.endUserAgreementService.removeCookieAccepted();\n      }\n\n      const eperson = Object.assign(new EPerson(), values);\n      this.ePersonDataService.createEPersonForToken(eperson, this.token).pipe(\n        getFirstCompletedRemoteData(),\n      ).subscribe((rd: RemoteData<EPerson>) => {\n        if (rd.hasSucceeded) {\n          this.notificationsService.success(this.translateService.get('register-page.create-profile.submit.success.head'),\n            this.translateService.get('register-page.create-profile.submit.success.content'));\n          this.store.dispatch(new AuthenticateAction(this.email, this.password));\n          this.router.navigate(['/home']);\n        } else {\n          this.notificationsService.error(this.translateService.get('register-page.create-profile.submit.error.head'),\n            this.translateService.get('register-page.create-profile.submit.error.content'));\n        }\n      });\n    }\n  }\n\n}\n","<div class=\"container\">\n    <h3 class=\"mb-4\">{{'register-page.create-profile.header' | translate}}</h3>\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'register-page.create-profile.identification.header' | translate}}</div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{'register-page.create-profile.identification.email' | translate}}</label>\n                    <span id=\"email\">{{(registration$ |async).email}}</span></div>\n            </div>\n            <form [class]=\"'ng-invalid'\" [formGroup]=\"userInfoForm\" (ngSubmit)=\"submitEperson()\">\n\n                <div class=\"form-group\">\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label for=\"firstName\">{{'register-page.create-profile.identification.first-name' | translate}}</label>\n                            <input [className]=\"(firstName.invalid) && (firstName.dirty || firstName.touched) ? 'form-control is-invalid' :'form-control'\"\n                                   type=\"text\" id=\"firstName\" formControlName=\"firstName\"/>\n                            <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\"\n                                 class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"firstName.errors && firstName.errors.required\">\n                        {{ 'register-page.create-profile.identification.first-name.error' | translate }}\n                    </span>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label\n                                    for=\"lastName\">{{'register-page.create-profile.identification.last-name' | translate}}</label>\n                            <input\n                                    [className]=\"(lastName.invalid) && (lastName.dirty || lastName.touched) ? 'form-control is-invalid' :'form-control'\"\n                                    id=\"lastName\" formControlName=\"lastName\">\n                            <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\"\n                                 class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"lastName.errors && lastName.errors.required\">\n                        {{ 'register-page.create-profile.identification.last-name.error' | translate }}\n                    </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label\n                                    for=\"contactPhone\">{{'register-page.create-profile.identification.contact' | translate}}</label>\n                            <input class=\"form-control\" id=\"contactPhone\" formControlName=\"contactPhone\">\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label\n                                    for=\"language\">{{'register-page.create-profile.identification.language' |translate}}</label>\n\n                            <select id=\"language\" formControlName=\"language\" class=\"form-control\">\n                                <option [value]=\"''\"></option>\n                                <option *ngFor=\"let lang of activeLangs\" [value]=\"lang.code\">{{lang.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'register-page.create-profile.security.header' | translate}}</div>\n        <div class=\"card-body\">\n\n            <ds-profile-page-security-form\n                    [passwordCanBeEmpty]=\"false\"\n                    [FORM_PREFIX]=\"'register-page.create-profile.security.'\"\n                    (isInvalid)=\"setInValid($event)\"\n                    (passwordValue)=\"setPasswordValue($event)\"\n            ></ds-profile-page-security-form>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <button\n                    [disabled]=\"isInValidPassword || userInfoForm.invalid\"\n                    class=\"btn btn-default btn-primary\"\n                    (click)=\"submitEperson()\">{{'register-page.create-profile.submit' | translate}}</button>\n        </div>\n    </div>\n\n\n</div>\n"]}