{"version":3,"sources":["webpack:///src/app/core/shared/bitstream-format-support-level.ts","webpack:///src/app/profile-page/themed-profile-page.component.ts","webpack:///src/app/profile-page/profile-page.module.ts","webpack:///src/app/profile-page/profile-page-routing.module.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/+lookup-by-id/objectnotfound/objectnotfound.component.ts","webpack:///src/app/+lookup-by-id/objectnotfound/objectnotfound.component.html","webpack:///src/app/+collection-page/collection-page.resolver.ts","webpack:///src/app/+workflowitems-edit-page/workflow-item-action-page.component.ts","webpack:///src/app/core/data/registration-response-parsing.service.ts","webpack:///src/app/core/data/eperson-registration.service.ts","webpack:///src/app/+login-page/login-page.component.ts","webpack:///src/app/+login-page/login-page.component.html","webpack:///src/app/+workflowitems-edit-page/workflow-item-delete/workflow-item-delete.component.ts","webpack:///src/app/+workflowitems-edit-page/workflow-item-action-page.component.html","webpack:///src/app/+community-page/community-page.resolver.ts","webpack:///src/app/register-email-form/register-email-form.module.ts","webpack:///src/app/forgot-password/forgot-password-email/forgot-email.component.ts","webpack:///src/app/forgot-password/forgot-password-email/forgot-email.component.html","webpack:///src/app/+collection-page/collection-page.component.ts","webpack:///src/app/+collection-page/collection-page.component.html","webpack:///src/app/+logout-page/logout-page.component.ts","webpack:///src/app/+logout-page/logout-page.component.html","webpack:///src/app/+workflowitems-edit-page/workflowitems-edit-page-routing-paths.ts","webpack:///src/app/register-email-form/register-email-form.component.ts","webpack:///src/app/register-email-form/register-email-form.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/profile\\-page\\/profile\\-page\\.component$ namespace object","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/statistics/angulartics/dspace/view-tracker.component.ts","webpack:///src/app/statistics/angulartics/dspace/view-tracker.component.html","webpack:///src/app/+workflowitems-edit-page/workflow-item-send-back/workflow-item-send-back.component.ts","webpack:///src/app/register-email-form/registration.resolver.ts","webpack:///src/app/+browse-by/+browse-by-switcher/browse-by-switcher.component.ts","webpack:///src/app/+browse-by/+browse-by-switcher/browse-by-switcher.component.html","webpack:///src/app/shared/object-collection/shared/workflow-item-search-result.model.ts","webpack:///src/app/forgot-password/forgot-password-form/forgot-password-form.component.ts","webpack:///src/app/forgot-password/forgot-password-form/forgot-password-form.component.html"],"names":["BitstreamFormatSupportLevel","Known","Unknown","Supported","ThemedProfilePageComponent","ProfilePageModule","ProfilePageRoutingModule","themeName","forChild","path","pathMatch","component","resolve","breadcrumb","data","breadcrumbKey","title","ObjectNotFoundComponent","route","params","subscribe","this","idType","id","missingItem","startsWith","COLLECTION_PAGE_LINKS_TO_FOLLOW","undefined","CollectionPageResolver","collectionService","store","state","collectionRD$","findById","pipe","g","collectionRD","dispatch","url","payload","WorkflowItemActionPageComponent","workflowItemService","router","routeService","notificationsService","translationService","type","getType","wfi$","wfi","item$","item","sendRequest","successful","get","content","success","error","previousPage","getPreviousUrl","navigateByUrl","RegistrationResponseParsingService","EpersonRegistrationService","request","registration","Object","assign","statusCode","requestService","rdbService","halService","linkPath","searchByTokenPath","getEndpoint","token","filter","href","map","email","requestId","generateRequestId","getRegistrationEndpoint","find","send","buildFromRequestUUID","href$","getTokenSearchEndpoint","getResponseParser","buildSingle","skipWhile","rd","isStale","restResponse","user","LoginPageComponent","queryParamsObs","queryParams","authenticated","select","sub","expired","auth","authToken","unsubscribe","WorkflowItemDeleteComponent","super","removeByHrefSubstring","response","hasSucceeded","COMMUNITY_PAGE_LINKS_TO_FOLLOW","CommunityPageResolver","communityService","communityRD$","communityRD","RegisterEmailFormModule","ForgotEmailComponent","CollectionPageComponent","collectionDataService","searchService","metadata","authService","paginationService","authorizationDataService","paginationConfig","pageSize","currentPage","sortConfig","DESC","dso","logoRD$","collection","logo","isCollectionAdmin$","isAuthorized","IsCollectionAdmin","paginationChanges$","currentPagination$","getCurrentPagination","currentSort$","getCurrentSort","itemRD$","currentPagination","currentSort","search","scope","pagination","sort","dsoTypes","ITEM","collectionPageRoute$","processRemoteData","object","clearPagination","LogoutPageComponent","getWorkflowItemDeleteRoute","wfiId","WORKFLOW_ITEM_DELETE_PATH","toString","getWorkflowItemSendBackRoute","WORKFLOW_ITEM_SEND_BACK_PATH","WORKFLOW_ITEM_EDIT_PATH","RegisterEmailFormComponent","epersonRegistrationService","notificationService","translateService","formBuilder","form","group","FormControl","validators","Validators","required","pattern","invalid","registerEmail","value","MESSAGE_PREFIX","navigate","register","webpackAsyncContext","req","__webpack_require__","o","Promise","then","e","Error","code","ids","all","slice","keys","module","exports","NavbarComponent","menuService","injector","windowService","menuID","PUBLIC","createMenu","menuList","active","visible","model","LINK","text","link","TEXT","index","browseBy","types","forEach","typeConfig","push","parentID","menuSection","addSection","shouldPersistOnRouteChange","ViewTrackerComponent","angulartics2","eventTrack","next","action","properties","WorkflowItemSendBackComponent","sendBack","RegistrationResolver","searchByToken","BrowseBySwitcherComponent","getComponentByBrowseByType","browseByComponent","config","WorkflowItemSearchResult","ForgotPasswordFormComponent","ePersonDataService","isInValid","NOTIFICATIONS_PREFIX","registration$","$event","password","patchPasswordWithToken","instant","errorMessage","setInValid","setPasswordValue","submit"],"mappings":"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","file":"x","sourcesContent":["export enum BitstreamFormatSupportLevel {\n  Known = 'KNOWN',\n  Unknown = 'UNKNOWN',\n  Supported = 'SUPPORTED'\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { ProfilePageComponent } from './profile-page.component';\n\n/**\n * Themed wrapper for ProfilePageComponent\n */\n@Component({\n  selector: 'ds-themed-profile-page',\n  styleUrls: [],\n  templateUrl: './../shared/theme-support/themed.component.html'\n})\nexport class ThemedProfilePageComponent extends ThemedComponent<ProfilePageComponent> {\n  protected getComponentName(): string {\n    return 'ProfilePageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/profile-page/profile-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./profile-page.component`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { ProfilePageRoutingModule } from './profile-page-routing.module';\nimport { ProfilePageComponent } from './profile-page.component';\nimport { ProfilePageMetadataFormComponent } from './profile-page-metadata-form/profile-page-metadata-form.component';\nimport { ProfilePageSecurityFormComponent } from './profile-page-security-form/profile-page-security-form.component';\nimport { ThemedProfilePageComponent } from './themed-profile-page.component';\n\n@NgModule({\n  imports: [\n    ProfilePageRoutingModule,\n    CommonModule,\n    SharedModule\n  ],\n  exports: [\n    ProfilePageSecurityFormComponent\n  ],\n  declarations: [\n    ProfilePageComponent,\n    ThemedProfilePageComponent,\n    ProfilePageMetadataFormComponent,\n    ProfilePageSecurityFormComponent\n  ]\n})\nexport class ProfilePageModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ThemedProfilePageComponent } from './themed-profile-page.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      { path: '', pathMatch: 'full', component: ThemedProfilePageComponent, resolve: { breadcrumb: I18nBreadcrumbResolver }, data: { breadcrumbKey: 'profile', title: 'profile.title' } }\n    ])\n  ]\n})\nexport class ProfilePageRoutingModule {\n\n}\n","<ng-template #vcr></ng-template>\n","\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * This component representing the `PageNotFound` DSpace page.\n */\n@Component({\n  selector: 'ds-objnotfound',\n  styleUrls: ['./objectnotfound.component.scss'],\n  templateUrl: './objectnotfound.component.html',\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class ObjectNotFoundComponent implements OnInit {\n\n  idType: string;\n\n  id: string;\n\n  missingItem: string;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {AuthService} authservice\n   * @param {ServerResponseService} responseService\n   */\n  constructor(private route: ActivatedRoute) {\n    route.params.subscribe((params) => {\n      this.idType = params.idType;\n      this.id = params.id;\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.idType.startsWith('handle') || this.idType.startsWith('uuid')) {\n      this.missingItem = this.idType + ': ' + this.id;\n    } else {\n      this.missingItem = 'handle: ' + this.idType + '/' + this.id;\n    }\n  }\n\n}\n","<div class=\"object-not-found container\">\n  <h1>{{\"error.identifier\" | translate}}</h1>\n  <h2><small><em>{{missingItem}}</em></small></h2>\n  <br />\n  <p class=\"text-center\">\n    <a routerLink=\"/home\" class=\"btn btn-primary\">{{\"404.link.home-page\" | translate}}</a>\n  </p>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Collection } from '../core/shared/collection.model';\nimport { Observable } from 'rxjs';\nimport { CollectionDataService } from '../core/data/collection-data.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const COLLECTION_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Collection>[] = [\n  followLink('parentCommunity', undefined, true, true, true,\n    followLink('parentCommunity')\n  ),\n  followLink('logo')\n];\n\n/**\n * This class represents a resolver that requests a specific collection before the route is activated\n */\n@Injectable()\nexport class CollectionPageResolver implements Resolve<RemoteData<Collection>> {\n  constructor(\n    private collectionService: CollectionDataService,\n    private store: Store<any>\n  ) {\n  }\n\n  /**\n   * Method for resolving a collection based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Collection>> Emits the found collection based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Collection>> {\n    const collectionRD$ = this.collectionService.findById(\n      route.params.id,\n      true,\n      false,\n      ...COLLECTION_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData()\n    );\n\n    collectionRD$.subscribe((collectionRD: RemoteData<Collection>) => {\n      this.store.dispatch(new ResolvedAction(state.url, collectionRD.payload));\n    });\n\n    return collectionRD$;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { WorkflowItem } from '../core/submission/models/workflowitem.model';\nimport { Item } from '../core/shared/item.model';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { WorkflowItemDataService } from '../core/submission/workflowitem-data.service';\nimport { RouteService } from '../core/services/route.service';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { getAllSucceededRemoteData, getRemoteDataPayload } from '../core/shared/operators';\nimport { isEmpty } from '../shared/empty.util';\n\n/**\n * Abstract component representing a page to perform an action on a workflow item\n */\n@Component({\n  selector: 'ds-workflowitem-action-page',\n  template: ''\n})\nexport abstract class WorkflowItemActionPageComponent implements OnInit {\n  public type;\n  public wfi$: Observable<WorkflowItem>;\n  public item$: Observable<Item>;\n\n  constructor(protected route: ActivatedRoute,\n              protected workflowItemService: WorkflowItemDataService,\n              protected router: Router,\n              protected routeService: RouteService,\n              protected notificationsService: NotificationsService,\n              protected translationService: TranslateService) {\n  }\n\n  /**\n   * Sets up the type, workflow item and its item object\n   */\n  ngOnInit() {\n    this.type = this.getType();\n    this.wfi$ = this.route.data.pipe(map((data: Data) => data.wfi as RemoteData<WorkflowItem>), getRemoteDataPayload());\n    this.item$ = this.wfi$.pipe(switchMap((wfi: WorkflowItem) => (wfi.item as Observable<RemoteData<Item>>).pipe(getAllSucceededRemoteData(), getRemoteDataPayload())));\n  }\n\n  /**\n   * Performs the action and shows a notification based on the outcome of the action\n   */\n  performAction() {\n    this.wfi$.pipe(\n      take(1),\n      switchMap((wfi: WorkflowItem) => this.sendRequest(wfi.id))\n    ).subscribe((successful: boolean) => {\n      if (successful) {\n        const title = this.translationService.get('workflow-item.' + this.type + '.notification.success.title');\n        const content = this.translationService.get('workflow-item.' + this.type + '.notification.success.content');\n        this.notificationsService.success(title, content);\n      } else {\n        const title = this.translationService.get('workflow-item.' + this.type + '.notification.error.title');\n        const content = this.translationService.get('workflow-item.' + this.type + '.notification.error.content');\n        this.notificationsService.error(title, content);\n      }\n      this.previousPage();\n    });\n  }\n\n  /**\n   * Navigates to the previous url\n   * If there's not previous url, it continues to the mydspace page instead\n   */\n  previousPage() {\n    this.routeService.getPreviousUrl().pipe(take(1))\n      .subscribe((url) => {\n          if (isEmpty(url)) {\n            url = '/mydspace';\n          }\n          this.router.navigateByUrl(url);\n        }\n      );\n  }\n\n  /**\n   * Performs the action of this workflow item action page\n   * @param id The id of the WorkflowItem\n   */\n  abstract sendRequest(id: string): Observable<boolean>;\n\n  /**\n   * Returns the type of page\n   */\n  abstract getType(): string;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ParsedResponse\n} from '../cache/response.models';\nimport { RawRestResponse } from '../dspace-rest/raw-rest-response.model';\nimport { ResponseParsingService } from './parsing.service';\nimport { RestRequest } from './request.models';\nimport { Registration } from '../shared/registration.model';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Parsing service responsible for parsing a Registration response\n */\nexport class RegistrationResponseParsingService implements ResponseParsingService {\n\n  parse(request: RestRequest, data: RawRestResponse): ParsedResponse {\n    const payload = data.payload;\n\n    const registration = Object.assign(new Registration(), payload);\n\n    return new ParsedResponse(data.statusCode, undefined, registration);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { RequestService } from './request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { GetRequest, PostRequest } from './request.models';\nimport { Observable } from 'rxjs';\nimport { filter, find, map, skipWhile } from 'rxjs/operators';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { Registration } from '../shared/registration.model';\nimport { getFirstCompletedRemoteData, getFirstSucceededRemoteData } from '../shared/operators';\nimport { ResponseParsingService } from './parsing.service';\nimport { GenericConstructor } from '../shared/generic-constructor';\nimport { RegistrationResponseParsingService } from './registration-response-parsing.service';\nimport { RemoteData } from './remote-data';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\n\n@Injectable(\n  {\n    providedIn: 'root',\n  }\n)\n/**\n * Service that will register a new email address and request a token\n */\nexport class EpersonRegistrationService {\n\n  protected linkPath = 'registrations';\n  protected searchByTokenPath = '/search/findByToken?token=';\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected halService: HALEndpointService,\n  ) {\n\n  }\n\n  /**\n   * Retrieves the Registration endpoint\n   */\n  getRegistrationEndpoint(): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Retrieves the endpoint to search by registration token\n   */\n  getTokenSearchEndpoint(token: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      map((href: string) => `${href}${this.searchByTokenPath}${token}`));\n  }\n\n  /**\n   * Register a new email address\n   * @param email\n   */\n  registerEmail(email: string): Observable<RemoteData<Registration>> {\n    const registration = new Registration();\n    registration.email = email;\n\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getRegistrationEndpoint();\n\n    href$.pipe(\n      find((href: string) => hasValue(href)),\n      map((href: string) => {\n        const request = new PostRequest(requestId, href, registration);\n        this.requestService.send(request);\n      })\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID<Registration>(requestId).pipe(\n      getFirstCompletedRemoteData()\n    );\n  }\n\n  /**\n   * Search a registration based on the provided token\n   * @param token\n   */\n  searchByToken(token: string): Observable<Registration> {\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getTokenSearchEndpoint(token).pipe(\n      find((href: string) => hasValue(href)),\n    );\n\n    href$.subscribe((href: string) => {\n      const request = new GetRequest(requestId, href);\n      Object.assign(request, {\n        getResponseParser(): GenericConstructor<ResponseParsingService> {\n          return RegistrationResponseParsingService;\n        }\n      });\n      this.requestService.send(request, true);\n    });\n\n    return this.rdbService.buildSingle<Registration>(href$).pipe(\n      skipWhile((rd: RemoteData<Registration>) => rd.isStale),\n      getFirstSucceededRemoteData(),\n      map((restResponse: RemoteData<Registration>) => {\n        return Object.assign(new Registration(), {\n          email: restResponse.payload.email, token: token, user: restResponse.payload.user\n        });\n      }),\n    );\n\n  }\n\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { combineLatest as observableCombineLatest, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { AppState } from '../app.reducer';\nimport {\n  AddAuthenticationMessageAction,\n  AuthenticatedAction,\n  AuthenticationSuccessAction,\n  ResetAuthenticationMessagesAction\n} from '../core/auth/auth.actions';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { AuthTokenInfo } from '../core/auth/models/auth-token-info.model';\nimport { isAuthenticated } from '../core/auth/selectors';\n\n/**\n * This component represents the login page\n */\n@Component({\n  selector: 'ds-login-page',\n  styleUrls: ['./login-page.component.scss'],\n  templateUrl: './login-page.component.html'\n})\nexport class LoginPageComponent implements OnDestroy, OnInit {\n\n  /**\n   * Subscription to unsubscribe onDestroy\n   * @type {Subscription}\n   */\n  sub: Subscription;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   * @param {Store<AppState>} store\n   */\n  constructor(private route: ActivatedRoute,\n              private store: Store<AppState>) {}\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    const queryParamsObs = this.route.queryParams;\n    const authenticated = this.store.select(isAuthenticated);\n    this.sub = observableCombineLatest(queryParamsObs, authenticated).pipe(\n      filter(([params, auth]) => isNotEmpty(params.token) || isNotEmpty(params.expired)),\n      take(1)\n    ).subscribe(([params, auth]) => {\n      const token = params.token;\n      let authToken: AuthTokenInfo;\n      if (!auth) {\n        if (isNotEmpty(token)) {\n          authToken = new AuthTokenInfo(token);\n          this.store.dispatch(new AuthenticatedAction(authToken));\n        } else if (isNotEmpty(params.expired)) {\n          this.store.dispatch(new AddAuthenticationMessageAction('auth.messages.expired'));\n        }\n      } else {\n        if (isNotEmpty(token)) {\n          authToken = new AuthTokenInfo(token);\n          this.store.dispatch(new AuthenticationSuccessAction(authToken));\n        }\n      }\n    });\n  }\n\n  /**\n   * Unsubscribe from subscription\n   */\n  ngOnDestroy() {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n    // Clear all authentication messages when leaving login page\n    this.store.dispatch(new ResetAuthenticationMessagesAction());\n  }\n}\n","<div class=\"container w-100 h-100\">\n  <div class=\"text-center mt-5 row justify-content-center\">\n    <div>\n      <img class=\"mb-4 login-logo\" src=\"assets/images/dspace-logo.png\" alt=\"{{'repository.image.logo' | translate}}\">\n      <h1 class=\"h3 mb-0 font-weight-normal\">{{\"login.form.header\" | translate}}</h1>\n      <ds-log-in\n      [isStandalonePage]=\"true\"></ds-log-in>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { WorkflowItemActionPageComponent } from '../workflow-item-action-page.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { WorkflowItemDataService } from '../../core/submission/workflowitem-data.service';\nimport { RouteService } from '../../core/services/route.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\nimport { map } from 'rxjs/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n@Component({\n  selector: 'ds-workflow-item-delete',\n  templateUrl: '../workflow-item-action-page.component.html'\n})\n/**\n * Component representing a page to delete a workflow item\n */\nexport class WorkflowItemDeleteComponent extends WorkflowItemActionPageComponent {\n  constructor(protected route: ActivatedRoute,\n              protected workflowItemService: WorkflowItemDataService,\n              protected router: Router,\n              protected routeService: RouteService,\n              protected notificationsService: NotificationsService,\n              protected translationService: TranslateService,\n              protected requestService: RequestService) {\n    super(route, workflowItemService, router, routeService, notificationsService, translationService);\n  }\n\n  /**\n   * Returns the type of page\n   */\n  getType(): string {\n    return 'delete';\n  }\n\n  /**\n   * Performs the action of this workflow item action page\n   * @param id The id of the WorkflowItem\n   */\n  sendRequest(id: string): Observable<boolean> {\n    this.requestService.removeByHrefSubstring('/discover');\n    return this.workflowItemService.delete(id).pipe(\n      getFirstCompletedRemoteData(),\n      map((response: RemoteData<NoContent>) => response.hasSucceeded)\n    );\n  }\n}\n","<div class=\"container\" *ngVar=\"item$ | async as item\">\n    <h2>{{'workflow-item.' + type + '.header' | translate}}</h2>\n    <ds-modify-item-overview *ngIf=\"item\" [item]=\"item\"></ds-modify-item-overview>\n    <button class=\"btn btn-default\" (click)=\"previousPage()\">{{'workflow-item.' + type + '.button.cancel' | translate}}</button>\n    <button class=\"btn btn-danger\" (click)=\"performAction()\">{{'workflow-item.' + type + '.button.confirm' | translate}}</button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Community } from '../core/shared/community.model';\nimport { CommunityDataService } from '../core/data/community-data.service';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\nimport { Store } from '@ngrx/store';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const COMMUNITY_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Community>[] = [\n  followLink('logo'),\n  followLink('subcommunities'),\n  followLink('collections'),\n  followLink('parentCommunity')\n];\n\n/**\n * This class represents a resolver that requests a specific community before the route is activated\n */\n@Injectable()\nexport class CommunityPageResolver implements Resolve<RemoteData<Community>> {\n  constructor(\n    private communityService: CommunityDataService,\n    private store: Store<any>\n  ) {\n  }\n\n  /**\n   * Method for resolving a community based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Community>> Emits the found community based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Community>> {\n    const communityRD$ = this.communityService.findById(\n      route.params.id,\n      true,\n      false,\n      ...COMMUNITY_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    communityRD$.subscribe((communityRD: RemoteData<Community>) => {\n      this.store.dispatch(new ResolvedAction(state.url, communityRD.payload));\n    });\n\n    return communityRD$;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { RegisterEmailFormComponent } from './register-email-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n  ],\n  declarations: [\n    RegisterEmailFormComponent,\n  ],\n  providers: [],\n  exports: [\n    RegisterEmailFormComponent,\n  ]\n})\n\n/**\n * The module that contains the components related to the email registration\n */\nexport class RegisterEmailFormModule {\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-forgot-email',\n  styleUrls: ['./forgot-email.component.scss'],\n  templateUrl: './forgot-email.component.html'\n})\n/**\n * Component responsible the forgot password email step\n */\nexport class ForgotEmailComponent {\n\n}\n","<ds-register-email-form\n    [MESSAGE_PREFIX]=\"'forgot-email.form'\">\n</ds-register-email-form>","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, combineLatest as observableCombineLatest, Observable, Subject } from 'rxjs';\nimport { filter, map, mergeMap, startWith, switchMap, take } from 'rxjs/operators';\nimport { PaginatedSearchOptions } from '../shared/search/paginated-search-options.model';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { SortDirection, SortOptions } from '../core/cache/models/sort-options.model';\nimport { CollectionDataService } from '../core/data/collection-data.service';\nimport { PaginatedList } from '../core/data/paginated-list.model';\nimport { RemoteData } from '../core/data/remote-data';\n\nimport { MetadataService } from '../core/metadata/metadata.service';\nimport { Bitstream } from '../core/shared/bitstream.model';\n\nimport { Collection } from '../core/shared/collection.model';\nimport { DSpaceObjectType } from '../core/shared/dspace-object-type.model';\nimport { Item } from '../core/shared/item.model';\nimport {\n  getAllSucceededRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  redirectOn4xx,\n  toDSpaceObjectListRD\n} from '../core/shared/operators';\n\nimport { fadeIn, fadeInOut } from '../shared/animations/fade';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { PaginationComponentOptions } from '../shared/pagination/pagination-component-options.model';\nimport { AuthService } from '../core/auth/auth.service';\nimport { PaginationService } from '../core/pagination/pagination.service';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { getCollectionPageRoute } from './collection-page-routing-paths';\n\n@Component({\n  selector: 'ds-collection-page',\n  styleUrls: ['./collection-page.component.scss'],\n  templateUrl: './collection-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\nexport class CollectionPageComponent implements OnInit {\n  collectionRD$: Observable<RemoteData<Collection>>;\n  itemRD$: Observable<RemoteData<PaginatedList<Item>>>;\n  logoRD$: Observable<RemoteData<Bitstream>>;\n  paginationConfig: PaginationComponentOptions;\n  sortConfig: SortOptions;\n  private paginationChanges$: Subject<{\n    paginationConfig: PaginationComponentOptions,\n    sortConfig: SortOptions\n  }>;\n\n  /**\n   * Whether the current user is a Community admin\n   */\n  isCollectionAdmin$: Observable<boolean>;\n\n  /**\n   * Route to the community page\n   */\n  collectionPageRoute$: Observable<string>;\n\n  constructor(\n    private collectionDataService: CollectionDataService,\n    private searchService: SearchService,\n    private metadata: MetadataService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private paginationService: PaginationService,\n    private authorizationDataService: AuthorizationDataService,\n  ) {\n    this.paginationConfig = new PaginationComponentOptions();\n    this.paginationConfig.id = 'cp';\n    this.paginationConfig.pageSize = 5;\n    this.paginationConfig.currentPage = 1;\n    this.sortConfig = new SortOptions('dc.date.accessioned', SortDirection.DESC);\n  }\n\n  ngOnInit(): void {\n    this.collectionRD$ = this.route.data.pipe(\n      map((data) => data.dso as RemoteData<Collection>),\n      redirectOn4xx(this.router, this.authService),\n      take(1)\n    );\n    this.logoRD$ = this.collectionRD$.pipe(\n      map((rd: RemoteData<Collection>) => rd.payload),\n      filter((collection: Collection) => hasValue(collection)),\n      mergeMap((collection: Collection) => collection.logo)\n    );\n    this.isCollectionAdmin$ = this.authorizationDataService.isAuthorized(FeatureID.IsCollectionAdmin);\n\n    this.paginationChanges$ = new BehaviorSubject({\n      paginationConfig: this.paginationConfig,\n      sortConfig: this.sortConfig\n    });\n\n    const currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    const currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, this.sortConfig);\n\n    this.itemRD$ = observableCombineLatest([currentPagination$, currentSort$]).pipe(\n      switchMap(([currentPagination, currentSort ]) => this.collectionRD$.pipe(\n        getFirstSucceededRemoteData(),\n        map((rd) => rd.payload.id),\n        switchMap((id: string) => {\n          return this.searchService.search(\n              new PaginatedSearchOptions({\n                scope: id,\n                pagination: currentPagination,\n                sort: currentSort,\n                dsoTypes: [DSpaceObjectType.ITEM]\n              })).pipe(toDSpaceObjectListRD()) as Observable<RemoteData<PaginatedList<Item>>>;\n        }),\n        startWith(undefined) // Make sure switching pages shows loading component\n        )\n      )\n    );\n\n    this.collectionPageRoute$ = this.collectionRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((collection) => getCollectionPageRoute(collection.id))\n    );\n\n    this.route.queryParams.pipe(take(1)).subscribe((params) => {\n      this.metadata.processRemoteData(this.collectionRD$);\n    });\n  }\n\n  isNotEmpty(object: any) {\n    return isNotEmpty(object);\n  }\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.paginationConfig.id);\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"collection-page\"\n         *ngVar=\"(collectionRD$ | async) as collectionRD\">\n        <div *ngIf=\"collectionRD?.hasSucceeded\" @fadeInOut>\n            <div *ngIf=\"collectionRD?.payload as collection\">\n              <ds-view-tracker [object]=\"collection\"></ds-view-tracker>\n              <div class=\"d-flex flex-row border-bottom mb-4 pb-4\">\n                <header class=\"comcol-header mr-auto\">\n                  <!-- Collection Name -->\n                  <ds-comcol-page-header\n                          [name]=\"collection.name\">\n                  </ds-comcol-page-header>\n                  <!-- Collection logo -->\n                  <ds-comcol-page-logo *ngIf=\"logoRD$\"\n                                   [logo]=\"(logoRD$ | async)?.payload\"\n                                   [alternateText]=\"'Collection Logo'\"\n                      [alternateText]=\"'Collection Logo'\">\n                  </ds-comcol-page-logo>\n\n                  <!-- Handle -->\n                  <ds-comcol-page-handle\n                          [content]=\"collection.handle\"\n                          [title]=\"'collection.page.handle'\" >\n                  </ds-comcol-page-handle>\n                  <!-- Introductory text -->\n                  <ds-comcol-page-content\n                          [content]=\"collection.introductoryText\"\n                          [hasInnerHtml]=\"true\">\n                  </ds-comcol-page-content>\n                  <!-- News -->\n                  <ds-comcol-page-content\n                          [content]=\"collection.sidebarText\"\n                          [hasInnerHtml]=\"true\"\n                          [title]=\"'collection.page.news'\">\n                  </ds-comcol-page-content>\n                </header>\n                <div class=\"pl-2\">\n                  <ds-dso-page-edit-button *ngIf=\"isCollectionAdmin$ | async\"  [pageRoute]=\"collectionPageRoute$ | async\" [dso]=\"collection\" [tooltipMsg]=\"'collection.page.edit'\"></ds-dso-page-edit-button>\n                </div>\n              </div>\n              <section class=\"comcol-page-browse-section\">\n              <!-- Browse-By Links -->\n              <ds-comcol-page-browse-by\n                      [id]=\"collection.id\"\n                      [contentType]=\"collection.type\">\n              </ds-comcol-page-browse-by>\n\n            <ng-container *ngVar=\"(itemRD$ | async) as itemRD\">\n                <div class=\"mt-4\" *ngIf=\"itemRD?.hasSucceeded\" @fadeIn>\n                    <h3 class=\"sr-only\">{{'collection.page.browse.recent.head' | translate}}</h3>\n                    <ds-viewable-collection\n                            [config]=\"paginationConfig\"\n                            [sortConfig]=\"sortConfig\"\n                            [objects]=\"itemRD\"\n                            [hideGear]=\"true\">\n                    </ds-viewable-collection>\n                </div>\n                <ds-error *ngIf=\"itemRD?.hasFailed\"\n                          message=\"{{'error.recent-submissions' | translate}}\"></ds-error>\n                <ds-loading *ngIf=\"!itemRD || itemRD.isLoading\"\n                            message=\"{{'loading.recent-submissions' | translate}}\"></ds-loading>\n                <div *ngIf=\"!itemRD?.isLoading && itemRD?.payload?.page.length === 0\" class=\"alert alert-info w-100\" role=\"alert\">\n                        {{'collection.page.browse.recent.empty' | translate}}\n                </div>\n            </ng-container>\n            </section>\n            <footer *ngIf=\"collection.copyrightText\" class=\"border-top my-5 pt-4\">\n          <!-- Copyright -->\n          <ds-comcol-page-content\n                      [content]=\"collection.copyrightText\"\n                      [hasInnerHtml]=\"true\">\n          </ds-comcol-page-content>\n        </footer>\n      </div>\n    </div>\n        <ds-error *ngIf=\"collectionRD?.hasFailed\"\n            message=\"{{'error.collection' | translate}}\"></ds-error>\n        <ds-loading *ngIf=\"collectionRD?.isLoading\"\n            message=\"{{'loading.collection' | translate}}\"></ds-loading>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-logout-page',\n  styleUrls: ['./logout-page.component.scss'],\n  templateUrl: './logout-page.component.html'\n})\nexport class LogoutPageComponent {\n\n}\n","<div class=\"container w-100 h-100\">\n  <div class=\"text-center mt-5 row justify-content-md-center\">\n    <div class=\"mx-auto\">\n      <img class=\"mb-4 login-logo\" src=\"assets/images/dspace-logo.png\">\n      <h1 class=\"h3 mb-0 font-weight-normal\">{{\"logout.form.header\" | translate}}</h1>\n      <ds-log-out></ds-log-out>\n    </div>\n  </div>\n</div>\n","import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getWorkflowItemModuleRoute } from '../app-routing-paths';\n\nexport function getWorkflowItemPageRoute(wfiId: string) {\n  return new URLCombiner(getWorkflowItemModuleRoute(), wfiId).toString();\n}\n\nexport function getWorkflowItemEditRoute(wfiId: string) {\n  return new URLCombiner(getWorkflowItemModuleRoute(), wfiId, WORKFLOW_ITEM_EDIT_PATH).toString();\n}\n\nexport function getWorkflowItemDeleteRoute(wfiId: string) {\n  return new URLCombiner(getWorkflowItemModuleRoute(), wfiId, WORKFLOW_ITEM_DELETE_PATH).toString();\n}\n\nexport function getWorkflowItemSendBackRoute(wfiId: string) {\n  return new URLCombiner(getWorkflowItemModuleRoute(), wfiId, WORKFLOW_ITEM_SEND_BACK_PATH).toString();\n}\n\nexport const WORKFLOW_ITEM_EDIT_PATH = 'edit';\nexport const WORKFLOW_ITEM_DELETE_PATH = 'delete';\nexport const WORKFLOW_ITEM_SEND_BACK_PATH = 'sendback';\n","import { Component, Input, OnInit } from '@angular/core';\nimport { EpersonRegistrationService } from '../core/data/eperson-registration.service';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Registration } from '../core/shared/registration.model';\nimport { RemoteData } from '../core/data/remote-data';\n\n@Component({\n  selector: 'ds-register-email-form',\n  templateUrl: './register-email-form.component.html'\n})\n/**\n * Component responsible to render an email registration form.\n */\nexport class RegisterEmailFormComponent implements OnInit {\n\n  /**\n   * The form containing the mail address\n   */\n  form: FormGroup;\n\n  /**\n   * The message prefix\n   */\n  @Input()\n  MESSAGE_PREFIX: string;\n\n  constructor(\n    private epersonRegistrationService: EpersonRegistrationService,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      email: new FormControl('', {\n        validators: [Validators.required,\n          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')\n        ],\n      })\n    });\n\n  }\n\n  /**\n   * Register an email address\n   */\n  register() {\n    if (!this.form.invalid) {\n      this.epersonRegistrationService.registerEmail(this.email.value).subscribe((response: RemoteData<Registration>) => {\n          if (response.hasSucceeded) {\n            this.notificationService.success(this.translateService.get(`${this.MESSAGE_PREFIX}.success.head`),\n              this.translateService.get(`${this.MESSAGE_PREFIX}.success.content`, {email: this.email.value}));\n            this.router.navigate(['/home']);\n          } else {\n            this.notificationService.error(this.translateService.get(`${this.MESSAGE_PREFIX}.error.head`),\n              this.translateService.get(`${this.MESSAGE_PREFIX}.error.content`, {email: this.email.value}));\n          }\n        }\n      );\n    }\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n\n}\n","<div class=\"container\">\n    <h2>{{MESSAGE_PREFIX + '.header'|translate}}</h2>\n    <p>{{MESSAGE_PREFIX + '.info' | translate}}</p>\n\n    <form [class]=\"'ng-invalid'\" [formGroup]=\"form\" (ngSubmit)=\"register()\">\n\n        <div class=\"form-group\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{MESSAGE_PREFIX + '.email' | translate}}</label>\n                    <input [className]=\"(email.invalid) && (email.dirty || email.touched) ? 'form-control is-invalid' :'form-control'\"\n                           type=\"text\" id=\"email\" formControlName=\"email\"/>\n                    <div *ngIf=\"email.invalid && (email.dirty || email.touched)\"\n                         class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"email.errors && email.errors.required\">\n                        {{ MESSAGE_PREFIX + '.email.error.required' | translate }}\n                    </span>\n                    <span *ngIf=\"email.errors && email.errors.pattern\">\n                        {{ MESSAGE_PREFIX + '.email.error.pattern' | translate }}\n                    </span>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    {{MESSAGE_PREFIX + '.email.hint' |translate}}\n                </div>\n\n            </div>\n\n        </div>\n    </form>\n    \n    <button class=\"btn btn-primary\"\n            [disabled]=\"form.invalid\"\n            (click)=\"register()\">{{MESSAGE_PREFIX + '.submit'| translate}}</button>\n</div>\n","var map = {\n\t\"./custom/app/profile-page/profile-page.component\": [\n\t\t\"qgOg\",\n\t\t8,\n\t\t66\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"gG8J\";\nmodule.exports = webpackAsyncContext;","import { Component, Injector } from '@angular/core';\nimport { slideMobileNav } from '../shared/animations/slide';\nimport { MenuComponent } from '../shared/menu/menu.component';\nimport { MenuService } from '../shared/menu/menu.service';\nimport { MenuID, MenuItemType } from '../shared/menu/initial-menus-state';\nimport { TextMenuItemModel } from '../shared/menu/menu-item/models/text.model';\nimport { LinkMenuItemModel } from '../shared/menu/menu-item/models/link.model';\nimport { HostWindowService } from '../shared/host-window.service';\nimport { environment } from '../../environments/environment';\n\n/**\n * Component representing the public navbar\n */\n@Component({\n  selector: 'ds-navbar',\n  styleUrls: ['./navbar.component.scss'],\n  templateUrl: './navbar.component.html',\n  animations: [slideMobileNav]\n})\nexport class NavbarComponent extends MenuComponent {\n  /**\n   * The menu ID of the Navbar is PUBLIC\n   * @type {MenuID.PUBLIC}\n   */\n  menuID = MenuID.PUBLIC;\n\n  constructor(protected menuService: MenuService,\n              protected injector: Injector,\n              public windowService: HostWindowService\n  ) {\n    super(menuService, injector);\n  }\n\n  ngOnInit(): void {\n    this.createMenu();\n    super.ngOnInit();\n  }\n\n  /**\n   * Initialize all menu sections and items for this menu\n   */\n  createMenu() {\n    const menuList: any[] = [\n      /* Communities & Collections tree */\n      {\n        id: `browse_global_communities_and_collections`,\n        active: false,\n        visible: true,\n        model: {\n          type: MenuItemType.LINK,\n          text: `menu.section.browse_global_communities_and_collections`,\n          link: `/community-list`\n        } as LinkMenuItemModel\n      },\n      /* News */\n      {\n        id: 'browse_global',\n        active: false,\n        visible: true,\n        model: {\n          type: MenuItemType.TEXT,\n          text: 'menu.section.browse_global'\n        } as TextMenuItemModel,\n        index: 0\n      },\n    ];\n    // Read the different Browse-By types from config and add them to the browse menu\n    const types = environment.browseBy.types;\n    types.forEach((typeConfig) => {\n      menuList.push({\n        id: `browse_global_by_${typeConfig.id}`,\n        parentID: 'browse_global',\n        active: false,\n        visible: true,\n        model: {\n          type: MenuItemType.LINK,\n          text: `menu.section.browse_global_by_${typeConfig.id}`,\n          link: `/browse/${typeConfig.id}`\n        } as LinkMenuItemModel\n      });\n    });\n    menuList.forEach((menuSection) => this.menuService.addSection(this.menuID, Object.assign(menuSection, {\n      shouldPersistOnRouteChange: true\n    })));\n\n  }\n}\n","<nav [ngClass]=\"{'open': !(menuCollapsed | async)}\"\n     [@slideMobileNav]=\"!(windowService.isXsOrSm() | async) ? 'default' : ((menuCollapsed | async) ? 'collapsed' : 'expanded')\"\n     class=\"navbar navbar-expand-md navbar-light p-0 navbar-container\"\n     role=\"navigation\" role=\"navigation\" [attr.aria-label]=\"'nav.main.description' |translate\">\n  <div class=\"container h-100\">\n    <a class=\"navbar-brand my-2\" routerLink=\"/home\">\n      <img src=\"assets/images/dspace-logo.svg\" alt=\"logo\"/>\n    </a>\n\n    <div id=\"collapsingNav\" class=\"w-100 h-100\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 h-100\">\n        <ng-container *ngFor=\"let section of (sections | async)\">\n          <ng-container\n            *ngComponentOutlet=\"(sectionMap$ | async).get(section.id).component; injector: (sectionMap$ | async).get(section.id).injector;\"></ng-container>\n        </ng-container>\n      </ul>\n    </div>\n    <ds-search-navbar class=\"navbar-collapsed\"></ds-search-navbar>\n    <ds-lang-switch class=\"navbar-collapsed\"></ds-lang-switch>\n    <ds-auth-nav-menu class=\"navbar-collapsed\"></ds-auth-nav-menu>\n    <ds-impersonate-navbar class=\"navbar-collapsed\"></ds-impersonate-navbar>\n  </div>\n</nav>\n\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Angulartics2 } from 'angulartics2';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\n\n/**\n * This component triggers a page view statistic\n */\n@Component({\n  selector: 'ds-view-tracker',\n  styleUrls: ['./view-tracker.component.scss'],\n  templateUrl: './view-tracker.component.html',\n})\nexport class ViewTrackerComponent implements OnInit {\n  @Input() object: DSpaceObject;\n\n  constructor(\n    public angulartics2: Angulartics2\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.angulartics2.eventTrack.next({\n      action: 'pageView',\n      properties: {object: this.object},\n    });\n  }\n}\n","&nbsp;\n","import { Component } from '@angular/core';\nimport { WorkflowItemActionPageComponent } from '../workflow-item-action-page.component';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { WorkflowItemDataService } from '../../core/submission/workflowitem-data.service';\nimport { RouteService } from '../../core/services/route.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\n\n@Component({\n  selector: 'ds-workflow-item-send-back',\n  templateUrl: '../workflow-item-action-page.component.html'\n})\n/**\n * Component representing a page to send back a workflow item to the submitter\n */\nexport class WorkflowItemSendBackComponent extends WorkflowItemActionPageComponent {\n  constructor(protected route: ActivatedRoute,\n              protected workflowItemService: WorkflowItemDataService,\n              protected router: Router,\n              protected routeService: RouteService,\n              protected notificationsService: NotificationsService,\n              protected translationService: TranslateService,\n              protected requestService: RequestService) {\n    super(route, workflowItemService, router, routeService, notificationsService, translationService);\n  }\n\n  /**\n   * Returns the type of page\n   */\n  getType(): string {\n    return 'send-back';\n  }\n\n  /**\n   * Performs the action of this workflow item action page\n   * @param id The id of the WorkflowItem\n   */\n  sendRequest(id: string): Observable<boolean> {\n    this.requestService.removeByHrefSubstring('/discover');\n    return this.workflowItemService.sendBack(id);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { EpersonRegistrationService } from '../core/data/eperson-registration.service';\nimport { Registration } from '../core/shared/registration.model';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n/**\n * Resolver to resolve a Registration object based on the provided token\n */\nexport class RegistrationResolver implements Resolve<Registration> {\n\n  constructor(private epersonRegistrationService: EpersonRegistrationService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Registration> {\n    const token = route.params.token;\n    return this.epersonRegistrationService.searchByToken(token);\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { BrowseByTypeConfig } from '../../../config/browse-by-type-config.interface';\nimport { map } from 'rxjs/operators';\nimport { BROWSE_BY_COMPONENT_FACTORY } from './browse-by-decorator';\nimport { environment } from '../../../environments/environment';\nimport { GenericConstructor } from '../../core/shared/generic-constructor';\n\n@Component({\n  selector: 'ds-browse-by-switcher',\n  templateUrl: './browse-by-switcher.component.html'\n})\n/**\n * Component for determining what Browse-By component to use depending on the metadata (browse ID) provided\n */\nexport class BrowseBySwitcherComponent implements OnInit {\n\n  /**\n   * Resolved browse-by component\n   */\n  browseByComponent: Observable<any>;\n\n  public constructor(protected route: ActivatedRoute,\n                     @Inject(BROWSE_BY_COMPONENT_FACTORY) private getComponentByBrowseByType: (browseByType) => GenericConstructor<any>) {\n  }\n\n  /**\n   * Fetch the correct browse-by component by using the relevant config from environment.js\n   */\n  ngOnInit(): void {\n    this.browseByComponent = this.route.params.pipe(\n      map((params) => {\n        const id = params.id;\n        return environment.browseBy.types.find((config: BrowseByTypeConfig) => config.id === id);\n      }),\n      map((config: BrowseByTypeConfig) => this.getComponentByBrowseByType(config.type))\n    );\n  }\n\n}\n","<ng-container *ngComponentOutlet=\"browseByComponent | async\"></ng-container>\n","import { WorkflowItem } from '../../../core/submission/models/workflowitem.model';\nimport { SearchResult } from '../../search/search-result.model';\nimport { searchResultFor } from '../../search/search-result-element-decorator';\n\n/**\n * Represents a search result object of a WorkflowItem object\n */\n@searchResultFor(WorkflowItem)\nexport class WorkflowItemSearchResult extends SearchResult<WorkflowItem> {\n}\n","import { Component } from '@angular/core';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { Observable } from 'rxjs';\nimport { Registration } from '../../core/shared/registration.model';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthenticateAction } from '../../core/auth/auth.actions';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../../core/core.reducers';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n@Component({\n  selector: 'ds-forgot-password-form',\n  styleUrls: ['./forgot-password-form.component.scss'],\n  templateUrl: './forgot-password-form.component.html'\n})\n/**\n * Component for a user to enter a new password for a forgot token.\n */\nexport class ForgotPasswordFormComponent {\n\n  registration$: Observable<Registration>;\n\n  token: string;\n  email: string;\n  user: string;\n\n  isInValid = true;\n  password: string;\n\n  /**\n   * Prefix for the notification messages of this component\n   */\n  NOTIFICATIONS_PREFIX = 'forgot-password.form.notification';\n\n  constructor(private ePersonDataService: EPersonDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private store: Store<CoreState>,\n              private router: Router,\n              private route: ActivatedRoute,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.registration$ = this.route.data.pipe(\n      map((data) => data.registration as Registration),\n    );\n    this.registration$.subscribe((registration: Registration) => {\n      this.email = registration.email;\n      this.token = registration.token;\n      this.user = registration.user;\n    });\n  }\n\n  setInValid($event: boolean) {\n    this.isInValid = $event;\n  }\n\n  setPasswordValue($event: string) {\n    this.password = $event;\n  }\n\n  /**\n   * Submits the password to the eperson service to be updated.\n   * The submission will not be made when the form is not valid.\n   */\n  submit() {\n    if (!this.isInValid) {\n      this.ePersonDataService.patchPasswordWithToken(this.user, this.token, this.password).pipe(\n        getFirstCompletedRemoteData()\n      ).subscribe((response: RemoteData<EPerson>) => {\n        if (response.hasSucceeded) {\n          this.notificationsService.success(\n            this.translateService.instant(this.NOTIFICATIONS_PREFIX + '.success.title'),\n            this.translateService.instant(this.NOTIFICATIONS_PREFIX + '.success.content')\n          );\n          this.store.dispatch(new AuthenticateAction(this.email, this.password));\n          this.router.navigate(['/home']);\n        } else {\n          this.notificationsService.error(\n            this.translateService.instant(this.NOTIFICATIONS_PREFIX + '.error.title'), response.errorMessage\n          );\n        }\n      });\n    }\n  }\n}\n","<div class=\"container\">\n    <h3 class=\"mb-4\">{{'forgot-password.form.head' | translate}}</h3>\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'forgot-password.form.identification.header' | translate}}</div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{'forgot-password.form.identification.email' | translate}}</label>\n                    <span id=\"email\">{{(registration$ |async).email}}</span></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'forgot-password.form.card.security' | translate}}</div>\n        <div class=\"card-body\">\n\n            <ds-profile-page-security-form\n                    [passwordCanBeEmpty]=\"false\"\n                    [FORM_PREFIX]=\"'forgot-password.form.'\"\n                    (isInvalid)=\"setInValid($event)\"\n                    (passwordValue)=\"setPasswordValue($event)\"\n            ></ds-profile-page-security-form>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <button\n                    [disabled]=\"isInValid\"\n                    class=\"btn btn-default btn-primary\"\n                    (click)=\"submit()\">{{'forgot-password.form.submit' | translate}}</button>\n        </div>\n    </div>\n</div>"]}