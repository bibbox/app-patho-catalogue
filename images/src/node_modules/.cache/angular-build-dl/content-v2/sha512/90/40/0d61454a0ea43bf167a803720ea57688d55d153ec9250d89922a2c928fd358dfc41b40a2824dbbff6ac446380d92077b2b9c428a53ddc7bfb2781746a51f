{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/core/eperson/models/eperson-dto.model.ts","webpack:///src/app/access-control/epeople-registry/eperson-form/eperson-form.component.html","webpack:///src/app/access-control/epeople-registry/eperson-form/eperson-form.component.ts","webpack:///src/app/access-control/epeople-registry/epeople-registry.component.html","webpack:///src/app/access-control/epeople-registry/epeople-registry.component.ts","webpack:///src/app/access-control/group-registry/group-form/members-list/members-list.component.html","webpack:///src/app/access-control/group-registry/group-form/members-list/members-list.component.ts","webpack:///src/app/access-control/group-registry/group-form/subgroup-list/subgroups-list.component.html","webpack:///src/app/access-control/group-registry/group-form/subgroup-list/subgroups-list.component.ts","webpack:///src/app/access-control/group-registry/group-form/group-form.component.html","webpack:///src/app/access-control/group-registry/group-form/group-form.component.ts","webpack:///src/app/core/eperson/models/group-dto.model.ts","webpack:///src/app/access-control/group-registry/groups-registry.component.html","webpack:///src/app/access-control/group-registry/groups-registry.component.ts","webpack:///src/app/access-control/access-control.module.ts","webpack:///src/app/access-control/access-control-routing.module.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","breadcrumbService","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","EpersonDtoModel","groupsDataService","EPersonFormComponent","epersonService","formBuilderService","translateService","notificationsService","authService","authorizationService","modalService","paginationService","requestService","labelPrefix","formId","messagePrefix","formLayout","firstName","grid","host","lastName","email","canLogIn","requireCertificate","submitForm","EventEmitter","cancelForm","canReset$","subs","config","Object","assign","id","pageSize","currentPage","isImpersonated","push","getActiveEPerson","subscribe","eperson","epersonInitial","isImpersonatingUser","initialisePage","get","emailHint","label","name","validators","required","pattern","hint","value","formModel","formGroup","createFormGroup","groups","findAllByHref","_links","href","elementsPerPage","patchValue","firstMetadataValue","activeEPerson$","pipe","switchMap","getFindListOptions","findListOptions","canImpersonate$","isAuthorized","LoginOnBehalfOf","self","canDelete$","CanDelete","cancelEditEPerson","emit","take","ePerson","values","metadata","createNewEPerson","editEPerson","ePersonToCreate","create","g","rd","hasSucceeded","success","error","showNotificationIfEmailInUse","editedEperson","updateEPerson","notificationSection","searchByScope","list","totalElements","event","updateGroups","options","impersonate","modalRef","open","componentInstance","dso","headerLabel","infoLabel","cancelLabel","confirmLabel","brandColor","confirmIcon","response","confirm","deleteEPerson","restResponse","statusCode","errorMessage","stopImpersonatingAndRefresh","onCancel","filter","sub","forEach","unsubscribe","clearPagination","removeByHrefSubstring","onSubmit","EPeopleRegistryComponent","formBuilder","router","ePeople$","BehaviorSubject","b","ePeopleDto$","pageInfoState$","searching$","currentSearchQuery","currentSearchScope","searchForm","group","scope","query","next","isEPersonFormShown","search","epeople","pageInfo","combineLatest","page","map","authorized","epersonDtoModel","ableToDelete","dtos","findListOptionsSub","getCurrentPagination","navigate","getEPeoplePageRouterLink","queryParamsHandling","resetPage","peopleRD","payload","activeEPerson","scrollToTop","reset","cleanupSubscribes","smoothscroll","currentScroll","document","documentElement","scrollTop","body","window","requestAnimationFrame","scrollTo","getBrowseEndpoint","setStaleByHrefSubstring","ePersonDataService","MembersListComponent","SubKey","ActiveGroup","MembersDTO","SearchResultsDTO","groupDataService","ePeopleSearchDtos","ePeopleMembersOfGroupDtos","configSearch","Map","set","getActiveGroup","activeGroup","groupBeingEdited","retrieveMembers","unsubFrom","currentPagination","epersons","hasFailed","cause","epersonListRD","member","isMemberOfGroup","isMember","memberOfGroup","paginatedListOfDTOs","possibleMember","mergeMap","listEPeopleInGroup","ePersonInList","length","has","deleteMemberFromGroup","showNotifications","addMemberToGroup","paginationOptions","searchDone","keys","messageSuffix","nameObject","clearLinkRequests","clearFormAndResetResult","SubgroupsListComponent","Members","SearchResults","searchResults$","subGroups$","retrieveSubGroups","subgroups","possibleSubgroup","uuid","listTotalGroups","groupInList","subgroup","deleteSubGroupFromGroup","addSubGroupToGroup","navigateByUrl","getGroupEditPageRouterLink","searchGroups","clearGroupLinkRequests","GroupFormComponent","dSpaceObjectDataService","groupName","groupDescription","AlertTypeEnum","params","groupId","setActiveGroup","canEdit$","hasLinkedDSO","canEdit","permanent","disable","cancelEditGroup","getGroupRegistryRouterLink","createNewGroup","editGroup","groupToCreate","setActiveGroupWithLink","clearGroupsRequests","getGroupEditPageRouterLinkWithID","showNotificationIfNameInUse","operations","op","path","patch","findById","groupSelfLink","findByHref","object","getLinkedDSO","catchError","type","GroupDtoModel","GroupsRegistryComponent","AccessControlModule","AccessControlRoutingModule","groupService","routeService","groupsDto$","deletedGroupsIds","searchSub","updateRouteWithUrl","trim","includes","getSubgroups","getMembers","members","groupDtoModel","paginationSub","forChild","component","resolve","breadcrumb","title","I18nBreadcrumbsService","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { EPerson } from './eperson.model';\n\n/**\n * This class serves as a Data Transfer Model that contains the EPerson and whether or not it's able to be deleted\n */\nexport class EpersonDtoModel {\n\n    /**\n     * The EPerson linked to this object\n     */\n    public eperson: EPerson;\n    /**\n     * Whether or not the linked EPerson is able to be deleted\n     */\n    public ableToDelete: boolean;\n    /**\n     * Whether or not this EPerson is member of group on page it is being used on\n     */\n    public memberOfGroup: boolean;\n\n}\n","<div *ngIf=\"epersonService.getActiveEPerson() | async; then editheader; else createHeader\"></div>\n\n<ng-template #createHeader>\n  <h4>{{messagePrefix + '.create' | translate}}</h4>\n</ng-template>\n\n<ng-template #editheader>\n  <h4>{{messagePrefix + '.edit' | translate}}</h4>\n</ng-template>\n\n<ds-form [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [formLayout]=\"formLayout\"\n         [displayCancel]=\"false\"\n         (submitForm)=\"onSubmit()\">\n  <div before class=\"btn-group\">\n    <button (click)=\"onCancel()\"\n            class=\"btn btn-outline-secondary\"><i class=\"fas fa-arrow-left\"></i> {{messagePrefix + '.return' | translate}}</button>\n  </div>\n  <div between class=\"btn-group\">\n    <button class=\"btn btn-primary\" [disabled]=\"!(canReset$ | async)\">\n      <i class=\"fa fa-key\"></i> {{'admin.access-control.epeople.actions.reset' | translate}}\n    </button>\n  </div>\n  <div between class=\"btn-group ml-1\">\n    <button *ngIf=\"!isImpersonated\" class=\"btn btn-primary\" [ngClass]=\"{'d-none' : !(canImpersonate$ | async)}\" (click)=\"impersonate()\">\n      <i class=\"fa fa-user-secret\"></i> {{'admin.access-control.epeople.actions.impersonate' | translate}}\n    </button>\n    <button *ngIf=\"isImpersonated\" class=\"btn btn-primary\" (click)=\"stopImpersonating()\">\n      <i class=\"fa fa-user-secret\"></i> {{'admin.access-control.epeople.actions.stop-impersonating' | translate}}\n    </button>\n  </div>\n  <button after class=\"btn btn-danger delete-button\" [disabled]=\"!(canDelete$ | async)\" (click)=\"delete()\">\n    <i class=\"fas fa-trash\"></i> {{'admin.access-control.epeople.actions.delete' | translate}}\n  </button>\n</ds-form>\n\n<div *ngIf=\"epersonService.getActiveEPerson() | async\">\n  <h5>{{messagePrefix + '.groupsEPersonIsMemberOf' | translate}}</h5>\n\n  <ds-pagination\n    *ngIf=\"(groups | async)?.payload?.totalElements > 0\"\n    [paginationOptions]=\"config\"\n    [pageInfoState]=\"(groups | async)?.payload\"\n    [collectionSize]=\"(groups | async)?.payload?.totalElements\"\n    [hideGear]=\"true\"\n    [hidePagerWhenSinglePage]=\"true\"\n    (pageChange)=\"onPageChange($event)\">\n\n    <div class=\"table-responsive\">\n      <table id=\"groups\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\">{{messagePrefix + '.table.name' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let group of (groups | async)?.payload?.page\">\n          <td>{{group.id}}</td>\n          <td><a (click)=\"groupsDataService.startEditingNewGroup(group)\"\n                 [routerLink]=\"[groupsDataService.getGroupEditPageRouterLink(group)]\">{{group.name}}</a></td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n\n  <div *ngIf=\"(groups | async)?.payload?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n    <div>{{messagePrefix + '.memberOfNoGroups' | translate}}</div>\n    <div>\n      <button [routerLink]=\"[groupsDataService.getGroupRegistryRouterLink()]\"\n              class=\"btn btn-primary\">{{messagePrefix + '.goToGroups' | translate}}</button>\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicCheckboxModel,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicInputModel\n} from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest as observableCombineLatest, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { EPersonDataService } from '../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { EPerson } from '../../../core/eperson/models/eperson.model';\nimport { Group } from '../../../core/eperson/models/group.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../../core/shared/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { AuthService } from '../../../core/auth/auth.service';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { ConfirmationModalComponent } from '../../../shared/confirmation-modal/confirmation-modal.component';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RequestService } from '../../../core/data/request.service';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-eperson-form',\n  templateUrl: './eperson-form.component.html'\n})\n/**\n * A form used for creating and editing EPeople\n */\nexport class EPersonFormComponent implements OnInit, OnDestroy {\n\n  labelPrefix = 'admin.access-control.epeople.form.';\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'eperson-form';\n\n  /**\n   * The labelPrefix for all messages related to this form\n   */\n  messagePrefix = 'admin.access-control.epeople.form';\n\n  /**\n   * Dynamic input models for the inputs of form\n   */\n  firstName: DynamicInputModel;\n  lastName: DynamicInputModel;\n  email: DynamicInputModel;\n  // booleans\n  canLogIn: DynamicCheckboxModel;\n  requireCertificate: DynamicCheckboxModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    firstName: {\n      grid: {\n        host: 'row'\n      }\n    },\n    lastName: {\n      grid: {\n        host: 'row'\n      }\n    },\n    email: {\n      grid: {\n        host: 'row'\n      }\n    },\n    canLogIn: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    requireCertificate: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: FormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * An EventEmitter that's fired whenever the form is cancelled\n   */\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Observable whether or not the admin is allowed to reset the EPerson's password\n   * TODO: Initialize the observable once the REST API supports this (currently hardcoded to return false)\n   */\n  canReset$: Observable<boolean> = observableOf(false);\n\n  /**\n   * Observable whether or not the admin is allowed to delete the EPerson\n   */\n  canDelete$: Observable<boolean>;\n\n  /**\n   * Observable whether or not the admin is allowed to impersonate the EPerson\n   */\n  canImpersonate$: Observable<boolean>;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * A list of all the groups this EPerson is a member of\n   */\n  groups: Observable<RemoteData<PaginatedList<Group>>>;\n\n  /**\n   * Pagination config used to display the list of groups\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'gem',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * Try to retrieve initial active eperson, to fill in checkboxes at component creation\n   */\n  epersonInitial: EPerson;\n\n  /**\n   * Whether or not this EPerson is currently being impersonated\n   */\n  isImpersonated = false;\n\n  constructor(public epersonService: EPersonDataService,\n              public groupsDataService: GroupDataService,\n              private formBuilderService: FormBuilderService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private authService: AuthService,\n              private authorizationService: AuthorizationDataService,\n              private modalService: NgbModal,\n              private paginationService: PaginationService,\n              public requestService: RequestService) {\n    this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n      this.epersonInitial = eperson;\n      if (hasValue(eperson)) {\n        this.isImpersonated = this.authService.isImpersonatingUser(eperson.id);\n      }\n    }));\n  }\n\n  ngOnInit() {\n    this.initialisePage();\n  }\n\n  /**\n   * This method will initialise the page\n   */\n  initialisePage() {\n    observableCombineLatest(\n      this.translateService.get(`${this.messagePrefix}.firstName`),\n      this.translateService.get(`${this.messagePrefix}.lastName`),\n      this.translateService.get(`${this.messagePrefix}.email`),\n      this.translateService.get(`${this.messagePrefix}.canLogIn`),\n      this.translateService.get(`${this.messagePrefix}.requireCertificate`),\n      this.translateService.get(`${this.messagePrefix}.emailHint`),\n    ).subscribe(([firstName, lastName, email, canLogIn, requireCertificate, emailHint]) => {\n      this.firstName = new DynamicInputModel({\n        id: 'firstName',\n        label: firstName,\n        name: 'firstName',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.lastName = new DynamicInputModel({\n        id: 'lastName',\n        label: lastName,\n        name: 'lastName',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.email = new DynamicInputModel({\n        id: 'email',\n        label: email,\n        name: 'email',\n        validators: {\n          required: null,\n          pattern: '^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'\n        },\n        required: true,\n        hint: emailHint\n      });\n      this.canLogIn = new DynamicCheckboxModel(\n        {\n          id: 'canLogIn',\n          label: canLogIn,\n          name: 'canLogIn',\n          value: (this.epersonInitial != null ? this.epersonInitial.canLogIn : true)\n        });\n      this.requireCertificate = new DynamicCheckboxModel(\n        {\n          id: 'requireCertificate',\n          label: requireCertificate,\n          name: 'requireCertificate',\n          value: (this.epersonInitial != null ? this.epersonInitial.requireCertificate : false)\n        });\n      this.formModel = [\n        this.firstName,\n        this.lastName,\n        this.email,\n        this.canLogIn,\n        this.requireCertificate,\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n      this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n        if (eperson != null) {\n          this.groups = this.groupsDataService.findAllByHref(eperson._links.groups.href, {\n            currentPage: 1,\n            elementsPerPage: this.config.pageSize\n          });\n        }\n        this.formGroup.patchValue({\n          firstName: eperson != null ? eperson.firstMetadataValue('eperson.firstname') : '',\n          lastName: eperson != null ? eperson.firstMetadataValue('eperson.lastname') : '',\n          email: eperson != null ? eperson.email : '',\n          canLogIn: eperson != null ? eperson.canLogIn : true,\n          requireCertificate: eperson != null ? eperson.requireCertificate : false\n        });\n      }));\n\n      const activeEPerson$ = this.epersonService.getActiveEPerson();\n\n      this.groups  = activeEPerson$.pipe(\n        switchMap((eperson) => {\n          return observableCombineLatest([observableOf(eperson), this.paginationService.getFindListOptions(this.config.id, {\n            currentPage: 1,\n            elementsPerPage: this.config.pageSize\n          })]);\n        }),\n        switchMap(([eperson, findListOptions]) => {\n          if (eperson != null) {\n            return this.groupsDataService.findAllByHref(eperson._links.groups.href, findListOptions);\n          }\n          return observableOf(undefined);\n        })\n      );\n\n      this.canImpersonate$ = activeEPerson$.pipe(\n        switchMap((eperson) => this.authorizationService.isAuthorized(FeatureID.LoginOnBehalfOf, hasValue(eperson) ? eperson.self : undefined))\n      );\n      this.canDelete$ = activeEPerson$.pipe(\n        switchMap((eperson) => this.authorizationService.isAuthorized(FeatureID.CanDelete, hasValue(eperson) ? eperson.self : undefined))\n      );\n    });\n  }\n\n  /**\n   * Stop editing the currently selected eperson\n   */\n  onCancel() {\n    this.epersonService.cancelEditEPerson();\n    this.cancelForm.emit();\n  }\n\n  /**\n   * Submit the form\n   * When the eperson has an id attached -> Edit the eperson\n   * When the eperson has no id attached -> Create new eperson\n   * Emit the updated/created eperson using the EventEmitter submitForm\n   */\n  onSubmit() {\n    this.epersonService.getActiveEPerson().pipe(take(1)).subscribe(\n      (ePerson: EPerson) => {\n        const values = {\n          metadata: {\n            'eperson.firstname': [\n              {\n                value: this.firstName.value\n              }\n            ],\n            'eperson.lastname': [\n              {\n                value: this.lastName.value\n              },\n            ],\n          },\n          email: this.email.value,\n          canLogIn: this.canLogIn.value,\n          requireCertificate: this.requireCertificate.value,\n        };\n        if (ePerson == null) {\n          this.createNewEPerson(values);\n        } else {\n          this.editEPerson(ePerson, values);\n        }\n      }\n    );\n  }\n\n  /**\n   * Creates new EPerson based on given values from form\n   * @param values\n   */\n  createNewEPerson(values) {\n    const ePersonToCreate = Object.assign(new EPerson(), values);\n\n    const response = this.epersonService.create(ePersonToCreate);\n    response.pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<EPerson>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.created.success', {name: ePersonToCreate.name}));\n        this.submitForm.emit(ePersonToCreate);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.labelPrefix + 'notification.created.failure', {name: ePersonToCreate.name}));\n        this.cancelForm.emit();\n      }\n    });\n    this.showNotificationIfEmailInUse(ePersonToCreate, 'created');\n  }\n\n  /**\n   * Edits existing EPerson based on given values from form and old EPerson\n   * @param ePerson   ePerson to edit\n   * @param values    new ePerson values (of form)\n   */\n  editEPerson(ePerson: EPerson, values) {\n    const editedEperson = Object.assign(new EPerson(), {\n      id: ePerson.id,\n      metadata: {\n        'eperson.firstname': [\n          {\n            value: (this.firstName.value ? this.firstName.value : ePerson.firstMetadataValue('eperson.firstname'))\n          }\n        ],\n        'eperson.lastname': [\n          {\n            value: (this.lastName.value ? this.lastName.value : ePerson.firstMetadataValue('eperson.lastname'))\n          },\n        ],\n      },\n      email: (hasValue(values.email) ? values.email : ePerson.email),\n      canLogIn: (hasValue(values.canLogIn) ? values.canLogIn : ePerson.canLogIn),\n      requireCertificate: (hasValue(values.requireCertificate) ? values.requireCertificate : ePerson.requireCertificate),\n      _links: ePerson._links,\n    });\n\n    const response = this.epersonService.updateEPerson(editedEperson);\n    response.pipe(getFirstCompletedRemoteData()).subscribe((rd: RemoteData<EPerson>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.edited.success', {name: editedEperson.name}));\n        this.submitForm.emit(editedEperson);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.labelPrefix + 'notification.edited.failure', {name: editedEperson.name}));\n        this.cancelForm.emit();\n      }\n    });\n\n    if (values.email != null && values.email !== ePerson.email) {\n      this.showNotificationIfEmailInUse(editedEperson, 'edited');\n    }\n  }\n\n  /**\n   * Checks for the given ePerson if there is already an ePerson in the system with that email\n   * and shows notification if this is the case\n   * @param ePerson               ePerson values to check\n   * @param notificationSection   whether in create or edit\n   */\n  private showNotificationIfEmailInUse(ePerson: EPerson, notificationSection: string) {\n    // Relevant message for email in use\n    this.subs.push(this.epersonService.searchByScope('email', ePerson.email, {\n      currentPage: 1,\n      elementsPerPage: 0\n    }).pipe(getFirstSucceededRemoteData(), getRemoteDataPayload())\n      .subscribe((list: PaginatedList<EPerson>) => {\n        if (list.totalElements > 0) {\n          this.notificationsService.error(this.translateService.get(this.labelPrefix + 'notification.' + notificationSection + '.failure.emailInUse', {\n            name: ePerson.name,\n            email: ePerson.email\n          }));\n        }\n      }));\n  }\n\n  /**\n   * Event triggered when the user changes page\n   * @param event\n   */\n  onPageChange(event) {\n    this.updateGroups({\n      currentPage: event,\n      elementsPerPage: this.config.pageSize\n    });\n  }\n\n  /**\n   * Update the list of groups by fetching it from the rest api or cache\n   */\n  private updateGroups(options) {\n    this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n      this.groups = this.groupsDataService.findAllByHref(eperson._links.groups.href, options);\n    }));\n  }\n\n  /**\n   * Start impersonating the EPerson\n   */\n  impersonate() {\n    this.authService.impersonate(this.epersonInitial.id);\n    this.isImpersonated = true;\n  }\n\n  /**\n   * Deletes the EPerson from the Repository. The EPerson will be the only that this form is showing.\n   * It'll either show a success or error message depending on whether the delete was successful or not.\n   */\n  delete() {\n      this.epersonService.getActiveEPerson().pipe(take(1)).subscribe((eperson: EPerson) => {\n        const modalRef = this.modalService.open(ConfirmationModalComponent);\n        modalRef.componentInstance.dso = eperson;\n        modalRef.componentInstance.headerLabel = 'confirmation-modal.delete-eperson.header';\n        modalRef.componentInstance.infoLabel = 'confirmation-modal.delete-eperson.info';\n        modalRef.componentInstance.cancelLabel = 'confirmation-modal.delete-eperson.cancel';\n        modalRef.componentInstance.confirmLabel = 'confirmation-modal.delete-eperson.confirm';\n        modalRef.componentInstance.brandColor = 'danger';\n        modalRef.componentInstance.confirmIcon = 'fas fa-trash';\n        modalRef.componentInstance.response.pipe(take(1)).subscribe((confirm: boolean) => {\n          if (confirm) {\n            if (hasValue(eperson.id)) {\n              this.epersonService.deleteEPerson(eperson).pipe(getFirstCompletedRemoteData()).subscribe((restResponse: RemoteData<NoContent>) => {\n                if (restResponse.hasSucceeded) {\n                  this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.deleted.success', { name: eperson.name }));\n                  this.submitForm.emit();\n                } else {\n                  this.notificationsService.error('Error occured when trying to delete EPerson with id: ' + eperson.id + ' with code: ' + restResponse.statusCode + ' and message: ' + restResponse.errorMessage);\n                }\n                this.cancelForm.emit();\n              });\n            }}\n        });\n    });\n  }\n\n  /**\n   * Stop impersonating the EPerson\n   */\n  stopImpersonating() {\n    this.authService.stopImpersonatingAndRefresh();\n    this.isImpersonated = false;\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed & unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.onCancel();\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n\n  /**\n   * This method will ensure that the page gets reset and that the cache is cleared\n   */\n  reset() {\n    this.epersonService.getActiveEPerson().pipe(take(1)).subscribe((eperson: EPerson) => {\n      this.requestService.removeByHrefSubstring(eperson.self);\n    });\n    this.initialisePage();\n  }\n}\n","<div class=\"container\">\n  <div class=\"epeople-registry row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom mb-3\">\n        <h2 id=\"header\" class=\"pb-2\">{{labelPrefix + 'head' | translate}}</h2>\n\n        <div *ngIf=\"!isEPersonFormShown\">\n          <button class=\"mr-auto btn btn-success addEPerson-button\"\n                  (click)=\"isEPersonFormShown = true\">\n            <i class=\"fas fa-plus\"></i>\n            <span class=\"d-none d-sm-inline\">{{labelPrefix + 'button.add' | translate}}</span>\n          </button>\n        </div>\n      </div>\n\n      <ds-eperson-form *ngIf=\"isEPersonFormShown\" (submitForm)=\"reset()\"\n                       (cancelForm)=\"isEPersonFormShown = false\"></ds-eperson-form>\n\n      <div *ngIf=\"!isEPersonFormShown\">\n        <h3 id=\"search\" class=\"border-bottom pb-2\">{{labelPrefix + 'search.head' | translate}}\n\n        </h3>\n        <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n          <div>\n            <select name=\"scope\" id=\"scope\" formControlName=\"scope\" class=\"form-control\" aria-label=\"Search scope\">\n              <option value=\"metadata\">{{labelPrefix + 'search.scope.metadata' | translate}}</option>\n              <option value=\"email\">{{labelPrefix + 'search.scope.email' | translate}}</option>\n            </select>\n          </div>\n          <div class=\"flex-grow-1 mr-3 ml-3\">\n            <div class=\"form-group input-group\">\n              <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n                    class=\"form-control\" attr.aria-label=\"{{labelPrefix + 'search.placeholder' | translate}}\"\n                     [placeholder]=\"(labelPrefix + 'search.placeholder' | translate)\">\n              <span class=\"input-group-append\">\n                <button type=\"submit\" class=\"search-button btn btn-primary\">\n                  <i class=\"fas fa-search\"></i> {{ labelPrefix + 'search.button' | translate }}\n                </button>\n              </span>\n            </div>\n          </div>\n          <div>\n            <button (click)=\"clearFormAndResetResult();\"\n                    class=\"search-button btn btn-secondary\">{{labelPrefix + 'button.see-all' | translate}}</button>\n          </div>\n        </form>\n\n        <ds-loading *ngIf=\"searching$ | async\"></ds-loading>\n        <ds-pagination\n          *ngIf=\"(pageInfoState$ | async)?.totalElements > 0 && !(searching$ | async)\"\n          [paginationOptions]=\"config\"\n          [pageInfoState]=\"pageInfoState$\"\n          [collectionSize]=\"(pageInfoState$ | async)?.totalElements\"\n          [hideGear]=\"true\"\n          [hidePagerWhenSinglePage]=\"true\">\n\n          <div class=\"table-responsive\">\n            <table id=\"epeople\" class=\"table table-striped table-hover table-bordered\">\n              <thead>\n              <tr>\n                <th scope=\"col\">{{labelPrefix + 'table.id' | translate}}</th>\n                <th scope=\"col\">{{labelPrefix + 'table.name' | translate}}</th>\n                <th scope=\"col\">{{labelPrefix + 'table.email' | translate}}</th>\n                <th>{{labelPrefix + 'table.edit' | translate}}</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr *ngFor=\"let epersonDto of (ePeopleDto$ | async)?.page\"\n                  [ngClass]=\"{'table-primary' : isActive(epersonDto.eperson) | async}\">\n                <td>{{epersonDto.eperson.id}}</td>\n                <td>{{epersonDto.eperson.name}}</td>\n                <td>{{epersonDto.eperson.email}}</td>\n                <td>\n                  <div class=\"btn-group edit-field\">\n                    <button class=\"delete-button\" (click)=\"toggleEditEPerson(epersonDto.eperson)\"\n                            class=\"btn btn-outline-primary btn-sm access-control-editEPersonButton\"\n                            title=\"{{labelPrefix + 'table.edit.buttons.edit' | translate: {name: epersonDto.eperson.name} }}\">\n                      <i class=\"fas fa-edit fa-fw\"></i>\n                    </button>\n                    <button [disabled]=\"!epersonDto.ableToDelete\" (click)=\"deleteEPerson(epersonDto.eperson)\"\n                            class=\"btn btn-outline-danger btn-sm access-control-deleteEPersonButton\"\n                            title=\"{{labelPrefix + 'table.edit.buttons.remove' | translate: {name: epersonDto.eperson.name} }}\">\n                      <i class=\"fas fa-trash-alt fa-fw\"></i>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n\n        </ds-pagination>\n\n        <div *ngIf=\"(pageInfoState$ | async)?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n          {{labelPrefix + 'no-items' | translate}}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { buildPaginatedList, PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { hasValue } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { EpersonDtoModel } from '../../core/eperson/models/eperson-dto.model';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { getAllSucceededRemoteData, getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport { ConfirmationModalComponent } from '../../shared/confirmation-modal/confirmation-modal.component';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RequestService } from '../../core/data/request.service';\nimport { PageInfo } from '../../core/shared/page-info.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-epeople-registry',\n  templateUrl: './epeople-registry.component.html',\n})\n/**\n * A component used for managing all existing epeople within the repository.\n * The admin can create, edit or delete epeople here.\n */\nexport class EPeopleRegistryComponent implements OnInit, OnDestroy {\n\n  labelPrefix = 'admin.access-control.epeople.';\n\n  /**\n   * A list of all the current EPeople within the repository or the result of the search\n   */\n  ePeople$: BehaviorSubject<PaginatedList<EPerson>> = new BehaviorSubject(buildPaginatedList<EPerson>(new PageInfo(), []));\n  /**\n   * A BehaviorSubject with the list of EpersonDtoModel objects made from the EPeople in the repository or\n   * as the result of the search\n   */\n  ePeopleDto$: BehaviorSubject<PaginatedList<EpersonDtoModel>> = new BehaviorSubject<PaginatedList<EpersonDtoModel>>({} as any);\n\n  /**\n   * An observable for the pageInfo, needed to pass to the pagination component\n   */\n  pageInfoState$: BehaviorSubject<PageInfo> = new BehaviorSubject<PageInfo>(undefined);\n\n  /**\n   * A boolean representing if a search is pending\n   */\n  searching$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Pagination config used to display the list of epeople\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'elp',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * Whether or not to show the EPerson form\n   */\n  isEPersonFormShown: boolean;\n\n  // The search form\n  searchForm;\n\n  // Current search in epersons registry\n  currentSearchQuery: string;\n  currentSearchScope: string;\n\n  /**\n   * FindListOptions\n   */\n  findListOptionsSub: Subscription;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  constructor(private epersonService: EPersonDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private authorizationService: AuthorizationDataService,\n              private formBuilder: FormBuilder,\n              private router: Router,\n              private modalService: NgbModal,\n              private paginationService: PaginationService,\n              public requestService: RequestService) {\n    this.currentSearchQuery = '';\n    this.currentSearchScope = 'metadata';\n    this.searchForm = this.formBuilder.group(({\n      scope: 'metadata',\n      query: '',\n    }));\n  }\n\n  ngOnInit() {\n    this.initialisePage();\n  }\n\n  /**\n   * This method will initialise the page\n   */\n  initialisePage() {\n    this.searching$.next(true);\n    this.isEPersonFormShown = false;\n    this.search({scope: this.currentSearchScope, query: this.currentSearchQuery});\n    this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n      if (eperson != null && eperson.id) {\n        this.isEPersonFormShown = true;\n      }\n    }));\n    this.subs.push(this.ePeople$.pipe(\n      switchMap((epeople: PaginatedList<EPerson>) => {\n        if (epeople.pageInfo.totalElements > 0) {\n          return combineLatest(...epeople.page.map((eperson) => {\n            return this.authorizationService.isAuthorized(FeatureID.CanDelete, hasValue(eperson) ? eperson.self : undefined).pipe(\n              map((authorized) => {\n                const epersonDtoModel: EpersonDtoModel = new EpersonDtoModel();\n                epersonDtoModel.ableToDelete = authorized;\n                epersonDtoModel.eperson = eperson;\n                return epersonDtoModel;\n              })\n            );\n          })).pipe(map((dtos: EpersonDtoModel[]) => {\n            return buildPaginatedList(epeople.pageInfo, dtos);\n          }));\n        } else {\n          // if it's empty, simply forward the empty list\n          return [epeople];\n        }\n      })).subscribe((value: PaginatedList<EpersonDtoModel>) => {\n      this.searching$.next(false);this.ePeopleDto$.next(value);\n      this.pageInfoState$.next(value.pageInfo);\n    }));\n  }\n\n  /**\n   * Search in the EPeople by metadata (default) or email\n   * @param data  Contains scope and query param\n   */\n  search(data: any) {\n    this.searching$.next(true);\n    if (hasValue(this.findListOptionsSub)) {\n      this.findListOptionsSub.unsubscribe();\n    }\n    this.findListOptionsSub = this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n      switchMap((findListOptions) => {\n          const query: string = data.query;\n          const scope: string = data.scope;\n          if (query != null && this.currentSearchQuery !== query) {\n            this.router.navigate([this.epersonService.getEPeoplePageRouterLink()], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchQuery = query;\n            this.paginationService.resetPage(this.config.id);\n          }\n          if (scope != null && this.currentSearchScope !== scope) {\n            this.router.navigate([this.epersonService.getEPeoplePageRouterLink()], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchScope = scope;\n            this.paginationService.resetPage(this.config.id);\n\n          }\n          return this.epersonService.searchByScope(this.currentSearchScope, this.currentSearchQuery, {\n            currentPage: findListOptions.currentPage,\n            elementsPerPage: findListOptions.pageSize\n          });\n        }\n      ),\n      getAllSucceededRemoteData(),\n    ).subscribe((peopleRD) => {\n        this.ePeople$.next(peopleRD.payload);\n        this.pageInfoState$.next(peopleRD.payload.pageInfo);\n      }\n    );\n  }\n\n  /**\n   * Checks whether the given EPerson is active (being edited)\n   * @param eperson\n   */\n  isActive(eperson: EPerson): Observable<boolean> {\n    return this.getActiveEPerson().pipe(\n      map((activeEPerson) => eperson === activeEPerson)\n    );\n  }\n\n  /**\n   * Gets the active eperson (being edited)\n   */\n  getActiveEPerson(): Observable<EPerson> {\n    return this.epersonService.getActiveEPerson();\n  }\n\n  /**\n   * Start editing the selected EPerson\n   * @param ePerson\n   */\n  toggleEditEPerson(ePerson: EPerson) {\n    this.getActiveEPerson().pipe(take(1)).subscribe((activeEPerson: EPerson) => {\n      if (ePerson === activeEPerson) {\n        this.epersonService.cancelEditEPerson();\n        this.isEPersonFormShown = false;\n      } else {\n        this.epersonService.editEPerson(ePerson);\n        this.isEPersonFormShown = true;\n      }\n    });\n    this.scrollToTop();\n  }\n\n  /**\n   * Deletes EPerson, show notification on success/failure & updates EPeople list\n   */\n  deleteEPerson(ePerson: EPerson) {\n    if (hasValue(ePerson.id)) {\n      const modalRef = this.modalService.open(ConfirmationModalComponent);\n      modalRef.componentInstance.dso = ePerson;\n      modalRef.componentInstance.headerLabel = 'confirmation-modal.delete-eperson.header';\n      modalRef.componentInstance.infoLabel = 'confirmation-modal.delete-eperson.info';\n      modalRef.componentInstance.cancelLabel = 'confirmation-modal.delete-eperson.cancel';\n      modalRef.componentInstance.confirmLabel = 'confirmation-modal.delete-eperson.confirm';\n      modalRef.componentInstance.brandColor = 'danger';\n      modalRef.componentInstance.confirmIcon = 'fas fa-trash';\n      modalRef.componentInstance.response.pipe(take(1)).subscribe((confirm: boolean) => {\n        if (confirm) {\n          if (hasValue(ePerson.id)) {\n            this.epersonService.deleteEPerson(ePerson).pipe(getFirstCompletedRemoteData()).subscribe((restResponse: RemoteData<NoContent>) => {\n              if (restResponse.hasSucceeded) {\n                this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.deleted.success', {name: ePerson.name}));\n                this.reset();\n              } else {\n                this.notificationsService.error('Error occured when trying to delete EPerson with id: ' + ePerson.id + ' with code: ' + restResponse.statusCode + ' and message: ' + restResponse.errorMessage);\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.cleanupSubscribes();\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n\n  cleanupSubscribes() {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n  scrollToTop() {\n    (function smoothscroll() {\n      const currentScroll = document.documentElement.scrollTop || document.body.scrollTop;\n      if (currentScroll > 0) {\n        window.requestAnimationFrame(smoothscroll);\n        window.scrollTo(0, currentScroll - (currentScroll / 8));\n      }\n    })();\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({query: ''});\n  }\n\n  /**\n   * This method will set everything to stale, which will cause the lists on this page to update.\n   */\n  reset() {\n    this.epersonService.getBrowseEndpoint().pipe(\n      take(1)\n    ).subscribe((href: string) => {\n      this.requestService.setStaleByHrefSubstring(href).pipe(take(1)).subscribe(() => {\n        this.epersonService.cancelEditEPerson();\n        this.isEPersonFormShown = false;\n      });\n    });\n  }\n}\n","<ng-container>\n  <h3 class=\"border-bottom pb-2\">{{messagePrefix + '.head' | translate}}</h3>\n\n  <h4 id=\"search\" class=\"border-bottom pb-2\">{{messagePrefix + '.search.head' | translate}}\n\n  </h4>\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n    <div>\n      <select name=\"scope\" id=\"scope\" formControlName=\"scope\" class=\"form-control\" aria-label=\"Search scope\">\n        <option value=\"metadata\">{{messagePrefix + '.search.scope.metadata' | translate}}</option>\n        <option value=\"email\">{{messagePrefix + '.search.scope.email' | translate}}</option>\n      </select>\n    </div>\n    <div class=\"flex-grow-1 mr-3 ml-3\">\n      <div class=\"form-group input-group\">\n        <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n               class=\"form-control\" aria-label=\"Search input\">\n        <span class=\"input-group-append\">\n            <button type=\"submit\" class=\"search-button btn btn-primary\">\n              <i class=\"fas fa-search\"></i> {{ messagePrefix + '.search.button' | translate }}</button>\n        </span>\n      </div>\n    </div>\n    <div>\n      <button (click)=\"clearFormAndResetResult();\"\n              class=\"btn btn-secondary\">{{messagePrefix + '.button.see-all' | translate}}</button>\n    </div>\n  </form>\n\n  <ds-pagination *ngIf=\"(ePeopleSearchDtos | async)?.totalElements > 0\"\n                 [paginationOptions]=\"configSearch\"\n                 [pageInfoState]=\"(ePeopleSearchDtos | async)\"\n                 [collectionSize]=\"(ePeopleSearchDtos | async)?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"epersonsSearch\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th>{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let ePerson of (ePeopleSearchDtos | async)?.page\">\n          <td>{{ePerson.eperson.id}}</td>\n          <td><a (click)=\"ePersonDataService.startEditingNewEPerson(ePerson.eperson)\"\n                 [routerLink]=\"[ePersonDataService.getEPeoplePageRouterLink()]\">{{ePerson.eperson.name}}</a></td>\n          <td>\n            <div class=\"btn-group edit-field\">\n              <button *ngIf=\"(ePerson.memberOfGroup)\"\n                      (click)=\"deleteMemberFromGroup(ePerson)\"\n                      class=\"btn btn-outline-danger btn-sm\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: ePerson.eperson.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n\n              <button *ngIf=\"!(ePerson.memberOfGroup)\"\n                      (click)=\"addMemberToGroup(ePerson)\"\n                      class=\"btn btn-outline-primary btn-sm\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.add' | translate: {name: ePerson.eperson.name} }}\">\n                <i class=\"fas fa-plus fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n\n  <div *ngIf=\"(ePeopleSearchDtos | async)?.totalElements == 0 && searchDone\"\n       class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-items' | translate}}\n  </div>\n\n  <h4>{{messagePrefix + '.headMembers' | translate}}</h4>\n\n  <ds-pagination *ngIf=\"(ePeopleMembersOfGroupDtos | async)?.totalElements > 0\"\n                 [paginationOptions]=\"config\"\n                 [pageInfoState]=\"(ePeopleMembersOfGroupDtos | async)\"\n                 [collectionSize]=\"(ePeopleMembersOfGroupDtos | async)?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"ePeopleMembersOfGroup\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th>{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let ePerson of (ePeopleMembersOfGroupDtos | async)?.page\">\n          <td>{{ePerson.eperson.id}}</td>\n          <td><a (click)=\"ePersonDataService.startEditingNewEPerson(ePerson.eperson)\"\n                 [routerLink]=\"[ePersonDataService.getEPeoplePageRouterLink()]\">{{ePerson.eperson.name}}</a></td>\n          <td>\n            <div class=\"btn-group edit-field\">\n              <button (click)=\"deleteMemberFromGroup(ePerson)\"\n                      class=\"btn btn-outline-danger btn-sm\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: ePerson.eperson.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n\n  <div *ngIf=\"(ePeopleMembersOfGroupDtos | async) == undefined || (ePeopleMembersOfGroupDtos | async)?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-members-yet' | translate}}\n  </div>\n\n</ng-container>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Observable,\n  of as observableOf,\n  Subscription,\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  ObservedValueOf,\n} from 'rxjs';\nimport { map, mergeMap, switchMap, take } from 'rxjs/operators';\nimport {buildPaginatedList, PaginatedList} from '../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { EPersonDataService } from '../../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { EPerson } from '../../../../core/eperson/models/eperson.model';\nimport { Group } from '../../../../core/eperson/models/group.model';\nimport {\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData, getAllCompletedRemoteData, getRemoteDataPayload\n} from '../../../../core/shared/operators';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../../../shared/pagination/pagination-component-options.model';\nimport {EpersonDtoModel} from '../../../../core/eperson/models/eperson-dto.model';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\n\n/**\n * Keys to keep track of specific subscriptions\n */\nenum SubKey {\n  ActiveGroup,\n  MembersDTO,\n  SearchResultsDTO,\n}\n\n@Component({\n  selector: 'ds-members-list',\n  templateUrl: './members-list.component.html'\n})\n/**\n * The list of members in the edit group page\n */\nexport class MembersListComponent implements OnInit, OnDestroy {\n\n  @Input()\n  messagePrefix: string;\n\n  /**\n   * EPeople being displayed in search result, initially all members, after search result of search\n   */\n  ePeopleSearchDtos: BehaviorSubject<PaginatedList<EpersonDtoModel>> = new BehaviorSubject<PaginatedList<EpersonDtoModel>>(undefined);\n  /**\n   * List of EPeople members of currently active group being edited\n   */\n  ePeopleMembersOfGroupDtos: BehaviorSubject<PaginatedList<EpersonDtoModel>> = new BehaviorSubject<PaginatedList<EpersonDtoModel>>(undefined);\n\n  /**\n   * Pagination config used to display the list of EPeople that are result of EPeople search\n   */\n  configSearch: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'sml',\n    pageSize: 5,\n    currentPage: 1\n  });\n  /**\n   * Pagination config used to display the list of EPerson Membes of active group being edited\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'ml',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * Map of active subscriptions\n   */\n  subs: Map<SubKey, Subscription> = new Map();\n\n  // The search form\n  searchForm;\n\n  // Current search in edit group - epeople search form\n  currentSearchQuery: string;\n  currentSearchScope: string;\n\n  // Whether or not user has done a EPeople search yet\n  searchDone: boolean;\n\n  // current active group being edited\n  groupBeingEdited: Group;\n\n  paginationSub: Subscription;\n\n\n  constructor(private groupDataService: GroupDataService,\n              public ePersonDataService: EPersonDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private formBuilder: FormBuilder,\n              private paginationService: PaginationService,\n              private router: Router) {\n    this.currentSearchQuery = '';\n    this.currentSearchScope = 'metadata';\n  }\n\n  ngOnInit() {\n    this.searchForm = this.formBuilder.group(({\n      scope: 'metadata',\n      query: '',\n    }));\n    this.subs.set(SubKey.ActiveGroup, this.groupDataService.getActiveGroup().subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        this.groupBeingEdited = activeGroup;\n        this.retrieveMembers(this.config.currentPage);\n      }\n    }));\n  }\n\n  /**\n   * Retrieve the EPersons that are members of the group\n   *\n   * @param page the number of the page to retrieve\n   * @private\n   */\n  private retrieveMembers(page: number) {\n    this.unsubFrom(SubKey.MembersDTO);\n    this.subs.set(SubKey.MembersDTO,\n      this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n        switchMap((currentPagination) => {\n          return this.ePersonDataService.findAllByHref(this.groupBeingEdited._links.epersons.href, {\n              currentPage: currentPagination.currentPage,\n              elementsPerPage: currentPagination.pageSize\n            }\n          );\n        }),\n      getAllCompletedRemoteData(),\n      map((rd: RemoteData<any>) => {\n        if (rd.hasFailed) {\n          this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure', {cause: rd.errorMessage}));\n        } else {\n          return rd;\n        }\n      }),\n      switchMap((epersonListRD: RemoteData<PaginatedList<EPerson>>) => {\n        const dtos$ = observableCombineLatest(...epersonListRD.payload.page.map((member: EPerson) => {\n          const dto$: Observable<EpersonDtoModel> = observableCombineLatest(\n            this.isMemberOfGroup(member), (isMember: ObservedValueOf<Observable<boolean>>) => {\n              const epersonDtoModel: EpersonDtoModel = new EpersonDtoModel();\n              epersonDtoModel.eperson = member;\n              epersonDtoModel.memberOfGroup = isMember;\n              return epersonDtoModel;\n            });\n          return dto$;\n        }));\n        return dtos$.pipe(map((dtos: EpersonDtoModel[]) => {\n          return buildPaginatedList(epersonListRD.payload.pageInfo, dtos);\n        }));\n      }))\n      .subscribe((paginatedListOfDTOs: PaginatedList<EpersonDtoModel>) => {\n        this.ePeopleMembersOfGroupDtos.next(paginatedListOfDTOs);\n      }));\n  }\n\n  /**\n   * Whether or not the given ePerson is a member of the group currently being edited\n   * @param possibleMember  EPerson that is a possible member (being tested) of the group currently being edited\n   */\n  isMemberOfGroup(possibleMember: EPerson): Observable<boolean> {\n    return this.groupDataService.getActiveGroup().pipe(take(1),\n      mergeMap((group: Group) => {\n        if (group != null) {\n          return this.ePersonDataService.findAllByHref(group._links.epersons.href, {\n            currentPage: 1,\n            elementsPerPage: 9999\n          }, false)\n            .pipe(\n              getFirstSucceededRemoteData(),\n              getRemoteDataPayload(),\n              map((listEPeopleInGroup: PaginatedList<EPerson>) => listEPeopleInGroup.page.filter((ePersonInList: EPerson) => ePersonInList.id === possibleMember.id)),\n              map((epeople: EPerson[]) => epeople.length > 0));\n        } else {\n          return observableOf(false);\n        }\n      }));\n  }\n\n  /**\n   * Unsubscribe from a subscription if it's still subscribed, and remove it from the map of\n   * active subscriptions\n   *\n   * @param key The key of the subscription to unsubscribe from\n   * @private\n   */\n  private unsubFrom(key: SubKey) {\n    if (this.subs.has(key)) {\n      this.subs.get(key).unsubscribe();\n      this.subs.delete(key);\n    }\n  }\n\n  /**\n   * Deletes a given EPerson from the members list of the group currently being edited\n   * @param ePerson   EPerson we want to delete as member from group that is currently being edited\n   */\n  deleteMemberFromGroup(ePerson: EpersonDtoModel) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        const response = this.groupDataService.deleteMemberFromGroup(activeGroup, ePerson.eperson);\n        this.showNotifications('deleteMember', response, ePerson.eperson.name, activeGroup);\n        this.search({ scope: this.currentSearchScope, query: this.currentSearchQuery });\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Adds a given EPerson to the members list of the group currently being edited\n   * @param ePerson   EPerson we want to add as member to group that is currently being edited\n   */\n  addMemberToGroup(ePerson: EpersonDtoModel) {\n    ePerson.memberOfGroup = true;\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        const response = this.groupDataService.addMemberToGroup(activeGroup, ePerson.eperson);\n        this.showNotifications('addMember', response, ePerson.eperson.name, activeGroup);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Search in the EPeople by name, email or metadata\n   * @param data  Contains scope and query param\n   */\n  search(data: any) {\n    this.unsubFrom(SubKey.SearchResultsDTO);\n    this.subs.set(SubKey.SearchResultsDTO,\n      this.paginationService.getCurrentPagination(this.configSearch.id, this.configSearch).pipe(\n        switchMap((paginationOptions) => {\n\n          const query: string = data.query;\n          const scope: string = data.scope;\n          if (query != null && this.currentSearchQuery !== query && this.groupBeingEdited) {\n            this.router.navigate([], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchQuery = query;\n            this.paginationService.resetPage(this.configSearch.id);\n          }\n          if (scope != null && this.currentSearchScope !== scope && this.groupBeingEdited) {\n            this.router.navigate([], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchScope = scope;\n            this.paginationService.resetPage(this.configSearch.id);\n          }\n          this.searchDone = true;\n\n          return this.ePersonDataService.searchByScope(this.currentSearchScope, this.currentSearchQuery, {\n            currentPage: paginationOptions.currentPage,\n            elementsPerPage: paginationOptions.pageSize\n          });\n        }),\n        getAllCompletedRemoteData(),\n        map((rd: RemoteData<any>) => {\n          if (rd.hasFailed) {\n            this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure', {cause: rd.errorMessage}));\n          } else {\n            return rd;\n          }\n        }),\n        switchMap((epersonListRD: RemoteData<PaginatedList<EPerson>>) => {\n          const dtos$ = observableCombineLatest(...epersonListRD.payload.page.map((member: EPerson) => {\n            const dto$: Observable<EpersonDtoModel> = observableCombineLatest(\n              this.isMemberOfGroup(member), (isMember: ObservedValueOf<Observable<boolean>>) => {\n                const epersonDtoModel: EpersonDtoModel = new EpersonDtoModel();\n                epersonDtoModel.eperson = member;\n                epersonDtoModel.memberOfGroup = isMember;\n                return epersonDtoModel;\n              });\n            return dto$;\n          }));\n          return dtos$.pipe(map((dtos: EpersonDtoModel[]) => {\n            return buildPaginatedList(epersonListRD.payload.pageInfo, dtos);\n          }));\n        }))\n        .subscribe((paginatedListOfDTOs: PaginatedList<EpersonDtoModel>) => {\n          this.ePeopleSearchDtos.next(paginatedListOfDTOs);\n        }));\n  }\n\n  /**\n   * unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    for (const key of this.subs.keys()) {\n      this.unsubFrom(key);\n    }\n    this.paginationService.clearPagination(this.config.id);\n    this.paginationService.clearPagination(this.configSearch.id);\n  }\n\n  /**\n   * Shows a notification based on the success/failure of the request\n   * @param messageSuffix   Suffix for message\n   * @param response        RestResponse observable containing success/failure request\n   * @param nameObject      Object request was about\n   * @param activeGroup     Group currently being edited\n   */\n  showNotifications(messageSuffix: string, response: Observable<RemoteData<any>>, nameObject: string, activeGroup: Group) {\n    response.pipe(getFirstCompletedRemoteData()).subscribe((rd: RemoteData<any>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.success.' + messageSuffix, { name: nameObject }));\n        this.ePersonDataService.clearLinkRequests(activeGroup._links.epersons.href);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.' + messageSuffix, { name: nameObject }));\n      }\n    });\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({ query: '' });\n  }\n}\n","<ng-container>\n  <h3 class=\"border-bottom pb-2\">{{messagePrefix + '.head' | translate}}</h3>\n\n  <h4 id=\"search\" class=\"border-bottom pb-2\">{{messagePrefix + '.search.head' | translate}}\n\n  </h4>\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n    <div class=\"flex-grow-1 mr-3\">\n      <div class=\"form-group input-group mr-3\">\n        <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n               class=\"form-control\" aria-label=\"Search input\">\n        <span class=\"input-group-append\">\n            <button type=\"submit\" class=\"search-button btn btn-primary\">\n              <i class=\"fas fa-search\"></i> {{ messagePrefix + '.search.button' | translate }}\n            </button>\n        </span>\n\n      </div>\n    </div>\n    <div>\n      <button (click)=\"clearFormAndResetResult();\" class=\"btn btn-secondary float-right\">\n        {{messagePrefix + '.button.see-all' | translate}}\n      </button>\n    </div>\n  </form>\n\n  <ds-pagination *ngIf=\"(searchResults$ | async)?.payload?.totalElements > 0\"\n                 [paginationOptions]=\"configSearch\"\n                 [pageInfoState]=\"(searchResults$ | async)?.payload\"\n                 [collectionSize]=\"(searchResults$ | async)?.payload?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"groupsSearch\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th>{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let group of (searchResults$ | async)?.payload?.page\">\n          <td>{{group.id}}</td>\n          <td><a (click)=\"groupDataService.startEditingNewGroup(group)\"\n                 [routerLink]=\"[groupDataService.getGroupEditPageRouterLink(group)]\">{{group.name}}</a></td>\n          <td>\n            <div class=\"btn-group edit-field\">\n              <button *ngIf=\"(isSubgroupOfGroup(group) | async) && !(isActiveGroup(group) | async)\"\n                      (click)=\"deleteSubgroupFromGroup(group)\"\n                      class=\"btn btn-outline-danger btn-sm deleteButton\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: group.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n\n              <p *ngIf=\"(isActiveGroup(group) | async)\">{{ messagePrefix + '.table.edit.currentGroup' | translate }}</p>\n\n              <button *ngIf=\"!(isSubgroupOfGroup(group) | async) && !(isActiveGroup(group) | async)\"\n                      (click)=\"addSubgroupToGroup(group)\"\n                      class=\"btn btn-outline-primary btn-sm addButton\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.add' | translate: {name: group.name} }}\">\n                <i class=\"fas fa-plus fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </ds-pagination>\n\n  <div *ngIf=\"(searchResults$ | async)?.payload?.totalElements == 0 && searchDone\" class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-items' | translate}}\n  </div>\n\n  <h4>{{messagePrefix + '.headSubgroups' | translate}}</h4>\n\n  <ds-pagination *ngIf=\"(subGroups$ | async)?.payload?.totalElements > 0\"\n                 [paginationOptions]=\"config\"\n                 [pageInfoState]=\"(subGroups$ | async)?.payload\"\n                 [collectionSize]=\"(subGroups$ | async)?.payload?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"subgroupsOfGroup\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th>{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let group of (subGroups$ | async)?.payload?.page\">\n          <td>{{group.id}}</td>\n          <td><a (click)=\"groupDataService.startEditingNewGroup(group)\"\n                 [routerLink]=\"[groupDataService.getGroupEditPageRouterLink(group)]\">{{group.name}}</a></td>\n          <td>\n            <div class=\"btn-group edit-field\">\n              <button (click)=\"deleteSubgroupFromGroup(group)\"\n                      class=\"btn btn-outline-danger btn-sm deleteButton\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: group.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </ds-pagination>\n\n  <div *ngIf=\"(subGroups$ | async)?.payload?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-subgroups-yet' | translate}}\n  </div>\n\n</ng-container>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { map, mergeMap, switchMap, take } from 'rxjs/operators';\nimport { PaginatedList } from '../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { Group } from '../../../../core/eperson/models/group.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../../../core/shared/operators';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../../../shared/pagination/pagination-component-options.model';\nimport { NoContent } from '../../../../core/shared/NoContent.model';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\n\n/**\n * Keys to keep track of specific subscriptions\n */\nenum SubKey {\n  Members,\n  ActiveGroup,\n  SearchResults,\n}\n\n@Component({\n  selector: 'ds-subgroups-list',\n  templateUrl: './subgroups-list.component.html'\n})\n/**\n * The list of subgroups in the edit group page\n */\nexport class SubgroupsListComponent implements OnInit, OnDestroy {\n\n  @Input()\n  messagePrefix: string;\n\n  /**\n   * Result of search groups, initially all groups\n   */\n  searchResults$: BehaviorSubject<RemoteData<PaginatedList<Group>>> = new BehaviorSubject(undefined);\n  /**\n   * List of all subgroups of group being edited\n   */\n  subGroups$: BehaviorSubject<RemoteData<PaginatedList<Group>>> = new BehaviorSubject(undefined);\n\n  /**\n   * Map of active subscriptions\n   */\n  subs: Map<SubKey, Subscription> = new Map();\n\n  /**\n   * Pagination config used to display the list of groups that are result of groups search\n   */\n  configSearch: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'ssgl',\n    pageSize: 5,\n    currentPage: 1\n  });\n  /**\n   * Pagination config used to display the list of subgroups of currently active group being edited\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'sgl',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  // The search form\n  searchForm;\n\n  // Current search in edit group - groups search form\n  currentSearchQuery: string;\n\n  // Whether or not user has done a Groups search yet\n  searchDone: boolean;\n\n  // current active group being edited\n  groupBeingEdited: Group;\n\n  constructor(public groupDataService: GroupDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private formBuilder: FormBuilder,\n              private paginationService: PaginationService,\n              private router: Router) {\n    this.currentSearchQuery = '';\n  }\n\n  ngOnInit() {\n    this.searchForm = this.formBuilder.group(({\n      query: '',\n    }));\n    this.subs.set(SubKey.ActiveGroup, this.groupDataService.getActiveGroup().subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        this.groupBeingEdited = activeGroup;\n        this.retrieveSubGroups();\n      }\n    }));\n  }\n\n  /**\n   * Retrieve the Subgroups that are members of the group\n   *\n   * @param page the number of the page to retrieve\n   * @private\n   */\n  private retrieveSubGroups() {\n    this.unsubFrom(SubKey.Members);\n    this.subs.set(\n      SubKey.Members,\n      this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n        switchMap((config) => this.groupDataService.findAllByHref(this.groupBeingEdited._links.subgroups.href, {\n            currentPage: config.currentPage,\n            elementsPerPage: config.pageSize\n          }\n        ))\n      ).subscribe((rd: RemoteData<PaginatedList<Group>>) => {\n        this.subGroups$.next(rd);\n      }));\n  }\n\n  /**\n   * Whether or not the given group is a subgroup of the group currently being edited\n   * @param possibleSubgroup Group that is a possible subgroup (being tested) of the group currently being edited\n   */\n  isSubgroupOfGroup(possibleSubgroup: Group): Observable<boolean> {\n    return this.groupDataService.getActiveGroup().pipe(take(1),\n      mergeMap((activeGroup: Group) => {\n        if (activeGroup != null) {\n          if (activeGroup.uuid === possibleSubgroup.uuid) {\n            return observableOf(false);\n          } else {\n            return this.groupDataService.findAllByHref(activeGroup._links.subgroups.href, {\n              currentPage: 1,\n              elementsPerPage: 9999\n            })\n              .pipe(\n                getFirstSucceededRemoteData(),\n                getRemoteDataPayload(),\n                map((listTotalGroups: PaginatedList<Group>) => listTotalGroups.page.filter((groupInList: Group) => groupInList.id === possibleSubgroup.id)),\n                map((groups: Group[]) => groups.length > 0));\n          }\n        } else {\n          return observableOf(false);\n        }\n      }));\n  }\n\n  /**\n   * Whether or not the given group is the current group being edited\n   * @param group Group that is possibly the current group being edited\n   */\n  isActiveGroup(group: Group): Observable<boolean> {\n    return this.groupDataService.getActiveGroup().pipe(take(1),\n      mergeMap((activeGroup: Group) => {\n        if (activeGroup != null && activeGroup.uuid === group.uuid) {\n          return observableOf(true);\n        }\n        return observableOf(false);\n      }));\n  }\n\n  /**\n   * Deletes given subgroup from the group currently being edited\n   * @param subgroup  Group we want to delete from the subgroups of the group currently being edited\n   */\n  deleteSubgroupFromGroup(subgroup: Group) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        const response = this.groupDataService.deleteSubGroupFromGroup(activeGroup, subgroup);\n        this.showNotifications('deleteSubgroup', response, subgroup.name, activeGroup);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Adds given subgroup to the group currently being edited\n   * @param subgroup  Subgroup to add to group currently being edited\n   */\n  addSubgroupToGroup(subgroup: Group) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        if (activeGroup.uuid !== subgroup.uuid) {\n          const response = this.groupDataService.addSubGroupToGroup(activeGroup, subgroup);\n          this.showNotifications('addSubgroup', response, subgroup.name, activeGroup);\n        } else {\n          this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.subgroupToAddIsActiveGroup'));\n        }\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Search in the groups (searches by group name and by uuid exact match)\n   * @param data  Contains query param\n   */\n  search(data: any) {\n    const query: string = data.query;\n    if (query != null && this.currentSearchQuery !== query) {\n      this.router.navigateByUrl(this.groupDataService.getGroupEditPageRouterLink(this.groupBeingEdited));\n      this.currentSearchQuery = query;\n      this.configSearch.currentPage = 1;\n    }\n    this.searchDone = true;\n\n    this.unsubFrom(SubKey.SearchResults);\n    this.subs.set(SubKey.SearchResults, this.paginationService.getCurrentPagination(this.configSearch.id, this.configSearch).pipe(\n      switchMap((config) => this.groupDataService.searchGroups(this.currentSearchQuery, {\n        currentPage: config.currentPage,\n        elementsPerPage: config.pageSize\n      }))\n    ).subscribe((rd: RemoteData<PaginatedList<Group>>) => {\n      this.searchResults$.next(rd);\n    }));\n  }\n\n  /**\n   * Unsubscribe from a subscription if it's still subscribed, and remove it from the map of\n   * active subscriptions\n   *\n   * @param key The key of the subscription to unsubscribe from\n   * @private\n   */\n  private unsubFrom(key: SubKey) {\n    if (this.subs.has(key)) {\n      this.subs.get(key).unsubscribe();\n      this.subs.delete(key);\n    }\n  }\n\n  /**\n   * unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    for (const key of this.subs.keys()) {\n      this.unsubFrom(key);\n    }\n    this.paginationService.clearPagination(this.config.id);\n    this.paginationService.clearPagination(this.configSearch.id);\n  }\n\n  /**\n   * Shows a notification based on the success/failure of the request\n   * @param messageSuffix   Suffix for message\n   * @param response        RestResponse observable containing success/failure request\n   * @param nameObject      Object request was about\n   * @param activeGroup     Group currently being edited\n   */\n  showNotifications(messageSuffix: string, response: Observable<RemoteData<Group|NoContent>>, nameObject: string, activeGroup: Group) {\n    response.pipe(getFirstCompletedRemoteData()).subscribe((rd: RemoteData<Group>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.success.' + messageSuffix, { name: nameObject }));\n        this.groupDataService.clearGroupLinkRequests(activeGroup._links.subgroups.href);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.' + messageSuffix, { name: nameObject }));\n      }\n    });\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({ query: '' });\n  }\n}\n","<div class=\"container\">\n  <div class=\"group-form row\">\n    <div class=\"col-12\">\n\n      <div *ngIf=\"groupDataService.getActiveGroup() | async; then editheader; else createHeader\"></div>\n\n      <ng-template #createHeader>\n        <h2 class=\"border-bottom pb-2\">{{messagePrefix + '.head.create' | translate}}</h2>\n      </ng-template>\n\n      <ng-template #editheader>\n        <h2 class=\"border-bottom pb-2\">{{messagePrefix + '.head.edit' | translate}}</h2>\n      </ng-template>\n\n      <ds-alert *ngIf=\"groupBeingEdited?.permanent\" [type]=\"AlertTypeEnum.Warning\"\n                [content]=\"messagePrefix + '.alert.permanent'\"></ds-alert>\n      <ds-alert *ngIf=\"!(canEdit$ | async) && (groupDataService.getActiveGroup() | async)\" [type]=\"AlertTypeEnum.Warning\"\n                [content]=\"(messagePrefix + '.alert.workflowGroup' | translate:{ name: (getLinkedDSO(groupBeingEdited) | async)?.payload?.name, comcol: (getLinkedDSO(groupBeingEdited) | async)?.payload?.type, comcolEditRolesRoute: (getLinkedEditRolesRoute(groupBeingEdited) | async) })\">\n      </ds-alert>\n\n      <ds-form [formId]=\"formId\"\n               [formModel]=\"formModel\"\n               [formGroup]=\"formGroup\"\n               [formLayout]=\"formLayout\"\n               [displayCancel]=\"false\"\n               (submitForm)=\"onSubmit()\">\n        <div before class=\"btn-group\">\n          <button (click)=\"onCancel()\"\n                  class=\"btn btn-outline-secondary\"><i class=\"fas fa-arrow-left\"></i> {{messagePrefix + '.return' | translate}}</button>\n        </div>\n        <div after *ngIf=\"groupBeingEdited != null\" class=\"btn-group\">\n          <button class=\"btn btn-danger delete-button\" [disabled]=\"!(canEdit$ | async) || groupBeingEdited.permanent\"\n                  (click)=\"delete()\">\n            <i class=\"fa fa-trash\"></i> {{ messagePrefix + '.actions.delete' | translate}}\n          </button>\n        </div>\n      </ds-form>\n\n      <div class=\"mb-5\">\n        <ds-members-list *ngIf=\"groupBeingEdited != null\"\n                         [messagePrefix]=\"messagePrefix + '.members-list'\"></ds-members-list>\n      </div>\n      <ds-subgroups-list *ngIf=\"groupBeingEdited != null\"\n                         [messagePrefix]=\"messagePrefix + '.subgroups-list'\"></ds-subgroups-list>\n\n\n\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, HostListener, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicInputModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  ObservedValueOf,\n  combineLatest as observableCombineLatest,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport { catchError, map, switchMap, take } from 'rxjs/operators';\nimport { getCollectionEditRolesRoute } from '../../../+collection-page/collection-page-routing-paths';\nimport { getCommunityEditRolesRoute } from '../../../+community-page/community-page-routing-paths';\nimport { DSpaceObjectDataService } from '../../../core/data/dspace-object-data.service';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { RequestService } from '../../../core/data/request.service';\nimport { EPersonDataService } from '../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { Group } from '../../../core/eperson/models/group.model';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { Community } from '../../../core/shared/community.model';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport {\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData\n} from '../../../core/shared/operators';\nimport { AlertType } from '../../../shared/alert/aletr-type';\nimport { ConfirmationModalComponent } from '../../../shared/confirmation-modal/confirmation-modal.component';\nimport { hasValue, isNotEmpty, hasValueOperator } from '../../../shared/empty.util';\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { Operation } from 'fast-json-patch';\n\n@Component({\n  selector: 'ds-group-form',\n  templateUrl: './group-form.component.html'\n})\n/**\n * A form used for creating and editing groups\n */\nexport class GroupFormComponent implements OnInit, OnDestroy {\n\n  messagePrefix = 'admin.access-control.groups.form';\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'group-form';\n\n  /**\n   * Dynamic models for the inputs of form\n   */\n  groupName: DynamicInputModel;\n  groupDescription: DynamicTextAreaModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    groupName: {\n      grid: {\n        host: 'row'\n      }\n    },\n    groupDescription: {\n      grid: {\n        host: 'row'\n      }\n    },\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: FormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * An EventEmitter that's fired whenever the form is cancelled\n   */\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * Group currently being edited\n   */\n  groupBeingEdited: Group;\n\n  /**\n   * Observable whether or not the logged in user is allowed to delete the Group & doesn't have a linked object (community / collection linked to workspace group\n   */\n  canEdit$: Observable<boolean>;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  constructor(public groupDataService: GroupDataService,\n              private ePersonDataService: EPersonDataService,\n              private dSpaceObjectDataService: DSpaceObjectDataService,\n              private formBuilderService: FormBuilderService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private route: ActivatedRoute,\n              protected router: Router,\n              private authorizationService: AuthorizationDataService,\n              private modalService: NgbModal,\n              public requestService: RequestService) {\n  }\n\n  ngOnInit() {\n    this.initialisePage();\n  }\n\n  initialisePage() {\n    this.subs.push(this.route.params.subscribe((params) => {\n      if (params.groupId !== 'newGroup') {\n        this.setActiveGroup(params.groupId);\n      }\n    }));\n    this.canEdit$ = this.groupDataService.getActiveGroup().pipe(\n      hasValueOperator(),\n      switchMap((group: Group) => {\n        return observableCombineLatest(\n          this.authorizationService.isAuthorized(FeatureID.CanDelete, isNotEmpty(group) ? group.self : undefined),\n          this.hasLinkedDSO(group),\n          (isAuthorized: ObservedValueOf<Observable<boolean>>, hasLinkedDSO: ObservedValueOf<Observable<boolean>>) => {\n            return isAuthorized && !hasLinkedDSO;\n          });\n      })\n    );\n    observableCombineLatest(\n      this.translateService.get(`${this.messagePrefix}.groupName`),\n      this.translateService.get(`${this.messagePrefix}.groupDescription`)\n    ).subscribe(([groupName, groupDescription]) => {\n      this.groupName = new DynamicInputModel({\n        id: 'groupName',\n        label: groupName,\n        name: 'groupName',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.groupDescription = new DynamicTextAreaModel({\n        id: 'groupDescription',\n        label: groupDescription,\n        name: 'groupDescription',\n        required: false,\n      });\n      this.formModel = [\n        this.groupName,\n        this.groupDescription,\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n      this.subs.push(\n        observableCombineLatest(\n          this.groupDataService.getActiveGroup(),\n          this.canEdit$\n        ).subscribe(([activeGroup, canEdit]) => {\n          if (activeGroup != null) {\n            this.groupBeingEdited = activeGroup;\n            this.formGroup.patchValue({\n              groupName: activeGroup != null ? activeGroup.name : '',\n              groupDescription: activeGroup != null ? activeGroup.firstMetadataValue('dc.description') : '',\n            });\n            if (!canEdit || activeGroup.permanent) {\n              this.formGroup.disable();\n            }\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Stop editing the currently selected group\n   */\n  onCancel() {\n    this.groupDataService.cancelEditGroup();\n    this.cancelForm.emit();\n    this.router.navigate([this.groupDataService.getGroupRegistryRouterLink()]);\n  }\n\n  /**\n   * Submit the form\n   * When the eperson has an id attached -> Edit the eperson\n   * When the eperson has no id attached -> Create new eperson\n   * Emit the updated/created eperson using the EventEmitter submitForm\n   */\n  onSubmit() {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe(\n      (group: Group) => {\n        const values = {\n          name: this.groupName.value,\n          metadata: {\n            'dc.description': [\n              {\n                value: this.groupDescription.value\n              }\n            ]\n          },\n        };\n        if (group === null) {\n          this.createNewGroup(values);\n        } else {\n          this.editGroup(group);\n        }\n      }\n    );\n  }\n\n  /**\n   * Creates new Group based on given values from form\n   * @param values\n   */\n  createNewGroup(values) {\n    const groupToCreate = Object.assign(new Group(), values);\n    this.groupDataService.create(groupToCreate).pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<Group>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.created.success', { name: groupToCreate.name }));\n        this.submitForm.emit(groupToCreate);\n        if (isNotEmpty(rd.payload)) {\n          const groupSelfLink = rd.payload._links.self.href;\n          this.setActiveGroupWithLink(groupSelfLink);\n          this.groupDataService.clearGroupsRequests();\n          this.router.navigateByUrl(this.groupDataService.getGroupEditPageRouterLinkWithID(rd.payload.uuid));\n        }\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.created.failure', { name: groupToCreate.name }));\n        this.showNotificationIfNameInUse(groupToCreate, 'created');\n        this.cancelForm.emit();\n      }\n    });\n  }\n\n  /**\n   * Checks for the given group if there is already a group in the system with that group name and shows error if that\n   * is the case\n   * @param group                 group to check\n   * @param notificationSection   whether in create or edit\n   */\n  private showNotificationIfNameInUse(group: Group, notificationSection: string) {\n    // Relevant message for group name in use\n    this.subs.push(this.groupDataService.searchGroups(group.name, {\n      currentPage: 1,\n      elementsPerPage: 0\n    }).pipe(getFirstSucceededRemoteData(), getRemoteDataPayload())\n      .subscribe((list: PaginatedList<Group>) => {\n        if (list.totalElements > 0) {\n          this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.' + notificationSection + '.failure.groupNameInUse', {\n            name: group.name\n          }));\n        }\n      }));\n  }\n\n  /**\n   * Edit existing Group based on given values from form and old Group\n   * @param group   Group to edit and old values contained within\n   */\n  editGroup(group: Group) {\n    let operations: Operation[] = [];\n\n    if (hasValue(this.groupDescription.value)) {\n      operations = [...operations, {\n        op: 'replace',\n        path: '/metadata/dc.description/0/value',\n        value: this.groupDescription.value\n      }];\n    }\n\n    if (hasValue(this.groupName.value)) {\n      operations = [...operations, {\n        op: 'replace',\n        path: '/name',\n        value: this.groupName.value\n      }];\n    }\n\n    this.groupDataService.patch(group, operations).pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<Group>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.edited.success', { name: rd.payload.name }));\n        this.submitForm.emit(rd.payload);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.edited.failure', { name: group.name }));\n        this.cancelForm.emit();\n      }\n    });\n  }\n\n  /**\n   * Start editing the selected group\n   * @param groupId   ID of group to set as active\n   */\n  setActiveGroup(groupId: string) {\n    this.groupDataService.cancelEditGroup();\n    this.groupDataService.findById(groupId)\n      .pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload())\n      .subscribe((group: Group) => {\n        this.groupDataService.editGroup(group);\n      });\n  }\n\n  /**\n   * Start editing the selected group\n   * @param groupSelfLink   SelfLink of group to set as active\n   */\n  setActiveGroupWithLink(groupSelfLink: string) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup === null) {\n        this.groupDataService.cancelEditGroup();\n        this.groupDataService.findByHref(groupSelfLink, false, false, followLink('subgroups'), followLink('epersons'), followLink('object'))\n          .pipe(\n            getFirstSucceededRemoteData(),\n            getRemoteDataPayload())\n          .subscribe((group: Group) => {\n            this.groupDataService.editGroup(group);\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the Group from the Repository. The Group will be the only that this form is showing.\n   * It'll either show a success or error message depending on whether the delete was successful or not.\n   */\n  delete() {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((group: Group) => {\n      const modalRef = this.modalService.open(ConfirmationModalComponent);\n      modalRef.componentInstance.dso = group;\n      modalRef.componentInstance.headerLabel = this.messagePrefix + '.delete-group.modal.header';\n      modalRef.componentInstance.infoLabel = this.messagePrefix + '.delete-group.modal.info';\n      modalRef.componentInstance.cancelLabel = this.messagePrefix + '.delete-group.modal.cancel';\n      modalRef.componentInstance.confirmLabel = this.messagePrefix + '.delete-group.modal.confirm';\n      modalRef.componentInstance.brandColor = 'danger';\n      modalRef.componentInstance.confirmIcon = 'fas fa-trash';\n      modalRef.componentInstance.response.pipe(take(1)).subscribe((confirm: boolean) => {\n        if (confirm) {\n          if (hasValue(group.id)) {\n            this.groupDataService.delete(group.id).pipe(getFirstCompletedRemoteData())\n              .subscribe((rd: RemoteData<NoContent>) => {\n                if (rd.hasSucceeded) {\n                  this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.deleted.success', { name: group.name }));\n                  this.reset();\n                } else {\n                  this.notificationsService.error(\n                    this.translateService.get(this.messagePrefix + '.notification.deleted.failure.title', { name: group.name }),\n                    this.translateService.get(this.messagePrefix + '.notification.deleted.failure.content', { cause: rd.errorMessage }));\n                }\n              });\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * This method will ensure that the page gets reset and that the cache is cleared\n   */\n  reset() {\n    this.groupDataService.getBrowseEndpoint().pipe(take(1)).subscribe((href: string) => {\n      this.requestService.removeByHrefSubstring(href);\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed & unsub all subscriptions\n   */\n  @HostListener('window:beforeunload')\n  ngOnDestroy(): void {\n    this.groupDataService.cancelEditGroup();\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Check if group has a linked object (community or collection linked to a workflow group)\n   * @param group\n   */\n  hasLinkedDSO(group: Group): Observable<boolean> {\n    if (hasValue(group) && hasValue(group._links.object.href)) {\n      return this.getLinkedDSO(group).pipe(\n        map((rd: RemoteData<DSpaceObject>) => {\n          if (hasValue(rd) && hasValue(rd.payload)) {\n            return true;\n          } else {\n            return false;\n          }\n        }),\n        catchError(() => observableOf(false)),\n      );\n    }\n  }\n\n  /**\n   * Get group's linked object if it has one (community or collection linked to a workflow group)\n   * @param group\n   */\n  getLinkedDSO(group: Group): Observable<RemoteData<DSpaceObject>> {\n    if (hasValue(group) && hasValue(group._links.object.href)) {\n      if (group.object === undefined) {\n        return this.dSpaceObjectDataService.findByHref(group._links.object.href);\n      }\n      return group.object;\n    }\n  }\n\n  /**\n   * Get the route to the edit roles tab of the group's linked object (community or collection linked to a workflow group) if it has one\n   * @param group\n   */\n  getLinkedEditRolesRoute(group: Group): Observable<string> {\n    if (hasValue(group) && hasValue(group._links.object.href)) {\n      return this.getLinkedDSO(group).pipe(\n        map((rd: RemoteData<DSpaceObject>) => {\n          if (hasValue(rd) && hasValue(rd.payload)) {\n            const dso = rd.payload;\n            switch ((dso as any).type) {\n              case Community.type.value:\n                return getCommunityEditRolesRoute(rd.payload.id);\n              case Collection.type.value:\n                return getCollectionEditRolesRoute(rd.payload.id);\n            }\n          }\n        })\n      );\n    }\n  }\n}\n","import { PaginatedList } from '../../data/paginated-list.model';\nimport { EPerson } from './eperson.model';\nimport { Group } from './group.model';\n\n/**\n * This class serves as a Data Transfer Model that contains the Group, whether or not it's able to be deleted and its members\n */\nexport class GroupDtoModel {\n\n  /**\n   * The Group linked to this object\n   */\n  public group: Group;\n\n  /**\n   * Whether or not the linked Group is able to be deleted\n   */\n  public ableToDelete: boolean;\n\n  /**\n   * List of subgroups of this group\n   */\n  public subgroups: PaginatedList<Group>;\n\n  /**\n   * List of members of this group\n   */\n  public epersons: PaginatedList<EPerson>;\n\n}\n","<div class=\"container\">\n  <div class=\"groups-registry row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom mb-3\">\n        <h2 id=\"header\" class=\"pb-2\">{{messagePrefix + 'head' | translate}}</h2>\n        <div>\n          <button class=\"mr-auto btn btn-success\"\n                  [routerLink]=\"['newGroup']\">\n            <i class=\"fas fa-plus\"></i>\n            <span class=\"d-none d-sm-inline\">{{messagePrefix + 'button.add' | translate}}</span>\n          </button>\n        </div>\n      </div>\n\n      <h3 id=\"search\" class=\"border-bottom pb-2\">{{messagePrefix + 'search.head' | translate}}</h3>\n      <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n        <div class=\"flex-grow-1 mr-3\">\n          <div class=\"form-group input-group\">\n            <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n                   class=\"form-control\" attr.aria-label=\"{{messagePrefix + 'search.placeholder' | translate}}\"\n                   [placeholder]=\"(messagePrefix + 'search.placeholder' | translate)\" >\n            <span class=\"input-group-append\">\n              <button type=\"submit\" class=\"search-button btn btn-primary\">\n                <i class=\"fas fa-search\"></i> {{ messagePrefix + 'search.button' | translate }}\n              </button>\n            </span>\n          </div>\n        </div>\n        <div>\n          <button (click)=\"clearFormAndResetResult();\" class=\"btn btn-secondary\">\n            {{messagePrefix + 'button.see-all' | translate}}\n          </button>\n        </div>\n      </form>\n\n      <ds-loading *ngIf=\"searching$ | async\"></ds-loading>\n      <ds-pagination\n        *ngIf=\"(pageInfoState$ | async)?.totalElements > 0 && !(searching$ | async)\"\n        [paginationOptions]=\"config\"\n        [pageInfoState]=\"pageInfoState$\"\n        [collectionSize]=\"(pageInfoState$ | async)?.totalElements\"\n        [hideGear]=\"true\"\n        [hidePagerWhenSinglePage]=\"true\">\n\n        <div  class=\"table-responsive\">\n          <table id=\"groups\" class=\"table table-striped table-hover table-bordered\">\n            <thead>\n            <tr>\n              <th scope=\"col\">{{messagePrefix + 'table.id' | translate}}</th>\n              <th scope=\"col\">{{messagePrefix + 'table.name' | translate}}</th>\n              <th scope=\"col\">{{messagePrefix + 'table.members' | translate}}</th>\n              <th>{{messagePrefix + 'table.edit' | translate}}</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let groupDto of (groupsDto$ | async)?.page\">\n              <td>{{groupDto.group.id}}</td>\n              <td>{{groupDto.group.name}}</td>\n              <td>{{groupDto.epersons?.totalElements + groupDto.subgroups?.totalElements}}</td>\n              <td>\n                <div class=\"btn-group edit-field\">\n                  <button [routerLink]=\"groupService.getGroupEditPageRouterLink(groupDto.group)\"\n                          class=\"btn btn-outline-primary btn-sm\"\n                          title=\"{{messagePrefix + 'table.edit.buttons.edit' | translate: {name: groupDto.group.name} }}\">\n                    <i class=\"fas fa-edit fa-fw\"></i>\n                  </button>\n                  <button *ngIf=\"!groupDto.group?.permanent && groupDto.ableToDelete\"\n                          (click)=\"deleteGroup(groupDto)\" class=\"btn btn-outline-danger btn-sm\"\n                          title=\"{{messagePrefix + 'table.edit.buttons.remove' | translate: {name: groupDto.group.name} }}\">\n                    <i class=\"fas fa-trash-alt fa-fw\"></i>\n                  </button>\n                </div>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n      </ds-pagination>\n\n      <div *ngIf=\"(pageInfoState$ | async)?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n        {{messagePrefix + 'no-items' | translate}}\n      </div>\n\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport { catchError, map, switchMap, take } from 'rxjs/operators';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { buildPaginatedList, PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { RequestService } from '../../core/data/request.service';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../core/eperson/group-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { GroupDtoModel } from '../../core/eperson/models/group-dto.model';\nimport { Group } from '../../core/eperson/models/group.model';\nimport { RouteService } from '../../core/services/route.service';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport {\n  getAllSucceededRemoteData,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../core/shared/operators';\nimport { PageInfo } from '../../core/shared/page-info.model';\nimport { hasValue } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-groups-registry',\n  templateUrl: './groups-registry.component.html',\n})\n/**\n * A component used for managing all existing groups within the repository.\n * The admin can create, edit or delete groups here.\n */\nexport class GroupsRegistryComponent implements OnInit, OnDestroy {\n\n  messagePrefix = 'admin.access-control.groups.';\n\n  /**\n   * Pagination config used to display the list of groups\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'gl',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * A BehaviorSubject with the list of GroupDtoModel objects made from the Groups in the repository or\n   * as the result of the search\n   */\n  groupsDto$: BehaviorSubject<PaginatedList<GroupDtoModel>> = new BehaviorSubject<PaginatedList<GroupDtoModel>>({} as any);\n  deletedGroupsIds: string[] = [];\n\n  /**\n   * An observable for the pageInfo, needed to pass to the pagination component\n   */\n  pageInfoState$: BehaviorSubject<PageInfo> = new BehaviorSubject<PageInfo>(undefined);\n\n  // The search form\n  searchForm;\n\n  /**\n   * A boolean representing if a search is pending\n   */\n  searching$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  // Current search in groups registry\n  currentSearchQuery: string;\n\n  /**\n   * The subscription for the search method\n   */\n  searchSub: Subscription;\n\n  paginationSub: Subscription;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  constructor(public groupService: GroupDataService,\n              private ePersonDataService: EPersonDataService,\n              private dSpaceObjectDataService: DSpaceObjectDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private formBuilder: FormBuilder,\n              protected routeService: RouteService,\n              private router: Router,\n              private authorizationService: AuthorizationDataService,\n              private paginationService: PaginationService,\n              public requestService: RequestService) {\n    this.currentSearchQuery = '';\n    this.searchForm = this.formBuilder.group(({\n      query: this.currentSearchQuery,\n    }));\n  }\n\n  ngOnInit() {\n    this.search({ query: this.currentSearchQuery });\n  }\n\n  /**\n   * Search in the groups (searches by group name and by uuid exact match)\n   * @param data  Contains query param\n   */\n  search(data: any) {\n    this.searching$.next(true);\n    if (hasValue(this.searchSub)) {\n      this.searchSub.unsubscribe();\n      this.subs = this.subs.filter((sub: Subscription) => sub !== this.searchSub);\n    }\n    this.searchSub = this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n      switchMap((paginationOptions) => {\n        const query: string = data.query;\n        if (query != null && this.currentSearchQuery !== query) {\n          this.currentSearchQuery = query;\n          this.paginationService.updateRouteWithUrl(this.config.id, [], {page: 1});\n        }\n        return this.groupService.searchGroups(this.currentSearchQuery.trim(), {\n          currentPage: paginationOptions.currentPage,\n          elementsPerPage: paginationOptions.pageSize\n        });\n      }),\n      getAllSucceededRemoteData(),\n      getRemoteDataPayload(),\n      switchMap((groups: PaginatedList<Group>) => {\n        if (groups.page.length === 0) {\n          return observableOf(buildPaginatedList(groups.pageInfo, []));\n        }\n        return observableCombineLatest(groups.page.map((group: Group) => {\n          if (!this.deletedGroupsIds.includes(group.id)) {\n            return observableCombineLatest([\n              this.authorizationService.isAuthorized(FeatureID.CanDelete, hasValue(group) ? group.self : undefined),\n              this.hasLinkedDSO(group),\n              this.getSubgroups(group),\n              this.getMembers(group)\n            ]).pipe(\n              map(([isAuthorized, hasLinkedDSO, subgroups, members]:\n                     [boolean, boolean, RemoteData<PaginatedList<Group>>, RemoteData<PaginatedList<EPerson>>]) => {\n                  const groupDtoModel: GroupDtoModel = new GroupDtoModel();\n                  groupDtoModel.ableToDelete = isAuthorized && !hasLinkedDSO;\n                  groupDtoModel.group = group;\n                  groupDtoModel.subgroups = subgroups.payload;\n                  groupDtoModel.epersons = members.payload;\n                  return groupDtoModel;\n                }\n              )\n            );\n          }\n        })).pipe(map((dtos: GroupDtoModel[]) => {\n          return buildPaginatedList(groups.pageInfo, dtos);\n        }));\n      })\n    ).subscribe((value: PaginatedList<GroupDtoModel>) => {\n      this.groupsDto$.next(value);\n      this.pageInfoState$.next(value.pageInfo);\n      this.searching$.next(false);\n    });\n\n    this.subs.push(this.searchSub);\n      }\n\n  /**\n   * Delete Group\n   */\n  deleteGroup(group: GroupDtoModel) {\n    if (hasValue(group.group.id)) {\n      this.groupService.delete(group.group.id).pipe(getFirstCompletedRemoteData())\n        .subscribe((rd: RemoteData<NoContent>) => {\n          if (rd.hasSucceeded) {\n            this.deletedGroupsIds = [...this.deletedGroupsIds, group.group.id];\n            this.notificationsService.success(this.translateService.get(this.messagePrefix + 'notification.deleted.success', { name: group.group.name }));\n            this.reset();\n          } else {\n            this.notificationsService.error(\n              this.translateService.get(this.messagePrefix + 'notification.deleted.failure.title', { name: group.group.name }),\n              this.translateService.get(this.messagePrefix + 'notification.deleted.failure.content', { cause: rd.errorMessage }));\n          }\n      });\n    }\n  }\n\n  /**\n   * This method will set everything to stale, which will cause the lists on this page to update.\n   */\n  reset() {\n    this.groupService.getBrowseEndpoint().pipe(\n      take(1)\n    ).subscribe((href: string) => {\n      this.requestService.setStaleByHrefSubstring(href);\n    });\n  }\n\n  /**\n   * Get the members (epersons embedded value of a group)\n   * @param group\n   */\n  getMembers(group: Group): Observable<RemoteData<PaginatedList<EPerson>>> {\n    return this.ePersonDataService.findAllByHref(group._links.epersons.href).pipe(getFirstSucceededRemoteData());\n  }\n\n  /**\n   * Get the subgroups (groups embedded value of a group)\n   * @param group\n   */\n  getSubgroups(group: Group): Observable<RemoteData<PaginatedList<Group>>> {\n    return this.groupService.findAllByHref(group._links.subgroups.href).pipe(getFirstSucceededRemoteData());\n  }\n\n  /**\n   * Check if group has a linked object (community or collection linked to a workflow group)\n   * @param group\n   */\n  hasLinkedDSO(group: Group): Observable<boolean> {\n    return this.dSpaceObjectDataService.findByHref(group._links.object.href).pipe(\n      getFirstSucceededRemoteData(),\n      map((rd: RemoteData<DSpaceObject>) => hasValue(rd) && hasValue(rd.payload)),\n      catchError(() => observableOf(false)),\n    );\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({ query: '' });\n  }\n\n  /**\n   * Unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.cleanupSubscribes();\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n\n  cleanupSubscribes() {\n    if (hasValue(this.paginationSub)) {\n      this.paginationSub.unsubscribe();\n    }\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '../shared/shared.module';\nimport { AccessControlRoutingModule } from './access-control-routing.module';\nimport { EPeopleRegistryComponent } from './epeople-registry/epeople-registry.component';\nimport { EPersonFormComponent } from './epeople-registry/eperson-form/eperson-form.component';\nimport { GroupFormComponent } from './group-registry/group-form/group-form.component';\nimport { MembersListComponent } from './group-registry/group-form/members-list/members-list.component';\nimport { SubgroupsListComponent } from './group-registry/group-form/subgroup-list/subgroups-list.component';\nimport { GroupsRegistryComponent } from './group-registry/groups-registry.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    AccessControlRoutingModule\n  ],\n  declarations: [\n    EPeopleRegistryComponent,\n    EPersonFormComponent,\n    GroupsRegistryComponent,\n    GroupFormComponent,\n    SubgroupsListComponent,\n    MembersListComponent\n  ]\n})\n/**\n * This module handles all components related to the access control pages\n */\nexport class AccessControlModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EPeopleRegistryComponent } from './epeople-registry/epeople-registry.component';\nimport { GroupFormComponent } from './group-registry/group-form/group-form.component';\nimport { GroupsRegistryComponent } from './group-registry/groups-registry.component';\nimport { GROUP_EDIT_PATH } from './access-control-routing-paths';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: 'epeople',\n        component: EPeopleRegistryComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.epeople.title', breadcrumbKey: 'admin.access-control.epeople' }\n      },\n      {\n        path: GROUP_EDIT_PATH,\n        component: GroupsRegistryComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.groups.title', breadcrumbKey: 'admin.access-control.groups' }\n      },\n      {\n        path: `${GROUP_EDIT_PATH}/newGroup`,\n        component: GroupFormComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.groups.title.addGroup', breadcrumbKey: 'admin.access-control.groups.addGroup' }\n      },\n      {\n        path: `${GROUP_EDIT_PATH}/:groupId`,\n        component: GroupFormComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.groups.title.singleGroup', breadcrumbKey: 'admin.access-control.groups.singleGroup' }\n      }\n    ])\n  ]\n})\n/**\n * Routing module for the AccessControl section of the admin sidebar\n */\nexport class AccessControlRoutingModule {\n\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}