{"version":3,"sources":["webpack:///src/app/+collection-page/collection-item-mapper/collection-item-mapper.component.html","webpack:///src/app/+collection-page/collection-item-mapper/collection-item-mapper.component.ts","webpack:///src/app/shared/comcol-forms/edit-comcol-page/edit-comcol-page.component.html","webpack:///src/app/+collection-page/edit-collection-page/edit-collection-page.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-metadata/collection-metadata.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-metadata/collection-metadata.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-roles/collection-roles.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-roles/collection-roles.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-source/collection-source.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-source/collection-source.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-curate/collection-curate.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-curate/collection-curate.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-authorizations/collection-authorizations.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-authorizations/collection-authorizations.component.html","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/collection-administrator.guard.ts","webpack:///src/app/+collection-page/edit-collection-page/edit-collection-page.routing.module.ts","webpack:///src/app/+collection-page/edit-collection-page/edit-collection-page.module.ts"],"names":["CollectionItemMapperComponent","route","router","searchConfigService","searchService","notificationsService","itemDataService","collectionDataService","translateService","dsoNameService","defaultSortOptions","ASC","performedSearch","this","collectionRD$","parent","data","pipe","map","dso","collectionName$","rd","getName","payload","searchOptions$","paginatedSearchOptions","loadItemLists","shouldUpdate$","BehaviorSubject","collectionAndOptions$","collectionItemsRD$","switchMap","collectionRD","options","shouldUpdate","next","findAllByHref","_links","mappedItems","href","Object","assign","sort","mappedItemsRD$","search","query","buildQuery","id","scope","undefined","dsoTypes","ITEM","startWith","ids","remove","responses$","collection","removeMappingFromCollection","g","mapToCollection","self","showNotifications","messageInsertion","subscribe","responses","successful","filter","response","hasSucceeded","unsuccessful","hasFailed","length","get","amount","head","content","success","error","switchToFirstTab","event","navigateByUrl","getCurrentUrl","url","indexOf","substring","collectionId","excludeColQuery","tabs","select","take","navigate","SEARCH_CONFIG_SERVICE","provide","useClass","tabChange","fade","EditCollectionPageComponent","super","type","CollectionMetadataComponent","itemTemplateService","translate","objectCache","requestService","frontendURL","ngOnInit","initTemplateItem","itemTemplateRD$","dsoRD$","findByCollectionID","uuid","collection$","template$","create","templateHref$","getCollectionEndpoint","combineLatest","template","templateHref","setStaleByHrefSubstring","deleteByCollectionID","tap","onSubmit","navigateToHomePage","CollectionRolesComponent","first","comcolRoles$","name","adminGroup","submittersGroup","itemReadGroup","bitstreamReadGroup","workflowGroups","CollectionSourceComponent","objectUpdatesService","location","formService","collectionService","LABEL_KEY_PREFIX","ERROR_KEY_PREFIX","OPTIONS_KEY_PREFIX","oaiSourceModel","required","validators","errorMessages","oaiSetIdModel","metadataConfigIdModel","harvestTypeModel","value","Metadata","MetadataAndRef","MetadataAndBitstreams","inputModels","formModel","group","formLayout","oaiSource","grid","host","oaiSetId","metadataConfigId","harvestType","option","oaiSetContainer","oaiSourceContainer","harvestTypeContainer","harvestTypeNone","None","previouslySelectedHarvestType","displayedNotifications","notificationsPrefix","discardTimeOut","environment","edit","undoTimeout","substr","formGroup","createFormGroup","col","getContentSource","initializeOriginalContentSource","updateFieldTranslations","onLangChange","contentSource","initialHarvestType","initializeMetadataConfigs","initialContentSource","cloneDeep","initialize","Date","update$","getFieldUpdates","updates","updateSub","update","field","configId","metadataConfigs","patchValue","metadataConfig","label","forEach","fieldModel","updateFieldTranslation","instant","keys","key","updateContentSourceField","model","saveFieldUpdate","getHarvesterEndpoint","endpoint","removeByHrefSubstring","updateContentSource","result","clearNotifications","push","getNotificationTitle","getNotificationContent","back","valid","updateHarvestType","saveAddFieldUpdate","notification","unsubscribe","CollectionCurateComponent","CollectionAuthorizationsComponent","CollectionAdministratorGuard","authorizationService","authService","state","IsCollectionAdmin","EditCollectionPageRoutingModule","forChild","path","resolve","breadcrumb","breadcrumbKey","component","canActivate","children","redirectTo","pathMatch","title","hideReturnButton","showBreadcrumbs","resourcePolicyTarget","resourcePolicy","EditCollectionPageModule"],"mappings":"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","file":"x","sourcesContent":["<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2>{{'collection.edit.item-mapper.head' | translate}}</h2>\n      <p [innerHTML]=\"'collection.edit.item-mapper.collection' | translate:{ name: (collectionName$ |async) }\" id=\"collection-name\"></p>\n      <p>{{'collection.edit.item-mapper.description' | translate}}</p>\n\n      <ngb-tabset (tabChange)=\"tabChange($event)\" [destroyOnHide]=\"true\" #tabs=\"ngbTabset\">\n        <ngb-tab title=\"{{'collection.edit.item-mapper.tabs.browse' | translate}}\" id=\"browseTab\">\n          <ng-template ngbTabContent>\n            <div class=\"mt-2\">\n              <ds-item-select class=\"mt-2\"\n                [key]=\"'browse'\"\n                [dsoRD$]=\"collectionItemsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'collection.edit.item-mapper.remove'\"\n                [cancelButton]=\"'collection.edit.item-mapper.cancel'\"\n                [dangerConfirm]=\"true\"\n                [hideCollection]=\"true\"\n                (confirm)=\"mapItems($event, true)\"\n                (cancel)=\"onCancel()\"></ds-item-select>\n            </div>\n          </ng-template>\n        </ngb-tab>\n        <ngb-tab title=\"{{'collection.edit.item-mapper.tabs.map' | translate}}\" id=\"mapTab\">\n          <ng-template ngbTabContent>\n            <div class=\"row mt-2\">\n              <div class=\"col-12 col-lg-6\">\n                <ds-search-form id=\"search-form\"\n                                [query]=\"(searchOptions$ | async)?.query\"\n                                [scope]=\"(searchOptions$ | async)?.scope\"\n                                [currentUrl]=\"'./'\"\n                                [inPlaceSearch]=\"true\"\n                                [searchPlaceholder]=\"'collection.edit.item-mapper.search-form.placeholder' | translate\"\n                                (submitSearch)=\"performedSearch = true\">\n                </ds-search-form>\n              </div>\n            </div>\n\n            <div *ngIf=\"performedSearch\">\n              <ds-item-select class=\"mt-2\"\n                [key]=\"'map'\"\n                [dsoRD$]=\"mappedItemsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'collection.edit.item-mapper.confirm'\"\n                [cancelButton]=\"'collection.edit.item-mapper.cancel'\"\n                (confirm)=\"mapItems($event)\"\n                (cancel)=\"onCancel()\"></ds-item-select>\n            </div>\n            <div *ngIf=\"!performedSearch\" class=\"alert alert-info w-100\" role=\"alert\">\n              {{'collection.edit.item-mapper.no-search' | translate}}\n            </div>\n          </ng-template>\n        </ngb-tab>\n      </ngb-tabset>\n    </div>\n  </div>\n</div>\n","import { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\n\nimport { ChangeDetectionStrategy, Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { fadeIn, fadeInOut } from '../../shared/animations/fade';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Collection } from '../../core/shared/collection.model';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { map, startWith, switchMap, take } from 'rxjs/operators';\nimport {\n    getRemoteDataPayload,\n    getFirstSucceededRemoteData,\n    toDSpaceObjectListRD,\n    getFirstCompletedRemoteData, getAllSucceededRemoteData\n} from '../../core/shared/operators';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { DSpaceObjectType } from '../../core/shared/dspace-object-type.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionDataService } from '../../core/data/collection-data.service';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { SEARCH_CONFIG_SERVICE } from '../../+my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../core/shared/search/search-configuration.service';\nimport { PaginatedSearchOptions } from '../../shared/search/paginated-search-options.model';\nimport { SearchService } from '../../core/shared/search/search.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\n\n@Component({\n  selector: 'ds-collection-item-mapper',\n  styleUrls: ['./collection-item-mapper.component.scss'],\n  templateUrl: './collection-item-mapper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ],\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n/**\n * Component used to map items to a collection\n */\nexport class CollectionItemMapperComponent implements OnInit {\n\n  /**\n   * A view on the tabset element\n   * Used to switch tabs programmatically\n   */\n  @ViewChild('tabs', {static: false}) tabs;\n\n  /**\n   * The collection to map items to\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n  collectionName$: Observable<string>;\n\n  /**\n   * Search options\n   */\n  searchOptions$: Observable<PaginatedSearchOptions>;\n\n  /**\n   * List of items to show under the \"Browse\" tab\n   * Items inside the collection\n   */\n  collectionItemsRD$: Observable<RemoteData<PaginatedList<DSpaceObject>>>;\n\n  /**\n   * List of items to show under the \"Map\" tab\n   * Items outside the collection\n   */\n  mappedItemsRD$: Observable<RemoteData<PaginatedList<DSpaceObject>>>;\n\n  /**\n   * Sort on title ASC by default\n   * @type {SortOptions}\n   */\n  defaultSortOptions: SortOptions = new SortOptions('dc.title', SortDirection.ASC);\n\n  /**\n   * Firing this observable (shouldUpdate$.next(true)) forces the two lists to reload themselves\n   * Usually fired after the lists their cache is cleared (to force a new request to the REST API)\n   */\n  shouldUpdate$: BehaviorSubject<boolean>;\n\n  /**\n   * Track whether at least one search has been performed or not\n   * As soon as at least one search has been performed, we display the search results\n   */\n  performedSearch = false;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              @Inject(SEARCH_CONFIG_SERVICE) private searchConfigService: SearchConfigurationService,\n              private searchService: SearchService,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private collectionDataService: CollectionDataService,\n              private translateService: TranslateService,\n              private dsoNameService: DSONameService) {\n  }\n\n  ngOnInit(): void {\n    this.collectionRD$ = this.route.parent.data.pipe(\n      map((data) => data.dso as RemoteData<Collection>),\n      getFirstSucceededRemoteData()\n    );\n\n    this.collectionName$ = this.collectionRD$.pipe(\n      map((rd: RemoteData<Collection>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n    this.searchOptions$ = this.searchConfigService.paginatedSearchOptions;\n    this.loadItemLists();\n  }\n\n  /**\n   * Load collectionItemsRD$ with a fixed scope to only obtain the items this collection owns\n   * Load mappedItemsRD$ to only obtain items this collection doesn't own\n   */\n  loadItemLists() {\n    this.shouldUpdate$ = new BehaviorSubject<boolean>(true);\n    const collectionAndOptions$ = observableCombineLatest(\n      this.collectionRD$,\n      this.searchOptions$,\n      this.shouldUpdate$\n    );\n    this.collectionItemsRD$ = collectionAndOptions$.pipe(\n      switchMap(([collectionRD, options, shouldUpdate]) => {\n        if (shouldUpdate === true) {\n          this.shouldUpdate$.next(false);\n        }\n        return this.itemDataService.findAllByHref(collectionRD.payload._links.mappedItems.href, Object.assign(options, {\n          sort: this.defaultSortOptions\n        }),!shouldUpdate, false, followLink('owningCollection')).pipe(\n          getAllSucceededRemoteData()\n        );\n      })\n    );\n    this.mappedItemsRD$ = collectionAndOptions$.pipe(\n      switchMap(([collectionRD, options, shouldUpdate]) => {\n        return this.searchService.search(Object.assign(new PaginatedSearchOptions(options), {\n          query: this.buildQuery(collectionRD.payload.id, options.query),\n          scope: undefined,\n          dsoTypes: [DSpaceObjectType.ITEM],\n          sort: this.defaultSortOptions\n        }), 10000).pipe(\n          toDSpaceObjectListRD(),\n          startWith(undefined)\n        );\n      })\n    );\n  }\n\n  /**\n   * Map/Unmap the selected items to the collection and display notifications\n   * @param ids         The list of item UUID's to map/unmap to the collection\n   * @param remove      Whether or not it's supposed to remove mappings\n   */\n  mapItems(ids: string[], remove?: boolean) {\n    const responses$ = this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((collectionRD: RemoteData<Collection>) => collectionRD.payload),\n      switchMap((collection: Collection) =>\n        observableCombineLatest(ids.map((id: string) => {\n            if (remove) {\n              return this.itemDataService.removeMappingFromCollection(id, collection.id).pipe(\n                getFirstCompletedRemoteData()\n              );\n            } else {\n              return this.itemDataService.mapToCollection(id, collection._links.self.href).pipe(\n                getFirstCompletedRemoteData()\n              );\n            }\n          }\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, remove);\n  }\n\n  /**\n   * Display notifications\n   * @param {Observable<RestResponse[]>} responses$   The responses after adding/removing a mapping\n   * @param {boolean} remove                          Whether or not the goal was to remove mappings\n   */\n  private showNotifications(responses$: Observable<RemoteData<NoContent>[]>, remove?: boolean) {\n    const messageInsertion = remove ? 'unmap' : 'map';\n\n    responses$.subscribe((responses: RemoteData<NoContent>[]) => {\n      const successful = responses.filter((response: RemoteData<any>) => response.hasSucceeded);\n      const unsuccessful = responses.filter((response: RemoteData<any>) => response.hasFailed);\n      if (successful.length > 0) {\n        const successMessages = observableCombineLatest(\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.success.head`),\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.success.content`, { amount: successful.length })\n        );\n\n        successMessages.subscribe(([head, content]) => {\n          this.notificationsService.success(head, content);\n        });\n        this.shouldUpdate$.next(true);\n      }\n      if (unsuccessful.length > 0) {\n        const unsuccessMessages = observableCombineLatest(\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.error.head`),\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.error.content`, { amount: unsuccessful.length })\n        );\n\n        unsuccessMessages.subscribe(([head, content]) => {\n          this.notificationsService.error(head, content);\n        });\n      }\n      this.switchToFirstTab();\n    });\n  }\n\n  /**\n   * Clear url parameters on tab change (temporary fix until pagination is improved)\n   * @param event\n   */\n  tabChange(event) {\n    this.performedSearch = false;\n    this.router.navigateByUrl(this.getCurrentUrl());\n  }\n\n  /**\n   * Get current url without parameters\n   * @returns {string}\n   */\n  getCurrentUrl(): string {\n    if (this.router.url.indexOf('?') > -1) {\n      return this.router.url.substring(0, this.router.url.indexOf('?'));\n    }\n    return this.router.url;\n  }\n\n  /**\n   * Build a query where items that are already mapped to a collection are excluded from\n   * @param collectionId    The collection's UUID\n   * @param query           The query to add to it\n   */\n  buildQuery(collectionId: string, query: string): string {\n    const excludeColQuery = `-location.coll:\\\"${collectionId}\\\"`;\n    if (isNotEmpty(query)) {\n      return `${excludeColQuery} AND ${query}`;\n    } else {\n      return excludeColQuery;\n    }\n  }\n\n  /**\n   * Switch the view to focus on the first tab\n   */\n  switchToFirstTab() {\n    this.tabs.select('browseTab');\n  }\n\n  /**\n   * When a cancel event is fired, return to the collection page\n   */\n  onCancel() {\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      take(1)\n    ).subscribe((collection: Collection) => {\n      this.router.navigate(['/collections/', collection.id]);\n    });\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom\">\n        <h2>{{ type + '.edit.head' | translate }}</h2>\n        <div>\n          <a class=\"btn btn-danger\"\n             [routerLink]=\"((type === 'community') ? '/communities/' : '/collections/') + (dsoRD$ | async)?.payload.uuid + '/delete'\">\n            <i class=\"fas fa-trash\"></i> {{type + '.edit.delete' | translate}}</a>\n        </div>\n      </div>\n      <div class=\"pt-2\">\n        <ul class=\"nav nav-tabs justify-content-start mb-2\">\n          <li *ngFor=\"let page of pages\" class=\"nav-item\">\n            <a class=\"nav-link\"\n               [ngClass]=\"{'active' : page === currentPage}\"\n               [routerLink]=\"['./' + page]\">\n              {{ type + '.edit.tabs.' + page + '.head' | translate}}\n            </a>\n          </li>\n        </ul>\n        <div class=\"tab-pane active\">\n          <div class=\"mb-4\">\n            <router-outlet></router-outlet>\n          </div>\n          <div class=\"col-12 text-right\">\n            <a *ngIf=\"!hideReturnButton\" [routerLink]=\"getPageUrl((dsoRD$ | async)?.payload)\" class=\"btn btn-outline-secondary\">\n              <i class=\"fas fa-arrow-left\"></i> {{ type + '.edit.return' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EditComColPageComponent } from '../../shared/comcol-forms/edit-comcol-page/edit-comcol-page.component';\nimport { Collection } from '../../core/shared/collection.model';\nimport { getCollectionPageRoute } from '../collection-page-routing-paths';\n\n/**\n * Component that represents the page where a user can edit an existing Collection\n */\n@Component({\n  selector: 'ds-edit-collection',\n  templateUrl: '../../shared/comcol-forms/edit-comcol-page/edit-comcol-page.component.html'\n})\nexport class EditCollectionPageComponent extends EditComColPageComponent<Collection> {\n  type = 'collection';\n\n  public constructor(\n    protected router: Router,\n    protected route: ActivatedRoute\n  ) {\n    super(router, route);\n  }\n\n  /**\n   * Get the collection page url\n   * @param collection The collection for which the url is requested\n   */\n  getPageUrl(collection: Collection): string {\n    return getCollectionPageRoute(collection.id);\n  }\n}\n","<div class=\"container-fluid mb-2\" *ngVar=\"(itemTemplateRD$ | async) as itemTemplateRD\">\n  <label>{{ 'collection.edit.template.label' | translate}}</label>\n  <div class=\"button-row\">\n    <button *ngIf=\"!itemTemplateRD?.payload\" class=\"btn btn-success\" (click)=\"addItemTemplate()\">\n      <i class=\"fas fa-plus\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.add-button\" | translate}}</span>\n    </button>\n    <button *ngIf=\"itemTemplateRD?.payload\" class=\"btn btn-danger\" (click)=\"deleteItemTemplate()\">\n      <i class=\"fas fa-trash-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.delete-button\" | translate}}</span>\n    </button>\n    <button *ngIf=\"itemTemplateRD?.payload\" class=\"btn btn-primary\"\n            [routerLink]=\"'/collections/' + (dsoRD$ | async)?.payload.uuid + '/itemtemplate'\">\n      <i class=\"fas fa-edit\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.edit-button\" | translate}}</span>\n    </button>\n  </div>\n</div>\n<ds-collection-form [dso]=\"(dsoRD$ | async)?.payload\"\n                    (submitForm)=\"onSubmit($event)\"\n                    (back)=\"navigateToHomePage()\"\n                    (finish)=\"navigateToHomePage()\"></ds-collection-form>\n","import { Component } from '@angular/core';\nimport { ComcolMetadataComponent } from '../../../shared/comcol-forms/edit-comcol-page/comcol-metadata/comcol-metadata.component';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ItemTemplateDataService } from '../../../core/data/item-template-data.service';\nimport { combineLatest as combineLatestObservable, Observable } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { getCollectionItemTemplateRoute } from '../../collection-page-routing-paths';\n\n/**\n * Component for editing a collection's metadata\n */\n@Component({\n  selector: 'ds-collection-metadata',\n  templateUrl: './collection-metadata.component.html',\n})\nexport class CollectionMetadataComponent extends ComcolMetadataComponent<Collection> {\n  protected frontendURL = '/collections/';\n  protected type = Collection.type;\n\n  /**\n   * The collection's item template\n   */\n  itemTemplateRD$: Observable<RemoteData<Item>>;\n\n  public constructor(\n    protected collectionDataService: CollectionDataService,\n    protected itemTemplateService: ItemTemplateDataService,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService,\n    protected objectCache: ObjectCacheService,\n    protected requestService: RequestService\n  ) {\n    super(collectionDataService, router, route, notificationsService, translate);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.initTemplateItem();\n  }\n\n  /**\n   * Initialize the collection's item template\n   */\n  initTemplateItem() {\n    this.itemTemplateRD$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((collection: Collection) => this.itemTemplateService.findByCollectionID(collection.uuid))\n    );\n  }\n\n  /**\n   * Add a new item template to the collection and redirect to the item template edit page\n   */\n  addItemTemplate() {\n    const collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    const template$ = collection$.pipe(\n      switchMap((collection: Collection) => this.itemTemplateService.create(new Item(), collection.uuid).pipe(\n        getFirstSucceededRemoteDataPayload(),\n      )),\n    );\n    const templateHref$ = collection$.pipe(\n      switchMap((collection) => this.itemTemplateService.getCollectionEndpoint(collection.id)),\n    );\n\n    combineLatestObservable(collection$, template$, templateHref$).subscribe(([collection, template, templateHref]) => {\n      this.requestService.setStaleByHrefSubstring(templateHref);\n      this.router.navigate([getCollectionItemTemplateRoute(collection.uuid)]);\n    });\n  }\n\n  /**\n   * Delete the item template from the collection\n   */\n  deleteItemTemplate() {\n    const collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    const template$ = collection$.pipe(\n      switchMap((collection: Collection) => this.itemTemplateService.findByCollectionID(collection.uuid).pipe(\n        getFirstSucceededRemoteDataPayload(),\n      )),\n    );\n    const templateHref$ = collection$.pipe(\n      switchMap((collection) => this.itemTemplateService.getCollectionEndpoint(collection.id)),\n    );\n\n    combineLatestObservable(collection$, template$, templateHref$).pipe(\n      switchMap(([collection, template, templateHref]) => {\n        return this.itemTemplateService.deleteByCollectionID(template, collection.uuid).pipe(\n          tap((success: boolean) => {\n            if (success) {\n              this.objectCache.remove(templateHref);\n              this.objectCache.remove(template.self);\n              this.requestService.setStaleByHrefSubstring(template.self);\n              this.requestService.setStaleByHrefSubstring(templateHref);\n              this.requestService.setStaleByHrefSubstring(collection.self);\n            }\n          })\n        );\n      })\n    ).subscribe((success: boolean) => {\n      if (success) {\n        this.notificationsService.success(null, this.translate.get('collection.edit.template.notifications.delete.success'));\n      } else {\n        this.notificationsService.error(null, this.translate.get('collection.edit.template.notifications.delete.error'));\n      }\n      this.initTemplateItem();\n    });\n  }\n}\n","<ds-comcol-role\n  *ngFor=\"let comcolRole of comcolRoles$ | async\"\n  [dso]=\"collection$ | async\"\n  [comcolRole]=\"comcolRole\"\n>\n</ds-comcol-role>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { HALLink } from '../../../core/shared/hal-link.model';\n\n/**\n * Component for managing a collection's roles\n */\n@Component({\n  selector: 'ds-collection-roles',\n  templateUrl: './collection-roles.component.html',\n})\nexport class CollectionRolesComponent implements OnInit {\n\n  dsoRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The different roles for the collection, as an observable.\n   */\n  comcolRoles$: Observable<HALLink[]>;\n\n  /**\n   * The collection to manage, as an observable.\n   */\n  collection$: Observable<Collection>;\n\n  constructor(\n    protected route: ActivatedRoute,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      first(),\n      map((data) => data.dso),\n    );\n\n    this.collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    );\n\n    this.comcolRoles$ = this.collection$.pipe(\n      map((collection) => [\n        {\n          name: 'collection-admin',\n          href: collection._links.adminGroup.href,\n        },\n        {\n          name: 'submitters',\n          href: collection._links.submittersGroup.href,\n        },\n        {\n          name: 'item_read',\n          href: collection._links.itemReadGroup.href,\n        },\n        {\n          name: 'bitstream_read',\n          href: collection._links.bitstreamReadGroup.href,\n        },\n        ...collection._links.workflowGroups,\n      ]),\n    );\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"d-inline-block float-right\">\n    <button class=\" btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async)\"\n            (click)=\"discard()\"><i\n      class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n      class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || !isValid() || (initialHarvestType === harvestTypeNone && contentSource.harvestType === initialHarvestType)\"\n            (click)=\"onSubmit()\"><i\n      class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n    </button>\n  </div>\n  <h4>{{ 'collection.edit.tabs.source.head' | translate }}</h4>\n  <div *ngIf=\"contentSource\" class=\"form-check mb-4\">\n    <input type=\"checkbox\" class=\"form-check-input\" id=\"externalSourceCheck\" [checked]=\"(contentSource?.harvestType !== harvestTypeNone)\" (change)=\"changeExternalSource()\">\n    <label class=\"form-check-label\" for=\"externalSourceCheck\">{{ 'collection.edit.tabs.source.external' | translate }}</label>\n  </div>\n  <ds-loading *ngIf=\"!contentSource\" [message]=\"'loading.content-source' | translate\"></ds-loading>\n  <h4 *ngIf=\"contentSource && (contentSource?.harvestType !== harvestTypeNone)\">{{ 'collection.edit.tabs.source.form.head' | translate }}</h4>\n</div>\n<ds-form *ngIf=\"formGroup && contentSource && (contentSource?.harvestType !== harvestTypeNone)\"\n         [formId]=\"'collection-source-form-id'\"\n         [formGroup]=\"formGroup\"\n         [formModel]=\"formModel\"\n         [formLayout]=\"formLayout\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"\n         (submitForm)=\"onSubmit()\"\n         (cancel)=\"onCancel()\"></ds-form>\n<div class=\"container-fluid\" *ngIf=\"(contentSource?.harvestType !== harvestTypeNone)\">\n  <div class=\"d-inline-block float-right\">\n    <button class=\" btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async)\"\n            (click)=\"discard()\"><i\n      class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n      class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || !isValid() || (initialHarvestType === harvestTypeNone && contentSource.harvestType === initialHarvestType)\"\n            (click)=\"onSubmit()\"><i\n      class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n    </button>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractTrackableComponent } from '../../../shared/trackable/abstract-trackable.component';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicOptionControlModel,\n  DynamicRadioGroupModel,\n  DynamicSelectModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { Location } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { FormGroup } from '@angular/forms';\nimport { hasNoValue, hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { ContentSource, ContentSourceHarvestType } from '../../../core/shared/content-source.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { first, map, switchMap, take } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FieldUpdate, FieldUpdates } from '../../../core/data/object-updates/object-updates.reducer';\nimport { cloneDeep } from 'lodash';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { getFirstSucceededRemoteData, getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { MetadataConfig } from '../../../core/shared/metadata-config.model';\nimport { INotification } from '../../../shared/notifications/models/notification.model';\nimport { RequestService } from '../../../core/data/request.service';\nimport { environment } from '../../../../environments/environment';\n\n/**\n * Component for managing the content source of the collection\n */\n@Component({\n  selector: 'ds-collection-source',\n  templateUrl: './collection-source.component.html',\n})\nexport class CollectionSourceComponent extends AbstractTrackableComponent implements OnInit, OnDestroy {\n  /**\n   * The current collection's remote data\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The collection's content source\n   */\n  contentSource: ContentSource;\n\n  /**\n   * The current update to the content source\n   */\n  update$: Observable<FieldUpdate>;\n\n  /**\n   * The initial harvest type we started off with\n   * Used to compare changes\n   */\n  initialHarvestType: ContentSourceHarvestType;\n\n  /**\n   * @type {string} Key prefix used to generate form labels\n   */\n  LABEL_KEY_PREFIX = 'collection.edit.tabs.source.form.';\n\n  /**\n   * @type {string} Key prefix used to generate form error messages\n   */\n  ERROR_KEY_PREFIX = 'collection.edit.tabs.source.form.errors.';\n\n  /**\n   * @type {string} Key prefix used to generate form option labels\n   */\n  OPTIONS_KEY_PREFIX = 'collection.edit.tabs.source.form.options.';\n\n  /**\n   * The Dynamic Input Model for the OAI Provider\n   */\n  oaiSourceModel = new DynamicInputModel({\n    id: 'oaiSource',\n    name: 'oaiSource',\n    required: true,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must provide a set id of the target collection.'\n    }\n  });\n\n  /**\n   * The Dynamic Input Model for the OAI Set\n   */\n  oaiSetIdModel = new DynamicInputModel({\n    id: 'oaiSetId',\n    name: 'oaiSetId'\n  });\n\n  /**\n   * The Dynamic Input Model for the Metadata Format used\n   */\n  metadataConfigIdModel = new DynamicSelectModel({\n    id: 'metadataConfigId',\n    name: 'metadataConfigId'\n  });\n\n  /**\n   * The Dynamic Input Model for the type of harvesting\n   */\n  harvestTypeModel = new DynamicRadioGroupModel<string>({\n    id: 'harvestType',\n    name: 'harvestType',\n    options: [\n      {\n        value: ContentSourceHarvestType.Metadata\n      },\n      {\n        value: ContentSourceHarvestType.MetadataAndRef\n      },\n      {\n        value: ContentSourceHarvestType.MetadataAndBitstreams\n      }\n    ]\n  });\n\n  /**\n   * All input models in a simple array for easier iterations\n   */\n  inputModels = [this.oaiSourceModel, this.oaiSetIdModel, this.metadataConfigIdModel, this.harvestTypeModel];\n\n  /**\n   * The dynamic form fields used for editing the content source of a collection\n   * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicFormGroupModel({\n      id: 'oaiSourceContainer',\n      group: [\n        this.oaiSourceModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'oaiSetContainer',\n      group: [\n        this.oaiSetIdModel,\n        this.metadataConfigIdModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'harvestTypeContainer',\n      group: [\n        this.harvestTypeModel\n      ]\n    })\n  ];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    oaiSource: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    oaiSetId: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    metadataConfigId: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    harvestType: {\n      grid: {\n        host: 'col-12',\n        option: 'btn-outline-secondary'\n      }\n    },\n    oaiSetContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    oaiSourceContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    harvestTypeContainer: {\n      grid: {\n        host: 'row'\n      }\n    }\n  };\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Subscription to update the current form\n   */\n  updateSub: Subscription;\n\n  /**\n   * The content harvesting type used when harvesting is disabled\n   */\n  harvestTypeNone = ContentSourceHarvestType.None;\n\n  /**\n   * The previously selected harvesting type\n   * Used for switching between ContentSourceHarvestType.None and the previously selected value when enabling / disabling harvesting\n   * Defaults to ContentSourceHarvestType.Metadata\n   */\n  previouslySelectedHarvestType = ContentSourceHarvestType.Metadata;\n\n  /**\n   * Notifications displayed after clicking submit\n   * These are cleaned up every time a user submits the form to prevent error or other notifications from staying active\n   * while they shouldn't be.\n   */\n  displayedNotifications: INotification[] = [];\n\n  public constructor(public objectUpdatesService: ObjectUpdatesService,\n                     public notificationsService: NotificationsService,\n                     protected location: Location,\n                     protected formService: DynamicFormService,\n                     protected translate: TranslateService,\n                     protected route: ActivatedRoute,\n                     protected router: Router,\n                     protected collectionService: CollectionDataService,\n                     protected requestService: RequestService) {\n    super(objectUpdatesService, notificationsService, translate);\n  }\n\n  /**\n   * Initialize properties to setup the Field Update and Form\n   */\n  ngOnInit(): void {\n    this.notificationsPrefix = 'collection.edit.tabs.source.notifications.';\n    this.discardTimeOut = environment.collection.edit.undoTimeout;\n    this.url = this.router.url;\n    if (this.url.indexOf('?') > 0) {\n      this.url = this.url.substr(0, this.url.indexOf('?'));\n    }\n    this.formGroup = this.formService.createFormGroup(this.formModel);\n    this.collectionRD$ = this.route.parent.data.pipe(first(), map((data) => data.dso));\n\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.getContentSource(uuid)),\n      getFirstCompletedRemoteData(),\n    ).subscribe((rd: RemoteData<ContentSource>) => {\n      this.initializeOriginalContentSource(rd.payload);\n    });\n\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n  }\n\n  /**\n   * Initialize the Field Update and subscribe on it to fire updates to the form whenever it changes\n   */\n  initializeOriginalContentSource(contentSource: ContentSource) {\n    this.contentSource = contentSource;\n    this.initialHarvestType = contentSource.harvestType;\n    this.initializeMetadataConfigs();\n    const initialContentSource = cloneDeep(this.contentSource);\n    this.objectUpdatesService.initialize(this.url, [initialContentSource], new Date());\n    this.update$ = this.objectUpdatesService.getFieldUpdates(this.url, [initialContentSource]).pipe(\n      map((updates: FieldUpdates) => updates[initialContentSource.uuid])\n    );\n    this.updateSub = this.update$.subscribe((update: FieldUpdate) => {\n      if (update) {\n        const field = update.field as ContentSource;\n        let configId;\n        if (hasValue(this.contentSource) && isNotEmpty(this.contentSource.metadataConfigs)) {\n          configId = this.contentSource.metadataConfigs[0].id;\n        }\n        if (hasValue(field) && hasValue(field.metadataConfigId)) {\n          configId = field.metadataConfigId;\n        }\n        if (hasValue(field)) {\n          this.formGroup.patchValue({\n            oaiSourceContainer: {\n              oaiSource: field.oaiSource\n            },\n            oaiSetContainer: {\n              oaiSetId: field.oaiSetId,\n              metadataConfigId: configId\n            },\n            harvestTypeContainer: {\n              harvestType: field.harvestType\n            }\n          });\n          this.contentSource = cloneDeep(field);\n        }\n        this.contentSource.metadataConfigId = configId;\n      }\n    });\n  }\n\n  /**\n   * Fill the metadataConfigIdModel's options using the contentSource's metadataConfigs property\n   */\n  initializeMetadataConfigs() {\n    this.metadataConfigIdModel.options = this.contentSource.metadataConfigs\n      .map((metadataConfig: MetadataConfig) => Object.assign({ value: metadataConfig.id, label: metadataConfig.label }));\n    if (this.metadataConfigIdModel.options.length > 0) {\n      this.formGroup.patchValue({\n        oaiSetContainer: {\n          metadataConfigId: this.metadataConfigIdModel.options[0].value\n        }\n      });\n    }\n  }\n\n  /**\n   * Used the update translations of errors and labels on init and on language change\n   */\n  private updateFieldTranslations() {\n    this.inputModels.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        this.updateFieldTranslation(fieldModel);\n      }\n    );\n  }\n\n  /**\n   * Update the translations of a DynamicInputModel\n   * @param fieldModel\n   */\n  private updateFieldTranslation(fieldModel: DynamicFormControlModel) {\n    fieldModel.label = this.translate.instant(this.LABEL_KEY_PREFIX + fieldModel.id);\n    if (isNotEmpty(fieldModel.validators)) {\n      fieldModel.errorMessages = {};\n      Object.keys(fieldModel.validators).forEach((key) => {\n        fieldModel.errorMessages[key] = this.translate.instant(this.ERROR_KEY_PREFIX + fieldModel.id + '.' + key);\n      });\n    }\n    if (fieldModel instanceof DynamicOptionControlModel) {\n      if (isNotEmpty(fieldModel.options)) {\n        fieldModel.options.forEach((option) => {\n          if (hasNoValue(option.label)) {\n            option.label = this.translate.instant(this.OPTIONS_KEY_PREFIX + fieldModel.id + '.' + option.value);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Fired whenever the form receives an update and makes sure the Content Source and field update is up-to-date with the changes\n   * @param event\n   */\n  onChange(event) {\n    this.updateContentSourceField(event.model, true);\n    this.saveFieldUpdate();\n  }\n\n  /**\n   * Submit the edited Content Source to the REST API, re-initialize the field update and display a notification\n   */\n  onSubmit() {\n    // Remove cached harvester request to allow for latest harvester to be displayed when switching tabs\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.getHarvesterEndpoint(uuid)),\n      take(1)\n    ).subscribe((endpoint) => this.requestService.removeByHrefSubstring(endpoint));\n\n    // Update harvester\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.updateContentSource(uuid, this.contentSource)),\n      take(1)\n    ).subscribe((result: ContentSource | INotification) => {\n      if (hasValue((result as any).harvestType)) {\n        this.clearNotifications();\n        this.initializeOriginalContentSource(result as ContentSource);\n        this.displayedNotifications.push(this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved')));\n      } else {\n        this.displayedNotifications.push(result as INotification);\n      }\n    });\n  }\n\n  /**\n   * Cancel the edit and return to the previous page\n   */\n  onCancel() {\n    this.location.back();\n  }\n\n  /**\n   * Is the current form valid to be submitted ?\n   */\n  isValid(): boolean {\n    return (this.contentSource.harvestType === ContentSourceHarvestType.None) || this.formGroup.valid;\n  }\n\n  /**\n   * Switch the external source on or off and fire a field update\n   */\n  changeExternalSource() {\n    if (this.contentSource.harvestType === ContentSourceHarvestType.None) {\n      this.contentSource.harvestType = this.previouslySelectedHarvestType;\n    } else {\n      this.previouslySelectedHarvestType = this.contentSource.harvestType;\n      this.contentSource.harvestType = ContentSourceHarvestType.None;\n    }\n    this.updateContentSource(false);\n  }\n\n  /**\n   * Loop over all inputs and update the Content Source with their value\n   * @param updateHarvestType   When set to false, the harvestType of the contentSource will be ignored in the update\n   */\n  updateContentSource(updateHarvestType: boolean) {\n    this.inputModels.forEach(\n      (fieldModel: DynamicInputModel) => {\n        this.updateContentSourceField(fieldModel, updateHarvestType);\n      }\n    );\n    this.saveFieldUpdate();\n  }\n\n  /**\n   * Update the Content Source with the value from a DynamicInputModel\n   * @param fieldModel          The fieldModel to fetch the value from and update the contentSource with\n   * @param updateHarvestType   When set to false, the harvestType of the contentSource will be ignored in the update\n   */\n  updateContentSourceField(fieldModel: DynamicInputModel, updateHarvestType: boolean) {\n    if (hasValue(fieldModel.value) && !(fieldModel.id === this.harvestTypeModel.id && !updateHarvestType)) {\n      this.contentSource[fieldModel.id] = fieldModel.value;\n    }\n  }\n\n  /**\n   * Save the current Content Source to the Object Updates cache\n   */\n  saveFieldUpdate() {\n    this.objectUpdatesService.saveAddFieldUpdate(this.url, cloneDeep(this.contentSource));\n  }\n\n  /**\n   * Clear possible active notifications\n   */\n  clearNotifications() {\n    this.displayedNotifications.forEach((notification: INotification) => {\n      this.notificationsService.remove(notification);\n    });\n    this.displayedNotifications = [];\n  }\n\n  /**\n   * Make sure open subscriptions are closed\n   */\n  ngOnDestroy(): void {\n    if (this.updateSub) {\n      this.updateSub.unsubscribe();\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { filter, map, take } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { hasValue } from '../../../shared/empty.util';\n\n/**\n * Component for managing a collection's curation tasks\n */\n@Component({\n  selector: 'ds-collection-curate',\n  templateUrl: './collection-curate.component.html',\n})\nexport class CollectionCurateComponent {\n  dsoRD$: Observable<RemoteData<Collection>>;\n  collectionName$: Observable<string>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dsoNameService: DSONameService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      take(1),\n      map((data) => data.dso),\n    );\n\n    this.collectionName$ = this.dsoRD$.pipe(\n      filter((rd: RemoteData<Collection>) => hasValue(rd)),\n      map((rd: RemoteData<Collection>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n  }\n}\n","<div class=\"container\">\n    <h3>{{'collection.curate.header' |translate:{collection: (collectionName$ |async)} }}</h3>\n    <ds-curation-form\n            [dsoHandle]=\"(dsoRD$|async)?.payload.handle\"\n    ></ds-curation-form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\n\n@Component({\n  selector: 'ds-collection-authorizations',\n  templateUrl: './collection-authorizations.component.html',\n})\n/**\n * Component that handles the Collection Authorizations\n */\nexport class CollectionAuthorizationsComponent<TDomain extends DSpaceObject> implements OnInit {\n\n  /**\n   * The initial DSO object\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the collection\n   */\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.parent.data.pipe(first(), map((data) => data.dso));\n  }\n}\n","<div class=\"container\">\n  <ds-resource-policies [resourceType]=\"'collection'\" [resourceUUID]=\"(dsoRD$ | async)?.payload?.id\"></ds-resource-policies>\n</div>\n","import { Injectable } from '@angular/core';\nimport { SingleFeatureAuthorizationGuard } from './single-feature-authorization.guard';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../../../auth/auth.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../feature-id';\n\n/**\n * Prevent unauthorized activating and loading of routes when the current authenticated user\n * isn't a Collection administrator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollectionAdministratorGuard extends SingleFeatureAuthorizationGuard {\n  constructor(protected authorizationService: AuthorizationDataService, protected router: Router, protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check group management rights\n   */\n  getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.IsCollectionAdmin);\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CollectionItemMapperComponent } from '../collection-item-mapper/collection-item-mapper.component';\nimport { EditCollectionPageComponent } from './edit-collection-page.component';\nimport { CollectionMetadataComponent } from './collection-metadata/collection-metadata.component';\nimport { CollectionRolesComponent } from './collection-roles/collection-roles.component';\nimport { CollectionSourceComponent } from './collection-source/collection-source.component';\nimport { CollectionCurateComponent } from './collection-curate/collection-curate.component';\nimport { CollectionAuthorizationsComponent } from './collection-authorizations/collection-authorizations.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ResourcePolicyTargetResolver } from '../../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyCreateComponent } from '../../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyResolver } from '../../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyEditComponent } from '../../shared/resource-policies/edit/resource-policy-edit.component';\nimport { CollectionAdministratorGuard } from '../../core/data/feature-authorization/feature-authorization-guard/collection-administrator.guard';\n\n/**\n * Routing module that handles the routing for the Edit Collection page administrator functionality\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { breadcrumbKey: 'collection.edit' },\n        component: EditCollectionPageComponent,\n        canActivate: [CollectionAdministratorGuard],\n        children: [\n          {\n            path: '',\n            redirectTo: 'metadata',\n            pathMatch: 'full'\n          },\n          {\n            path: 'metadata',\n            component: CollectionMetadataComponent,\n            data: {\n              title: 'collection.edit.tabs.metadata.title',\n              hideReturnButton: true,\n              showBreadcrumbs: true\n            }\n          },\n          {\n            path: 'roles',\n            component: CollectionRolesComponent,\n            data: { title: 'collection.edit.tabs.roles.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'source',\n            component: CollectionSourceComponent,\n            data: { title: 'collection.edit.tabs.source.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'curate',\n            component: CollectionCurateComponent,\n            data: { title: 'collection.edit.tabs.curate.title', showBreadcrumbs: true }\n          },\n/*          {\n            path: 'authorizations',\n            component: CollectionAuthorizationsComponent,\n            data: { title: 'collection.edit.tabs.authorizations.title', showBreadcrumbs: true }\n          },*/\n          {\n            path: 'authorizations',\n            data: { showBreadcrumbs: true },\n            children: [\n              {\n                path: 'create',\n                resolve: {\n                  resourcePolicyTarget: ResourcePolicyTargetResolver\n                },\n                component: ResourcePolicyCreateComponent,\n                data: { title: 'resource-policies.create.page.title' }\n              },\n              {\n                path: 'edit',\n                resolve: {\n                  resourcePolicy: ResourcePolicyResolver\n                },\n                component: ResourcePolicyEditComponent,\n                data: { title: 'resource-policies.edit.page.title' }\n              },\n              {\n                path: '',\n                component: CollectionAuthorizationsComponent,\n                data: { title: 'collection.edit.tabs.authorizations.title', showBreadcrumbs: true }\n              }\n            ]\n          },\n          {\n            path: 'mapper',\n            component: CollectionItemMapperComponent,\n            data: { title: 'collection.edit.tabs.item-mapper.title', hideReturnButton: true, showBreadcrumbs: true }\n          },\n        ]\n      }\n    ])\n  ],\n  providers: [\n    ResourcePolicyResolver,\n    ResourcePolicyTargetResolver\n  ]\n})\nexport class EditCollectionPageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { EditCollectionPageComponent } from './edit-collection-page.component';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { EditCollectionPageRoutingModule } from './edit-collection-page.routing.module';\nimport { CollectionMetadataComponent } from './collection-metadata/collection-metadata.component';\nimport { CollectionRolesComponent } from './collection-roles/collection-roles.component';\nimport { CollectionCurateComponent } from './collection-curate/collection-curate.component';\nimport { CollectionSourceComponent } from './collection-source/collection-source.component';\nimport { CollectionAuthorizationsComponent } from './collection-authorizations/collection-authorizations.component';\nimport { CollectionFormModule } from '../collection-form/collection-form.module';\n\n/**\n * Module that contains all components related to the Edit Collection page administrator functionality\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    EditCollectionPageRoutingModule,\n    CollectionFormModule\n  ],\n  declarations: [\n    EditCollectionPageComponent,\n    CollectionMetadataComponent,\n    CollectionRolesComponent,\n    CollectionCurateComponent,\n    CollectionSourceComponent,\n    CollectionAuthorizationsComponent\n  ]\n})\nexport class EditCollectionPageModule {\n\n}\n"]}