{"version":3,"sources":["webpack:///src/app/community-list-page/community-list-service.ts","webpack:///src/app/community-list-page/community-list-datasource.ts","webpack:///src/app/community-list-page/community-list/community-list.component.html","webpack:///src/app/community-list-page/community-list/community-list.component.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/community-list-page/themed-community-list-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/community-list-page/community-list-page.routing.module.ts","webpack:///src/app/community-list-page/community-list-page.module.ts","webpack:///src/app/community-list-page/community-list-page.component.ts","webpack:///src/app/community-list-page/community-list-page.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/community\\-list\\-page\\/community\\-list\\-page\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["ShowMoreFlatNode","combineAndFlatten","obsList","pipe","matrix","concat","arr","every","e","toFlatNode","c","isExpandable","level","isExpanded","parent","isExpandable$","name","id","payload","isShowMoreNode","route","showMoreFlatNode","communityListStateSelector","state","communityList","expandedNodesSelector","expandedNodes","loadingNodeSelector","loadingNode","CommunityListService","communityDataService","collectionDataService","store","configOnePage","Object","assign","elementsPerPage","this","dispatch","select","findOptions","currentPage","topCommunities","i","pagination","push","getTopCommunities","coms","newPages","map","unit","page","newPage","newPageInfo","length","pageInfo","b","topComs","transformListOfCommunities","options","findTop","sort","field","direction","results","listOfPaginatedCommunities","find","node","currentCommunityPage","community","transformCommunity","totalPages","getIsExpandable","communityFlatNode","subcoms","nextSetOfSubcommunitiesPage","findByParent","uuid","g","rd","currentCollectionPage","collections","nextSetOfCollectionsPage","nodes","collection","hasSubcoms$","hasColls$","hasChildren$","totalElements","hasSubcoms","hasColls","communityListService","communityList$","BehaviorSubject","loading$","collectionViewer","asObservable","next","subLoadCommunities","unsubscribe","loadCommunities","finalize","subscribe","flatNodes","complete","CommunityListComponent","treeControl","paginationConfig","ASC","dataSource","getLoadingNodeFromStore","take","result","getExpandedNodesFromStore","saveCommunityListStateToStore","_","filter","node2","I18nBreadcrumbResolver","breadcrumbService","key","data","breadcrumbKey","Error","url","fullPath","provider","ThemedCommunityListPageComponent","themeName","CommunityListPageRoutingModule","forChild","path","component","pathMatch","resolve","breadcrumb","title","CommunityListPageModule","CommunityListPageComponent","webpackAsyncContext","req","__webpack_require__","o","Promise","then","code","ids","keys","module","exports","I18nBreadcrumbsService","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { createSelector, Store } from '@ngrx/store';\n\nimport { combineLatest as observableCombineLatest, Observable, of as observableOf } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport { AppState } from '../app.reducer';\nimport { CommunityDataService } from '../core/data/community-data.service';\nimport { FindListOptions } from '../core/data/request.models';\nimport { Community } from '../core/shared/community.model';\nimport { Collection } from '../core/shared/collection.model';\nimport { PageInfo } from '../core/shared/page-info.model';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { RemoteData } from '../core/data/remote-data';\nimport { PaginatedList, buildPaginatedList } from '../core/data/paginated-list.model';\nimport { CollectionDataService } from '../core/data/collection-data.service';\nimport { CommunityListSaveAction } from './community-list.actions';\nimport { CommunityListState } from './community-list.reducer';\nimport { getCommunityPageRoute } from '../+community-page/community-page-routing-paths';\nimport { getCollectionPageRoute } from '../+collection-page/collection-page-routing-paths';\nimport { getFirstSucceededRemoteData, getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { followLink } from '../shared/utils/follow-link-config.model';\n\n/**\n * Each node in the tree is represented by a flatNode which contains info about the node itself and its position and\n *  state in the tree. There are nodes representing communities, collections and show more links.\n */\nexport interface FlatNode {\n  isExpandable$: Observable<boolean>;\n  name: string;\n  id: string;\n  level: number;\n  isExpanded?: boolean;\n  parent?: FlatNode;\n  payload: Community | Collection | ShowMoreFlatNode;\n  isShowMoreNode: boolean;\n  route?: string;\n  currentCommunityPage?: number;\n  currentCollectionPage?: number;\n}\n\n/**\n * The show more links in the community tree are also represented by a flatNode so we know where in\n *  the tree it should be rendered an who its parent is (needed for the action resulting in clicking this link)\n */\nexport class ShowMoreFlatNode {\n}\n\n// Helper method to combine an flatten an array of observables of flatNode arrays\nexport const combineAndFlatten = (obsList: Observable<FlatNode[]>[]): Observable<FlatNode[]> =>\n  observableCombineLatest([...obsList]).pipe(\n    map((matrix: any[][]) => [].concat(...matrix)),\n    filter((arr: any[]) => arr.every((e) => hasValue(e))),\n  );\n\n/**\n * Creates a flatNode from a community or collection\n * @param c               The community or collection this flatNode represents\n * @param isExpandable    Whether or not this node is expandable (true if it has children)\n * @param level           Level indicating how deep in the tree this node should be rendered\n * @param isExpanded      Whether or not this node already is expanded\n * @param parent          Parent of this node (flatNode representing its parent community)\n */\nexport const toFlatNode = (\n  c: Community | Collection,\n  isExpandable: Observable<boolean>,\n  level: number,\n  isExpanded: boolean,\n  parent?: FlatNode\n): FlatNode => ({\n  isExpandable$: isExpandable,\n  name: c.name,\n  id: c.id,\n  level: level,\n  isExpanded,\n  parent,\n  payload: c,\n  isShowMoreNode: false,\n  route: c instanceof Community ? getCommunityPageRoute(c.id) : getCollectionPageRoute(c.id),\n});\n\n/**\n * Creates a show More flatnode where only the level and parent are of importance\n */\nexport const showMoreFlatNode = (\n  id: string,\n  level: number,\n  parent: FlatNode\n): FlatNode => ({\n  isExpandable$: observableOf(false),\n  name: 'Show More Flatnode',\n  id: id,\n  level: level,\n  isExpanded: false,\n  parent: parent,\n  payload: new ShowMoreFlatNode(),\n  isShowMoreNode: true,\n});\n\n// Selectors the get the communityList data out of the store\nconst communityListStateSelector = (state: AppState) => state.communityList;\nconst expandedNodesSelector = createSelector(communityListStateSelector, (communityList: CommunityListState) => communityList.expandedNodes);\nconst loadingNodeSelector = createSelector(communityListStateSelector, (communityList: CommunityListState) => communityList.loadingNode);\n\nexport const MAX_COMCOLS_PER_PAGE = 20;\n\n/**\n * Service class for the community list, responsible for the creating of the flat list used by communityList dataSource\n *  and connection to the store to retrieve and save the state of the community list\n */\n// tslint:disable-next-line:max-classes-per-file\n@Injectable()\nexport class CommunityListService {\n\n  constructor(private communityDataService: CommunityDataService, private collectionDataService: CollectionDataService,\n              private store: Store<any>) {\n  }\n\n  private configOnePage: FindListOptions = Object.assign(new FindListOptions(), {\n    elementsPerPage: 1\n  });\n\n  saveCommunityListStateToStore(expandedNodes: FlatNode[], loadingNode: FlatNode): void {\n    this.store.dispatch(new CommunityListSaveAction(expandedNodes, loadingNode));\n  }\n\n  getExpandedNodesFromStore(): Observable<FlatNode[]> {\n    return this.store.select(expandedNodesSelector);\n  }\n\n  getLoadingNodeFromStore(): Observable<FlatNode> {\n    return this.store.select(loadingNodeSelector);\n  }\n\n  /**\n   * Gets all top communities, limited by page, and transforms this in a list of flatNodes.\n   * @param findOptions       FindListOptions\n   * @param expandedNodes     List of expanded nodes; if a node is not expanded its subCommunities and collections need\n   *                            not be added to the list\n   */\n  loadCommunities(findOptions: FindListOptions, expandedNodes: FlatNode[]): Observable<FlatNode[]> {\n    const currentPage = findOptions.currentPage;\n    const topCommunities = [];\n    for (let i = 1; i <= currentPage; i++) {\n      const pagination: FindListOptions = Object.assign({}, findOptions, { currentPage: i });\n      topCommunities.push(this.getTopCommunities(pagination));\n    }\n    const topComs$ = observableCombineLatest([...topCommunities]).pipe(\n      map((coms: PaginatedList<Community>[]) => {\n        const newPages: Community[][] = coms.map((unit: PaginatedList<Community>) => unit.page);\n        const newPage: Community[] = [].concat(...newPages);\n        let newPageInfo = new PageInfo();\n        if (coms && coms.length > 0) {\n          newPageInfo = Object.assign({}, coms[0].pageInfo, { currentPage });\n        }\n        return buildPaginatedList(newPageInfo, newPage);\n      })\n    );\n    return topComs$.pipe(\n      switchMap((topComs: PaginatedList<Community>) => this.transformListOfCommunities(topComs, 0, null, expandedNodes)),\n      // distinctUntilChanged((a: FlatNode[], b: FlatNode[]) => a.length === b.length)\n    );\n  }\n\n  /**\n   * Puts the initial top level communities in a list to be called upon\n   */\n  private getTopCommunities(options: FindListOptions): Observable<PaginatedList<Community>> {\n    return this.communityDataService.findTop({\n        currentPage: options.currentPage,\n        elementsPerPage: MAX_COMCOLS_PER_PAGE,\n        sort: {\n          field: options.sort.field,\n          direction: options.sort.direction\n        }\n      },\n      followLink('subcommunities', this.configOnePage, true, true),\n      followLink('collections', this.configOnePage, true, true))\n      .pipe(\n        getFirstSucceededRemoteData(),\n        map((results) => results.payload),\n      );\n  }\n\n  /**\n   * Transforms a list of communities to a list of FlatNodes according to the instructions detailed in transformCommunity\n   * @param listOfPaginatedCommunities    Paginated list of communities to be transformed\n   * @param level                         Level the tree is currently at\n   * @param parent                        FlatNode of the parent of this list of communities\n   * @param expandedNodes                 List of expanded nodes; if a node is not expanded its subcommunities and collections need not be added to the list\n   */\n  public transformListOfCommunities(listOfPaginatedCommunities: PaginatedList<Community>,\n                                    level: number,\n                                    parent: FlatNode,\n                                    expandedNodes: FlatNode[]): Observable<FlatNode[]> {\n    if (isNotEmpty(listOfPaginatedCommunities.page)) {\n      let currentPage = listOfPaginatedCommunities.currentPage;\n      if (isNotEmpty(parent)) {\n        currentPage = expandedNodes.find((node: FlatNode) => node.id === parent.id).currentCommunityPage;\n      }\n      let obsList = listOfPaginatedCommunities.page\n        .map((community: Community) => {\n          return this.transformCommunity(community, level, parent, expandedNodes);\n        });\n      if (currentPage < listOfPaginatedCommunities.totalPages && currentPage === listOfPaginatedCommunities.currentPage) {\n        obsList = [...obsList, observableOf([showMoreFlatNode('community', level, parent)])];\n      }\n\n      return combineAndFlatten(obsList);\n    } else {\n      return observableOf([]);\n    }\n  }\n\n  /**\n   * Transforms a community in a list of FlatNodes containing firstly a flatnode of the community itself,\n   *      followed by flatNodes of its possible subcommunities and collection\n   * It gets called recursively for each subcommunity to add its subcommunities and collections to the list\n   * Number of subcommunities and collections added, is dependant on the current page the parent is at for respectively subcommunities and collections.\n   * @param community         Community being transformed\n   * @param level             Depth of the community in the list, subcommunities and collections go one level deeper\n   * @param parent            Flatnode of the parent community\n   * @param expandedNodes     List of nodes which are expanded, if node is not expanded, it need not add its page-limited subcommunities or collections\n   */\n  public transformCommunity(community: Community, level: number, parent: FlatNode, expandedNodes: FlatNode[]): Observable<FlatNode[]> {\n    let isExpanded = false;\n    if (isNotEmpty(expandedNodes)) {\n      isExpanded = hasValue(expandedNodes.find((node) => (node.id === community.id)));\n    }\n\n    const isExpandable$ = this.getIsExpandable(community);\n\n    const communityFlatNode = toFlatNode(community, isExpandable$, level, isExpanded, parent);\n\n    let obsList = [observableOf([communityFlatNode])];\n\n    if (isExpanded) {\n      const currentCommunityPage = expandedNodes.find((node: FlatNode) => node.id === community.id).currentCommunityPage;\n      let subcoms = [];\n      for (let i = 1; i <= currentCommunityPage; i++) {\n        const nextSetOfSubcommunitiesPage = this.communityDataService.findByParent(community.uuid, {\n            elementsPerPage: MAX_COMCOLS_PER_PAGE,\n            currentPage: i\n          },\n          followLink('subcommunities', this.configOnePage, true, true),\n          followLink('collections', this.configOnePage, true, true))\n          .pipe(\n            getFirstCompletedRemoteData(),\n            switchMap((rd: RemoteData<PaginatedList<Community>>) => {\n              if (hasValue(rd) && hasValue(rd.payload)) {\n                return this.transformListOfCommunities(rd.payload, level + 1, communityFlatNode, expandedNodes);\n              } else {\n                return observableOf([]);\n              }\n            })\n          );\n\n        subcoms = [...subcoms, nextSetOfSubcommunitiesPage];\n      }\n\n      obsList = [...obsList, combineAndFlatten(subcoms)];\n\n      const currentCollectionPage = expandedNodes.find((node: FlatNode) => node.id === community.id).currentCollectionPage;\n      let collections = [];\n      for (let i = 1; i <= currentCollectionPage; i++) {\n        const nextSetOfCollectionsPage = this.collectionDataService.findByParent(community.uuid, {\n          elementsPerPage: MAX_COMCOLS_PER_PAGE,\n          currentPage: i\n        })\n          .pipe(\n            getFirstCompletedRemoteData(),\n            map((rd: RemoteData<PaginatedList<Collection>>) => {\n              if (hasValue(rd) && hasValue(rd.payload)) {\n                let nodes = rd.payload.page\n                  .map((collection: Collection) => toFlatNode(collection, observableOf(false), level + 1, false, communityFlatNode));\n                if (currentCollectionPage < rd.payload.totalPages && currentCollectionPage === rd.payload.currentPage) {\n                  nodes = [...nodes, showMoreFlatNode('collection', level + 1, communityFlatNode)];\n                }\n                return nodes;\n              } else {\n                return [];\n              }\n            }),\n          );\n        collections = [...collections, nextSetOfCollectionsPage];\n      }\n      obsList = [...obsList, combineAndFlatten(collections)];\n    }\n\n    return combineAndFlatten(obsList);\n  }\n\n  /**\n   * Checks if a community has subcommunities or collections by querying the respective services with a pageSize = 0\n   *      Returns an observable that combines the result.payload.totalElements fo the observables that the\n   *          respective services return when queried\n   * @param community     Community being checked whether it is expandable (if it has subcommunities or collections)\n   */\n  public getIsExpandable(community: Community): Observable<boolean> {\n    let hasSubcoms$: Observable<boolean>;\n    let hasColls$: Observable<boolean>;\n    hasSubcoms$ = this.communityDataService.findByParent(community.uuid, this.configOnePage)\n      .pipe(\n        map((rd: RemoteData<PaginatedList<Community>>) => {\n          if (hasValue(rd) && hasValue(rd.payload)) {\n            return rd.payload.totalElements > 0;\n          } else {\n            return false;\n          }\n        }),\n      );\n\n    hasColls$ = this.collectionDataService.findByParent(community.uuid, this.configOnePage)\n      .pipe(\n        map((rd: RemoteData<PaginatedList<Collection>>) => {\n          if (hasValue(rd) && hasValue(rd.payload)) {\n            return rd.payload.totalElements > 0;\n          } else {\n            return false;\n          }\n        }),\n      );\n\n    let hasChildren$: Observable<boolean>;\n    hasChildren$ = observableCombineLatest(hasSubcoms$, hasColls$).pipe(\n      map(([hasSubcoms, hasColls]: [boolean, boolean]) => hasSubcoms || hasColls)\n    );\n\n    return hasChildren$;\n  }\n\n}\n","import { Subscription } from 'rxjs/internal/Subscription';\nimport { FindListOptions } from '../core/data/request.models';\nimport { hasValue } from '../shared/empty.util';\nimport { CommunityListService, FlatNode } from './community-list-service';\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable, } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\n/**\n * DataSource object needed by a CDK Tree to render its nodes.\n * The list of FlatNodes that this DataSource object represents gets created in the CommunityListService at\n *    the beginning (initial page-limited top communities) and re-calculated any time the tree state changes\n *    (a node gets expanded or page-limited result become larger by triggering a show more node)\n */\nexport class CommunityListDatasource implements DataSource<FlatNode> {\n\n  private communityList$ = new BehaviorSubject<FlatNode[]>([]);\n  public loading$ = new BehaviorSubject<boolean>(false);\n  private subLoadCommunities: Subscription;\n\n  constructor(private communityListService: CommunityListService) {\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<FlatNode[]> {\n    return this.communityList$.asObservable();\n  }\n\n  loadCommunities(findOptions: FindListOptions, expandedNodes: FlatNode[]) {\n    this.loading$.next(true);\n    if (hasValue(this.subLoadCommunities)) {\n      this.subLoadCommunities.unsubscribe();\n    }\n    this.subLoadCommunities = this.communityListService.loadCommunities(findOptions, expandedNodes).pipe(\n      finalize(() => this.loading$.next(false)),\n    ).subscribe((flatNodes: FlatNode[]) => {\n      this.communityList$.next(flatNodes);\n    });\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {\n    this.communityList$.complete();\n    this.loading$.complete();\n  }\n\n}\n","<ds-loading *ngIf=\"(dataSource.loading$ | async) && !loadingNode\" class=\"ds-loading\"></ds-loading>\n<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for show more node -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: isShowMore\" cdkTreeNodePadding\n                 class=\"example-tree-node show-more-node\">\n    <div class=\"btn-group\">\n      <button type=\"button\" class=\"btn btn-default\" cdkTreeNodeToggle>\n        <span class=\"fa fa-chevron-right invisible\" aria-hidden=\"true\"></span>\n      </button>\n      <div class=\"align-middle pt-2\">\n        <a *ngIf=\"node!==loadingNode\" [routerLink]=\"\" (click)=\"getNextPage(node)\"\n           class=\"btn btn-outline-primary btn-sm\" role=\"button\">\n           <i class=\"fas fa-angle-down\"></i> {{ 'communityList.showMore' | translate }}\n        </a>\n        <ds-loading *ngIf=\"node===loadingNode && dataSource.loading$ | async\" class=\"ds-loading\"></ds-loading>\n      </div>\n    </div>\n    <div class=\"text-muted\" cdkTreeNodePadding>\n      <div class=\"d-flex\">\n      </div>\n    </div>\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes (coms and subcoms with children) -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 class=\"example-tree-node expandable-node\">\n    <div class=\"btn-group\">\n      <button type=\"button\" class=\"btn btn-default\" cdkTreeNodeToggle\n              [title]=\"'toggle ' + node.name\"\n              [attr.aria-label]=\"'toggle ' + node.name\"\n              (click)=\"toggleExpanded(node)\"\n              [ngClass]=\"(hasChild(null, node)| async) ? 'visible' : 'invisible'\">\n        <span class=\"{{node.isExpanded ? 'fa fa-chevron-down' : 'fa fa-chevron-right'}}\"\n              aria-hidden=\"true\"></span>\n      </button>\n      <h5 class=\"align-middle pt-2\">\n        <a [routerLink]=\"node.route\" class=\"lead\">\n          {{node.name}}\n        </a>\n      </h5>\n    </div>\n    <ds-truncatable [id]=\"node.id\">\n      <div class=\"text-muted\" cdkTreeNodePadding>\n        <div class=\"d-flex\" *ngIf=\"node.payload.shortDescription\">\n          <button type=\"button\" class=\"btn btn-default invisible\">\n            <span class=\"{{node.isExpanded ? 'fa fa-chevron-down' : 'fa fa-chevron-right'}}\"\n                  aria-hidden=\"true\"></span>\n          </button>\n          <ds-truncatable-part [id]=\"node.id\" [minLines]=\"3\">\n            <span>{{node.payload.shortDescription}}</span>\n          </ds-truncatable-part>\n        </div>\n      </div>\n    </ds-truncatable>\n    <div class=\"d-flex\" *ngIf=\"node===loadingNode && dataSource.loading$ | async\"\n         cdkTreeNodePadding>\n      <button type=\"button\" class=\"btn btn-default invisible\">\n        <span class=\"{{node.isExpanded ? 'fa fa-chevron-down' : 'fa fa-chevron-right'}}\"\n              aria-hidden=\"true\"></span>\n      </button>\n      <ds-loading class=\"ds-loading\"></ds-loading>\n    </div>\n  </cdk-tree-node>\n  <!-- This is the tree node template for leaf nodes (collections and (sub)coms without children) -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: !(hasChild && isShowMore)\" cdkTreeNodePadding\n                 class=\"example-tree-node childless-node\">\n    <div class=\"btn-group\">\n      <button type=\"button\" class=\"btn btn-default\" cdkTreeNodeToggle>\n                <span class=\"fa fa-chevron-right invisible\"\n                      aria-hidden=\"true\"></span>\n      </button>\n      <h6 class=\"align-middle pt-2\">\n        <a [routerLink]=\"node.route\" class=\"lead\">\n          {{node.name}}\n        </a>\n      </h6>\n    </div>\n    <ds-truncatable [id]=\"node.id\">\n      <div class=\"text-muted\" cdkTreeNodePadding>\n        <div class=\"d-flex\" *ngIf=\"node.payload.shortDescription\">\n          <button type=\"button\" class=\"btn btn-default invisible\">\n            <span class=\"{{node.isExpanded ? 'fa fa-chevron-down' : 'fa fa-chevron-right'}}\"\n                  aria-hidden=\"true\"></span>\n          </button>\n          <ds-truncatable-part [id]=\"node.id\" [minLines]=\"3\">\n            <span>{{node.payload.shortDescription}}</span>\n          </ds-truncatable-part>\n        </div>\n      </div>\n    </ds-truncatable>\n  </cdk-tree-node>\n</cdk-tree>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { FindListOptions } from '../../core/data/request.models';\nimport { CommunityListService, FlatNode } from '../community-list-service';\nimport { CommunityListDatasource } from '../community-list-datasource';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { isEmpty } from '../../shared/empty.util';\n\n/**\n * A tree-structured list of nodes representing the communities, their subCommunities and collections.\n * Initially only the page-restricted top communities are shown.\n * Each node can be expanded to show its children and all children are also page-limited.\n * More pages of a page-limited result can be shown by pressing a show more node/link.\n * Which nodes were expanded is kept in the store, so this persists across pages.\n */\n@Component({\n  selector: 'ds-community-list',\n  templateUrl: './community-list.component.html',\n})\nexport class CommunityListComponent implements OnInit, OnDestroy {\n\n  private expandedNodes: FlatNode[] = [];\n  public loadingNode: FlatNode;\n\n  treeControl = new FlatTreeControl<FlatNode>(\n    (node: FlatNode) => node.level, (node: FlatNode) => true\n  );\n\n  dataSource: CommunityListDatasource;\n\n  paginationConfig: FindListOptions;\n\n  constructor(private communityListService: CommunityListService) {\n    this.paginationConfig = new FindListOptions();\n    this.paginationConfig.elementsPerPage = 2;\n    this.paginationConfig.currentPage = 1;\n    this.paginationConfig.sort = new SortOptions('dc.title', SortDirection.ASC);\n  }\n\n  ngOnInit() {\n    this.dataSource = new CommunityListDatasource(this.communityListService);\n    this.communityListService.getLoadingNodeFromStore().pipe(take(1)).subscribe((result) => {\n      this.loadingNode = result;\n    });\n    this.communityListService.getExpandedNodesFromStore().pipe(take(1)).subscribe((result) => {\n      this.expandedNodes = [...result];\n      this.dataSource.loadCommunities(this.paginationConfig, this.expandedNodes);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.communityListService.saveCommunityListStateToStore(this.expandedNodes, this.loadingNode);\n  }\n\n  // whether or not this node has children (subcommunities or collections)\n  hasChild(_: number, node: FlatNode) {\n    return node.isExpandable$;\n  }\n\n  // whether or not it is a show more node (contains no data, but is indication that there are more topcoms, subcoms or collections\n  isShowMore(_: number, node: FlatNode) {\n    return node.isShowMoreNode;\n  }\n\n  /**\n   * Toggles the expanded variable of a node, adds it to the expanded nodes list and reloads the tree so this node is expanded\n   * @param node  Node we want to expand\n   */\n  toggleExpanded(node: FlatNode) {\n    this.loadingNode = node;\n    if (node.isExpanded) {\n      this.expandedNodes = this.expandedNodes.filter((node2) => node2.name !== node.name);\n      node.isExpanded = false;\n    } else {\n      this.expandedNodes.push(node);\n      node.isExpanded = true;\n      if (isEmpty(node.currentCollectionPage)) {\n        node.currentCollectionPage = 1;\n      }\n      if (isEmpty(node.currentCommunityPage)) {\n        node.currentCommunityPage = 1;\n      }\n    }\n    this.dataSource.loadCommunities(this.paginationConfig, this.expandedNodes);\n  }\n\n  /**\n   * Makes sure the next page of a node is added to the tree (top community, sub community of collection)\n   *      > Finds its parent (if not top community) and increases its corresponding collection/subcommunity currentPage\n   *      > Reloads tree with new page added to corresponding top community lis, sub community list or collection list\n   * @param node  The show more node indicating whether it's an increase in top communities, sub communities or collections\n   */\n  getNextPage(node: FlatNode): void {\n    this.loadingNode = node;\n    if (node.parent != null) {\n      if (node.id === 'collection') {\n        const parentNodeInExpandedNodes = this.expandedNodes.find((node2: FlatNode) => node.parent.id === node2.id);\n        parentNodeInExpandedNodes.currentCollectionPage++;\n      }\n      if (node.id === 'community') {\n        const parentNodeInExpandedNodes = this.expandedNodes.find((node2: FlatNode) => node.parent.id === node2.id);\n        parentNodeInExpandedNodes.currentCommunityPage++;\n      }\n      this.dataSource.loadCommunities(this.paginationConfig, this.expandedNodes);\n    } else {\n      this.paginationConfig.currentPage++;\n      this.dataSource.loadCommunities(this.paginationConfig, this.expandedNodes);\n    }\n  }\n\n}\n","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { CommunityListPageComponent } from './community-list-page.component';\n\n/**\n * Themed wrapper for CommunityListPageComponent\n */\n@Component({\n  selector: 'ds-themed-community-list-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedCommunityListPageComponent extends ThemedComponent<CommunityListPageComponent> {\n  protected getComponentName(): string {\n    return 'CommunityListPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/community-list-page/community-list-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./community-list-page.component`);\n  }\n\n}\n","<ng-template #vcr></ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CdkTreeModule } from '@angular/cdk/tree';\n\nimport { CommunityListService } from './community-list-service';\nimport { ThemedCommunityListPageComponent } from './themed-community-list-page.component';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\n\n/**\n * RouterModule to help navigate to the page with the community list tree\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ThemedCommunityListPageComponent,\n        pathMatch: 'full',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'communityList.tabTitle', breadcrumbKey: 'communityList' }\n      }\n    ]),\n    CdkTreeModule,\n  ],\n  providers: [CommunityListService]\n})\nexport class CommunityListPageRoutingModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { CommunityListPageComponent } from './community-list-page.component';\nimport { CommunityListPageRoutingModule } from './community-list-page.routing.module';\nimport { CommunityListComponent } from './community-list/community-list.component';\nimport { ThemedCommunityListPageComponent } from './themed-community-list-page.component';\n\n\nconst DECLARATIONS = [\n  CommunityListPageComponent,\n  CommunityListComponent,\n  ThemedCommunityListPageComponent\n];\n/**\n * The page which houses a title and the community list, as described in community-list.component\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    CommunityListPageRoutingModule\n  ],\n  declarations: [\n    ...DECLARATIONS\n  ],\n  exports: [\n    ...DECLARATIONS,\n  ],\n})\nexport class CommunityListPageModule {\n\n}\n","import { Component } from '@angular/core';\n\n/**\n * Page with title and the community list tree, as described in community-list.component;\n * navigated to with community-list.page.routing.module\n */\n@Component({\n  selector: 'ds-community-list-page',\n  templateUrl: './community-list-page.component.html',\n})\nexport class CommunityListPageComponent {\n\n}\n","<div class=\"container\">\n  <h2>{{ 'communityList.title' | translate }}</h2>\n  <ds-community-list></ds-community-list>\n</div>\n","var map = {\n\t\"./custom/app/community-list-page/community-list-page.component\": [\n\t\t\"hVQ3\",\n\t\t58\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"exEh\";\nmodule.exports = webpackAsyncContext;","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}