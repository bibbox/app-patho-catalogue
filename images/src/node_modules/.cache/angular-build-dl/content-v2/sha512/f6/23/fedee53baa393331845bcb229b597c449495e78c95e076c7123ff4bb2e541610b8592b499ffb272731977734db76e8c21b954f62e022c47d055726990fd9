{"version":3,"sources":["webpack:///src/themes lazy ^\\.\\/.*\\/app\\/register\\-page\\/create\\-profile\\/create\\-profile\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/register-page/register-email/register-email.component.ts","webpack:///src/app/register-page/register-email/register-email.component.html","webpack:///src/app/register-page/create-profile/themed-create-profile.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/register-page/register-page-routing.module.ts","webpack:///src/app/register-page/register-page.module.ts","webpack:///src/app/+item-page/item-page.resolver.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/+item-page/item.resolver.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","I18nBreadcrumbResolver","breadcrumbService","route","state","key","data","breadcrumbKey","url","fullPath","provider","this","RegisterEmailComponent","ThemedCreateProfileComponent","themeName","RegisterPageRoutingModule","forChild","path","component","title","registration","canActivate","RegisterPageModule","ProfilePageModule","ItemPageResolver","itemService","store","router","super","pipe","rd","hasSucceeded","payload","itemRoute","thisRoute","startsWith","itemId","uuid","subRoute","substring","indexOf","length","navigateByUrl","I18nBreadcrumbsService","ITEM_PAGE_LINKS_TO_FOLLOW","undefined","ItemResolver","itemRD$","findById","params","g","subscribe","itemRD","dispatch","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["var map = {\n\t\"./custom/app/register-page/create-profile/create-profile.component\": [\n\t\t\"yxWx\",\n\t\t9,\n\t\t68\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"5PCp\";\nmodule.exports = webpackAsyncContext;","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-register-email',\n  styleUrls: ['./register-email.component.scss'],\n  templateUrl: './register-email.component.html'\n})\n/**\n * Component responsible the email registration step when registering as a new user\n */\nexport class RegisterEmailComponent {\n\n}\n","<ds-register-email-form\n        [MESSAGE_PREFIX]=\"'register-page.registration'\">\n</ds-register-email-form>\n","import { Component } from '@angular/core';\nimport { CreateProfileComponent } from './create-profile.component';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\n\n/**\n * Themed wrapper for CreateProfileComponent\n */\n@Component({\n  selector: 'ds-themed-create-profile',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedCreateProfileComponent extends ThemedComponent<CreateProfileComponent> {\n  protected getComponentName(): string {\n    return 'CreateProfileComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/register-page/create-profile/create-profile.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./create-profile.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { RegisterEmailComponent } from './register-email/register-email.component';\nimport { ItemPageResolver } from '../+item-page/item-page.resolver';\nimport { RegistrationResolver } from '../register-email-form/registration.resolver';\nimport { EndUserAgreementCookieGuard } from '../core/end-user-agreement/end-user-agreement-cookie.guard';\nimport { ThemedCreateProfileComponent } from './create-profile/themed-create-profile.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: RegisterEmailComponent,\n        data: {title: 'register-email.title'},\n      },\n      {\n        path: ':token',\n        component: ThemedCreateProfileComponent,\n        resolve: {registration: RegistrationResolver},\n        canActivate: [EndUserAgreementCookieGuard]\n      }\n    ])\n  ],\n  providers: [\n    RegistrationResolver,\n    ItemPageResolver\n  ]\n})\n/**\n * Module related to the navigation to components used to register a new user\n */\nexport class RegisterPageRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { RegisterPageRoutingModule } from './register-page-routing.module';\nimport { RegisterEmailComponent } from './register-email/register-email.component';\nimport { CreateProfileComponent } from './create-profile/create-profile.component';\nimport { RegisterEmailFormModule } from '../register-email-form/register-email-form.module';\nimport { ProfilePageModule } from '../profile-page/profile-page.module';\nimport { ThemedCreateProfileComponent } from './create-profile/themed-create-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RegisterPageRoutingModule,\n    RegisterEmailFormModule,\n    ProfilePageModule,\n  ],\n  declarations: [\n    RegisterEmailComponent,\n    CreateProfileComponent,\n    ThemedCreateProfileComponent\n  ],\n  providers: []\n})\n\n/**\n * Module related to components used to register a new user\n */\nexport class RegisterPageModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { Store } from '@ngrx/store';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getItemPageRoute } from './item-page-routing-paths';\nimport { ItemResolver } from './item.resolver';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated and will redirect to the\n * entity page\n */\n@Injectable()\nexport class ItemPageResolver extends ItemResolver {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n    super(itemService, store, router);\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    return super.resolve(route, state).pipe(\n      map((rd: RemoteData<Item>) => {\n        if (rd.hasSucceeded && hasValue(rd.payload)) {\n          const itemRoute = getItemPageRoute(rd.payload);\n          const thisRoute = state.url;\n          if (!thisRoute.startsWith(itemRoute)) {\n            const itemId = rd.payload.uuid;\n            const subRoute = thisRoute.substring(thisRoute.indexOf(itemId) + itemId.length, thisRoute.length);\n            this.router.navigateByUrl(itemRoute + subRoute);\n          }\n        }\n        return rd;\n      })\n    );\n  }\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { FindListOptions } from '../core/data/request.models';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const ITEM_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Item>[] = [\n  followLink('owningCollection', undefined, true, true, true,\n    followLink('parentCommunity', undefined, true, true, true,\n      followLink('parentCommunity'))\n  ),\n  followLink('bundles', new FindListOptions(), true, true, true, followLink('bitstreams')),\n  followLink('relationships'),\n  followLink('version', undefined, true, true, true, followLink('versionhistory')),\n];\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ItemResolver implements Resolve<RemoteData<Item>> {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    const itemRD$ = this.itemService.findById(route.params.id,\n      true,\n      false,\n      ...ITEM_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    itemRD$.subscribe((itemRD: RemoteData<Item>) => {\n      this.store.dispatch(new ResolvedAction(state.url, itemRD.payload));\n    });\n\n    return itemRD$;\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}