{"version":3,"sources":["webpack:///src/app/+community-page/community-form/community-form.component.ts","webpack:///src/app/shared/comcol-forms/comcol-form/comcol-form.component.html","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/\\+community\\-page\\/community\\-page\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/dso-breadcrumbs.service.ts","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/dso-page-some-feature.guard.ts","webpack:///src/app/+community-page/community-form/community-form.module.ts","webpack:///src/app/+community-page/sub-community-list/community-page-sub-community-list.component.ts","webpack:///src/app/+community-page/sub-community-list/community-page-sub-community-list.component.html","webpack:///src/app/core/breadcrumbs/dso-breadcrumb.resolver.ts","webpack:///src/app/+community-page/community-page.component.ts","webpack:///src/app/+community-page/community-page.component.html","webpack:///src/app/+community-page/create-community-page/create-community-page.component.html","webpack:///src/app/+community-page/create-community-page/create-community-page.component.ts","webpack:///src/app/+community-page/create-community-page/create-community-page.guard.ts","webpack:///src/app/+community-page/delete-community-page/delete-community-page.component.html","webpack:///src/app/+community-page/delete-community-page/delete-community-page.component.ts","webpack:///src/app/core/breadcrumbs/community-breadcrumb.resolver.ts","webpack:///src/app/+community-page/community-page-administrator.guard.ts","webpack:///src/app/+community-page/themed-community-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/+community-page/community-page-routing.module.ts","webpack:///src/app/+community-page/community-page.module.ts","webpack:///src/app/+community-page/sub-collection-list/community-page-sub-collection-list.component.ts","webpack:///src/app/+community-page/sub-collection-list/community-page-sub-collection-list.component.html","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["back","CommunityFormComponent","formService","translate","notificationsService","authService","dsoService","requestService","objectCache","super","dso","type","formModel","id","name","required","validators","errorMessages","DsoPageSingleFeatureGuard","route","state","this","getFeatureID","pipe","featureID","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports","DSOBreadcrumbsService","linkService","dsoNameService","key","url","label","getName","crumb","propertyName","getParentLinkKey","resolveLink","parentRD","hasSucceeded","statusCode","payload","parent","getBreadcrumbs","breadcrumbs","DsoPageSomeFeatureGuard","resolver","authorizationService","router","routeWithObjectID","getRouteWithDSOId","self","routeWithDSOId","params","CommunityFormModule","CommunityPageSubCommunityListComponent","cds","paginationService","pageId","subCommunitiesRDObs","config","pageSize","currentPage","sortConfig","ASC","initPage","pagination$","getCurrentPagination","sort$","getCurrentSort","currentPagination","currentSort","findByParent","community","elementsPerPage","sort","field","direction","subscribe","results","next","clearPagination","DSOBreadcrumbResolver","breadcrumbService","dataService","uuid","findById","followLinks","g","object","fullPath","substr","indexOf","provider","CommunityPageComponent","communityDataService","metadata","authorizationDataService","communityRD$","data","logoRD$","rd","logo","communityPageRoute$","isCommunityAdmin$","isAuthorized","IsCommunityAdmin","CreateCommunityPageComponent","routeService","frontendURL","onSubmit","navigateToHome","navigateToNewPage","CreateCommunityPageGuard","communityService","parentID","queryParams","communityRD","tap","isValid","navigate","DeleteCommunityPageComponent","dsoDataService","notifications","CommunityBreadcrumbResolver","CommunityPageAdministratorGuard","AdministratorOf","ThemedCommunityPageComponent","themeName","CommunityPageRoutingModule","forChild","path","component","canActivate","breadcrumb","runGuardsAndResolvers","children","loadChildren","m","EditCommunityPageModule","pathMatch","menu","public","active","visible","model","LINK","text","link","CommunityPageModule","forRoot","CommunityPageSubCollectionListComponent","subCollectionsRDObs","Breadcrumb"],"mappings":"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","file":"x","sourcesContent":["import { Component, Input } from '@angular/core';\nimport {\n  DynamicFormControlModel,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { Community } from '../../core/shared/community.model';\nimport { ComColFormComponent } from '../../shared/comcol-forms/comcol-form/comcol-form.component';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { RequestService } from '../../core/data/request.service';\nimport { ObjectCacheService } from '../../core/cache/object-cache.service';\n\n/**\n * Form used for creating and editing communities\n */\n@Component({\n  selector: 'ds-community-form',\n  styleUrls: ['../../shared/comcol-forms/comcol-form/comcol-form.component.scss'],\n  templateUrl: '../../shared/comcol-forms/comcol-form/comcol-form.component.html'\n})\nexport class CommunityFormComponent extends ComColFormComponent<Community> {\n  /**\n   * @type {Community} A new community when a community is being created, an existing Input community when a community is being edited\n   */\n  @Input() dso: Community = new Community();\n\n  /**\n   * @type {Community.type} This is a community-type form\n   */\n  type = Community.type;\n\n  /**\n   * The dynamic form fields used for creating/editing a community\n   * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'title',\n      name: 'dc.title',\n      required: true,\n      validators: {\n        required: null\n      },\n      errorMessages: {\n        required: 'Please enter a name for this title'\n      },\n    }),\n    new DynamicTextAreaModel({\n      id: 'description',\n      name: 'dc.description',\n    }),\n    new DynamicTextAreaModel({\n      id: 'abstract',\n      name: 'dc.description.abstract',\n    }),\n    new DynamicTextAreaModel({\n      id: 'rights',\n      name: 'dc.rights',\n    }),\n    new DynamicTextAreaModel({\n      id: 'tableofcontents',\n      name: 'dc.description.tableofcontents',\n    }),\n  ];\n\n  public constructor(protected formService: DynamicFormService,\n                     protected translate: TranslateService,\n                     protected notificationsService: NotificationsService,\n                     protected authService: AuthService,\n                     protected dsoService: CommunityDataService,\n                     protected requestService: RequestService,\n                     protected objectCache: ObjectCacheService) {\n    super(formService, translate, notificationsService, authService, requestService, objectCache);\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-12 d-inline-block\">\n      <label>{{type.value + '.edit.logo.label' | translate}}</label>\n    </div>\n    <ng-container *ngVar=\"(dso?.logo | async)?.payload as logo\">\n      <div class=\"col-12 d-inline-block alert\" [ngClass]=\"{'alert-danger': markLogoForDeletion}\" id=\"logo-section\" *ngIf=\"logo\">\n        <div class=\"row\">\n          <div class=\"col-8 d-inline-block\">\n            <ds-comcol-page-logo [logo]=\"logo\"></ds-comcol-page-logo>\n          </div>\n          <div class=\"col-4 d-inline-block\">\n            <div *ngIf=\"logo\" class=\"btn-group btn-group-sm float-right\" role=\"group\">\n              <button *ngIf=\"!markLogoForDeletion\" type=\"button\" class=\"btn btn-danger\"\n                      title=\"{{type.value + '.edit.logo.delete.title' | translate}}\"\n                      (click)=\"deleteLogo()\">\n                <i class=\"fas fa-trash\" aria-hidden=\"true\"></i>\n              </button>\n              <button *ngIf=\"markLogoForDeletion\" type=\"button\" class=\"btn btn-warning\"\n                      title=\"{{type.value + '.edit.logo.delete-undo.title' | translate}}\"\n                      (click)=\"undoDeleteLogo()\">\n                <i class=\"fas fa-undo\" aria-hidden=\"true\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"!logo\" class=\"col-12 d-inline-block\">\n        <ds-uploader  *ngIf=\"initializedUploaderOptions | async\"\n                      [dropMsg]=\"type.value + '.edit.logo.upload'\"\n                      [dropOverDocumentMsg]=\"type.value + '.edit.logo.upload'\"\n                      [enableDragOverDocument]=\"true\"\n                      [uploadFilesOptions]=\"uploadFilesOptions\"\n                      (onCompleteItem)=\"onCompleteItem()\"\n                      (onUploadError)=\"onUploadError()\"></ds-uploader>\n      </div>\n    </ng-container>\n  </div>\n</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"'comcol-form-id'\"\n         [formModel]=\"formModel\"\n         [displayCancel]=\"false\"\n         (submitForm)=\"onSubmit()\">\n  <button before (click)=\"back.emit()\" class=\"btn btn-outline-secondary\">\n    <i class=\"fas fa-arrow-left\"></i> {{ type.value + '.edit.return' | translate }}\n  </button>\n</ds-form>\n","import { DSpaceObject } from '../../../shared/dspace-object.model';\nimport { DsoPageSomeFeatureGuard } from './dso-page-some-feature.guard';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { FeatureID } from '../feature-id';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n/**\n * Abstract Guard for preventing unauthorized access to {@link DSpaceObject} pages that require rights for a specific feature\n * This guard utilizes a resolver to retrieve the relevant object to check authorizations for\n */\nexport abstract class DsoPageSingleFeatureGuard<T extends DSpaceObject> extends DsoPageSomeFeatureGuard<T> {\n  /**\n   * The features to check authorization for\n   */\n  getFeatureIDs(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID[]> {\n    return this.getFeatureID(route, state).pipe(\n      map((featureID) => [featureID]),\n    );\n  }\n\n  /**\n   * The type of feature to check authorization for\n   * Override this method to define a feature\n   */\n  abstract getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID>;\n}\n","var map = {\n\t\"./custom/app/+community-page/community-page.component\": [\n\t\t\"tTNz\",\n\t\t44\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"9tdk\";\nmodule.exports = webpackAsyncContext;","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { DSONameService } from './dso-name.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { LinkService } from '../cache/builders/link.service';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { find, map, switchMap } from 'rxjs/operators';\nimport { RemoteData } from '../data/remote-data';\nimport { hasValue } from '../../shared/empty.util';\nimport { Injectable } from '@angular/core';\nimport { getDSORoute } from '../../app-routing-paths';\n\n/**\n * Service to calculate DSpaceObject breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DSOBreadcrumbsService implements BreadcrumbsProviderService<ChildHALResource & DSpaceObject> {\n  constructor(\n    private linkService: LinkService,\n    private dsoNameService: DSONameService\n  ) {\n\n  }\n\n  /**\n   * Method to recursively calculate the breadcrumbs\n   * This method returns the name and url of the key and all its parent DSOs recursively, top down\n   * @param key The key (a DSpaceObject) used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: ChildHALResource & DSpaceObject, url: string): Observable<Breadcrumb[]> {\n    const label = this.dsoNameService.getName(key);\n    const crumb = new Breadcrumb(label, url);\n    const propertyName = key.getParentLinkKey();\n    return this.linkService.resolveLink(key, followLink(propertyName))[propertyName].pipe(\n      find((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => parentRD.hasSucceeded || parentRD.statusCode === 204),\n      switchMap((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => {\n        if (hasValue(parentRD.payload)) {\n          const parent = parentRD.payload;\n          return this.getBreadcrumbs(parent, getDSORoute(parent));\n        }\n        return observableOf([]);\n\n      }),\n      map((breadcrumbs: Breadcrumb[]) => [...breadcrumbs, crumb])\n    );\n  }\n}\n","import { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../../remote-data';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { Observable } from 'rxjs';\nimport { getAllSucceededRemoteDataPayload } from '../../../shared/operators';\nimport { map } from 'rxjs/operators';\nimport { DSpaceObject } from '../../../shared/dspace-object.model';\nimport { AuthService } from '../../../auth/auth.service';\nimport { hasNoValue, hasValue } from '../../../../shared/empty.util';\nimport { SomeFeatureAuthorizationGuard } from './some-feature-authorization.guard';\n\n/**\n * Abstract Guard for preventing unauthorized access to {@link DSpaceObject} pages that require rights for any specific feature in a list\n * This guard utilizes a resolver to retrieve the relevant object to check authorizations for\n */\nexport abstract class DsoPageSomeFeatureGuard<T extends DSpaceObject> extends SomeFeatureAuthorizationGuard {\n  constructor(protected resolver: Resolve<RemoteData<T>>,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check authorization rights for the object resolved using the provided resolver\n   */\n  getObjectUrl(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\n    const routeWithObjectID = this.getRouteWithDSOId(route);\n    return (this.resolver.resolve(routeWithObjectID, state) as Observable<RemoteData<T>>).pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((dso) => dso.self)\n    );\n  }\n\n  /**\n   * Method to resolve resolve (parent) route that contains the UUID of the DSO\n   * @param route The current route\n   */\n  protected getRouteWithDSOId(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot {\n    let routeWithDSOId = route;\n    while (hasNoValue(routeWithDSOId.params.id) && hasValue(routeWithDSOId.parent)) {\n      routeWithDSOId = routeWithDSOId.parent;\n    }\n    return routeWithDSOId;\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommunityFormComponent } from './community-form.component';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    SharedModule\n  ],\n  declarations: [\n    CommunityFormComponent,\n  ],\n  exports: [\n    CommunityFormComponent\n  ]\n})\nexport class CommunityFormModule {\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';\n\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Community } from '../../core/shared/community.model';\nimport { fadeIn } from '../../shared/animations/fade';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { takeUntilCompletedRemoteData } from '../../core/shared/operators';\nimport { switchMap } from 'rxjs/operators';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-community-page-sub-community-list',\n  styleUrls: ['./community-page-sub-community-list.component.scss'],\n  templateUrl: './community-page-sub-community-list.component.html',\n  animations: [fadeIn]\n})\n/**\n * Component to render the sub-communities of a Community\n */\nexport class CommunityPageSubCommunityListComponent implements OnInit {\n  @Input() community: Community;\n\n  /**\n   * The pagination configuration\n   */\n  config: PaginationComponentOptions;\n\n  /**\n   * The pagination id\n   */\n  pageId = 'cmscm';\n\n  /**\n   * The sorting configuration\n   */\n  sortConfig: SortOptions;\n\n  /**\n   * A list of remote data objects of communities' collections\n   */\n  subCommunitiesRDObs: BehaviorSubject<RemoteData<PaginatedList<Community>>> = new BehaviorSubject<RemoteData<PaginatedList<Community>>>({} as any);\n\n  constructor(private cds: CommunityDataService,\n              private paginationService: PaginationService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.config = new PaginationComponentOptions();\n    this.config.id = this.pageId;\n    this.config.pageSize = 5;\n    this.config.currentPage = 1;\n    this.sortConfig = new SortOptions('dc.title', SortDirection.ASC);\n    this.initPage();\n  }\n\n  /**\n   * Update the list of sub-communities\n   */\n  initPage() {\n    const pagination$ = this.paginationService.getCurrentPagination(this.config.id, this.config);\n    const sort$ = this.paginationService.getCurrentSort(this.config.id, this.sortConfig);\n\n    observableCombineLatest([pagination$, sort$]).pipe(\n      switchMap(([currentPagination, currentSort]) => {\n        return     this.cds.findByParent(this.community.id, {\n          currentPage: currentPagination.currentPage,\n          elementsPerPage: currentPagination.pageSize,\n          sort: { field: currentSort.field, direction: currentSort.direction }\n        });\n      })\n    ).subscribe((results) => {\n      this.subCommunitiesRDObs.next(results);\n    });\n\n\n    this.cds.findByParent(this.community.id, {\n      currentPage: this.config.currentPage,\n      elementsPerPage: this.config.pageSize,\n      sort: { field: this.sortConfig.field, direction: this.sortConfig.direction }\n    }).pipe(takeUntilCompletedRemoteData()).subscribe((results) => {\n      this.subCommunitiesRDObs.next(results);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n}\n","<ng-container *ngVar=\"(subCommunitiesRDObs | async) as subCommunitiesRD\">\n  <div *ngIf=\"subCommunitiesRD?.hasSucceeded && subCommunitiesRD?.payload.totalElements > 0\" @fadeIn>\n    <h2>{{'community.sub-community-list.head' | translate}}</h2>\n    <ds-viewable-collection\n      [config]=\"config\"\n      [sortConfig]=\"sortConfig\"\n      [objects]=\"subCommunitiesRD\"\n      [hideGear]=\"false\">\n    </ds-viewable-collection>\n  </div>\n  <ds-error *ngIf=\"subCommunitiesRD?.hasFailed\" message=\"{{'error.sub-communities' | translate}}\"></ds-error>\n  <ds-loading *ngIf=\"subCommunitiesRD?.isLoading\" message=\"{{'loading.sub-communities' | translate}}\"></ds-loading>\n</ng-container>\n","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { DSOBreadcrumbsService } from './dso-breadcrumbs.service';\nimport { DataService } from '../data/data.service';\nimport { getRemoteDataPayload, getFirstCompletedRemoteData } from '../shared/operators';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { hasValue } from '../../shared/empty.util';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a DSpaceObject\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class DSOBreadcrumbResolver<T extends ChildHALResource & DSpaceObject> implements Resolve<BreadcrumbConfig<T>> {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: DataService<T>) {\n  }\n\n  /**\n   * Method for resolving a breadcrumb config object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<T>> {\n    const uuid = route.params.id;\n    return this.dataService.findById(uuid, true, false, ...this.followLinks).pipe(\n      getFirstCompletedRemoteData(),\n      getRemoteDataPayload(),\n      map((object: T) => {\n        if (hasValue(object)) {\n          const fullPath = state.url;\n          const url = fullPath.substr(0, fullPath.indexOf(uuid)) + uuid;\n          return {provider: this.breadcrumbService, key: object, url: url};\n        } else {\n          return undefined;\n        }\n      })\n    );\n  }\n\n  /**\n   * Method that returns the follow links to already resolve\n   * The self links defined in this list are expected to be requested somewhere in the near future\n   * Requesting them as embeds will limit the number of requests\n   */\n  abstract get followLinks(): FollowLinkConfig<T>[];\n}\n","import { mergeMap, filter, map } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { CommunityDataService } from '../core/data/community-data.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Bitstream } from '../core/shared/bitstream.model';\n\nimport { Community } from '../core/shared/community.model';\n\nimport { MetadataService } from '../core/metadata/metadata.service';\n\nimport { fadeInOut } from '../shared/animations/fade';\nimport { hasValue } from '../shared/empty.util';\nimport { getAllSucceededRemoteDataPayload, redirectOn4xx } from '../core/shared/operators';\nimport { AuthService } from '../core/auth/auth.service';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { getCommunityPageRoute } from './community-page-routing-paths';\n\n@Component({\n  selector: 'ds-community-page',\n  styleUrls: ['./community-page.component.scss'],\n  templateUrl: './community-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [fadeInOut]\n})\n/**\n * This component represents a detail page for a single community\n */\nexport class CommunityPageComponent implements OnInit {\n  /**\n   * The community displayed on this page\n   */\n  communityRD$: Observable<RemoteData<Community>>;\n\n  /**\n   * Whether the current user is a Community admin\n   */\n  isCommunityAdmin$: Observable<boolean>;\n\n  /**\n   * The logo of this community\n   */\n  logoRD$: Observable<RemoteData<Bitstream>>;\n\n  /**\n   * Route to the community page\n   */\n  communityPageRoute$: Observable<string>;\n\n  constructor(\n    private communityDataService: CommunityDataService,\n    private metadata: MetadataService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private authorizationDataService: AuthorizationDataService\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.communityRD$ = this.route.data.pipe(\n      map((data) => data.dso as RemoteData<Community>),\n      redirectOn4xx(this.router, this.authService)\n    );\n    this.logoRD$ = this.communityRD$.pipe(\n      map((rd: RemoteData<Community>) => rd.payload),\n      filter((community: Community) => hasValue(community)),\n      mergeMap((community: Community) => community.logo));\n    this.communityPageRoute$ = this.communityRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((community) => getCommunityPageRoute(community.id))\n    );\n    this.isCommunityAdmin$ = this.authorizationDataService.isAuthorized(FeatureID.IsCommunityAdmin);\n  }\n}\n","<div class=\"container\" *ngVar=\"(communityRD$ | async) as communityRD\">\n  <div class=\"community-page\" *ngIf=\"communityRD?.hasSucceeded\" @fadeInOut>\n    <div *ngIf=\"communityRD?.payload; let communityPayload\">\n      <ds-view-tracker [object]=\"communityPayload\"></ds-view-tracker>\n      <div class=\"d-flex flex-row border-bottom mb-4 pb-4\">\n        <header class=\"comcol-header mr-auto\">\n          <!-- Community name -->\n          <ds-comcol-page-header [name]=\"communityPayload.name\"></ds-comcol-page-header>\n          <!-- Community logo -->\n          <ds-comcol-page-logo *ngIf=\"logoRD$\" [logo]=\"(logoRD$ | async)?.payload\" [alternateText]=\"'Community Logo'\">\n          </ds-comcol-page-logo>\n          <!-- Handle -->\n          <ds-comcol-page-handle [content]=\"communityPayload.handle\" [title]=\"'community.page.handle'\">\n          </ds-comcol-page-handle>\n          <!-- Introductory text -->\n          <ds-comcol-page-content [content]=\"communityPayload.introductoryText\" [hasInnerHtml]=\"true\">\n          </ds-comcol-page-content>\n          <!-- News -->\n          <ds-comcol-page-content [content]=\"communityPayload.sidebarText\" [hasInnerHtml]=\"true\"\n            [title]=\"'community.page.news'\">\n          </ds-comcol-page-content>\n        </header>\n        <div class=\"pl-2\">\n          <ds-dso-page-edit-button *ngIf=\"isCommunityAdmin$ | async\" [pageRoute]=\"communityPageRoute$ | async\" [dso]=\"communityPayload\" [tooltipMsg]=\"'community.page.edit'\"></ds-dso-page-edit-button>\n        </div>\n      </div>\n      <section class=\"comcol-page-browse-section\">\n        <!-- Browse-By Links -->\n        <ds-comcol-page-browse-by [id]=\"communityPayload.id\" [contentType]=\"communityPayload.type\">\n        </ds-comcol-page-browse-by>\n\n        <ds-community-page-sub-community-list [community]=\"communityPayload\"></ds-community-page-sub-community-list>\n        <ds-community-page-sub-collection-list [community]=\"communityPayload\"></ds-community-page-sub-collection-list>\n      </section>\n      <footer  *ngIf=\"communityPayload.copyrightText\"  class=\"border-top my-5 pt-4\">\n        <!-- Copyright -->\n        <ds-comcol-page-content [content]=\"communityPayload.copyrightText\" [hasInnerHtml]=\"true\">\n        </ds-comcol-page-content>\n      </footer>\n    </div>\n  </div>\n\n  <ds-error *ngIf=\"communityRD?.hasFailed\" message=\"{{'error.community' | translate}}\"></ds-error>\n  <ds-loading *ngIf=\"communityRD?.isLoading\" message=\"{{'loading.community' | translate}}\"></ds-loading>\n</div>\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12 pb-4\">\n      <ng-container *ngVar=\"(parentRD$ | async)?.payload as parent\">\n        <h2 *ngIf=\"!parent\" id=\"header\" class=\"border-bottom pb-2\">{{ 'community.create.head' | translate }}</h2>\n        <h2 *ngIf=\"parent\" id=\"sub-header\" class=\"border-bottom pb-2\">{{ 'community.create.sub-head' | translate:{ parent: parent.name } }}</h2>\n      </ng-container>\n    </div>\n  </div>\n  <ds-community-form (submitForm)=\"onSubmit($event)\"\n                     (back)=\"navigateToHome()\"\n                     (finish)=\"navigateToNewPage()\"></ds-community-form>\n</div>\n","import { Component } from '@angular/core';\nimport { Community } from '../../core/shared/community.model';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { RouteService } from '../../core/services/route.service';\nimport { Router } from '@angular/router';\nimport { CreateComColPageComponent } from '../../shared/comcol-forms/create-comcol-page/create-comcol-page.component';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\n\n/**\n * Component that represents the page where a user can create a new Community\n */\n@Component({\n  selector: 'ds-create-community',\n  styleUrls: ['./create-community-page.component.scss'],\n  templateUrl: './create-community-page.component.html'\n})\nexport class CreateCommunityPageComponent extends CreateComColPageComponent<Community> {\n  protected frontendURL = '/communities/';\n  protected type = Community.type;\n\n  public constructor(\n    protected communityDataService: CommunityDataService,\n    protected routeService: RouteService,\n    protected router: Router,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService,\n    protected requestService: RequestService\n  ) {\n    super(communityDataService, communityDataService, routeService, router, notificationsService, translate, requestService);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { hasNoValue, hasValue } from '../../shared/empty.util';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Community } from '../../core/shared/community.model';\nimport { map, tap } from 'rxjs/operators';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n/**\n * Prevent creation of a community with an invalid parent community provided\n * @class CreateCommunityPageGuard\n */\n@Injectable()\nexport class CreateCommunityPageGuard implements CanActivate {\n  public constructor(private router: Router, private communityService: CommunityDataService) {\n  }\n\n  /**\n   * True when either NO parent ID query parameter has been provided, or the parent ID resolves to a valid parent community\n   * Reroutes to a 404 page when the page cannot be activated\n   * @method canActivate\n   */\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    const parentID = route.queryParams.parent;\n    if (hasNoValue(parentID)) {\n      return observableOf(true);\n    }\n\n    return this.communityService.findById(parentID)\n      .pipe(\n        getFirstCompletedRemoteData(),\n        map((communityRD: RemoteData<Community>) => hasValue(communityRD) && communityRD.hasSucceeded && hasValue(communityRD.payload)),\n        tap((isValid: boolean) => {\n          if (!isValid) {\n            this.router.navigate(['/404']);\n          }\n        }\n      )\n    );\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <ng-container *ngVar=\"(dsoRD$ | async)?.payload as dso\">\n            <div class=\"col-12 pb-4\">\n                <h2 id=\"header\" class=\"border-bottom pb-2\">{{ 'community.delete.head' | translate}}</h2>\n                <p class=\"pb-2\">{{ 'community.delete.text' | translate:{ dso: dso.name } }}</p>\n                <div class=\"form-group row\">\n                    <div class=\"col text-right\">\n                        <button class=\"btn btn-outline-secondary\" (click)=\"onCancel(dso)\">\n                            <i class=\"fas fa-times\"></i> {{'community.delete.cancel' | translate}}\n                        </button>\n                        <button class=\"btn btn-danger mr-2\" (click)=\"onConfirm(dso)\">\n                            <i class=\"fas fa-trash\"></i> {{'community.delete.confirm' | translate}}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n    </div>\n\n</div>\n","import { Component } from '@angular/core';\nimport { Community } from '../../core/shared/community.model';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DeleteComColPageComponent } from '../../shared/comcol-forms/delete-comcol-page/delete-comcol-page.component';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport {RequestService} from '../../core/data/request.service';\n\n/**\n * Component that represents the page where a user can delete an existing Community\n */\n@Component({\n  selector: 'ds-delete-community',\n  styleUrls: ['./delete-community-page.component.scss'],\n  templateUrl: './delete-community-page.component.html'\n})\nexport class DeleteCommunityPageComponent extends DeleteComColPageComponent<Community> {\n  protected frontendURL = '/communities/';\n\n  public constructor(\n    protected dsoDataService: CommunityDataService,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notifications: NotificationsService,\n    protected translate: TranslateService,\n    protected requestService: RequestService\n  ) {\n    super(dsoDataService, router, route, notifications, translate, requestService);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { DSOBreadcrumbsService } from './dso-breadcrumbs.service';\nimport { DSOBreadcrumbResolver } from './dso-breadcrumb.resolver';\nimport { CommunityDataService } from '../data/community-data.service';\nimport { Community } from '../shared/community.model';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { COMMUNITY_PAGE_LINKS_TO_FOLLOW } from '../../+community-page/community-page.resolver';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a Community\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommunityBreadcrumbResolver extends DSOBreadcrumbResolver<Community> {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: CommunityDataService) {\n    super(breadcrumbService, dataService);\n  }\n\n  /**\n   * Method that returns the follow links to already resolve\n   * The self links defined in this list are expected to be requested somewhere in the near future\n   * Requesting them as embeds will limit the number of requests\n   */\n  get followLinks(): FollowLinkConfig<Community>[] {\n    return COMMUNITY_PAGE_LINKS_TO_FOLLOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Community } from '../core/shared/community.model';\nimport { CommunityPageResolver } from './community-page.resolver';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { DsoPageSingleFeatureGuard } from '../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Community} pages requiring administrator rights\n */\nexport class CommunityPageAdministratorGuard extends DsoPageSingleFeatureGuard<Community> {\n  constructor(protected resolver: CommunityPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check administrator authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.AdministratorOf);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { CommunityPageComponent } from './community-page.component';\n\n/**\n * Themed wrapper for CommunityPageComponent\n */\n@Component({\n  selector: 'ds-themed-community-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedCommunityPageComponent extends ThemedComponent<CommunityPageComponent> {\n  protected getComponentName(): string {\n    return 'CommunityPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/+community-page/community-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./community-page.component`);\n  }\n\n}\n","<ng-template #vcr></ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { CommunityPageResolver } from './community-page.resolver';\nimport { CreateCommunityPageComponent } from './create-community-page/create-community-page.component';\nimport { AuthenticatedGuard } from '../core/auth/authenticated.guard';\nimport { CreateCommunityPageGuard } from './create-community-page/create-community-page.guard';\nimport { DeleteCommunityPageComponent } from './delete-community-page/delete-community-page.component';\nimport { CommunityBreadcrumbResolver } from '../core/breadcrumbs/community-breadcrumb.resolver';\nimport { DSOBreadcrumbsService } from '../core/breadcrumbs/dso-breadcrumbs.service';\nimport { LinkService } from '../core/cache/builders/link.service';\nimport { COMMUNITY_EDIT_PATH, COMMUNITY_CREATE_PATH } from './community-page-routing-paths';\nimport { CommunityPageAdministratorGuard } from './community-page-administrator.guard';\nimport { MenuItemType } from '../shared/menu/initial-menus-state';\nimport { LinkMenuItemModel } from '../shared/menu/menu-item/models/link.model';\nimport { ThemedCommunityPageComponent } from './themed-community-page.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: COMMUNITY_CREATE_PATH,\n        component: CreateCommunityPageComponent,\n        canActivate: [AuthenticatedGuard, CreateCommunityPageGuard]\n      },\n      {\n        path: ':id',\n        resolve: {\n          dso: CommunityPageResolver,\n          breadcrumb: CommunityBreadcrumbResolver\n        },\n        runGuardsAndResolvers: 'always',\n        children: [\n          {\n            path: COMMUNITY_EDIT_PATH,\n            loadChildren: () => import('./edit-community-page/edit-community-page.module')\n              .then((m) => m.EditCommunityPageModule),\n            canActivate: [CommunityPageAdministratorGuard]\n          },\n          {\n            path: 'delete',\n            pathMatch: 'full',\n            component: DeleteCommunityPageComponent,\n            canActivate: [AuthenticatedGuard],\n          },\n          {\n            path: '',\n            component: ThemedCommunityPageComponent,\n            pathMatch: 'full',\n          }\n        ],\n        data: {\n          menu: {\n            public: [{\n              id: 'statistics_community_:id',\n              active: true,\n              visible: true,\n              model: {\n                type: MenuItemType.LINK,\n                text: 'menu.section.statistics',\n                link: 'statistics/communities/:id/',\n              } as LinkMenuItemModel,\n            }],\n          },\n        },\n      },\n    ])\n  ],\n  providers: [\n    CommunityPageResolver,\n    CommunityBreadcrumbResolver,\n    DSOBreadcrumbsService,\n    LinkService,\n    CreateCommunityPageGuard,\n    CommunityPageAdministratorGuard\n  ]\n})\nexport class CommunityPageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '../shared/shared.module';\n\nimport { CommunityPageComponent } from './community-page.component';\nimport { CommunityPageSubCollectionListComponent } from './sub-collection-list/community-page-sub-collection-list.component';\nimport { CommunityPageRoutingModule } from './community-page-routing.module';\nimport { CommunityPageSubCommunityListComponent } from './sub-community-list/community-page-sub-community-list.component';\nimport { CreateCommunityPageComponent } from './create-community-page/create-community-page.component';\nimport { DeleteCommunityPageComponent } from './delete-community-page/delete-community-page.component';\nimport { StatisticsModule } from '../statistics/statistics.module';\nimport { CommunityFormModule } from './community-form/community-form.module';\nimport { ThemedCommunityPageComponent } from './themed-community-page.component';\n\nconst DECLARATIONS = [CommunityPageComponent,\n  ThemedCommunityPageComponent,\n  CommunityPageSubCollectionListComponent,\n  CommunityPageSubCommunityListComponent,\n  CreateCommunityPageComponent,\n  DeleteCommunityPageComponent];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    CommunityPageRoutingModule,\n    StatisticsModule.forRoot(),\n    CommunityFormModule\n  ],\n  declarations: [\n    ...DECLARATIONS\n  ],\n  exports: [\n    ...DECLARATIONS\n  ]\n})\n\nexport class CommunityPageModule {\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';\n\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Collection } from '../../core/shared/collection.model';\nimport { Community } from '../../core/shared/community.model';\nimport { fadeIn } from '../../shared/animations/fade';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { CollectionDataService } from '../../core/data/collection-data.service';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'ds-community-page-sub-collection-list',\n  styleUrls: ['./community-page-sub-collection-list.component.scss'],\n  templateUrl: './community-page-sub-collection-list.component.html',\n  animations:[fadeIn]\n})\nexport class CommunityPageSubCollectionListComponent implements OnInit {\n  @Input() community: Community;\n\n  /**\n   * The pagination configuration\n   */\n  config: PaginationComponentOptions;\n\n  /**\n   * The pagination id\n   */\n  pageId = 'cmcl';\n\n  /**\n   * The sorting configuration\n   */\n  sortConfig: SortOptions;\n\n  /**\n   * A list of remote data objects of communities' collections\n   */\n  subCollectionsRDObs: BehaviorSubject<RemoteData<PaginatedList<Collection>>> = new BehaviorSubject<RemoteData<PaginatedList<Collection>>>({} as any);\n\n  constructor(private cds: CollectionDataService,\n              private paginationService: PaginationService,\n\n  ) {}\n\n  ngOnInit(): void {\n    this.config = new PaginationComponentOptions();\n    this.config.id = this.pageId;\n    this.config.pageSize = 5;\n    this.config.currentPage = 1;\n    this.sortConfig = new SortOptions('dc.title', SortDirection.ASC);\n    this.initPage();\n  }\n\n  /**\n   * Initialise the list of collections\n   */\n  initPage() {\n     const pagination$ = this.paginationService.getCurrentPagination(this.config.id, this.config);\n     const sort$ = this.paginationService.getCurrentSort(this.config.id, this.sortConfig);\n\n    observableCombineLatest([pagination$, sort$]).pipe(\n      switchMap(([currentPagination, currentSort]) => {\n        return this.cds.findByParent(this.community.id, {\n          currentPage: currentPagination.currentPage,\n          elementsPerPage: currentPagination.pageSize,\n          sort: {field: currentSort.field, direction: currentSort.direction}\n        });\n      })\n    ).subscribe((results) => {\n      this.subCollectionsRDObs.next(results);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n}\n","<ng-container *ngVar=\"(subCollectionsRDObs | async) as subCollectionsRD\">\n  <div *ngIf=\"subCollectionsRD?.hasSucceeded && subCollectionsRD?.payload.totalElements > 0\" @fadeIn>\n    <h2>{{'community.sub-collection-list.head' | translate}}</h2>\n    <ds-viewable-collection\n      [config]=\"config\"\n      [sortConfig]=\"sortConfig\"\n      [objects]=\"subCollectionsRD\"\n      [hideGear]=\"false\">\n    </ds-viewable-collection>\n  </div>\n  <ds-error *ngIf=\"subCollectionsRD?.hasFailed\" message=\"{{'error.sub-collections' | translate}}\"></ds-error>\n  <ds-loading *ngIf=\"subCollectionsRD?.isLoading\" message=\"{{'loading.sub-collections' | translate}}\"></ds-loading>\n</ng-container>\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}