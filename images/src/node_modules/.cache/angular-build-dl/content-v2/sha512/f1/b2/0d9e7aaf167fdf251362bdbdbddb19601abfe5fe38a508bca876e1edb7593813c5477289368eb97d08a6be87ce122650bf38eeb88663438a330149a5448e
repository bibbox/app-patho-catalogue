{"version":3,"sources":["webpack:///src/app/+collection-page/collection-item-mapper/collection-item-mapper.component.html","webpack:///src/app/+collection-page/collection-item-mapper/collection-item-mapper.component.ts","webpack:///src/app/shared/comcol-forms/edit-comcol-page/edit-comcol-page.component.html","webpack:///src/app/+collection-page/edit-collection-page/edit-collection-page.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-metadata/collection-metadata.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-metadata/collection-metadata.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-roles/collection-roles.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-roles/collection-roles.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-source/collection-source.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-source/collection-source.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-curate/collection-curate.component.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-authorizations/collection-authorizations.component.ts","webpack:///src/app/+collection-page/edit-collection-page/edit-collection-page.routing.module.ts","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/collection-administrator.guard.ts","webpack:///src/app/+collection-page/edit-collection-page/edit-collection-page.module.ts","webpack:///src/app/+collection-page/edit-collection-page/collection-curate/collection-curate.component.html","webpack:///src/app/+collection-page/edit-collection-page/collection-authorizations/collection-authorizations.component.html"],"names":["CollectionItemMapperComponent","route","router","searchConfigService","searchService","notificationsService","itemDataService","collectionDataService","translateService","dsoNameService","defaultSortOptions","ASC","performedSearch","this","collectionRD$","parent","data","pipe","map","dso","collectionName$","rd","getName","payload","searchOptions$","paginatedSearchOptions","loadItemLists","shouldUpdate$","BehaviorSubject","collectionAndOptions$","collectionItemsRD$","switchMap","collectionRD","options","shouldUpdate","next","findAllByHref","_links","mappedItems","href","Object","assign","sort","mappedItemsRD$","search","query","buildQuery","id","scope","dsoTypes","ITEM","startWith","ids","remove","responses$","collection","removeMappingFromCollection","g","mapToCollection","self","showNotifications","messageInsertion","subscribe","responses","successful","filter","response","hasSucceeded","unsuccessful","hasFailed","length","get","amount","content","head","success","error","switchToFirstTab","event","navigateByUrl","getCurrentUrl","url","indexOf","substring","collectionId","excludeColQuery","tabs","select","take","navigate","SEARCH_CONFIG_SERVICE","provide","useClass","tabChange","fade","EditCollectionPageComponent","super","type","CollectionMetadataComponent","itemTemplateService","translate","objectCache","requestService","frontendURL","initTemplateItem","itemTemplateRD$","dsoRD$","findByCollectionID","uuid","collection$","template$","create","templateHref$","getCollectionEndpoint","combineLatest","templateHref","setStaleByHrefSubstring","template","deleteByCollectionID","tap","onSubmit","navigateToHomePage","CollectionRolesComponent","first","comcolRoles$","name","adminGroup","submittersGroup","itemReadGroup","bitstreamReadGroup","workflowGroups","CollectionSourceComponent","CollectionCurateComponent","CollectionAuthorizationsComponent","EditCollectionPageRoutingModule","CollectionAdministratorGuard","EditCollectionPageModule","objectUpdatesService","location","formService","collectionService","LABEL_KEY_PREFIX","ERROR_KEY_PREFIX","OPTIONS_KEY_PREFIX","oaiSourceModel","required","validators","errorMessages","oaiSetIdModel","metadataConfigIdModel","harvestTypeModel","value","Metadata","MetadataAndRef","MetadataAndBitstreams","inputModels","formModel","group","formLayout","oaiSource","grid","host","oaiSetId","metadataConfigId","harvestType","option","oaiSetContainer","oaiSourceContainer","harvestTypeContainer","harvestTypeNone","None","previouslySelectedHarvestType","displayedNotifications","notificationsPrefix","discardTimeOut","environment","edit","undoTimeout","substr","formGroup","createFormGroup","col","getContentSource","initializeOriginalContentSource","updateFieldTranslations","onLangChange","contentSource","initialHarvestType","initializeMetadataConfigs","initialContentSource","cloneDeep","initialize","Date","update$","getFieldUpdates","updates","updateSub","update","configId","field","metadataConfigs","patchValue","metadataConfig","label","forEach","fieldModel","updateFieldTranslation","instant","keys","key","updateContentSourceField","model","saveFieldUpdate","getHarvesterEndpoint","endpoint","removeByHrefSubstring","updateContentSource","result","clearNotifications","push","getNotificationTitle","getNotificationContent","back","valid","updateHarvestType","saveAddFieldUpdate","notification","unsubscribe","authorizationService","authService","state","IsCollectionAdmin","forChild","path","resolve","breadcrumb","breadcrumbKey","component","canActivate","children","redirectTo","pathMatch","title","hideReturnButton","showBreadcrumbs","resourcePolicyTarget","resourcePolicy"],"mappings":"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","file":"x","sourcesContent":["<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2>{{'collection.edit.item-mapper.head' | translate}}</h2>\n      <p [innerHTML]=\"'collection.edit.item-mapper.collection' | translate:{ name: (collectionName$ |async) }\" id=\"collection-name\"></p>\n      <p>{{'collection.edit.item-mapper.description' | translate}}</p>\n\n      <ngb-tabset (tabChange)=\"tabChange($event)\" [destroyOnHide]=\"true\" #tabs=\"ngbTabset\">\n        <ngb-tab title=\"{{'collection.edit.item-mapper.tabs.browse' | translate}}\" id=\"browseTab\">\n          <ng-template ngbTabContent>\n            <div class=\"mt-2\">\n              <ds-item-select class=\"mt-2\"\n                [key]=\"'browse'\"\n                [dsoRD$]=\"collectionItemsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'collection.edit.item-mapper.remove'\"\n                [cancelButton]=\"'collection.edit.item-mapper.cancel'\"\n                [dangerConfirm]=\"true\"\n                [hideCollection]=\"true\"\n                (confirm)=\"mapItems($event, true)\"\n                (cancel)=\"onCancel()\"></ds-item-select>\n            </div>\n          </ng-template>\n        </ngb-tab>\n        <ngb-tab title=\"{{'collection.edit.item-mapper.tabs.map' | translate}}\" id=\"mapTab\">\n          <ng-template ngbTabContent>\n            <div class=\"row mt-2\">\n              <div class=\"col-12 col-lg-6\">\n                <ds-search-form id=\"search-form\"\n                                [query]=\"(searchOptions$ | async)?.query\"\n                                [scope]=\"(searchOptions$ | async)?.scope\"\n                                [currentUrl]=\"'./'\"\n                                [inPlaceSearch]=\"true\"\n                                [searchPlaceholder]=\"'collection.edit.item-mapper.search-form.placeholder' | translate\"\n                                (submitSearch)=\"performedSearch = true\">\n                </ds-search-form>\n              </div>\n            </div>\n\n            <div *ngIf=\"performedSearch\">\n              <ds-item-select class=\"mt-2\"\n                [key]=\"'map'\"\n                [dsoRD$]=\"mappedItemsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'collection.edit.item-mapper.confirm'\"\n                [cancelButton]=\"'collection.edit.item-mapper.cancel'\"\n                (confirm)=\"mapItems($event)\"\n                (cancel)=\"onCancel()\"></ds-item-select>\n            </div>\n            <div *ngIf=\"!performedSearch\" class=\"alert alert-info w-100\" role=\"alert\">\n              {{'collection.edit.item-mapper.no-search' | translate}}\n            </div>\n          </ng-template>\n        </ngb-tab>\n      </ngb-tabset>\n    </div>\n  </div>\n</div>\n","import { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\n\nimport { ChangeDetectionStrategy, Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { fadeIn, fadeInOut } from '../../shared/animations/fade';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Collection } from '../../core/shared/collection.model';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { map, startWith, switchMap, take } from 'rxjs/operators';\nimport {\n    getRemoteDataPayload,\n    getFirstSucceededRemoteData,\n    toDSpaceObjectListRD,\n    getFirstCompletedRemoteData, getAllSucceededRemoteData\n} from '../../core/shared/operators';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { DSpaceObjectType } from '../../core/shared/dspace-object-type.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionDataService } from '../../core/data/collection-data.service';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { SEARCH_CONFIG_SERVICE } from '../../+my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../core/shared/search/search-configuration.service';\nimport { PaginatedSearchOptions } from '../../shared/search/paginated-search-options.model';\nimport { SearchService } from '../../core/shared/search/search.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\n\n@Component({\n  selector: 'ds-collection-item-mapper',\n  styleUrls: ['./collection-item-mapper.component.scss'],\n  templateUrl: './collection-item-mapper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ],\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n/**\n * Component used to map items to a collection\n */\nexport class CollectionItemMapperComponent implements OnInit {\n\n  /**\n   * A view on the tabset element\n   * Used to switch tabs programmatically\n   */\n  @ViewChild('tabs', {static: false}) tabs;\n\n  /**\n   * The collection to map items to\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n  collectionName$: Observable<string>;\n\n  /**\n   * Search options\n   */\n  searchOptions$: Observable<PaginatedSearchOptions>;\n\n  /**\n   * List of items to show under the \"Browse\" tab\n   * Items inside the collection\n   */\n  collectionItemsRD$: Observable<RemoteData<PaginatedList<DSpaceObject>>>;\n\n  /**\n   * List of items to show under the \"Map\" tab\n   * Items outside the collection\n   */\n  mappedItemsRD$: Observable<RemoteData<PaginatedList<DSpaceObject>>>;\n\n  /**\n   * Sort on title ASC by default\n   * @type {SortOptions}\n   */\n  defaultSortOptions: SortOptions = new SortOptions('dc.title', SortDirection.ASC);\n\n  /**\n   * Firing this observable (shouldUpdate$.next(true)) forces the two lists to reload themselves\n   * Usually fired after the lists their cache is cleared (to force a new request to the REST API)\n   */\n  shouldUpdate$: BehaviorSubject<boolean>;\n\n  /**\n   * Track whether at least one search has been performed or not\n   * As soon as at least one search has been performed, we display the search results\n   */\n  performedSearch = false;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              @Inject(SEARCH_CONFIG_SERVICE) private searchConfigService: SearchConfigurationService,\n              private searchService: SearchService,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private collectionDataService: CollectionDataService,\n              private translateService: TranslateService,\n              private dsoNameService: DSONameService) {\n  }\n\n  ngOnInit(): void {\n    this.collectionRD$ = this.route.parent.data.pipe(\n      map((data) => data.dso as RemoteData<Collection>),\n      getFirstSucceededRemoteData()\n    );\n\n    this.collectionName$ = this.collectionRD$.pipe(\n      map((rd: RemoteData<Collection>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n    this.searchOptions$ = this.searchConfigService.paginatedSearchOptions;\n    this.loadItemLists();\n  }\n\n  /**\n   * Load collectionItemsRD$ with a fixed scope to only obtain the items this collection owns\n   * Load mappedItemsRD$ to only obtain items this collection doesn't own\n   */\n  loadItemLists() {\n    this.shouldUpdate$ = new BehaviorSubject<boolean>(true);\n    const collectionAndOptions$ = observableCombineLatest(\n      this.collectionRD$,\n      this.searchOptions$,\n      this.shouldUpdate$\n    );\n    this.collectionItemsRD$ = collectionAndOptions$.pipe(\n      switchMap(([collectionRD, options, shouldUpdate]) => {\n        if (shouldUpdate === true) {\n          this.shouldUpdate$.next(false);\n        }\n        return this.itemDataService.findAllByHref(collectionRD.payload._links.mappedItems.href, Object.assign(options, {\n          sort: this.defaultSortOptions\n        }),!shouldUpdate, false, followLink('owningCollection')).pipe(\n          getAllSucceededRemoteData()\n        );\n      })\n    );\n    this.mappedItemsRD$ = collectionAndOptions$.pipe(\n      switchMap(([collectionRD, options, shouldUpdate]) => {\n        return this.searchService.search(Object.assign(new PaginatedSearchOptions(options), {\n          query: this.buildQuery(collectionRD.payload.id, options.query),\n          scope: undefined,\n          dsoTypes: [DSpaceObjectType.ITEM],\n          sort: this.defaultSortOptions\n        }), 10000).pipe(\n          toDSpaceObjectListRD(),\n          startWith(undefined)\n        );\n      })\n    );\n  }\n\n  /**\n   * Map/Unmap the selected items to the collection and display notifications\n   * @param ids         The list of item UUID's to map/unmap to the collection\n   * @param remove      Whether or not it's supposed to remove mappings\n   */\n  mapItems(ids: string[], remove?: boolean) {\n    const responses$ = this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((collectionRD: RemoteData<Collection>) => collectionRD.payload),\n      switchMap((collection: Collection) =>\n        observableCombineLatest(ids.map((id: string) => {\n            if (remove) {\n              return this.itemDataService.removeMappingFromCollection(id, collection.id).pipe(\n                getFirstCompletedRemoteData()\n              );\n            } else {\n              return this.itemDataService.mapToCollection(id, collection._links.self.href).pipe(\n                getFirstCompletedRemoteData()\n              );\n            }\n          }\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, remove);\n  }\n\n  /**\n   * Display notifications\n   * @param {Observable<RestResponse[]>} responses$   The responses after adding/removing a mapping\n   * @param {boolean} remove                          Whether or not the goal was to remove mappings\n   */\n  private showNotifications(responses$: Observable<RemoteData<NoContent>[]>, remove?: boolean) {\n    const messageInsertion = remove ? 'unmap' : 'map';\n\n    responses$.subscribe((responses: RemoteData<NoContent>[]) => {\n      const successful = responses.filter((response: RemoteData<any>) => response.hasSucceeded);\n      const unsuccessful = responses.filter((response: RemoteData<any>) => response.hasFailed);\n      if (successful.length > 0) {\n        const successMessages = observableCombineLatest(\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.success.head`),\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.success.content`, { amount: successful.length })\n        );\n\n        successMessages.subscribe(([head, content]) => {\n          this.notificationsService.success(head, content);\n        });\n        this.shouldUpdate$.next(true);\n      }\n      if (unsuccessful.length > 0) {\n        const unsuccessMessages = observableCombineLatest(\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.error.head`),\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.error.content`, { amount: unsuccessful.length })\n        );\n\n        unsuccessMessages.subscribe(([head, content]) => {\n          this.notificationsService.error(head, content);\n        });\n      }\n      this.switchToFirstTab();\n    });\n  }\n\n  /**\n   * Clear url parameters on tab change (temporary fix until pagination is improved)\n   * @param event\n   */\n  tabChange(event) {\n    this.performedSearch = false;\n    this.router.navigateByUrl(this.getCurrentUrl());\n  }\n\n  /**\n   * Get current url without parameters\n   * @returns {string}\n   */\n  getCurrentUrl(): string {\n    if (this.router.url.indexOf('?') > -1) {\n      return this.router.url.substring(0, this.router.url.indexOf('?'));\n    }\n    return this.router.url;\n  }\n\n  /**\n   * Build a query where items that are already mapped to a collection are excluded from\n   * @param collectionId    The collection's UUID\n   * @param query           The query to add to it\n   */\n  buildQuery(collectionId: string, query: string): string {\n    const excludeColQuery = `-location.coll:\\\"${collectionId}\\\"`;\n    if (isNotEmpty(query)) {\n      return `${excludeColQuery} AND ${query}`;\n    } else {\n      return excludeColQuery;\n    }\n  }\n\n  /**\n   * Switch the view to focus on the first tab\n   */\n  switchToFirstTab() {\n    this.tabs.select('browseTab');\n  }\n\n  /**\n   * When a cancel event is fired, return to the collection page\n   */\n  onCancel() {\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      take(1)\n    ).subscribe((collection: Collection) => {\n      this.router.navigate(['/collections/', collection.id]);\n    });\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom\">\n        <h2>{{ type + '.edit.head' | translate }}</h2>\n        <div>\n          <a class=\"btn btn-danger\"\n             [routerLink]=\"((type === 'community') ? '/communities/' : '/collections/') + (dsoRD$ | async)?.payload.uuid + '/delete'\">\n            <i class=\"fas fa-trash\"></i> {{type + '.edit.delete' | translate}}</a>\n        </div>\n      </div>\n      <div class=\"pt-2\">\n        <ul class=\"nav nav-tabs justify-content-start mb-2\">\n          <li *ngFor=\"let page of pages\" class=\"nav-item\">\n            <a class=\"nav-link\"\n               [ngClass]=\"{'active' : page === currentPage}\"\n               [routerLink]=\"['./' + page]\">\n              {{ type + '.edit.tabs.' + page + '.head' | translate}}\n            </a>\n          </li>\n        </ul>\n        <div class=\"tab-pane active\">\n          <div class=\"mb-4\">\n            <router-outlet></router-outlet>\n          </div>\n          <div class=\"col-12 text-right\">\n            <a *ngIf=\"!hideReturnButton\" [routerLink]=\"getPageUrl((dsoRD$ | async)?.payload)\" class=\"btn btn-outline-secondary\">\n              <i class=\"fas fa-arrow-left\"></i> {{ type + '.edit.return' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EditComColPageComponent } from '../../shared/comcol-forms/edit-comcol-page/edit-comcol-page.component';\nimport { Collection } from '../../core/shared/collection.model';\nimport { getCollectionPageRoute } from '../collection-page-routing-paths';\n\n/**\n * Component that represents the page where a user can edit an existing Collection\n */\n@Component({\n  selector: 'ds-edit-collection',\n  templateUrl: '../../shared/comcol-forms/edit-comcol-page/edit-comcol-page.component.html'\n})\nexport class EditCollectionPageComponent extends EditComColPageComponent<Collection> {\n  type = 'collection';\n\n  public constructor(\n    protected router: Router,\n    protected route: ActivatedRoute\n  ) {\n    super(router, route);\n  }\n\n  /**\n   * Get the collection page url\n   * @param collection The collection for which the url is requested\n   */\n  getPageUrl(collection: Collection): string {\n    return getCollectionPageRoute(collection.id);\n  }\n}\n","<div class=\"container-fluid mb-2\" *ngVar=\"(itemTemplateRD$ | async) as itemTemplateRD\">\n  <label>{{ 'collection.edit.template.label' | translate}}</label>\n  <div class=\"button-row\">\n    <button *ngIf=\"!itemTemplateRD?.payload\" class=\"btn btn-success\" (click)=\"addItemTemplate()\">\n      <i class=\"fas fa-plus\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.add-button\" | translate}}</span>\n    </button>\n    <button *ngIf=\"itemTemplateRD?.payload\" class=\"btn btn-danger\" (click)=\"deleteItemTemplate()\">\n      <i class=\"fas fa-trash-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.delete-button\" | translate}}</span>\n    </button>\n    <button *ngIf=\"itemTemplateRD?.payload\" class=\"btn btn-primary\"\n            [routerLink]=\"'/collections/' + (dsoRD$ | async)?.payload.uuid + '/itemtemplate'\">\n      <i class=\"fas fa-edit\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.edit-button\" | translate}}</span>\n    </button>\n  </div>\n</div>\n<ds-collection-form [dso]=\"(dsoRD$ | async)?.payload\"\n                    (submitForm)=\"onSubmit($event)\"\n                    (back)=\"navigateToHomePage()\"\n                    (finish)=\"navigateToHomePage()\"></ds-collection-form>\n","import { Component } from '@angular/core';\nimport { ComcolMetadataComponent } from '../../../shared/comcol-forms/edit-comcol-page/comcol-metadata/comcol-metadata.component';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ItemTemplateDataService } from '../../../core/data/item-template-data.service';\nimport { combineLatest as combineLatestObservable, Observable } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { getCollectionItemTemplateRoute } from '../../collection-page-routing-paths';\n\n/**\n * Component for editing a collection's metadata\n */\n@Component({\n  selector: 'ds-collection-metadata',\n  templateUrl: './collection-metadata.component.html',\n})\nexport class CollectionMetadataComponent extends ComcolMetadataComponent<Collection> {\n  protected frontendURL = '/collections/';\n  protected type = Collection.type;\n\n  /**\n   * The collection's item template\n   */\n  itemTemplateRD$: Observable<RemoteData<Item>>;\n\n  public constructor(\n    protected collectionDataService: CollectionDataService,\n    protected itemTemplateService: ItemTemplateDataService,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService,\n    protected objectCache: ObjectCacheService,\n    protected requestService: RequestService\n  ) {\n    super(collectionDataService, router, route, notificationsService, translate);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.initTemplateItem();\n  }\n\n  /**\n   * Initialize the collection's item template\n   */\n  initTemplateItem() {\n    this.itemTemplateRD$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((collection: Collection) => this.itemTemplateService.findByCollectionID(collection.uuid))\n    );\n  }\n\n  /**\n   * Add a new item template to the collection and redirect to the item template edit page\n   */\n  addItemTemplate() {\n    const collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    const template$ = collection$.pipe(\n      switchMap((collection: Collection) => this.itemTemplateService.create(new Item(), collection.uuid).pipe(\n        getFirstSucceededRemoteDataPayload(),\n      )),\n    );\n    const templateHref$ = collection$.pipe(\n      switchMap((collection) => this.itemTemplateService.getCollectionEndpoint(collection.id)),\n    );\n\n    combineLatestObservable(collection$, template$, templateHref$).subscribe(([collection, template, templateHref]) => {\n      this.requestService.setStaleByHrefSubstring(templateHref);\n      this.router.navigate([getCollectionItemTemplateRoute(collection.uuid)]);\n    });\n  }\n\n  /**\n   * Delete the item template from the collection\n   */\n  deleteItemTemplate() {\n    const collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    const template$ = collection$.pipe(\n      switchMap((collection: Collection) => this.itemTemplateService.findByCollectionID(collection.uuid).pipe(\n        getFirstSucceededRemoteDataPayload(),\n      )),\n    );\n    const templateHref$ = collection$.pipe(\n      switchMap((collection) => this.itemTemplateService.getCollectionEndpoint(collection.id)),\n    );\n\n    combineLatestObservable(collection$, template$, templateHref$).pipe(\n      switchMap(([collection, template, templateHref]) => {\n        return this.itemTemplateService.deleteByCollectionID(template, collection.uuid).pipe(\n          tap((success: boolean) => {\n            if (success) {\n              this.objectCache.remove(templateHref);\n              this.objectCache.remove(template.self);\n              this.requestService.setStaleByHrefSubstring(template.self);\n              this.requestService.setStaleByHrefSubstring(templateHref);\n              this.requestService.setStaleByHrefSubstring(collection.self);\n            }\n          })\n        );\n      })\n    ).subscribe((success: boolean) => {\n      if (success) {\n        this.notificationsService.success(null, this.translate.get('collection.edit.template.notifications.delete.success'));\n      } else {\n        this.notificationsService.error(null, this.translate.get('collection.edit.template.notifications.delete.error'));\n      }\n      this.initTemplateItem();\n    });\n  }\n}\n","<ds-comcol-role\n  *ngFor=\"let comcolRole of comcolRoles$ | async\"\n  [dso]=\"collection$ | async\"\n  [comcolRole]=\"comcolRole\"\n>\n</ds-comcol-role>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { HALLink } from '../../../core/shared/hal-link.model';\n\n/**\n * Component for managing a collection's roles\n */\n@Component({\n  selector: 'ds-collection-roles',\n  templateUrl: './collection-roles.component.html',\n})\nexport class CollectionRolesComponent implements OnInit {\n\n  dsoRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The different roles for the collection, as an observable.\n   */\n  comcolRoles$: Observable<HALLink[]>;\n\n  /**\n   * The collection to manage, as an observable.\n   */\n  collection$: Observable<Collection>;\n\n  constructor(\n    protected route: ActivatedRoute,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      first(),\n      map((data) => data.dso),\n    );\n\n    this.collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    );\n\n    this.comcolRoles$ = this.collection$.pipe(\n      map((collection) => [\n        {\n          name: 'collection-admin',\n          href: collection._links.adminGroup.href,\n        },\n        {\n          name: 'submitters',\n          href: collection._links.submittersGroup.href,\n        },\n        {\n          name: 'item_read',\n          href: collection._links.itemReadGroup.href,\n        },\n        {\n          name: 'bitstream_read',\n          href: collection._links.bitstreamReadGroup.href,\n        },\n        ...collection._links.workflowGroups,\n      ]),\n    );\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"d-inline-block float-right\">\n    <button class=\" btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async)\"\n            (click)=\"discard()\"><i\n      class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n      class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || !isValid() || (initialHarvestType === harvestTypeNone && contentSource.harvestType === initialHarvestType)\"\n            (click)=\"onSubmit()\"><i\n      class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n    </button>\n  </div>\n  <h4>{{ 'collection.edit.tabs.source.head' | translate }}</h4>\n  <div *ngIf=\"contentSource\" class=\"form-check mb-4\">\n    <input type=\"checkbox\" class=\"form-check-input\" id=\"externalSourceCheck\" [checked]=\"(contentSource?.harvestType !== harvestTypeNone)\" (change)=\"changeExternalSource()\">\n    <label class=\"form-check-label\" for=\"externalSourceCheck\">{{ 'collection.edit.tabs.source.external' | translate }}</label>\n  </div>\n  <ds-loading *ngIf=\"!contentSource\" [message]=\"'loading.content-source' | translate\"></ds-loading>\n  <h4 *ngIf=\"contentSource && (contentSource?.harvestType !== harvestTypeNone)\">{{ 'collection.edit.tabs.source.form.head' | translate }}</h4>\n</div>\n<ds-form *ngIf=\"formGroup && contentSource && (contentSource?.harvestType !== harvestTypeNone)\"\n         [formId]=\"'collection-source-form-id'\"\n         [formGroup]=\"formGroup\"\n         [formModel]=\"formModel\"\n         [formLayout]=\"formLayout\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"\n         (submitForm)=\"onSubmit()\"\n         (cancel)=\"onCancel()\"></ds-form>\n<div class=\"container-fluid\" *ngIf=\"(contentSource?.harvestType !== harvestTypeNone)\">\n  <div class=\"d-inline-block float-right\">\n    <button class=\" btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async)\"\n            (click)=\"discard()\"><i\n      class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n      class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || !isValid() || (initialHarvestType === harvestTypeNone && contentSource.harvestType === initialHarvestType)\"\n            (click)=\"onSubmit()\"><i\n      class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n    </button>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractTrackableComponent } from '../../../shared/trackable/abstract-trackable.component';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicOptionControlModel,\n  DynamicRadioGroupModel,\n  DynamicSelectModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { Location } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { FormGroup } from '@angular/forms';\nimport { hasNoValue, hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { ContentSource, ContentSourceHarvestType } from '../../../core/shared/content-source.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { first, map, switchMap, take } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FieldUpdate, FieldUpdates } from '../../../core/data/object-updates/object-updates.reducer';\nimport { cloneDeep } from 'lodash';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { getFirstSucceededRemoteData, getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { MetadataConfig } from '../../../core/shared/metadata-config.model';\nimport { INotification } from '../../../shared/notifications/models/notification.model';\nimport { RequestService } from '../../../core/data/request.service';\nimport { environment } from '../../../../environments/environment';\n\n/**\n * Component for managing the content source of the collection\n */\n@Component({\n  selector: 'ds-collection-source',\n  templateUrl: './collection-source.component.html',\n})\nexport class CollectionSourceComponent extends AbstractTrackableComponent implements OnInit, OnDestroy {\n  /**\n   * The current collection's remote data\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The collection's content source\n   */\n  contentSource: ContentSource;\n\n  /**\n   * The current update to the content source\n   */\n  update$: Observable<FieldUpdate>;\n\n  /**\n   * The initial harvest type we started off with\n   * Used to compare changes\n   */\n  initialHarvestType: ContentSourceHarvestType;\n\n  /**\n   * @type {string} Key prefix used to generate form labels\n   */\n  LABEL_KEY_PREFIX = 'collection.edit.tabs.source.form.';\n\n  /**\n   * @type {string} Key prefix used to generate form error messages\n   */\n  ERROR_KEY_PREFIX = 'collection.edit.tabs.source.form.errors.';\n\n  /**\n   * @type {string} Key prefix used to generate form option labels\n   */\n  OPTIONS_KEY_PREFIX = 'collection.edit.tabs.source.form.options.';\n\n  /**\n   * The Dynamic Input Model for the OAI Provider\n   */\n  oaiSourceModel = new DynamicInputModel({\n    id: 'oaiSource',\n    name: 'oaiSource',\n    required: true,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must provide a set id of the target collection.'\n    }\n  });\n\n  /**\n   * The Dynamic Input Model for the OAI Set\n   */\n  oaiSetIdModel = new DynamicInputModel({\n    id: 'oaiSetId',\n    name: 'oaiSetId'\n  });\n\n  /**\n   * The Dynamic Input Model for the Metadata Format used\n   */\n  metadataConfigIdModel = new DynamicSelectModel({\n    id: 'metadataConfigId',\n    name: 'metadataConfigId'\n  });\n\n  /**\n   * The Dynamic Input Model for the type of harvesting\n   */\n  harvestTypeModel = new DynamicRadioGroupModel<string>({\n    id: 'harvestType',\n    name: 'harvestType',\n    options: [\n      {\n        value: ContentSourceHarvestType.Metadata\n      },\n      {\n        value: ContentSourceHarvestType.MetadataAndRef\n      },\n      {\n        value: ContentSourceHarvestType.MetadataAndBitstreams\n      }\n    ]\n  });\n\n  /**\n   * All input models in a simple array for easier iterations\n   */\n  inputModels = [this.oaiSourceModel, this.oaiSetIdModel, this.metadataConfigIdModel, this.harvestTypeModel];\n\n  /**\n   * The dynamic form fields used for editing the content source of a collection\n   * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicFormGroupModel({\n      id: 'oaiSourceContainer',\n      group: [\n        this.oaiSourceModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'oaiSetContainer',\n      group: [\n        this.oaiSetIdModel,\n        this.metadataConfigIdModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'harvestTypeContainer',\n      group: [\n        this.harvestTypeModel\n      ]\n    })\n  ];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    oaiSource: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    oaiSetId: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    metadataConfigId: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    harvestType: {\n      grid: {\n        host: 'col-12',\n        option: 'btn-outline-secondary'\n      }\n    },\n    oaiSetContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    oaiSourceContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    harvestTypeContainer: {\n      grid: {\n        host: 'row'\n      }\n    }\n  };\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Subscription to update the current form\n   */\n  updateSub: Subscription;\n\n  /**\n   * The content harvesting type used when harvesting is disabled\n   */\n  harvestTypeNone = ContentSourceHarvestType.None;\n\n  /**\n   * The previously selected harvesting type\n   * Used for switching between ContentSourceHarvestType.None and the previously selected value when enabling / disabling harvesting\n   * Defaults to ContentSourceHarvestType.Metadata\n   */\n  previouslySelectedHarvestType = ContentSourceHarvestType.Metadata;\n\n  /**\n   * Notifications displayed after clicking submit\n   * These are cleaned up every time a user submits the form to prevent error or other notifications from staying active\n   * while they shouldn't be.\n   */\n  displayedNotifications: INotification[] = [];\n\n  public constructor(public objectUpdatesService: ObjectUpdatesService,\n                     public notificationsService: NotificationsService,\n                     protected location: Location,\n                     protected formService: DynamicFormService,\n                     protected translate: TranslateService,\n                     protected route: ActivatedRoute,\n                     protected router: Router,\n                     protected collectionService: CollectionDataService,\n                     protected requestService: RequestService) {\n    super(objectUpdatesService, notificationsService, translate);\n  }\n\n  /**\n   * Initialize properties to setup the Field Update and Form\n   */\n  ngOnInit(): void {\n    this.notificationsPrefix = 'collection.edit.tabs.source.notifications.';\n    this.discardTimeOut = environment.collection.edit.undoTimeout;\n    this.url = this.router.url;\n    if (this.url.indexOf('?') > 0) {\n      this.url = this.url.substr(0, this.url.indexOf('?'));\n    }\n    this.formGroup = this.formService.createFormGroup(this.formModel);\n    this.collectionRD$ = this.route.parent.data.pipe(first(), map((data) => data.dso));\n\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.getContentSource(uuid)),\n      getFirstCompletedRemoteData(),\n    ).subscribe((rd: RemoteData<ContentSource>) => {\n      this.initializeOriginalContentSource(rd.payload);\n    });\n\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n  }\n\n  /**\n   * Initialize the Field Update and subscribe on it to fire updates to the form whenever it changes\n   */\n  initializeOriginalContentSource(contentSource: ContentSource) {\n    this.contentSource = contentSource;\n    this.initialHarvestType = contentSource.harvestType;\n    this.initializeMetadataConfigs();\n    const initialContentSource = cloneDeep(this.contentSource);\n    this.objectUpdatesService.initialize(this.url, [initialContentSource], new Date());\n    this.update$ = this.objectUpdatesService.getFieldUpdates(this.url, [initialContentSource]).pipe(\n      map((updates: FieldUpdates) => updates[initialContentSource.uuid])\n    );\n    this.updateSub = this.update$.subscribe((update: FieldUpdate) => {\n      if (update) {\n        const field = update.field as ContentSource;\n        let configId;\n        if (hasValue(this.contentSource) && isNotEmpty(this.contentSource.metadataConfigs)) {\n          configId = this.contentSource.metadataConfigs[0].id;\n        }\n        if (hasValue(field) && hasValue(field.metadataConfigId)) {\n          configId = field.metadataConfigId;\n        }\n        if (hasValue(field)) {\n          this.formGroup.patchValue({\n            oaiSourceContainer: {\n              oaiSource: field.oaiSource\n            },\n            oaiSetContainer: {\n              oaiSetId: field.oaiSetId,\n              metadataConfigId: configId\n            },\n            harvestTypeContainer: {\n              harvestType: field.harvestType\n            }\n          });\n          this.contentSource = cloneDeep(field);\n        }\n        this.contentSource.metadataConfigId = configId;\n      }\n    });\n  }\n\n  /**\n   * Fill the metadataConfigIdModel's options using the contentSource's metadataConfigs property\n   */\n  initializeMetadataConfigs() {\n    this.metadataConfigIdModel.options = this.contentSource.metadataConfigs\n      .map((metadataConfig: MetadataConfig) => Object.assign({ value: metadataConfig.id, label: metadataConfig.label }));\n    if (this.metadataConfigIdModel.options.length > 0) {\n      this.formGroup.patchValue({\n        oaiSetContainer: {\n          metadataConfigId: this.metadataConfigIdModel.options[0].value\n        }\n      });\n    }\n  }\n\n  /**\n   * Used the update translations of errors and labels on init and on language change\n   */\n  private updateFieldTranslations() {\n    this.inputModels.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        this.updateFieldTranslation(fieldModel);\n      }\n    );\n  }\n\n  /**\n   * Update the translations of a DynamicInputModel\n   * @param fieldModel\n   */\n  private updateFieldTranslation(fieldModel: DynamicFormControlModel) {\n    fieldModel.label = this.translate.instant(this.LABEL_KEY_PREFIX + fieldModel.id);\n    if (isNotEmpty(fieldModel.validators)) {\n      fieldModel.errorMessages = {};\n      Object.keys(fieldModel.validators).forEach((key) => {\n        fieldModel.errorMessages[key] = this.translate.instant(this.ERROR_KEY_PREFIX + fieldModel.id + '.' + key);\n      });\n    }\n    if (fieldModel instanceof DynamicOptionControlModel) {\n      if (isNotEmpty(fieldModel.options)) {\n        fieldModel.options.forEach((option) => {\n          if (hasNoValue(option.label)) {\n            option.label = this.translate.instant(this.OPTIONS_KEY_PREFIX + fieldModel.id + '.' + option.value);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Fired whenever the form receives an update and makes sure the Content Source and field update is up-to-date with the changes\n   * @param event\n   */\n  onChange(event) {\n    this.updateContentSourceField(event.model, true);\n    this.saveFieldUpdate();\n  }\n\n  /**\n   * Submit the edited Content Source to the REST API, re-initialize the field update and display a notification\n   */\n  onSubmit() {\n    // Remove cached harvester request to allow for latest harvester to be displayed when switching tabs\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.getHarvesterEndpoint(uuid)),\n      take(1)\n    ).subscribe((endpoint) => this.requestService.removeByHrefSubstring(endpoint));\n\n    // Update harvester\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.updateContentSource(uuid, this.contentSource)),\n      take(1)\n    ).subscribe((result: ContentSource | INotification) => {\n      if (hasValue((result as any).harvestType)) {\n        this.clearNotifications();\n        this.initializeOriginalContentSource(result as ContentSource);\n        this.displayedNotifications.push(this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved')));\n      } else {\n        this.displayedNotifications.push(result as INotification);\n      }\n    });\n  }\n\n  /**\n   * Cancel the edit and return to the previous page\n   */\n  onCancel() {\n    this.location.back();\n  }\n\n  /**\n   * Is the current form valid to be submitted ?\n   */\n  isValid(): boolean {\n    return (this.contentSource.harvestType === ContentSourceHarvestType.None) || this.formGroup.valid;\n  }\n\n  /**\n   * Switch the external source on or off and fire a field update\n   */\n  changeExternalSource() {\n    if (this.contentSource.harvestType === ContentSourceHarvestType.None) {\n      this.contentSource.harvestType = this.previouslySelectedHarvestType;\n    } else {\n      this.previouslySelectedHarvestType = this.contentSource.harvestType;\n      this.contentSource.harvestType = ContentSourceHarvestType.None;\n    }\n    this.updateContentSource(false);\n  }\n\n  /**\n   * Loop over all inputs and update the Content Source with their value\n   * @param updateHarvestType   When set to false, the harvestType of the contentSource will be ignored in the update\n   */\n  updateContentSource(updateHarvestType: boolean) {\n    this.inputModels.forEach(\n      (fieldModel: DynamicInputModel) => {\n        this.updateContentSourceField(fieldModel, updateHarvestType);\n      }\n    );\n    this.saveFieldUpdate();\n  }\n\n  /**\n   * Update the Content Source with the value from a DynamicInputModel\n   * @param fieldModel          The fieldModel to fetch the value from and update the contentSource with\n   * @param updateHarvestType   When set to false, the harvestType of the contentSource will be ignored in the update\n   */\n  updateContentSourceField(fieldModel: DynamicInputModel, updateHarvestType: boolean) {\n    if (hasValue(fieldModel.value) && !(fieldModel.id === this.harvestTypeModel.id && !updateHarvestType)) {\n      this.contentSource[fieldModel.id] = fieldModel.value;\n    }\n  }\n\n  /**\n   * Save the current Content Source to the Object Updates cache\n   */\n  saveFieldUpdate() {\n    this.objectUpdatesService.saveAddFieldUpdate(this.url, cloneDeep(this.contentSource));\n  }\n\n  /**\n   * Clear possible active notifications\n   */\n  clearNotifications() {\n    this.displayedNotifications.forEach((notification: INotification) => {\n      this.notificationsService.remove(notification);\n    });\n    this.displayedNotifications = [];\n  }\n\n  /**\n   * Make sure open subscriptions are closed\n   */\n  ngOnDestroy(): void {\n    if (this.updateSub) {\n      this.updateSub.unsubscribe();\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { filter, map, take } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { hasValue } from '../../../shared/empty.util';\n\n/**\n * Component for managing a collection's curation tasks\n */\n@Component({\n  selector: 'ds-collection-curate',\n  templateUrl: './collection-curate.component.html',\n})\nexport class CollectionCurateComponent {\n  dsoRD$: Observable<RemoteData<Collection>>;\n  collectionName$: Observable<string>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dsoNameService: DSONameService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      take(1),\n      map((data) => data.dso),\n    );\n\n    this.collectionName$ = this.dsoRD$.pipe(\n      filter((rd: RemoteData<Collection>) => hasValue(rd)),\n      map((rd: RemoteData<Collection>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\n\n@Component({\n  selector: 'ds-collection-authorizations',\n  templateUrl: './collection-authorizations.component.html',\n})\n/**\n * Component that handles the Collection Authorizations\n */\nexport class CollectionAuthorizationsComponent<TDomain extends DSpaceObject> implements OnInit {\n\n  /**\n   * The initial DSO object\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the collection\n   */\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.parent.data.pipe(first(), map((data) => data.dso));\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CollectionItemMapperComponent } from '../collection-item-mapper/collection-item-mapper.component';\nimport { EditCollectionPageComponent } from './edit-collection-page.component';\nimport { CollectionMetadataComponent } from './collection-metadata/collection-metadata.component';\nimport { CollectionRolesComponent } from './collection-roles/collection-roles.component';\nimport { CollectionSourceComponent } from './collection-source/collection-source.component';\nimport { CollectionCurateComponent } from './collection-curate/collection-curate.component';\nimport { CollectionAuthorizationsComponent } from './collection-authorizations/collection-authorizations.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ResourcePolicyTargetResolver } from '../../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyCreateComponent } from '../../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyResolver } from '../../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyEditComponent } from '../../shared/resource-policies/edit/resource-policy-edit.component';\nimport { CollectionAdministratorGuard } from '../../core/data/feature-authorization/feature-authorization-guard/collection-administrator.guard';\n\n/**\n * Routing module that handles the routing for the Edit Collection page administrator functionality\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { breadcrumbKey: 'collection.edit' },\n        component: EditCollectionPageComponent,\n        canActivate: [CollectionAdministratorGuard],\n        children: [\n          {\n            path: '',\n            redirectTo: 'metadata',\n            pathMatch: 'full'\n          },\n          {\n            path: 'metadata',\n            component: CollectionMetadataComponent,\n            data: {\n              title: 'collection.edit.tabs.metadata.title',\n              hideReturnButton: true,\n              showBreadcrumbs: true\n            }\n          },\n          {\n            path: 'roles',\n            component: CollectionRolesComponent,\n            data: { title: 'collection.edit.tabs.roles.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'source',\n            component: CollectionSourceComponent,\n            data: { title: 'collection.edit.tabs.source.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'curate',\n            component: CollectionCurateComponent,\n            data: { title: 'collection.edit.tabs.curate.title', showBreadcrumbs: true }\n          },\n/*          {\n            path: 'authorizations',\n            component: CollectionAuthorizationsComponent,\n            data: { title: 'collection.edit.tabs.authorizations.title', showBreadcrumbs: true }\n          },*/\n          {\n            path: 'authorizations',\n            data: { showBreadcrumbs: true },\n            children: [\n              {\n                path: 'create',\n                resolve: {\n                  resourcePolicyTarget: ResourcePolicyTargetResolver\n                },\n                component: ResourcePolicyCreateComponent,\n                data: { title: 'resource-policies.create.page.title' }\n              },\n              {\n                path: 'edit',\n                resolve: {\n                  resourcePolicy: ResourcePolicyResolver\n                },\n                component: ResourcePolicyEditComponent,\n                data: { title: 'resource-policies.edit.page.title' }\n              },\n              {\n                path: '',\n                component: CollectionAuthorizationsComponent,\n                data: { title: 'collection.edit.tabs.authorizations.title', showBreadcrumbs: true }\n              }\n            ]\n          },\n          {\n            path: 'mapper',\n            component: CollectionItemMapperComponent,\n            data: { title: 'collection.edit.tabs.item-mapper.title', hideReturnButton: true, showBreadcrumbs: true }\n          },\n        ]\n      }\n    ])\n  ],\n  providers: [\n    ResourcePolicyResolver,\n    ResourcePolicyTargetResolver\n  ]\n})\nexport class EditCollectionPageRoutingModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport { SingleFeatureAuthorizationGuard } from './single-feature-authorization.guard';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../../../auth/auth.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../feature-id';\n\n/**\n * Prevent unauthorized activating and loading of routes when the current authenticated user\n * isn't a Collection administrator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollectionAdministratorGuard extends SingleFeatureAuthorizationGuard {\n  constructor(protected authorizationService: AuthorizationDataService, protected router: Router, protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check group management rights\n   */\n  getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.IsCollectionAdmin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EditCollectionPageComponent } from './edit-collection-page.component';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { EditCollectionPageRoutingModule } from './edit-collection-page.routing.module';\nimport { CollectionMetadataComponent } from './collection-metadata/collection-metadata.component';\nimport { CollectionRolesComponent } from './collection-roles/collection-roles.component';\nimport { CollectionCurateComponent } from './collection-curate/collection-curate.component';\nimport { CollectionSourceComponent } from './collection-source/collection-source.component';\nimport { CollectionAuthorizationsComponent } from './collection-authorizations/collection-authorizations.component';\nimport { CollectionFormModule } from '../collection-form/collection-form.module';\n\n/**\n * Module that contains all components related to the Edit Collection page administrator functionality\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    EditCollectionPageRoutingModule,\n    CollectionFormModule\n  ],\n  declarations: [\n    EditCollectionPageComponent,\n    CollectionMetadataComponent,\n    CollectionRolesComponent,\n    CollectionCurateComponent,\n    CollectionSourceComponent,\n    CollectionAuthorizationsComponent\n  ]\n})\nexport class EditCollectionPageModule {\n\n}\n","<div class=\"container\">\n    <h3>{{'collection.curate.header' |translate:{collection: (collectionName$ |async)} }}</h3>\n    <ds-curation-form\n            [dsoHandle]=\"(dsoRD$|async)?.payload.handle\"\n    ></ds-curation-form>\n</div>\n","<div class=\"container\">\n  <ds-resource-policies [resourceType]=\"'collection'\" [resourceUUID]=\"(dsoRD$ | async)?.payload?.id\"></ds-resource-policies>\n</div>\n"]}