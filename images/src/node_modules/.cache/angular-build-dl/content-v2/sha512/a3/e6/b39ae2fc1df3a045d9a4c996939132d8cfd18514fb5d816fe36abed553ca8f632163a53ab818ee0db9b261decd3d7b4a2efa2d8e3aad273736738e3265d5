{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/process-page/form/process-form.component.html","webpack:///src/app/process-page/form/process-form.component.ts","webpack:///src/app/process-page/new/new-process.component.html","webpack:///src/app/process-page/new/new-process.component.ts","webpack:///src/app/process-page/overview/process-overview.component.html","webpack:///src/app/process-page/overview/process-overview.component.ts","webpack:///src/app/process-page/process-page.resolver.ts","webpack:///src/app/process-page/detail/process-detail-field/process-detail-field.component.ts","webpack:///src/app/process-page/processes/process-status.model.ts","webpack:///src/app/process-page/detail/process-detail-field/process-detail-field.component.html","webpack:///src/app/process-page/detail/process-detail.component.html","webpack:///src/app/process-page/detail/process-detail.component.ts","webpack:///src/app/process-page/process-breadcrumb.resolver.ts","webpack:///src/app/process-page/process-breadcrumbs.service.ts","webpack:///src/app/process-page/process-page-routing.module.ts","webpack:///src/app/process-page/form/scripts-select/scripts-select.component.html","webpack:///src/app/process-page/form/scripts-select/scripts-select.component.ts","webpack:///src/app/process-page/scripts/script-parameter-type.model.ts","webpack:///src/app/process-page/form/script-help/script-help.component.html","webpack:///src/app/process-page/form/script-help/script-help.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/string-value-input/string-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/string-value-input/string-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/date-value-input/date-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/date-value-input/date-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/file-value-input/file-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/file-value-input/file-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/boolean-value-input/boolean-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/boolean-value-input/boolean-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/parameter-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/parameter-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-select/parameter-select.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-select/parameter-select.component.ts","webpack:///src/app/process-page/form/process-parameters/process-parameters.component.html","webpack:///src/app/process-page/form/process-parameters/process-parameters.component.ts","webpack:///src/app/process-page/process-page.module.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","breadcrumbService","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","ProcessFormComponent","scriptService","notificationsService","translationService","requestService","router","selectedScript","process","files","missingParameters","form","validateForm","isRequiredMissing","stringParameters","parameters","map","parameter","name","value","checkValue","invoke","id","pipe","g","subscribe","rd","hasSucceeded","title","get","content","success","sendBack","error","processParameter","valid","Object","keys","controls","forEach","invalid","markAsDirty","setParams","param","filter","mandatory","rp","includes","push","length","removeByHrefSubstring","navigateByUrl","submitForm","controlContainerFactory","controlContainer","NewProcessComponent","processService","linkService","snapshot","queryParams","fromExisting$","findById","script$","resolveLink","switchMap","script","ProcessPageResolver","ProcessOverviewComponent","ProcessDetailFieldComponent","paginationService","ePersonService","config","assign","elementsPerPage","pageConfig","pageSize","dateFormat","setProcesses","processesRD$","getFindListOptions","findAll","eperson","clearPagination","params","ProcessStatus","SCHEDULED","RUNNING","COMPLETED","FAILED","ProcessDetailComponent","ProcessBreadcrumbResolver","ProcessBreadcrumbsService","ProcessPageRoutingModule","bitstreamDataService","nameService","zone","authService","http","AlertTypeEnum","outputLogs$","BehaviorSubject","showOutputLogs","retrievingOutputLogs$","processRD$","filesRD$","getFiles","processId","bitstream","getName","console","log","next","runOutsideAngular","processOutputRD$","findByHref","_links","output","href","outputLogFileUrl$","tap","processOutputFileRD","statusCode","run","processOutput","payload","getShortlivedToken","take","token","toString","getTextFile","finalize","logs","filename","responseType","processStatus","scriptName","object","substr","indexOf","forChild","path","resolve","breadcrumb","canActivate","children","component","ScriptsSelectComponent","select","EventEmitter","scripts$","paginatedList","page","routeSub","distinctUntilChanged","scripts","find","_selectedScript","emit","unsubscribe","navigate","provide","ControlContainer","useFactory","deps","Optional","NgForm","ScriptParameterType","STRING","DATE","BOOLEAN","FILE","OUTPUT","ScriptHelpComponent","ValueInputComponent","parameterTypes","updateValue","StringValueInputComponent","initialValue","setValue","DateValueInputComponent","FileValueInputComponent","BooleanValueInputComponent","fileObject","setFile","ParameterValueInputComponent","removeParameter","ParameterSelectComponent","parameterValue","changeParameter","selectedParameter","selectedParameterValue","ProcessParametersComponent","ProcessPageModule","updateParameters","initialParams","parameterValues","changes","initParameters","initializeParameter","index","addParameter","i","I18nBreadcrumbsService","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <h2 class=\"col-12\">\n            {{headerKey | translate}}\n        </h2>\n        <div class=\"col-12 col-md-6\">\n            <form #form=\"ngForm\" (ngSubmit)=\"submitForm(form)\">\n                <ds-scripts-select [script]=\"selectedScript\" (select)=\"selectedScript = $event; parameters = undefined\"></ds-scripts-select>\n                <ds-process-parameters [initialParams]=\"parameters\" [script]=\"selectedScript\" (updateParameters)=\"parameters = $event\"></ds-process-parameters>\n                <button [routerLink]=\"['/processes']\" class=\"btn btn-light float-left\">{{ 'process.new.cancel' | translate }}</button>\n                <button type=\"submit\" class=\"btn btn-light float-right\">{{ 'process.new.submit' | translate }}</button>\n            </form>\n        </div>\n        <div class=\"col-12 col-md-6\">\n            <ds-script-help [script]=\"selectedScript\"></ds-script-help>\n        </div>\n    </div>\n\n    <div *ngIf=\"missingParameters.length > 0\" class=\"mt-3 alert alert-danger validation-error\">\n        {{'process.new.parameter.required.missing' | translate}}\n        <ul>\n            <li *ngFor=\"let missing of missingParameters\">{{missing}}</li>\n        </ul>\n    </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Script } from '../scripts/script.model';\nimport { Process } from '../processes/process.model';\nimport { ProcessParameter } from '../processes/process-parameter.model';\nimport { ScriptDataService } from '../../core/data/processes/script-data.service';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { ScriptParameter } from '../scripts/script-parameter.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\nimport { Router } from '@angular/router';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { getProcessListRoute } from '../process-page-routing.paths';\n\n/**\n * Component to create a new script\n */\n@Component({\n  selector: 'ds-process-form',\n  templateUrl: './process-form.component.html',\n  styleUrls: ['./process-form.component.scss'],\n})\nexport class ProcessFormComponent implements OnInit {\n  /**\n   * The currently selected script\n   */\n  @Input() public selectedScript: Script = undefined;\n\n  /**\n   * The process to create\n   */\n  @Input() public process: Process = undefined;\n\n  /**\n   * The parameter values to use to start the process\n   */\n  @Input() public parameters: ProcessParameter[];\n\n  /**\n   * Optional files that are used as parameter values\n   */\n  public files: File[] = [];\n\n  /**\n   * Message key for the header of the form\n   */\n  @Input() public headerKey: string;\n\n  /**\n   * Contains the missing parameters on submission\n   */\n  public missingParameters = [];\n\n  constructor(\n    private scriptService: ScriptDataService,\n    private notificationsService: NotificationsService,\n    private translationService: TranslateService,\n    private requestService: RequestService,\n    private router: Router) {\n  }\n\n  ngOnInit(): void {\n    this.process = new Process();\n  }\n\n  /**\n   * Validates the form, sets the parameters to correct values and invokes the script with the correct parameters\n   * @param form\n   */\n  submitForm(form: NgForm) {\n    if (!this.validateForm(form) || this.isRequiredMissing()) {\n      return;\n    }\n\n    const stringParameters: ProcessParameter[] = this.parameters.map((parameter: ProcessParameter) => {\n        return {\n          name: parameter.name,\n          value: this.checkValue(parameter)\n        };\n      }\n    );\n    this.scriptService.invoke(this.selectedScript.id, stringParameters, this.files)\n      .pipe(getFirstCompletedRemoteData())\n      .subscribe((rd: RemoteData<Process>) => {\n        if (rd.hasSucceeded) {\n          const title = this.translationService.get('process.new.notification.success.title');\n          const content = this.translationService.get('process.new.notification.success.content');\n          this.notificationsService.success(title, content);\n          this.sendBack();\n        } else {\n          const title = this.translationService.get('process.new.notification.error.title');\n          const content = this.translationService.get('process.new.notification.error.content');\n          this.notificationsService.error(title, content);\n        }\n      });\n  }\n\n  /**\n   * Checks whether the parameter values are files\n   * Replaces file parameters by strings and stores the files in a separate list\n   * @param processParameter The parameter value to check\n   */\n  private checkValue(processParameter: ProcessParameter): string {\n    if (typeof processParameter.value === 'object') {\n      this.files = [...this.files, processParameter.value];\n      return processParameter.value.name;\n    }\n    return processParameter.value;\n  }\n\n  /**\n   * Validates the form\n   * Returns false if the form is invalid\n   * Returns true if the form is valid\n   * @param form The NgForm object to validate\n   */\n  private validateForm(form: NgForm) {\n    let valid = true;\n    Object.keys(form.controls).forEach((key) => {\n      if (form.controls[key].invalid) {\n        form.controls[key].markAsDirty();\n        valid = false;\n      }\n    });\n    return valid;\n  }\n\n  private isRequiredMissing() {\n    this.missingParameters = [];\n    const setParams: string[] = this.parameters\n      .map((param) => param.name);\n    const requiredParams: ScriptParameter[] = this.selectedScript.parameters.filter((param) => param.mandatory);\n    for (const rp of requiredParams) {\n      if (!setParams.includes(rp.name)) {\n        this.missingParameters.push(rp.name);\n      }\n    }\n    return this.missingParameters.length > 0;\n  }\n\n  private sendBack() {\n    this.requestService.removeByHrefSubstring('/processes');\n    /* should subscribe on the previous method to know the action is finished and then navigate,\n    will fix this when the removeByHrefSubstring changes are merged */\n    this.router.navigateByUrl(getProcessListRoute());\n  }\n}\n\nexport function controlContainerFactory(controlContainer?: ControlContainer) {\n  return controlContainer;\n}\n","<ng-container *ngIf=\"fromExisting$ && (fromExisting$ | async)\">\n    <ds-process-form *ngVar=\"fromExisting$ | async as process\" headerKey=\"process.new.header\" [selectedScript]=\"script$ | async\" [parameters]=\"process.parameters\"></ds-process-form>\n</ng-container>\n<ng-container *ngIf=\"!fromExisting$ || !(fromExisting$ | async)\">\n    <ds-process-form headerKey=\"process.new.header\"></ds-process-form>\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { Process } from '../processes/process.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProcessDataService } from '../../core/data/processes/process-data.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { LinkService } from '../../core/cache/builders/link.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { Script } from '../scripts/script.model';\n\n/**\n * Component to create a new script\n */\n@Component({\n  selector: 'ds-new-process',\n  templateUrl: './new-process.component.html',\n  styleUrls: ['./new-process.component.scss'],\n})\nexport class NewProcessComponent implements OnInit {\n  /**\n   * Emits preselected process if there is one\n   */\n  fromExisting$?: Observable<Process>;\n  /**\n   * Emits preselected script if there is one\n   */\n  script$?: Observable<Script>;\n\n  constructor(private route: ActivatedRoute, private processService: ProcessDataService, private linkService: LinkService) {\n  }\n\n  /**\n   * If there's an id parameter, use this the process with this identifier as presets for the form\n   */\n  ngOnInit() {\n    const id = this.route.snapshot.queryParams.id;\n    if (id) {\n      this.fromExisting$ = this.processService.findById(id).pipe(getFirstSucceededRemoteDataPayload());\n      this.script$ = this.fromExisting$.pipe(\n        map((process: Process) => this.linkService.resolveLink<Process>(process, followLink('script'))),\n        switchMap((process: Process) => process.script),\n        getFirstSucceededRemoteDataPayload()\n      );\n    }\n  }\n}\n","<div class=\"container\">\n    <div class=\"d-flex\">\n        <h2 class=\"flex-grow-1\">{{'process.overview.title' | translate}}</h2>\n        <button class=\"btn btn-lg btn-success \" routerLink=\"/processes/new\"><i class=\"fas fa-plus pr-2\"></i>{{'process.overview.new' | translate}}</button>\n    </div>\n    <ds-pagination *ngIf=\"(processesRD$ | async)?.payload?.totalElements > 0\"\n                   [paginationOptions]=\"pageConfig\"\n                   [pageInfoState]=\"(processesRD$ | async)?.payload\"\n                   [collectionSize]=\"(processesRD$ | async)?.payload?.totalElements\"\n                   [hideGear]=\"true\"\n                   [hidePagerWhenSinglePage]=\"true\">\n        <div class=\"table-responsive\">\n            <table class=\"table table-striped table-hover\">\n                <thead>\n                <tr>\n                    <th scope=\"col\">{{'process.overview.table.id' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.name' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.user' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.start' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.finish' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.status' | translate}}</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let process of (processesRD$ | async)?.payload?.page\">\n                    <td><a [routerLink]=\"['/processes/', process.processId]\">{{process.processId}}</a></td>\n                    <td><a [routerLink]=\"['/processes/', process.processId]\">{{process.scriptName}}</a></td>\n                    <td *ngVar=\"(getEpersonName(process.userId) | async) as ePersonName\">{{ePersonName}}</td>\n                    <td>{{process.startTime | date:dateFormat}}</td>\n                    <td>{{process.endTime | date:dateFormat}}</td>\n                    <td>{{process.processStatus}}</td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </ds-pagination>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { Process } from '../processes/process.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { FindListOptions } from '../../core/data/request.models';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ProcessDataService } from '../../core/data/processes/process-data.service';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-process-overview',\n  templateUrl: './process-overview.component.html',\n})\n/**\n * Component displaying a list of all processes in a paginated table\n */\nexport class ProcessOverviewComponent implements OnInit {\n\n  /**\n   * List of all processes\n   */\n  processesRD$: Observable<RemoteData<PaginatedList<Process>>>;\n\n  /**\n   * The current pagination configuration for the page used by the FindAll method\n   */\n  config: FindListOptions = Object.assign(new FindListOptions(), {\n    elementsPerPage: 20\n  });\n\n  /**\n   * The current pagination configuration for the page\n   */\n  pageConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'po',\n    pageSize: 20\n  });\n\n  /**\n   * Date format to use for start and end time of processes\n   */\n  dateFormat = 'yyyy-MM-dd HH:mm:ss';\n\n  constructor(protected processService: ProcessDataService,\n              protected paginationService: PaginationService,\n              protected ePersonService: EPersonDataService) {\n  }\n\n  ngOnInit(): void {\n    this.setProcesses();\n  }\n\n  /**\n   * Send a request to fetch all processes for the current page\n   */\n  setProcesses() {\n    this.processesRD$ = this.paginationService.getFindListOptions(this.pageConfig.id, this.config).pipe(\n      switchMap((config) => this.processService.findAll(config))\n    );\n  }\n\n  /**\n   * Get the name of an EPerson by ID\n   * @param id  ID of the EPerson\n   */\n  getEpersonName(id: string): Observable<string> {\n    return this.ePersonService.findById(id).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((eperson: EPerson) => eperson.name)\n    );\n  }\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.pageConfig.id);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { Process } from './processes/process.model';\nimport { followLink } from '../shared/utils/follow-link-config.model';\nimport { ProcessDataService } from '../core/data/processes/process-data.service';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific process before the route is activated\n */\n@Injectable()\nexport class ProcessPageResolver implements Resolve<RemoteData<Process>> {\n  constructor(private processService: ProcessDataService) {\n  }\n\n  /**\n   * Method for resolving a process based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Process>> Emits the found process based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Process>> {\n    return this.processService.findById(route.params.id, true, false, followLink('script')).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ds-process-detail-field',\n  templateUrl: './process-detail-field.component.html',\n})\n/**\n * A component displaying a single detail about a DSpace Process\n */\nexport class ProcessDetailFieldComponent {\n  /**\n   * I18n message for the header\n   */\n  @Input() title: string;\n}\n","/**\n * List of process statuses\n */\nexport enum ProcessStatus {\n  SCHEDULED,\n  RUNNING,\n  COMPLETED,\n  FAILED\n}\n","<h4 class=\"mt-4\">{{title | translate}}</h4>\n<ng-content></ng-content>\n","<div class=\"container\" *ngVar=\"(processRD$ | async)?.payload as process\">\n    <div class=\"d-flex\">\n        <h2 class=\"flex-grow-1\">{{'process.detail.title' | translate:{id: process?.processId, name: process?.scriptName} }}</h2>\n        <div>\n            <a class=\"btn btn-light\" [routerLink]=\"'/processes/new'\" [queryParams]=\"{id: process?.processId}\">{{'process.detail.create' | translate}}</a>\n        </div>\n    </div>\n    <ds-process-detail-field id=\"process-name\" [title]=\"'process.detail.script'\">\n        <div>{{ process?.scriptName }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"process?.parameters && process?.parameters?.length > 0\" id=\"process-arguments\" [title]=\"'process.detail.arguments'\">\n        <div *ngFor=\"let argument of process?.parameters\">{{ argument?.name }} {{ argument?.value }}</div>\n    </ds-process-detail-field>\n\n    <div *ngVar=\"(filesRD$ | async)?.payload?.page as files\">\n        <ds-process-detail-field *ngIf=\"files && files?.length > 0\" id=\"process-files\" [title]=\"'process.detail.output-files'\">\n          <ds-file-download-link *ngFor=\"let file of files; let last=last;\" [bitstream]=\"file\">\n            <span>{{getFileName(file)}}</span>\n            <span>({{(file?.sizeBytes) | dsFileSize }})</span>\n          </ds-file-download-link>\n        </ds-process-detail-field>\n    </div>\n\n    <ds-process-detail-field *ngIf=\"process && process.startTime\" id=\"process-start-time\" [title]=\"'process.detail.start-time' | translate\">\n        <div>{{ process.startTime }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"process && process.endTime\" id=\"process-end-time\" [title]=\"'process.detail.end-time' | translate\">\n        <div>{{ process.endTime }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"process && process.processStatus\" id=\"process-status\" [title]=\"'process.detail.status' | translate\">\n        <div>{{ process.processStatus }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"isProcessFinished(process)\" id=\"process-output\" [title]=\"'process.detail.output'\">\n      <button *ngIf=\"!showOutputLogs && process?._links?.output?.href != undefined\" id=\"showOutputButton\" class=\"btn btn-light\" (click)=\"showProcessOutputLogs()\">\n        {{ 'process.detail.logs.button' | translate }}\n      </button>\n      <ds-loading *ngIf=\"retrievingOutputLogs$ | async\" class=\"ds-loading\" message=\"{{ 'process.detail.logs.loading' | translate }}\"></ds-loading>\n      <pre class=\"font-weight-bold text-secondary bg-light p-3\"\n           *ngIf=\"showOutputLogs && (outputLogs$ | async)?.length > 0\">{{ (outputLogs$ | async) }}</pre>\n      <p id=\"no-output-logs-message\" *ngIf=\"(!(retrievingOutputLogs$ | async) && showOutputLogs)\n      && !(outputLogs$ | async) || (outputLogs$ | async)?.length == 0 || !process._links.output\">\n        {{ 'process.detail.logs.none' | translate }}\n      </p>\n    </ds-process-detail-field>\n\n    <div>\n      <a class=\"btn btn-light mt-3\" [routerLink]=\"'/processes'\">{{'process.detail.back' | translate}}</a>\n    </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Component, NgZone, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { finalize, map, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { BitstreamDataService } from '../../core/data/bitstream-data.service';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { ProcessDataService } from '../../core/data/processes/process-data.service';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Bitstream } from '../../core/shared/bitstream.model';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport {\n  getFirstSucceededRemoteDataPayload,\n  redirectOn4xx,\n  getFirstSucceededRemoteData\n} from '../../core/shared/operators';\nimport { URLCombiner } from '../../core/url-combiner/url-combiner';\nimport { AlertType } from '../../shared/alert/aletr-type';\nimport { hasValue } from '../../shared/empty.util';\nimport { ProcessStatus } from '../processes/process-status.model';\nimport { Process } from '../processes/process.model';\n\n@Component({\n  selector: 'ds-process-detail',\n  templateUrl: './process-detail.component.html',\n})\n/**\n * A component displaying detailed information about a DSpace Process\n */\nexport class ProcessDetailComponent implements OnInit {\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * The Process's Remote Data\n   */\n  processRD$: Observable<RemoteData<Process>>;\n\n  /**\n   * The Process's Output Files\n   */\n  filesRD$: Observable<RemoteData<PaginatedList<Bitstream>>>;\n\n  /**\n   * File link that contain the output logs with auth token\n   */\n  outputLogFileUrl$: Observable<string>;\n\n  /**\n   * The Process's Output logs\n   */\n  outputLogs$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  /**\n   * Boolean on whether or not to show the output logs\n   */\n  showOutputLogs;\n  /**\n   * When it's retrieving the output logs from backend, to show loading component\n   */\n  retrievingOutputLogs$: BehaviorSubject<boolean>;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected processService: ProcessDataService,\n              protected bitstreamDataService: BitstreamDataService,\n              protected nameService: DSONameService,\n              private zone: NgZone,\n              protected authService: AuthService,\n              protected http: HttpClient) {\n  }\n\n  /**\n   * Initialize component properties\n   * Display a 404 if the process doesn't exist\n   */\n  ngOnInit(): void {\n    this.showOutputLogs = false;\n    this.retrievingOutputLogs$ = new BehaviorSubject<boolean>(false);\n    this.processRD$ = this.route.data.pipe(\n      map((data) => {\n        return data.process as RemoteData<Process>;\n      }),\n      redirectOn4xx(this.router, this.authService)\n    );\n\n    this.filesRD$ = this.processRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((process: Process) => this.processService.getFiles(process.processId))\n    );\n  }\n\n  /**\n   * Get the name of a bitstream\n   * @param bitstream\n   */\n  getFileName(bitstream: Bitstream) {\n    return bitstream instanceof DSpaceObject ? this.nameService.getName(bitstream) : 'unknown';\n  }\n\n  /**\n   * Retrieves the process logs, while setting the loading subject to true.\n   * Sets the outputLogs when retrieved and sets the showOutputLogs boolean to show them and hide the button.\n   */\n  showProcessOutputLogs() {\n    console.log('showProcessOutputLogs');\n    this.retrievingOutputLogs$.next(true);\n    this.zone.runOutsideAngular(() => {\n      const processOutputRD$: Observable<RemoteData<Bitstream>> = this.processRD$.pipe(\n        getFirstSucceededRemoteDataPayload(),\n        switchMap((process: Process) => {\n          return this.bitstreamDataService.findByHref(process._links.output.href, false);\n        })\n      );\n      this.outputLogFileUrl$ = processOutputRD$.pipe(\n        getFirstSucceededRemoteData(),\n        tap((processOutputFileRD: RemoteData<Bitstream>) => {\n          if (processOutputFileRD.statusCode === 204) {\n            this.zone.run(() => this.retrievingOutputLogs$.next(false));\n            this.showOutputLogs = true;\n          }\n        }),\n        switchMap((processOutput: RemoteData<Bitstream>) => {\n          const url = processOutput.payload._links.content.href;\n          return this.authService.getShortlivedToken().pipe(take(1),\n            map((token: string) => {\n              return hasValue(token) ? new URLCombiner(url, `?authentication-token=${token}`).toString() : url;\n            }));\n        })\n      );\n    });\n     this.outputLogFileUrl$.pipe(take(1),\n      switchMap((url: string) => {\n        return this.getTextFile(url);\n      }),\n      finalize(() => this.zone.run(() => this.retrievingOutputLogs$.next(false)))\n    ).subscribe((logs: string) => {\n       this.outputLogs$.next(logs);\n     });\n  }\n\n  getTextFile(filename: string): Observable<string> {\n    // The Observable returned by get() is of type Observable<string>\n    // because a text response was specified.\n    // There's no need to pass a <string> type parameter to get().\n    return this.http.get(filename, { responseType: 'text' })\n      .pipe(\n        finalize(() => {\n          this.showOutputLogs = true;\n        }),\n      );\n  }\n\n  /**\n   * Whether or not the given process has Completed or Failed status\n   * @param process Process to check if completed or failed\n   */\n  isProcessFinished(process: Process): boolean {\n    return (hasValue(process) && hasValue(process.processStatus) &&\n      (process.processStatus.toString() === ProcessStatus[ProcessStatus.COMPLETED].toString()\n        || process.processStatus.toString() === ProcessStatus[ProcessStatus.FAILED].toString()));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Process } from './processes/process.model';\nimport { followLink } from '../shared/utils/follow-link-config.model';\nimport { ProcessDataService } from '../core/data/processes/process-data.service';\nimport { BreadcrumbConfig } from '../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../core/shared/operators';\nimport { ProcessBreadcrumbsService } from './process-breadcrumbs.service';\n\n/**\n * This class represents a resolver that requests a specific process before the route is activated\n */\n@Injectable()\nexport class ProcessBreadcrumbResolver implements Resolve<BreadcrumbConfig<Process>> {\n  constructor(protected breadcrumbService: ProcessBreadcrumbsService, private processService: ProcessDataService) {\n  }\n\n  /**\n   * Method for resolving a process based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Process>> Emits the found process based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<Process>> {\n    const id = route.params.id;\n\n    return this.processService.findById(route.params.id, true, false, followLink('script')).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      map((object: Process) => {\n        const fullPath = state.url;\n        const url = fullPath.substr(0, fullPath.indexOf(id)) + id;\n        return { provider: this.breadcrumbService, key: object, url: url };\n      })\n    );\n  }\n}\n","import { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { BreadcrumbsProviderService } from '../core/breadcrumbs/breadcrumbsProviderService';\nimport { Breadcrumb } from '../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { Process } from './processes/process.model';\n\n/**\n * Service to calculate process breadcrumbs for a single part of the route\n */\n@Injectable()\nexport class ProcessBreadcrumbsService implements BreadcrumbsProviderService<Process> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: Process, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key.processId + ' - ' + key.scriptName, url)]);\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { NewProcessComponent } from './new/new-process.component';\nimport { ProcessOverviewComponent } from './overview/process-overview.component';\nimport { ProcessPageResolver } from './process-page.resolver';\nimport { ProcessDetailComponent } from './detail/process-detail.component';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ProcessBreadcrumbResolver } from './process-breadcrumb.resolver';\nimport { AuthenticatedGuard } from '../core/auth/authenticated.guard';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        data: { breadcrumbKey: 'process.overview' },\n        canActivate: [AuthenticatedGuard],\n        children: [\n          {\n            path: '',\n            component: ProcessOverviewComponent,\n            data: { title: 'process.overview.title' },\n          },\n          {\n            path: 'new',\n            component: NewProcessComponent,\n            resolve: { breadcrumb: I18nBreadcrumbResolver },\n            data: { title: 'process.new.title', breadcrumbKey: 'process.new' }\n          },\n          {\n            path: ':id',\n            component: ProcessDetailComponent,\n            resolve: {\n              process: ProcessPageResolver,\n              breadcrumb: ProcessBreadcrumbResolver\n            }\n          }\n        ]\n      },\n\n    ])\n  ],\n  providers: [\n    ProcessPageResolver\n  ]\n})\nexport class ProcessPageRoutingModule {\n\n}\n","<div class=\"form-group\" *ngIf=\"scripts$ | async\">\n    <label for=\"process-script\">{{'process.new.select-script' | translate}}</label>\n    <select required id=\"process-script\"\n            class=\"form-control\"\n            name=\"script\"\n            [(ngModel)]=\"selectedScript\"\n            #script=\"ngModel\">\n        <option [ngValue]=\"undefined\">{{'process.new.select-script.placeholder' | translate}}</option>\n        <option *ngFor=\"let script of scripts$ | async\" [ngValue]=\"script.id\">\n            {{script.name}}\n        </option>\n    </select>\n\n    <div *ngIf=\"script.invalid && (script.dirty || script.touched)\"\n         class=\"alert alert-danger validation-error\">\n        <div *ngIf=\"script.errors.required\">\n            {{'process.new.select-script.required' | translate}}\n        </div>\n    </div>\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Optional, Output } from '@angular/core';\nimport { ScriptDataService } from '../../../core/data/processes/script-data.service';\nimport { Script } from '../../scripts/script.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap, take } from 'rxjs/operators';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { hasNoValue, hasValue } from '../../../shared/empty.util';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../process-form.component';\n\nconst SCRIPT_QUERY_PARAMETER = 'script';\n\n/**\n * Component used to select a script\n */\n@Component({\n  selector: 'ds-scripts-select',\n  templateUrl: './scripts-select.component.html',\n  styleUrls: ['./scripts-select.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class ScriptsSelectComponent implements OnInit, OnDestroy {\n  /**\n   * Emits the selected script when the selection changes\n   */\n  @Output() select: EventEmitter<Script> = new EventEmitter<Script>();\n  /**\n   * All available scripts\n   */\n  scripts$: Observable<Script[]>;\n  private _selectedScript: Script;\n  private routeSub: Subscription;\n\n  constructor(\n    private scriptService: ScriptDataService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n  }\n\n  /**\n   * Sets all available scripts\n   * Checks if the route contains a script ID and auto selects this scripts\n   */\n  ngOnInit() {\n    this.scripts$ = this.scriptService.findAll({ elementsPerPage: 9999 })\n      .pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((paginatedList: PaginatedList<Script>) => paginatedList.page)\n      );\n\n    this.routeSub = this.route.queryParams\n      .pipe(\n        filter((params: Params) => hasNoValue(params.id)),\n        map((params: Params) => params[SCRIPT_QUERY_PARAMETER]),\n        distinctUntilChanged(),\n        switchMap((id: string) =>\n          this.scripts$\n            .pipe(\n              take(1),\n              map((scripts) =>\n                scripts.find((script) => script.id === id)\n              )\n            )\n        )\n      ).subscribe((script: Script) => {\n        this._selectedScript = script;\n        this.select.emit(script);\n      });\n  }\n\n  /**\n   * Returns the identifier of the selected script\n   */\n  get selectedScript(): string {\n    return this._selectedScript ? this._selectedScript.id : undefined;\n  }\n\n  /**\n   * Sets the currently selected script by navigating to the correct route using the scripts ID\n   * @param value The identifier of the script\n   */\n  set selectedScript(value: string) {\n    this.router.navigate([],\n      {\n        queryParams: { [SCRIPT_QUERY_PARAMETER]: value },\n      }\n    );\n  }\n\n  @Input()\n  set script(value: Script) {\n     this._selectedScript = value;\n  }\n\n  ngOnDestroy(): void {\n    if (hasValue(this.routeSub)) {\n      this.routeSub.unsubscribe();\n    }\n  }\n}\n","/**\n * List of parameter types used for scripts\n */\nexport enum ScriptParameterType {\n  STRING = 'String',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  FILE = 'InputStream',\n  OUTPUT = 'OutputStream'\n}\n","<div class=\"text-secondary\">\n  <h3>{{script?.name}}</h3>\n  <span>{{script?.description}}</span>\n\n  <table class=\"table-borderless mt-3\">\n    <tr *ngFor=\"let param of script?.parameters\">\n      <td class=\"align-top text-nowrap\">{{param.name}} {{param.nameLong}}\n        <ng-container *ngTemplateOutlet=\"type; context: param\"></ng-container>\n      </td>\n      <td>{{param.description}}</td>\n    </tr>\n  </table>\n</div>\n\n<ng-template #type let-type=\"type\">\n    <ng-container [ngSwitch]=\"type\">\n        <span *ngSwitchCase=\"parameterTypes.DATE\"><{{'process.new.parameter.type.value' | translate}}></span>\n        <span *ngSwitchCase=\"parameterTypes.STRING\"><{{'process.new.parameter.type.value' | translate}}></span>\n        <span *ngSwitchCase=\"parameterTypes.OUTPUT\"><{{'process.new.parameter.type.value' | translate}}></span>\n        <span *ngSwitchCase=\"parameterTypes.FILE\"><{{'process.new.parameter.type.file' | translate}}></span>\n    </ng-container>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { Script } from '../../scripts/script.model';\nimport { ScriptParameterType } from '../../scripts/script-parameter-type.model';\n\n/**\n * Components that represents a help section for the script use and parameters\n */\n@Component({\n  selector: 'ds-script-help',\n  templateUrl: './script-help.component.html',\n  styleUrls: ['./script-help.component.scss']\n})\nexport class ScriptHelpComponent {\n  /**\n   * The current script to show the help information for\n   */\n  @Input() script: Script;\n\n  /**\n   * The available script parameter types\n   */\n  parameterTypes = ScriptParameterType;\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Abstract class that represents value input components\n */\n@Component({\n  selector: 'ds-value-input',\n  template: ''\n})\nexport abstract class ValueInputComponent<T> {\n  @Input() index: number;\n  /**\n   * Used by the subclasses to emit the value when it's updated\n   */\n  @Output() updateValue: EventEmitter<T> = new EventEmitter<T>();\n}\n","<input required #string=\"ngModel\" type=\"text\" name=\"string-value-{{index}}\" class=\"form-control\" id=\"string-value-{{index}}\" [ngModel]=\"value\" (ngModelChange)=\"setValue($event)\"/>\n<div *ngIf=\"string.invalid && (string.dirty || string.touched)\"\n     class=\"alert alert-danger validation-error\">\n    <div *ngIf=\"string.errors.required\">\n        {{'process.new.parameter.string.required' | translate}}\n    </div>\n</div>\n","import { Component, Optional, Input } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the user inputted value of a string parameter\n */\n@Component({\n  selector: 'ds-string-value-input',\n  templateUrl: './string-value-input.component.html',\n  styleUrls: ['./string-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class StringValueInputComponent extends ValueInputComponent<string> {\n  /**\n   * The current value of the string\n   */\n  value: string;\n\n  /**\n   * Initial value of the field\n   */\n  @Input() initialValue;\n\n  ngOnInit() {\n    this.value = this.initialValue;\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.updateValue.emit(value);\n  }\n}\n","<input required #string=\"ngModel\" type=\"text\" class=\"form-control\" name=\"date-value-{{index}}\" id=\"date-value-{{index}}\" [ngModel]=\"value\" (ngModelChange)=\"setValue($event)\"/>\n<div *ngIf=\"string.invalid && (string.dirty || string.touched)\"\n     class=\"alert alert-danger validation-error\">\n    <div *ngIf=\"string.errors.required\">\n        {{'process.new.parameter.string.required' | translate}}\n    </div>\n</div>\n","import { Component, Input, Optional } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the user inputted value of a date parameter\n */\n@Component({\n  selector: 'ds-date-value-input',\n  templateUrl: './date-value-input.component.html',\n  styleUrls: ['./date-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class DateValueInputComponent extends ValueInputComponent<string> {\n  /**\n   * The current value of the date string\n   */\n  value: string;\n\n  /**\n   * Initial value of the field\n   */\n  @Input() initialValue;\n\n  ngOnInit() {\n    this.value = this.initialValue;\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.updateValue.emit(value);\n  }\n}\n","<label for=\"file-upload-{{index}}\" class=\"d-flex align-items-center m-0\">\n    <span class=\"btn btn-light\">\n        {{'process.new.parameter.file.upload-button' | translate}}\n    </span>\n    <span class=\"file-name ml-1\">{{fileObject?.name}}</span>\n</label>\n<input requireFile #file=\"ngModel\" type=\"file\" name=\"file-upload-{{index}}\" id=\"file-upload-{{index}}\" class=\"form-control-file d-none\" [ngModel]=\"fileObject\" (ngModelChange)=\"setFile($event)\"/>\n<div *ngIf=\"file.invalid && (file.dirty || file.touched)\"\n     class=\"alert alert-danger validation-error\">\n    <div *ngIf=\"file.errors.required\">\n        {{'process.new.parameter.file.required' | translate}}\n    </div>\n</div>\n","import { Component, Optional } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the user inputted value of a file parameter\n */\n@Component({\n  selector: 'ds-file-value-input',\n  templateUrl: './file-value-input.component.html',\n  styleUrls: ['./file-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class FileValueInputComponent extends ValueInputComponent<File> {\n  /**\n   * The current value of the file\n   */\n  fileObject: File;\n  setFile(files) {\n    this.fileObject = files.length > 0 ? files[0] : undefined;\n    this.updateValue.emit(this.fileObject);\n  }\n}\n","import { Component, OnInit, Optional } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the value of a boolean parameter\n */\n@Component({\n  selector: 'ds-boolean-value-input',\n  templateUrl: './boolean-value-input.component.html',\n  styleUrls: ['./boolean-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class BooleanValueInputComponent extends ValueInputComponent<boolean> implements OnInit {\n  ngOnInit() {\n    this.updateValue.emit(true);\n  }\n}\n","<input type=\"hidden\" value=\"true\" name=\"boolean-value-{{index}}\" id=\"boolean-value-{{index}}\"/>\n","<div [ngSwitch]=\"parameter?.type\">\n  <ds-string-value-input *ngSwitchCase=\"parameterTypes.STRING\" [initialValue]=\"initialValue\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-string-value-input>\n  <ds-string-value-input *ngSwitchCase=\"parameterTypes.OUTPUT\" [initialValue]=\"initialValue\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-string-value-input>\n  <ds-date-value-input *ngSwitchCase=\"parameterTypes.DATE\" [initialValue]=\"initialValue\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-date-value-input>\n  <ds-file-value-input *ngSwitchCase=\"parameterTypes.FILE\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-file-value-input>\n  <ds-boolean-value-input *ngSwitchCase=\"parameterTypes.BOOLEAN\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-boolean-value-input>\n</div>\n","import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';\nimport { ScriptParameterType } from '../../../scripts/script-parameter-type.model';\nimport { ScriptParameter } from '../../../scripts/script-parameter.model';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../process-form.component';\n\n/**\n * Component that renders the correct parameter value input based the script parameter's type\n */\n@Component({\n  selector: 'ds-parameter-value-input',\n  templateUrl: './parameter-value-input.component.html',\n  styleUrls: ['./parameter-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class ParameterValueInputComponent {\n  @Input() index: number;\n\n  /**\n   * The current script parameter\n   */\n  @Input() parameter: ScriptParameter;\n\n  /**\n   * Initial value for input\n   */\n  @Input() initialValue: any;\n  /**\n   * Emits the value of the input when its updated\n   */\n  @Output() updateValue: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The available script parameter types\n   */\n  parameterTypes = ScriptParameterType;\n}\n","<div class=\"form-row mb-2 mx-0\">\n    <select id=\"process-parameters\"\n            class=\"form-control col\"\n            name=\"parameter-{{index}}\"\n            [(ngModel)]=\"selectedParameter\"\n            #param=\"ngModel\">\n        <option [ngValue]=\"undefined\">Add a parameter...</option>\n        <option *ngFor=\"let param of parameters\" [ngValue]=\"param.name\">\n            {{param.nameLong || param.name}}\n        </option>\n    </select>\n    <ds-parameter-value-input [initialValue]=\"parameterValue.value\" [parameter]=\"selectedScriptParameter\" (updateValue)=\"selectedParameterValue = $event\" class=\"d-block col\" [index]=\"index\"></ds-parameter-value-input>\n    <button *ngIf=\"removable\" class=\"btn btn-light col-1 remove-button\" (click)=\"removeParameter.emit(parameterValue);\"><span class=\"fas fa-trash\"></span></button>\n    <span *ngIf=\"!removable\" class=\"col-1\"></span>\n</div>\n\n","import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';\nimport { ProcessParameter } from '../../../processes/process-parameter.model';\nimport { ScriptParameter } from '../../../scripts/script-parameter.model';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../process-form.component';\n\n/**\n * Component to select a single parameter for a process\n */\n@Component({\n  selector: 'ds-parameter-select',\n  templateUrl: './parameter-select.component.html',\n  styleUrls: ['./parameter-select.component.scss'],\n  viewProviders: [{\n    provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]]\n  }]\n})\nexport class ParameterSelectComponent {\n  @Input() index: number;\n\n  /**\n   * The current parameter value of the selected parameter\n   */\n  @Input() parameterValue: ProcessParameter = new ProcessParameter();\n\n  /**\n   * The available script parameters for the script\n   */\n  @Input() parameters: ScriptParameter[];\n\n  /**\n   * Whether or not this selected parameter can be removed from the list\n   */\n  @Input() removable: boolean;\n\n  /**\n   * Emits the parameter value when it's removed\n   */\n  @Output() removeParameter: EventEmitter<ProcessParameter> = new EventEmitter<ProcessParameter>();\n\n  /**\n   * Emits the updated parameter value when it changes\n   */\n  @Output() changeParameter: EventEmitter<ProcessParameter> = new EventEmitter<ProcessParameter>();\n\n  /**\n   * Returns the script parameter based on the currently selected name\n   */\n  get selectedScriptParameter(): ScriptParameter {\n    return this.parameters.find((parameter: ScriptParameter) => parameter.name === this.selectedParameter);\n  }\n\n  /**\n   * Return the currently selected parameter name\n   */\n  get selectedParameter(): string {\n    return this.parameterValue ? this.parameterValue.name : undefined;\n  }\n\n  /**\n   * Sets the currently selected parameter based on the provided parameter name\n   * Emits the new value from the changeParameter output\n   * @param value The parameter name to set\n   */\n  set selectedParameter(value: string) {\n    this.parameterValue.name = value;\n    this.selectedParameterValue = undefined;\n    this.changeParameter.emit(this.parameterValue);\n  }\n\n  /**\n   * Returns the currently selected parameter value\n   */\n  get selectedParameterValue(): any {\n    return this.parameterValue ? this.parameterValue.value : undefined;\n  }\n\n  /**\n   * Sets the currently selected value for the parameter\n   * Emits the new value from the changeParameter output\n   * @param value The parameter value to set\n   */\n  set selectedParameterValue(value: any) {\n    this.parameterValue.value = value;\n    this.changeParameter.emit(this.parameterValue);\n  }\n}\n","<div class=\"form-group\" *ngIf=\"script\">\n    <label>{{'process.new.select-parameters' | translate}}</label>\n    <ds-parameter-select\n            *ngFor=\"let value of parameterValues; let i = index; let last = last\"\n            [parameters]=\"script.parameters\"\n            [parameterValue]=\"value\"\n            [removable]=\"!last\"\n            [index]=\"i\"\n            (removeParameter)=\"removeParameter(i)\"\n            (changeParameter)=\"updateParameter($event, i)\"></ds-parameter-select>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, Optional, Output, SimpleChanges } from '@angular/core';\nimport { Script } from '../../scripts/script.model';\nimport { ProcessParameter } from '../../processes/process-parameter.model';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { ScriptParameter } from '../../scripts/script-parameter.model';\nimport { controlContainerFactory } from '../process-form.component';\n\n/**\n * Component that represents the selected list of parameters for a script\n */\n@Component({\n  selector: 'ds-process-parameters',\n  templateUrl: './process-parameters.component.html',\n  styleUrls: ['./process-parameters.component.scss'],\n  viewProviders: [{\n    provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]]\n  }]\n})\nexport class ProcessParametersComponent implements OnChanges {\n  /**\n   * The currently selected script\n   */\n  @Input() script: Script;\n\n  /**\n   * Initial parameters on load\n   */\n  @Input() initialParams: ProcessParameter[];\n  /**\n   * Emits the parameter values when they're updated\n   */\n  @Output() updateParameters: EventEmitter<ProcessParameter[]> = new EventEmitter();\n\n  /**\n   * The current parameter values\n   */\n  parameterValues: ProcessParameter[];\n\n  ngOnInit() {\n    if (hasValue(this.initialParams)) {\n      this.parameterValues = this.initialParams;\n    }\n  }\n\n  /**\n   * Makes sure the parameters are reset when the script changes\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.script) {\n      this.initParameters();\n    }\n  }\n\n  /**\n   * Empties the parameter values\n   * Initializes the first parameter value\n   */\n  initParameters() {\n    if (hasValue(this.initialParams)) {\n      this.parameterValues = this.initialParams;\n    } else {\n      this.parameterValues = [];\n      this.initializeParameter();\n    }\n  }\n\n  /**\n   * Updates a single parameter value using its new value and index\n   * Adds a new parameter when the last of the parameter values is changed\n   * @param processParameter The new value of the parameter\n   * @param index The index of the parameter\n   */\n  updateParameter(processParameter: ProcessParameter, index: number) {\n    this.parameterValues[index] = processParameter;\n    if (index === this.parameterValues.length - 1) {\n      this.addParameter();\n    }\n    this.updateParameters.emit(this.parameterValues.filter((param: ProcessParameter) => hasValue(param.name)));\n  }\n\n  /**\n   * Removes a parameter value from the list\n   * @param index The index of the parameter to remove\n   */\n  removeParameter(index: number) {\n    this.parameterValues = this.parameterValues.filter((value, i) => i !== index);\n    this.updateParameters.emit(this.parameterValues.filter((param: ProcessParameter) => hasValue(param.name)));\n  }\n\n  /**\n   * Initializes parameter values based on the selected script\n   */\n  initializeParameter() {\n    if (hasValue(this.script)) {\n      this.parameterValues = this.script.parameters\n        .filter((param) => param.mandatory)\n        .map(\n          (parameter: ScriptParameter) => Object.assign(new ProcessParameter(), { name: parameter.name })\n        );\n    }\n    this.addParameter();\n  }\n\n  /**\n   * Adds an empty parameter value to the end of the list\n   */\n  addParameter() {\n    this.parameterValues = [...this.parameterValues, new ProcessParameter()];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { ProcessPageRoutingModule } from './process-page-routing.module';\nimport { NewProcessComponent } from './new/new-process.component';\nimport { ScriptsSelectComponent } from './form/scripts-select/scripts-select.component';\nimport { ScriptHelpComponent } from './form/script-help/script-help.component';\nimport { ParameterSelectComponent } from './form/process-parameters/parameter-select/parameter-select.component';\nimport { ProcessParametersComponent } from './form/process-parameters/process-parameters.component';\nimport { StringValueInputComponent } from './form/process-parameters/parameter-value-input/string-value-input/string-value-input.component';\nimport { ParameterValueInputComponent } from './form/process-parameters/parameter-value-input/parameter-value-input.component';\nimport { FileValueInputComponent } from './form/process-parameters/parameter-value-input/file-value-input/file-value-input.component';\nimport { BooleanValueInputComponent } from './form/process-parameters/parameter-value-input/boolean-value-input/boolean-value-input.component';\nimport { DateValueInputComponent } from './form/process-parameters/parameter-value-input/date-value-input/date-value-input.component';\nimport { ProcessOverviewComponent } from './overview/process-overview.component';\nimport { ProcessDetailComponent } from './detail/process-detail.component';\nimport { ProcessDetailFieldComponent } from './detail/process-detail-field/process-detail-field.component';\nimport { ProcessBreadcrumbsService } from './process-breadcrumbs.service';\nimport { ProcessBreadcrumbResolver } from './process-breadcrumb.resolver';\nimport { ProcessFormComponent } from './form/process-form.component';\n\n@NgModule({\n  imports: [\n    ProcessPageRoutingModule,\n    SharedModule,\n  ],\n  declarations: [\n    NewProcessComponent,\n    ScriptsSelectComponent,\n    ScriptHelpComponent,\n    ParameterSelectComponent,\n    ProcessParametersComponent,\n    StringValueInputComponent,\n    ParameterValueInputComponent,\n    FileValueInputComponent,\n    BooleanValueInputComponent,\n    DateValueInputComponent,\n    ProcessOverviewComponent,\n    ProcessDetailComponent,\n    ProcessDetailFieldComponent,\n    ProcessFormComponent\n  ],\n  providers: [\n    ProcessBreadcrumbResolver,\n    ProcessBreadcrumbsService\n  ]\n})\n\nexport class ProcessPageModule {\n\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}