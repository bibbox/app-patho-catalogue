{"version":3,"sources":["webpack:///src/app/core/json-patch/builder/json-patch-operation-path-combiner.ts","webpack:///src/app/submission/import-external/import-external-preview/submission-import-external-preview.component.ts","webpack:///src/app/submission/import-external/import-external-preview/submission-import-external-preview.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/submission\\/edit\\/submission\\-edit\\.component$ namespace object","webpack:///src/app/submission/import-external/import-external-searchbar/submission-import-external-searchbar.component.ts","webpack:///src/app/submission/import-external/import-external-searchbar/submission-import-external-searchbar.component.html","webpack:///src/app/submission/sections/sections-type.ts","webpack:///src/app/submission/import-external/import-external-collection/submission-import-external-collection.component.ts","webpack:///src/app/submission/import-external/import-external-collection/submission-import-external-collection.component.html","webpack:///src/app/submission/submit/themed-submission-submit.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/submission\\/import\\-external\\/submission\\-import\\-external\\.component$ namespace object","webpack:///src/app/submission/import-external/submission-import-external.component.ts","webpack:///src/app/submission/import-external/submission-import-external.component.html","webpack:///src/app/submission/edit/submission-edit.component.ts","webpack:///src/app/submission/edit/submission-edit.component.html","webpack:///src/app/submission/form/submission-upload-files/submission-upload-files.component.ts","webpack:///src/app/submission/form/submission-upload-files/submission-upload-files.component.html","webpack:///src/app/submission/submit/submission-submit.component.ts","webpack:///src/app/submission/submit/submission-submit.component.html","webpack:///src/app/submission/utils/parseSectionErrorPaths.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/submission\\/submit\\/submission\\-submit\\.component$ namespace object","webpack:///src/app/submission/sections/sections-decorator.ts","webpack:///src/app/submission/sections/sections.service.ts","webpack:///src/app/submission/sections/container/section-container.component.ts","webpack:///src/app/submission/sections/container/section-container.component.html","webpack:///src/app/submission/edit/themed-submission-edit.component.ts","webpack:///src/app/submission/sections/sections.directive.ts","webpack:///src/app/submission/sections/models/section.model.ts","webpack:///src/app/shared/form/builder/models/form-field-previous-value-object.ts","webpack:///src/app/submission/sections/form/section-form.component.html","webpack:///src/app/submission/sections/form/section-form.component.ts","webpack:///src/app/submission/objects/submission-objects.effects.ts","webpack:///src/app/submission/submission.effects.ts","webpack:///src/app/submission/sections/upload/section-upload.service.ts","webpack:///src/app/core/config/submission-uploads-config.service.ts","webpack:///src/app/submission/sections/upload/section-upload.component.html","webpack:///src/app/submission/sections/upload/section-upload.component.ts","webpack:///src/app/submission/sections/license/section-license.model.ts","webpack:///src/app/submission/sections/license/section-license.component.html","webpack:///src/app/submission/sections/license/section-license.component.ts","webpack:///src/app/submission/sections/upload/file/edit/section-upload-file-edit.model.ts","webpack:///src/app/submission/sections/upload/file/edit/section-upload-file-edit.component.html","webpack:///src/app/submission/sections/upload/file/edit/section-upload-file-edit.component.ts","webpack:///src/app/submission/sections/upload/accessConditions/submission-section-upload-access-conditions.component.html","webpack:///src/app/submission/sections/upload/accessConditions/submission-section-upload-access-conditions.component.ts","webpack:///src/app/submission/sections/upload/file/view/section-upload-file-view.component.html","webpack:///src/app/submission/sections/upload/file/view/section-upload-file-view.component.ts","webpack:///src/app/submission/sections/upload/file/section-upload-file.component.html","webpack:///src/app/submission/sections/upload/file/section-upload-file.component.ts","webpack:///src/app/submission/sections/cc-license/submission-section-cc-licenses.component.html","webpack:///src/app/submission/sections/cc-license/submission-section-cc-licenses.component.ts","webpack:///src/app/submission/submission.module.ts","webpack:///src/app/submission/utils/parseSectionErrors.ts","webpack:///src/app/submission/form/submission-form.component.ts","webpack:///src/app/submission/form/submission-form.component.html","webpack:///src/app/submission/form/section-add/submission-form-section-add.component.ts","webpack:///src/app/submission/form/section-add/submission-form-section-add.component.html","webpack:///src/app/submission/import-external/themed-submission-import-external.component.ts","webpack:///src/app/submission/form/collection/submission-form-collection.component.ts","webpack:///src/app/submission/form/collection/submission-form-collection.component.html","webpack:///src/app/submission/form/footer/submission-form-footer.component.ts","webpack:///src/app/submission/form/footer/submission-form-footer.component.html"],"names":["JsonPatchOperationPathCombiner","rootElement","subRootElements","super","this","_rootElement","_subRootElement","join","fragment","Array","isArray","path","toString","subRootElement","SubmissionImportExternalPreviewComponent","activeModal","submissionService","modalService","router","notificationService","metadataList","Object","keys","externalSourceEntry","metadata","forEach","key","push","value","first","dismiss","modalRef","open","size","closeMetadataModal","componentInstance","selectedEvent","pipe","collectionListEntry","createSubmissionFromExternalSource","_links","self","href","collection","id","subscribe","submissionObjects","isValid","length","navigateByUrl","error","close","import","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","module","exports","SubmissionImportExternalSearchbarComponent","externalService","cdr","windowService","sourceListLoading","externalSourceData","EventEmitter","selectedElement","name","searchString","sourceList","findListOptions","assign","elementsPerPage","currentPage","findAll","pageInfo","paginatedList","b","paginatedListRD","c","externalSource","page","element","initExternalSourceData","sourceId","query","detectChanges","isXsOrSm$","isXsOrSm","source","totalPages","sub","payload","emit","unsubscribe","onScroll","search","SectionsType","Relationships","SubmissionForm","Upload","License","CcLicense","SubmissionImportExternalCollectionComponent","event","closeCollectionModal","selectObject","ThemedSubmissionSubmitComponent","themeName","SubmissionImportExternalComponent","searchConfigService","routeService","entriesRD$","isLoading$","reload$","initialPagination","pageSize","subs","label","listId","context","EntitySearchModalWithNameVariants","repeatable","routeData","importConfig","buttonLabel","getQueryParameterValue","next","retrieveExternalSources","navigate","queryParams","replaceUrl","entry","filter","retrieveExternalSourcesSub","sourceQueryObject","paginatedSearchOptions","v","searchOptions","getExternalSourceEntries","rdData","getExternalSourceData","SubmissionEditComponent","changeDetectorRef","notificationsService","route","itemDataService","translate","itemLink$","BehaviorSubject","undefined","paramMap","params","retrieveSubmission","get","submissionObjectRD","hasSucceeded","info","submissionId","collectionId","selfUrl","sections","item","submissionDefinition","statusCode","skipLocationChange","itemLink","findByHref","itemRd","SubmissionUploadFilesComponent","operationsService","sectionService","enableDragOverDocument","dropOverDocumentMsg","dropMsg","uploadEnabled","onBeforeUpload","jsonPatchByResourceType","getSubmissionObjectLinkName","isSectionAvailable","sectionId","workspaceitem","isUploadEnabled","errors","errorsList","sectionData","sectionErrors","success","updateSectionData","subscription","SubmissionSubmitComponent","viewContainerRef","collectionParam","createSubmission","submissionObject","clear","markForCheck","regex","regexShort","match","fieldId","fieldIndex","originalPath","submissionSectionsMap","Map","renderSectionFor","sectionType","objectElement","set","rendersSectionType","SectionsService","scrollToService","store","formId","currentErrors","prevErrors","dispatch","isEqual","dispatchedErrors","replace","formAddErrorAction","message","includes","formRemoveErrorAction","select","sectionObj","sectionState","data","getActiveSectionId","activeSectionId","enabled","submissionScope","visibility","other","WorkspaceItem","submissionState","findKey","scrollTo","target","offset","isAvailable$","isEnabled$","isSectionEnabled","available","status","formConfig","rawData","JSON","parse","rows","currentRow","fields","field","selectableMetadata","SubmissionSectionContainerComponent","injector","AlertTypeEnum","objectInjector","Injector","create","providers","provide","useFactory","deps","parent","preventDefault","stopPropagation","sectionRef","removeSection","ThemedSubmissionEditComponent","SectionsDirective","mandatory","genericSectionErrors","allSectionErrors","active","valid","isSectionValid","resetErrors","getSectionState","state","errorItem","uniq","concat","previousActive","dispatchSave","nextState","setActiveSection","index","splice","dispatchRemoveSectionErrors","SectionModelComponent","injectedCollectionId","injectedSectionData","injectedSubmissionId","onSectionInit","updateSectionStatus","sectionStatusSub","getSectionStatus","sectionStatus","startWith","setSectionStatus","onSectionDestroy","_path","_value","SubmissionSectionformComponent","formBuilderService","formOperationsService","formService","formConfigService","submissionObjectService","objectCache","requestService","isUpdating","isLoading","fieldsOnTheirWayToBeRemoved","formData","previousValue","pathCombiner","getUniqueId","dispatchSetSectionFormId","config","configData","tap","mergeMap","getSectionData","findById","take","workspaceItem","formModel","initForm","subscriptions","sectionDataToCheck","sectionMetadata","diffResult","diffObj","hasOwnProperty","findIndex","modelFromConfiguration","getSubmissionScope","computeSectionConfiguredMetadata","sectionError","instant","console","stack","setSectionError","hasMetadataEnrichment","checksForErrors","isFormInitialized","find","checkSectionErrors","getFormData","distinctUntilChanged","updateForm","dispatchOperationsFromEvent","hasStoredValue","getId","model","getArrayIndexFromEvent","getFieldPathSegmentedFromChangeEvent","getFieldValueFromChangeEvent","environment","submission","autosave","indexOf","getPath","hasMappedGroupValue","getQualdropValueMap","has","indexes","isFieldToRemove","getForm","forms","currentState","filterErrors","sectionForm","notify","touched","filteredErrors","parseSectionErrorPaths","submissionEffects","SubmissionObjectEffects","actions$","store$","loadForm$","INIT_SUBMISSION_FORM","action","definition","mappedActions","sectionDefinition","selfLink","substr","lastIndexOf","header","result","resetForm$","RESET_SUBMISSION_FORM","saveSubmission$","SAVE_SUBMISSION_FORM","switchMap","response","isManual","catchError","saveForLaterSubmission$","SAVE_FOR_LATER_SUBMISSION_FORM","saveSubmissionSuccess$","SAVE_SUBMISSION_FORM_SUCCESS","withLatestFrom","parseSaveResponse","objects","actions","saveSubmissionSectionSuccess$","SAVE_SUBMISSION_SECTION_FORM_SUCCESS","saveSection$","SAVE_SUBMISSION_SECTION_FORM","jsonPatchByResourceID","saveError$","SAVE_SUBMISSION_FORM_ERROR","SAVE_SUBMISSION_SECTION_FORM_ERROR","saveAndDeposit$","SAVE_AND_DEPOSIT_SUBMISSION","canDeposit","warning","depositSubmission$","DEPOSIT_SUBMISSION","depositSubmission","log","saveForLaterSubmissionSuccess$","SAVE_FOR_LATER_SUBMISSION_FORM_SUCCESS","redirectToMyDSpace","depositSubmissionSuccess$","DEPOSIT_SUBMISSION_SUCCESS","depositSubmissionError$","DEPOSIT_SUBMISSION_ERROR","discardSubmission$","DISCARD_SUBMISSION","discardSubmission","addAllMetadataToSectionData","UPDATE_SECTION_DATA","section","discardSubmissionSuccess$","DISCARD_SUBMISSION_SUCCESS","discardSubmissionError$","DISCARD_SUBMISSION_ERROR","parseSectionErrors","sectionsKeys","union","files","notifyNewSection","SectionUploadService","fileUUID","fileState","uuid","SubmissionUploadsConfigService","rdbService","halService","http","comparator","useCachedVersionIfAvailable","reRequestOnStale","linksToFollow","d","SubmissionSectionUploadComponent","bitstreamService","collectionDataService","groupService","resourcePolicyService","uploadsConfigService","fileIndexes","fileList","fileNames","collectionDefaultAccessConditions","required$","config$","configMetadataForm$","remoteData","getSubmissionObject","rd","collectionRemoteData","collectionName","required","availableAccessConditionOptions","accessConditionOptions","collectionPolicyType","getUploadedFileList","configMetadataForm","file","getFileName","fileData","metadataName","title","display","SECTION_LICENSE_FORM_LAYOUT","granted","container","control","SECTION_LICENSE_FORM_MODEL","validators","errorMessages","notgranted","type","SubmissionSectionLicenseComponent","operationsBuilder","formLayout","displaySubmit","fromJSON","licenseText$","collectionData","license","licenseData","text","isSectionReadOnly","isReadOnly","disabled","getSectionErrors","newErrors","checked","valueChanges","add","remove","BITSTREAM_METADATA_FORM_GROUP_CONFIG","group","BITSTREAM_METADATA_FORM_GROUP_LAYOUT","grid","BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG","groupFactory","BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT","BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG","options","BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT","host","BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG","placeholder","inline","toggleIcon","relations","operator","when","BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT","BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG","BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT","SubmissionSectionUploadFileEditComponent","buildFileEditForm","configDescr","configForm","metadataGroupModelConfig","accessConditionTypeModelConfig","accessConditionsArrayConfig","accessConditionTypeOptions","accessCondition","hasStart","hasEnd","hasGroups","condition","showStart","hasStartDate","showEnd","hasEndDate","showGroups","confStart","confEnd","startDateConfig","endDateConfig","initialCount","accessConditions","initModelData","of","metadataModel","date","Date","year","getFullYear","month","getMonth","day","getDate","setOptions","startDateControl","endDateControl","markAsUntouched","setValue","markAsDirty","startDateModel","min","maxStartDate","max","endDateModel","maxEndDate","SubmissionSectionUploadAccessConditionsComponent","accessConditionsList","isResponsePending","accessConditionEntry","SubmissionSectionUploadFileViewComponent","fileTitleKey","fileDescrKey","all","metadataKey","$event","SubmissionSectionUploadFileComponent","fileService","uploadService","processingDelete$","readMode","getFileData","fileId","bitstream","fileIndex","removeUploadedFile","content","deleteFile","getEndpoint","url","retrieveFileDownloadLink","validateAllFormFields","fileEditComp","formRef","formGroup","accessConditionsToSave","accessConditionOpt","retrieveValueFromField","startDate","endDate","upload","updateFileData","switchMode","temp","SubmissionSectionCcLicensesComponent","submissionCcLicensesDataService","submissionCcLicenseUrlDataService","uri","accepted","ccLicense","getSelectedCcLicense","setAccepted","submissionCcLicenses","option","isSelectedOption","getSelectedOption","storedCcLicenseLink","some","selectedCcLicense","getCcLicenseLink","getCcLicenseLink$","link","list","licenses","SubmissionModule","forRoot","forFeature","withEntryComponents","paths","SubmissionFormComponent","authService","sectionsService","loading","uploadFilesOptions","isActive","changes","submissionSections","getSectionsList","uploadEnabled$","isSectionTypeAvailable","endpointURL","authToken","buildAuthHeader","definitionId","dispatchInit","startAutoSave","stopAutoSave","resetAllSubmissionObjects","resetSubmissionObject","getSubmissionSections","SubmissionFormSectionAddComponent","sectionList$","getDisabledSectionsList","hasSections$","addSection","ThemedSubmissionImportExternalComponent","SubmissionFormCollectionComponent","collectionChange","processingChange$","currentCollectionId","currentValue","selectedCollectionId","selectedCollectionName$","collectionRD","available$","changeSubmissionCollection","collectionDropdown","reset","isOpen","SubmissionFormFooterComponent","restService","submissionIsInvalid","getSubmissionStatus","processingSaveStatus","getSubmissionSaveProcessingStatus","processingDepositStatus","getSubmissionDepositProcessingStatus","showDepositAndDiscard","hasUnsavedModification","dispatchSaveForLater","dispatchDeposit","dispatchDiscard"],"mappings":"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","file":"x","sourcesContent":["import { isNotUndefined } from '../../../shared/empty.util';\nimport { URLCombiner } from '../../url-combiner/url-combiner';\n\n/**\n * Interface used to represent a JSON-PATCH path member\n * in JsonPatchOperationsState\n */\nexport interface JsonPatchOperationPathObject {\n  rootElement: string;\n  subRootElement: string;\n  path: string;\n}\n\n/**\n * Combines a variable number of strings representing parts\n * of a JSON-PATCH path\n */\nexport class JsonPatchOperationPathCombiner extends URLCombiner {\n  private _rootElement: string;\n  private _subRootElement: string;\n\n  constructor(rootElement, ...subRootElements: string[]) {\n    super(rootElement, ...subRootElements);\n    this._rootElement = rootElement;\n    this._subRootElement = subRootElements.join('/');\n  }\n\n  get rootElement(): string {\n    return this._rootElement;\n  }\n\n  get subRootElement(): string {\n    return this._subRootElement;\n  }\n\n  /**\n   * Combines the parts of this JsonPatchOperationPathCombiner in to a JSON-PATCH path member\n   *\n   * e.g.   new JsonPatchOperationPathCombiner('sections', 'basic').getPath(['dc.title', '0'])\n   * returns: {rootElement: 'sections', subRootElement: 'basic', path: '/sections/basic/dc.title/0'}\n   *\n   * @return {JsonPatchOperationPathObject}\n   *      The combined path object\n   */\n  public getPath(fragment?: string|string[]): JsonPatchOperationPathObject {\n    if (isNotUndefined(fragment) && Array.isArray(fragment)) {\n      fragment = fragment.join('/');\n    }\n\n    let path = '/' + this.toString();\n    if (isNotUndefined(fragment)) {\n      path += '/' + fragment;\n    }\n\n    return {rootElement: this._rootElement, subRootElement: this._subRootElement, path: path};\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgbActiveModal, NgbModalRef, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ExternalSourceEntry } from '../../../core/shared/external-source-entry.model';\nimport { MetadataValue } from '../../../core/shared/metadata.models';\nimport { Metadata } from '../../../core/shared/metadata.utils';\nimport { CollectionListEntry } from '../../../shared/collection-dropdown/collection-dropdown.component';\nimport { mergeMap } from 'rxjs/operators';\nimport { SubmissionService } from '../../submission.service';\nimport { SubmissionObject } from '../../../core/submission/models/submission-object.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { SubmissionImportExternalCollectionComponent } from '../import-external-collection/submission-import-external-collection.component';\n\n/**\n * This component display a preview of an external source item.\n */\n@Component({\n  selector: 'ds-submission-import-external-preview',\n  styleUrls: ['./submission-import-external-preview.component.scss'],\n  templateUrl: './submission-import-external-preview.component.html'\n})\nexport class SubmissionImportExternalPreviewComponent implements OnInit {\n  /**\n   * The external source entry\n   */\n  @Input() public externalSourceEntry: ExternalSourceEntry;\n  /**\n   * The entry metadata list\n   */\n  public metadataList: { key: string, value: MetadataValue }[];\n  /**\n   * The modal for the entry preview\n   */\n  modalRef: NgbModalRef;\n\n  /**\n   * Initialize the component variables.\n   * @param {NgbActiveModal} activeModal\n   * @param {SubmissionService} submissionService\n   * @param {NgbModal} modalService\n   * @param {Router} router\n   * @param {NotificationsService} notificationService\n   */\n  constructor(\n    private activeModal: NgbActiveModal,\n    private submissionService: SubmissionService,\n    private modalService: NgbModal,\n    private router: Router,\n    private notificationService: NotificationsService\n  ) { }\n\n  /**\n   * Metadata initialization for HTML display.\n   */\n  ngOnInit(): void {\n    this.metadataList = [];\n    const metadataKeys = Object.keys(this.externalSourceEntry.metadata);\n    metadataKeys.forEach((key) => {\n      this.metadataList.push({\n        key: key,\n        value: Metadata.first(this.externalSourceEntry.metadata, key)\n      });\n    });\n  }\n\n  /**\n   * Closes the modal.\n   */\n  public closeMetadataModal(): void {\n    this.activeModal.dismiss(false);\n  }\n\n  /**\n   * Start the import of an entry by opening up a collection choice modal window.\n   */\n  public import(): void {\n    this.modalRef = this.modalService.open(SubmissionImportExternalCollectionComponent, {\n      size: 'lg',\n    });\n    this.closeMetadataModal();\n\n    this.modalRef.componentInstance.selectedEvent.pipe(\n      mergeMap((collectionListEntry: CollectionListEntry) => {\n        return this.submissionService.createSubmissionFromExternalSource(this.externalSourceEntry._links.self.href, collectionListEntry.collection.id);\n      })\n    ).subscribe((submissionObjects: SubmissionObject[]) => {\n      let isValid = false;\n      if (submissionObjects.length === 1) {\n        if (submissionObjects[0] !== null) {\n          isValid = true;\n          this.router.navigateByUrl('/workspaceitems/' + submissionObjects[0].id + '/edit');\n        }\n      }\n      if (!isValid) {\n        this.notificationService.error('submission.import-external.preview.error.import.title', 'submission.import-external.preview.error.import.body');\n      }\n      this.modalRef.close();\n    });\n  }\n}\n","<div class=\"modal-header\">\n  <h2>{{'submission.import-external.preview.title' | translate}}</h2>\n  <button type=\"button\" class=\"close\"\n          (click)=\"closeMetadataModal()\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">×</span>\n  </button>\n</div>\n<div class=\"modal-body\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <p>{{'submission.import-external.preview.subtitle' | translate}}</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr>\n      </div>\n    </div>\n    <div *ngFor=\"let metadata of metadataList\" class=\"row\">\n      <div class=\"col-md-12\">\n        <strong>{{'item.preview.' + metadata.key | translate}}</strong>\n        <p>{{metadata.value.value}}</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 text-right\">\n        <button class=\"btn btn-success\" (click)=\"import()\" role=\"button\">\n          <i class=\"fa fa-file-import\" aria-hidden=\"true\"></i> {{'submission.import-external.preview.button.import' | translate}}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","var map = {\n\t\"./custom/app/submission/edit/submission-edit.component\": [\n\t\t\"OutP\",\n\t\t73\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"3aq+\";\nmodule.exports = webpackAsyncContext;","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\n\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { ExternalSourceService } from '../../../core/data/external-source.service';\nimport { ExternalSource } from '../../../core/shared/external-source.model';\nimport { PaginatedList, buildPaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PageInfo } from '../../../core/shared/page-info.model';\nimport { createSuccessfulRemoteDataObject } from '../../../shared/remote-data.utils';\nimport { FindListOptions } from '../../../core/data/request.models';\nimport { getFirstSucceededRemoteData, getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { HostWindowService } from '../../../shared/host-window.service';\nimport { hasValue } from '../../../shared/empty.util';\n\n/**\n * Interface for the selected external source element.\n */\nexport interface SourceElement {\n  id: string;\n  name: string;\n}\n\n/**\n * Interface for the external source data to export.\n */\nexport interface ExternalSourceData {\n  query: string;\n  sourceId: string;\n}\n\n/**\n * This component builds the searchbar for the submission external import.\n */\n@Component({\n  selector: 'ds-submission-import-external-searchbar',\n  styleUrls: ['./submission-import-external-searchbar.component.scss'],\n  templateUrl: './submission-import-external-searchbar.component.html'\n})\nexport class SubmissionImportExternalSearchbarComponent implements OnInit, OnDestroy {\n  /**\n   * The init external source value.\n   */\n  @Input() public initExternalSourceData: ExternalSourceData;\n  /**\n   * The selected external sources.\n   */\n  public selectedElement: SourceElement;\n  /**\n   * The list of external sources.\n   */\n  public sourceList: SourceElement[];\n  /**\n   * The string used to search items in the external sources.\n   */\n  public searchString: string;\n  /**\n   * The external sources loading status.\n   */\n  public sourceListLoading = false;\n  /**\n   * Emits true if were on a small screen\n   */\n  public isXsOrSm$: Observable<boolean>;\n  /**\n   * The external source data to use to perform the search.\n   */\n  @Output() public externalSourceData: EventEmitter<ExternalSourceData> = new EventEmitter<ExternalSourceData>();\n\n  /**\n   * The external sources pagination data.\n   */\n  protected pageInfo: PageInfo;\n  /**\n   * The options for REST data retireval.\n   */\n  protected findListOptions: FindListOptions;\n\n  /**\n   * The subscription to unsubscribe\n   */\n  protected sub: Subscription;\n\n  /**\n   * Initialize the component variables.\n   * @param {ExternalSourceService} externalService\n   * @param {ChangeDetectorRef} cdr\n   * @param {HostWindowService} windowService\n   */\n  constructor(\n    private externalService: ExternalSourceService,\n    private cdr: ChangeDetectorRef,\n    protected windowService: HostWindowService\n  ) {\n  }\n\n  /**\n   * Component initialization and retrieve first page of external sources.\n   */\n  ngOnInit() {\n    this.selectedElement = {\n      id: '',\n      name: 'loading'\n    };\n    this.searchString = '';\n    this.sourceList = [];\n    this.findListOptions = Object.assign({}, new FindListOptions(), {\n      elementsPerPage: 5,\n      currentPage: 1,\n    });\n    this.externalService.findAll(this.findListOptions).pipe(\n      catchError(() => {\n        const pageInfo = new PageInfo();\n        const paginatedList = buildPaginatedList(pageInfo, []);\n        const paginatedListRD = createSuccessfulRemoteDataObject(paginatedList);\n        return observableOf(paginatedListRD);\n      }),\n      getFirstSucceededRemoteDataPayload(),\n    ).subscribe((externalSource: PaginatedList<ExternalSource>) => {\n      externalSource.page.forEach((element) => {\n        this.sourceList.push({ id: element.id, name: element.name });\n        if (this.initExternalSourceData.sourceId === element.id) {\n          this.selectedElement = { id: element.id, name: element.name };\n          this.searchString = this.initExternalSourceData.query;\n        }\n      });\n      if (this.selectedElement.id === '') {\n        this.selectedElement = this.sourceList[0];\n      }\n      this.pageInfo = externalSource.pageInfo;\n      this.cdr.detectChanges();\n    });\n    this.isXsOrSm$ = this.windowService.isXsOrSm();\n  }\n\n  /**\n   * Set the selected external source.\n   */\n  public makeSourceSelection(source): void {\n    this.selectedElement = source;\n  }\n\n  /**\n   * Load the next pages of external sources.\n   */\n  public onScroll(): void {\n    if (!this.sourceListLoading && ((this.pageInfo.currentPage + 1) <= this.pageInfo.totalPages)) {\n      this.sourceListLoading = true;\n      this.findListOptions = Object.assign({}, new FindListOptions(), {\n        elementsPerPage: 5,\n        currentPage: this.findListOptions.currentPage + 1,\n      });\n      this.sub = this.externalService.findAll(this.findListOptions).pipe(\n        catchError(() => {\n          const pageInfo = new PageInfo();\n          const paginatedList = buildPaginatedList(pageInfo, []);\n          const paginatedListRD = createSuccessfulRemoteDataObject(paginatedList);\n          return observableOf(paginatedListRD);\n        }),\n        getFirstSucceededRemoteData(),\n        tap(() => this.sourceListLoading = false)\n      ).subscribe((externalSource: RemoteData<PaginatedList<ExternalSource>>) => {\n        externalSource.payload.page.forEach((element) => {\n          this.sourceList.push({ id: element.id, name: element.name });\n        });\n        this.pageInfo = externalSource.payload.pageInfo;\n        this.cdr.detectChanges();\n      });\n    }\n  }\n\n  /**\n   * Passes the search parameters to the parent component.\n   */\n  public search(): void {\n    this.externalSourceData.emit({ sourceId: this.selectedElement.id, query: this.searchString });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","<div *ngIf=\"(isXsOrSm$ | async)\" class=\"input-group mb-2\">\n  <input type=\"text\" class=\"form-control\" (keyup.enter)=\"(searchString === '')?null:search()\" [(ngModel)]=\"searchString\" placeholder=\"{{'submission.import-external.search.placeholder' |translate}}\" aria-label=\"\" aria-describedby=\"\">\n</div>\n<div class=\"input-group mb-5\">\n  <input *ngIf=\"!(isXsOrSm$ | async)\" type=\"text\" class=\"form-control\" (keyup.enter)=\"(searchString === '')?null:search()\" [(ngModel)]=\"searchString\" placeholder=\"{{'submission.import-external.search.placeholder' |translate}}\" aria-label=\"\" aria-describedby=\"\">\n  <div [ngClass]=\"{'input-group-append': !(isXsOrSm$ | async)}\" ngbDropdown role=\"group\" aria-label=\"\">\n    <button class=\"btn btn-outline-secondary w-fx\" title=\"{{'submission.import-external.search.source.hint' |translate}}\" ngbDropdownToggle>{{'submission.import-external.source.' + selectedElement?.name | translate}}</button>\n    <div ngbDropdownMenu class=\"dropdown-menu scrollable-dropdown-menu w-100\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"false\"\n      aria-labelledby=\"scrollableDropdownMenuButton\">\n      <div class=\"scrollable-menu\"\n        aria-labelledby=\"scrollableDropdownMenuButton\"\n        infiniteScroll\n        [infiniteScrollDistance]=\"2\"\n        [infiniteScrollThrottle]=\"50\"\n        (scrolled)=\"onScroll()\"\n        [scrollWindow]=\"false\">\n        <button ngbDropdownItem class=\"dropdown-item text-truncate\" title=\"{{'submission.import-external.source.' + source?.name | translate}}\" (click)=\"makeSourceSelection(source)\" *ngFor=\"let source of sourceList\">{{'submission.import-external.source.' + source?.name | translate}}</button>\n        <div ngbDropdownItem class=\"scrollable-dropdown-loading text-center\" *ngIf=\"sourceListLoading\"><p>{{'submission.import-external.source.loading' | translate}}</p></div>\n      </div>\n    </div>\n    <button type=\"button\" class=\"btn btn-primary\" [title]=\"(searchString === '')?('submission.import-external.search.button.hint' | translate):('submission.import-external.search.button' | translate)\" [disabled]=\"searchString === ''\" (click)=\"search()\">{{'submission.import-external.search.button' | translate}}</button>\n  </div>\n</div>\n","export enum SectionsType {\n  Relationships = 'relationships',\n  SubmissionForm = 'submission-form',\n  Upload = 'upload',\n  License = 'license',\n  CcLicense = 'cclicense',\n  collection = 'collection'\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { CollectionListEntry } from '../../../shared/collection-dropdown/collection-dropdown.component';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * Wrap component for 'ds-collection-dropdown'.\n */\n@Component({\n  selector: 'ds-submission-import-external-collection',\n  styleUrls: ['./submission-import-external-collection.component.scss'],\n  templateUrl: './submission-import-external-collection.component.html'\n})\nexport class SubmissionImportExternalCollectionComponent {\n  /**\n   * The event passed by 'ds-collection-dropdown'.\n   */\n  @Output() public selectedEvent = new EventEmitter<CollectionListEntry>();\n\n  /**\n   * Initialize the component variables.\n   * @param {NgbActiveModal} activeModal\n   */\n  constructor(\n    private activeModal: NgbActiveModal\n  ) { }\n\n  /**\n   * This method populates the 'selectedEvent' variable.\n   */\n  public selectObject(event): void {\n    this.selectedEvent.emit(event);\n  }\n\n  /**\n   * This method closes the modal.\n   */\n  public closeCollectionModal(): void {\n    this.activeModal.dismiss(false);\n  }\n}\n","<div>\n  <div class=\"modal-header\">{{'dso-selector.create.collection.head' | translate}}\n    <button type=\"button\" class=\"close\" (click)=\"closeCollectionModal()\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">×</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <ds-collection-dropdown (selectionChange)=\"selectObject($event)\">\n    </ds-collection-dropdown>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { SubmissionSubmitComponent } from './submission-submit.component';\n\n/**\n * Themed wrapper for SubmissionSubmitComponent\n */\n@Component({\n  selector: 'ds-themed-submission-submit',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedSubmissionSubmitComponent extends ThemedComponent<SubmissionSubmitComponent> {\n  protected getComponentName(): string {\n    return 'SubmissionSubmitComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/submission/submit/submission-submit.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./submission-submit.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","var map = {\n\t\"./custom/app/submission/import-external/submission-import-external.component\": [\n\t\t\"mVFA\",\n\t\t74\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"JHLN\";\nmodule.exports = webpackAsyncContext;","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport { filter, mergeMap, switchMap, take, tap } from 'rxjs/operators';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ExternalSourceService } from '../../core/data/external-source.service';\nimport { ExternalSourceData } from './import-external-searchbar/submission-import-external-searchbar.component';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { buildPaginatedList, PaginatedList } from '../../core/data/paginated-list.model';\nimport { ExternalSourceEntry } from '../../core/shared/external-source-entry.model';\nimport { SearchConfigurationService } from '../../core/shared/search/search-configuration.service';\nimport { Context } from '../../core/shared/context.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { RouteService } from '../../core/services/route.service';\nimport { createSuccessfulRemoteDataObject } from '../../shared/remote-data.utils';\nimport { SubmissionImportExternalPreviewComponent } from './import-external-preview/submission-import-external-preview.component';\nimport { fadeIn } from '../../shared/animations/fade';\nimport { PageInfo } from '../../core/shared/page-info.model';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { getFinishedRemoteData } from '../../core/shared/operators';\n\n/**\n * This component allows to submit a new workspaceitem importing the data from an external source.\n */\n@Component({\n  selector: 'ds-submission-import-external',\n  styleUrls: ['./submission-import-external.component.scss'],\n  templateUrl: './submission-import-external.component.html',\n  animations: [fadeIn]\n})\nexport class SubmissionImportExternalComponent implements OnInit, OnDestroy {\n\n  /**\n   * The external source search data from the routing service.\n   */\n  public routeData: ExternalSourceData;\n  /**\n   * The displayed list of entries\n   */\n  public entriesRD$: BehaviorSubject<RemoteData<PaginatedList<ExternalSourceEntry>>> = new BehaviorSubject<RemoteData<PaginatedList<ExternalSourceEntry>>>(null);\n  /**\n   * TRUE if the REST service is called to retrieve the external source items\n   */\n  public isLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  public reload$: BehaviorSubject<{ query: string, source: string }> = new BehaviorSubject<{ query: string; source: string }>({\n    query: '',\n    source: ''\n  });\n  /**\n   * Configuration to use for the import buttons\n   */\n  public importConfig: { buttonLabel: string };\n  /**\n   * Suffix for button label\n   */\n  public label: string;\n  /**\n   * The ID of the list to add/remove selected items to/from\n   */\n  public listId: string;\n  /**\n   * TRUE if the selection is repeatable\n   */\n  public repeatable: boolean;\n  /**\n   * The initial pagination options\n   */\n  public initialPagination = Object.assign(new PaginationComponentOptions(), {\n    id: 'spc',\n    pageSize: 10\n  });\n  /**\n   * The context to displaying lists for\n   */\n  public context: Context;\n  /**\n   * The modal for the entry preview\n   */\n  public modalRef: NgbModalRef;\n\n  /**\n   * The subscription to unsubscribe\n   */\n  protected subs: Subscription[] = [];\n\n  private retrieveExternalSourcesSub: Subscription;\n\n  /**\n   * Initialize the component variables.\n   * @param {SearchConfigurationService} searchConfigService\n   * @param {ExternalSourceService} externalService\n   * @param {RouteService} routeService\n   * @param {Router} router\n   * @param {NgbModal} modalService\n   */\n  constructor(\n    public searchConfigService: SearchConfigurationService,\n    private externalService: ExternalSourceService,\n    private routeService: RouteService,\n    private router: Router,\n    private modalService: NgbModal,\n  ) {\n  }\n\n  /**\n   * Get the entries for the selected external source and set initial configuration.\n   */\n  ngOnInit(): void {\n    this.label = 'Journal';\n    this.listId = 'list-submission-external-sources';\n    this.context = Context.EntitySearchModalWithNameVariants;\n    this.repeatable = false;\n    this.routeData = {sourceId: '', query: ''};\n    this.importConfig = {\n      buttonLabel: 'submission.sections.describe.relationship-lookup.external-source.import-button-title.' + this.label\n    };\n    this.entriesRD$ = new BehaviorSubject(createSuccessfulRemoteDataObject(buildPaginatedList(new PageInfo(), [])));\n    this.isLoading$ = new BehaviorSubject(false);\n    this.subs.push(combineLatest(\n      [\n        this.routeService.getQueryParameterValue('source'),\n        this.routeService.getQueryParameterValue('query')\n      ]).pipe(\n      take(1)\n    ).subscribe(([source, query]: [string, string]) => {\n      this.reload$.next({query: query, source: source});\n      this.retrieveExternalSources();\n    }));\n  }\n\n  /**\n   * Get the data from the searchbar and changes the router data.\n   */\n  public getExternalSourceData(event: ExternalSourceData): void {\n    this.router.navigate(\n      [],\n      {\n        queryParams: {source: event.sourceId, query: event.query},\n        replaceUrl: true\n      }\n    ).then(() => {\n      this.reload$.next({source: event.sourceId, query: event.query});\n      this.retrieveExternalSources();\n    });\n  }\n\n  /**\n   * Display an item preview by opening up an import modal window.\n   * @param entry The entry to import\n   */\n  public import(entry): void {\n    this.modalRef = this.modalService.open(SubmissionImportExternalPreviewComponent, {\n      size: 'lg',\n    });\n    const modalComp = this.modalRef.componentInstance;\n    modalComp.externalSourceEntry = entry;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n    if (hasValue(this.retrieveExternalSourcesSub)) {\n      this.retrieveExternalSourcesSub.unsubscribe();\n    }\n\n  }\n\n  /**\n   * Retrieve external source entries\n   *\n   * @param source The source tupe\n   * @param query The query string to search\n   */\n  private retrieveExternalSources(): void {\n    if (hasValue(this.retrieveExternalSourcesSub)) {\n      this.retrieveExternalSourcesSub.unsubscribe();\n    }\n    this.retrieveExternalSourcesSub = this.reload$.pipe(\n      filter((sourceQueryObject: { source: string, query: string }) => isNotEmpty(sourceQueryObject.source) && isNotEmpty(sourceQueryObject.query)),\n      switchMap((sourceQueryObject: { source: string, query: string }) => {\n          const source = sourceQueryObject.source;\n          const query = sourceQueryObject.query;\n          this.routeData.sourceId = source;\n          this.routeData.query = query;\n          return this.searchConfigService.paginatedSearchOptions.pipe(\n            tap((v) => this.isLoading$.next(true)),\n            filter((searchOptions) => searchOptions.query === query),\n            mergeMap((searchOptions) => this.externalService.getExternalSourceEntries(this.routeData.sourceId, searchOptions).pipe(\n              getFinishedRemoteData(),\n            )),\n          );\n        }\n      ),\n    ).subscribe((rdData) => {\n      this.entriesRD$.next(rdData);\n      this.isLoading$.next(false);\n    });\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2 id=\"header\" class=\"pb-2\">{{'submission.import-external.title' | translate}}</h2>\n      <ds-submission-import-external-searchbar\n        [initExternalSourceData]=\"routeData\"\n        (externalSourceData) = \"getExternalSourceData($event)\">\n      </ds-submission-import-external-searchbar>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div *ngIf=\"routeData.sourceId !== ''\" class=\"col-md-12\">\n      <ng-container *ngVar=\"(entriesRD$ | async) as entriesRD\">\n        <h3 *ngIf=\"entriesRD && entriesRD?.payload?.page?.length !== 0\">{{ 'submission.sections.describe.relationship-lookup.selection-tab.title.' + routeData.sourceId | translate}}</h3>\n        <ds-viewable-collection *ngIf=\"entriesRD?.hasSucceeded && !(isLoading$ | async) && entriesRD?.payload?.page?.length > 0\" @fadeIn\n                                [objects]=\"entriesRD\"\n                                [selectionConfig]=\"{ repeatable: repeatable, listId: listId }\"\n                                [config]=\"initialPagination\"\n                                [hideGear]=\"true\"\n                                [context]=\"context\"\n                                [importable]=\"true\"\n                                [importConfig]=\"importConfig\"\n                                (importObject)=\"import($event)\">\n        </ds-viewable-collection>\n        <ds-loading *ngIf=\"(isLoading$ | async)\"\n                    message=\"{{'loading.search-results' | translate}}\"></ds-loading>\n        <div *ngIf=\"!(isLoading$ | async) && entriesRD?.payload?.page?.length === 0\" id=\"empty-external-entry-list\">\n          {{ 'search.results.empty' | translate }}\n        </div>\n      </ng-container>\n    </div>\n    <div *ngIf=\"routeData.sourceId === ''\" class=\"col-md-12\">\n      <ds-alert [type]=\"'alert-info'\">\n        <p class=\"lead mb-0\">{{'submission.import-external.page.hint' | translate}}</p>\n      </ds-alert>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <hr>\n      <a class=\"btn btn-outline-secondary\" [routerLink]=\"['/mydspace']\" role=\"button\">\n        <i class=\"fa fa-chevron-left\" aria-hidden=\"true\"></i> {{'submission.import-external.back-to-my-dspace' | translate}}\n      </a>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\nimport { filter, switchMap, debounceTime } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\nimport { hasValue, isEmpty, isNotNull, isNotEmptyOperator } from '../../shared/empty.util';\nimport { SubmissionDefinitionsModel } from '../../core/config/models/config-submission-definitions.model';\nimport { SubmissionService } from '../submission.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { Collection } from '../../core/shared/collection.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { getAllSucceededRemoteData } from '../../core/shared/operators';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\n/**\n * This component allows to edit an existing workspaceitem/workflowitem.\n */\n@Component({\n  selector: 'ds-submission-edit',\n  styleUrls: ['./submission-edit.component.scss'],\n  templateUrl: './submission-edit.component.html'\n})\nexport class SubmissionEditComponent implements OnDestroy, OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  public collectionId: string;\n\n  /**\n   * The list of submission's sections\n   * @type {WorkspaceitemSectionsObject}\n   */\n  public sections: WorkspaceitemSectionsObject;\n\n  /**\n   * The submission self url\n   * @type {string}\n   */\n  public selfUrl: string;\n\n  /**\n   * The configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  public submissionDefinition: SubmissionDefinitionsModel;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  public submissionId: string;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * BehaviorSubject containing the self link to the item for this submission\n   * @private\n   */\n  private itemLink$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  /**\n   * The item for this submission.\n   */\n  public item: Item;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {NotificationsService} notificationsService\n   * @param {ActivatedRoute} route\n   * @param {Router} router\n   * @param {ItemDataService} itemDataService\n   * @param {SubmissionService} submissionService\n   * @param {TranslateService} translate\n   */\n  constructor(private changeDetectorRef: ChangeDetectorRef,\n              private notificationsService: NotificationsService,\n              private route: ActivatedRoute,\n              private router: Router,\n              private itemDataService: ItemDataService,\n              private submissionService: SubmissionService,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Retrieve workspaceitem/workflowitem from server and initialize all instance variables\n   */\n  ngOnInit() {\n    this.subs.push(\n      this.route.paramMap.pipe(\n        switchMap((params: ParamMap) => this.submissionService.retrieveSubmission(params.get('id'))),\n        // NOTE new submission is retrieved on the browser side only, so get null on server side rendering\n        filter((submissionObjectRD: RemoteData<SubmissionObject>) => isNotNull(submissionObjectRD))\n      ).subscribe((submissionObjectRD: RemoteData<SubmissionObject>) => {\n        if (submissionObjectRD.hasSucceeded) {\n          if (isEmpty(submissionObjectRD.payload)) {\n            this.notificationsService.info(null, this.translate.get('submission.general.cannot_submit'));\n            this.router.navigate(['/mydspace']);\n          } else {\n            this.submissionId = submissionObjectRD.payload.id.toString();\n            this.collectionId = (submissionObjectRD.payload.collection as Collection).id;\n            this.selfUrl = submissionObjectRD.payload._links.self.href;\n            this.sections = submissionObjectRD.payload.sections;\n            this.itemLink$.next(submissionObjectRD.payload._links.item.href);\n            this.item = submissionObjectRD.payload.item;\n            this.submissionDefinition = (submissionObjectRD.payload.submissionDefinition as SubmissionDefinitionsModel);\n          }\n        } else {\n          if (submissionObjectRD.statusCode === 404) {\n            // redirect to not found page\n            this.router.navigate(['/404'], { skipLocationChange: true });\n          }\n          // TODO handle generic error\n        }\n      }),\n      this.itemLink$.pipe(\n        isNotEmptyOperator(),\n        switchMap((itemLink: string) =>\n          this.itemDataService.findByHref(itemLink)\n        ),\n        getAllSucceededRemoteData(),\n        // Multiple sources can update the item in quick succession.\n        // We only want to rerender the form if the item is unchanged for some time\n        debounceTime(300),\n      ).subscribe((itemRd: RemoteData<Item>) => {\n        this.item = itemRd.payload;\n        this.changeDetectorRef.detectChanges();\n      }),\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"submission-submit-container\" >\n  <ds-submission-form [collectionId]=\"collectionId\"\n                      [sections]=\"sections\"\n                      [selfUrl]=\"selfUrl\"\n                      [submissionDefinition]=\"submissionDefinition\"\n                      [item]=\"item\"\n                      [submissionId]=\"submissionId\"></ds-submission-form>\n</div>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { SectionsService } from '../../sections/sections.service';\nimport { hasValue, isEmpty, isNotEmpty } from '../../../shared/empty.util';\nimport { normalizeSectionData } from '../../../core/submission/submission-response-parsing.service';\nimport { SubmissionService } from '../../submission.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { UploaderOptions } from '../../../shared/uploader/uploader-options.model';\nimport parseSectionErrors from '../../utils/parseSectionErrors';\nimport { SubmissionJsonPatchOperationsService } from '../../../core/submission/submission-json-patch-operations.service';\nimport { WorkspaceItem } from '../../../core/submission/models/workspaceitem.model';\n\n/**\n * This component represents the drop zone that provides to add files to the submission.\n */\n@Component({\n  selector: 'ds-submission-upload-files',\n  templateUrl: './submission-upload-files.component.html',\n})\nexport class SubmissionUploadFilesComponent implements OnChanges {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The upload section id\n   * @type {string}\n   */\n  @Input() sectionId: string;\n\n  /**\n   * The uploader configuration options\n   * @type {UploaderOptions}\n   */\n  @Input() uploadFilesOptions: UploaderOptions;\n\n  /**\n   * A boolean representing if is possible to active drop zone over the document page\n   * @type {boolean}\n   */\n  public enableDragOverDocument = true;\n\n  /**\n   * i18n message label\n   * @type {string}\n   */\n  public dropOverDocumentMsg = 'submission.sections.upload.drop-message';\n\n  /**\n   * i18n message label\n   * @type {string}\n   */\n  public dropMsg = 'submission.sections.upload.drop-message';\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * A boolean representing if upload functionality is enabled\n   * @type {boolean}\n   */\n  private uploadEnabled: Observable<boolean> = observableOf(false);\n\n  /**\n   * Save submission before to upload a file\n   */\n  public onBeforeUpload = () => {\n    const sub: Subscription = this.operationsService.jsonPatchByResourceType(\n      this.submissionService.getSubmissionObjectLinkName(),\n      this.submissionId,\n      'sections')\n      .subscribe();\n    this.subs.push(sub);\n    return sub;\n  }\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {NotificationsService} notificationsService\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {TranslateService} translate\n   */\n  constructor(private notificationsService: NotificationsService,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private sectionService: SectionsService,\n              private submissionService: SubmissionService,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Check if upload functionality is enabled\n   */\n  ngOnChanges() {\n    this.uploadEnabled = this.sectionService.isSectionAvailable(this.submissionId, this.sectionId);\n  }\n\n  /**\n   * Parse the submission object retrieved from REST after upload\n   *\n   * @param workspaceitem\n   *    The submission object retrieved from REST\n   */\n  public onCompleteItem(workspaceitem: WorkspaceItem) {\n    // Checks if upload section is enabled so do upload\n    this.subs.push(\n      this.uploadEnabled\n        .pipe(first())\n        .subscribe((isUploadEnabled) => {\n          if (isUploadEnabled) {\n\n            const { sections } = workspaceitem;\n            const { errors } = workspaceitem;\n\n            const errorsList = parseSectionErrors(errors);\n            if (sections && isNotEmpty(sections)) {\n              Object.keys(sections)\n                .forEach((sectionId) => {\n                  const sectionData = normalizeSectionData(sections[sectionId]);\n                  const sectionErrors = errorsList[sectionId];\n                  if (sectionId === 'upload') {\n                    // Look for errors on upload\n                    if ((isEmpty(sectionErrors))) {\n                      this.notificationsService.success(null, this.translate.get('submission.sections.upload.upload-successful'));\n                    } else {\n                      this.notificationsService.error(null, this.translate.get('submission.sections.upload.upload-failed'));\n                    }\n                  }\n                  this.sectionService.updateSectionData(this.submissionId, sectionId, sectionData, sectionErrors);\n                });\n            }\n\n          }\n        })\n    );\n  }\n\n  /**\n   * Show error notification on upload fails\n   */\n  public onUploadError() {\n    this.notificationsService.error(null, this.translate.get('submission.sections.upload.upload-failed'));\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","<ds-uploader *ngIf=\"uploadFilesOptions.url\"\n             [dropMsg]=\"dropMsg\"\n             [dropOverDocumentMsg]=\"dropOverDocumentMsg\"\n             [enableDragOverDocument]=\"enableDragOverDocument\"\n             [onBeforeUpload]=\"onBeforeUpload\"\n             [uploadFilesOptions]=\"uploadFilesOptions\"\n             (onCompleteItem)=\"onCompleteItem($event)\"\n             (onUploadError)=\"onUploadError()\"></ds-uploader>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { hasValue, isEmpty, isNotNull, isNotEmptyOperator } from '../../shared/empty.util';\nimport { SubmissionDefinitionsModel } from '../../core/config/models/config-submission-definitions.model';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SubmissionService } from '../submission.service';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { Collection } from '../../core/shared/collection.model';\nimport { Item } from '../../core/shared/item.model';\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { switchMap, debounceTime } from 'rxjs/operators';\nimport { getAllSucceededRemoteData } from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { ItemDataService } from '../../core/data/item-data.service';\n\n/**\n * This component allows to submit a new workspaceitem.\n */\n@Component({\n  selector: 'ds-submission-submit',\n  styleUrls: ['./submission-submit.component.scss'],\n  templateUrl: './submission-submit.component.html'\n})\nexport class SubmissionSubmitComponent implements OnDestroy, OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  public collectionId: string;\n\n  /**\n   * BehaviorSubject containing the self link to the item for this submission\n   * @private\n   */\n  private itemLink$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  /**\n   * The item for this submission.\n   */\n  public item: Item;\n\n  /**\n   * The collection id input to create a new submission\n   * @type {string}\n   */\n  public collectionParam: string;\n\n  /**\n   * The list of submission's sections\n   * @type {WorkspaceitemSectionsObject}\n   */\n  public sections: WorkspaceitemSectionsObject;\n\n  /**\n   * The submission self url\n   * @type {string}\n   */\n  public selfUrl: string;\n\n  /**\n   * The configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  public submissionDefinition: SubmissionDefinitionsModel;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  public submissionId: string;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {NotificationsService} notificationsService\n   * @param {ItemDataService} itemDataService\n   * @param {SubmissionService} submissionService\n   * @param {Router} router\n   * @param {TranslateService} translate\n   * @param {ViewContainerRef} viewContainerRef\n   * @param {ActivatedRoute} route\n   */\n  constructor(private changeDetectorRef: ChangeDetectorRef,\n              private notificationsService: NotificationsService,\n              private router: Router,\n              private itemDataService: ItemDataService,\n              private submissionService: SubmissionService,\n              private translate: TranslateService,\n              private viewContainerRef: ViewContainerRef,\n              private route: ActivatedRoute) {\n    this.route\n      .queryParams\n      .subscribe((params) => {\n        this.collectionParam = (params.collection);\n      });\n  }\n\n  /**\n   * Create workspaceitem on the server and initialize all instance variables\n   */\n  ngOnInit() {\n    // NOTE execute the code on the browser side only, otherwise it is executed twice\n    this.subs.push(\n      this.submissionService.createSubmission(this.collectionParam)\n        .subscribe((submissionObject: SubmissionObject) => {\n          // NOTE new submission is created on the browser side only\n          if (isNotNull(submissionObject)) {\n            if (isEmpty(submissionObject)) {\n              this.notificationsService.info(null, this.translate.get('submission.general.cannot_submit'));\n              this.router.navigate(['/mydspace']);\n            } else {\n              this.collectionId = (submissionObject.collection as Collection).id;\n              this.sections = submissionObject.sections;\n              this.selfUrl = submissionObject._links.self.href;\n              this.submissionDefinition = (submissionObject.submissionDefinition as SubmissionDefinitionsModel);\n              this.submissionId = submissionObject.id;\n              this.itemLink$.next(submissionObject._links.item.href);\n              this.item = submissionObject.item as Item;\n            }\n          }\n        }),\n      this.itemLink$.pipe(\n        isNotEmptyOperator(),\n        switchMap((itemLink: string) =>\n          this.itemDataService.findByHref(itemLink)\n        ),\n        getAllSucceededRemoteData(),\n        // Multiple sources can update the item in quick succession.\n        // We only want to rerender the form if the item is unchanged for some time\n        debounceTime(300),\n      ).subscribe((itemRd: RemoteData<Item>) => {\n        this.item = itemRd.payload;\n        this.changeDetectorRef.detectChanges();\n      })\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n\n    this.viewContainerRef.clear();\n    this.changeDetectorRef.markForCheck();\n  }\n\n}\n","<div class=\"submission-submit-container\">\n  <div class=\"submission-submit-container\">\n    <ds-submission-form [collectionId]=\"collectionId\"\n                        [sections]=\"sections\"\n                        [selfUrl]=\"selfUrl\"\n                        [submissionDefinition]=\"submissionDefinition\"\n                        [item]=\"item\"\n                        [submissionId]=\"submissionId\"></ds-submission-form>\n  </div>\n</div>\n","import { hasValue } from '../../shared/empty.util';\n\n/**\n * An interface to represent the path of a section error\n */\nexport interface SectionErrorPath {\n\n  /**\n   * The section id\n   */\n  sectionId: string;\n\n  /**\n   * The form field id\n   */\n  fieldId?: string;\n\n  /**\n   * The form field index\n   */\n  fieldIndex?: number;\n\n  /**\n   * The complete path\n   */\n  originalPath: string;\n}\n\nconst regex = /([^\\/]+)/g;\n// const regex = /\\/sections\\/(.*)\\/(.*)\\/(.*)/;\nconst regexShort = /\\/sections\\/(.*)/;\n\n/**\n * The following method accept an array of section path strings and return a path object\n * @param {string | string[]} path\n * @returns {SectionErrorPath[]}\n */\nconst parseSectionErrorPaths = (path: string | string[]): SectionErrorPath[] => {\n  const paths = typeof path === 'string' ? [path] : path;\n\n  return paths.map((item) => {\n      if (item.match(regex) && item.match(regex).length > 2) {\n        return {\n          sectionId: item.match(regex)[1],\n          fieldId: item.match(regex)[2],\n          fieldIndex: hasValue(item.match(regex)[3]) ? +item.match(regex)[3] : 0,\n          originalPath: item,\n        };\n      } else {\n        return {\n          sectionId: item.match(regexShort)[1],\n          originalPath: item,\n        };\n      }\n\n    }\n  );\n};\n\nexport default parseSectionErrorPaths;\n","var map = {\n\t\"./custom/app/submission/submit/submission-submit.component\": [\n\t\t\"cSSl\",\n\t\t75\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"TkMu\";\nmodule.exports = webpackAsyncContext;","\nimport { SectionsType } from './sections-type';\n\nconst submissionSectionsMap = new Map();\nexport function renderSectionFor(sectionType: SectionsType) {\n  return function decorator(objectElement: any) {\n    if (!objectElement) {\n      return;\n    }\n    submissionSectionsMap.set(sectionType, objectElement);\n  };\n}\n\nexport function rendersSectionType(sectionType: SectionsType) {\n  return submissionSectionsMap.get(sectionType);\n}\n","import { Injectable } from '@angular/core';\n\nimport { combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ScrollToConfigOptions, ScrollToService } from '@nicky-lenaers/ngx-scroll-to';\nimport { findKey, isEqual } from 'lodash';\n\nimport { SubmissionState } from '../submission.reducers';\nimport { hasValue, isEmpty, isNotEmpty, isNotUndefined } from '../../shared/empty.util';\nimport {\n  DisableSectionAction,\n  EnableSectionAction,\n  InertSectionErrorsAction,\n  RemoveSectionErrorsAction,\n  SectionStatusChangeAction,\n  SetSectionFormId,\n  UpdateSectionDataAction\n} from '../objects/submission-objects.actions';\nimport {\n  SubmissionObjectEntry,\n  SubmissionSectionError,\n  SubmissionSectionObject\n} from '../objects/submission-objects.reducer';\nimport {\n  submissionObjectFromIdSelector,\n  submissionSectionDataFromIdSelector,\n  submissionSectionErrorsFromIdSelector,\n  submissionSectionFromIdSelector\n} from '../selectors';\nimport { SubmissionScopeType } from '../../core/submission/submission-scope-type';\nimport parseSectionErrorPaths, { SectionErrorPath } from '../utils/parseSectionErrorPaths';\nimport { FormAddError, FormClearErrorsAction, FormRemoveErrorAction } from '../../shared/form/form.actions';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SubmissionService } from '../submission.service';\nimport { WorkspaceitemSectionDataType } from '../../core/submission/models/workspaceitem-sections.model';\nimport { SectionsType } from './sections-type';\nimport { normalizeSectionData } from '../../core/submission/submission-response-parsing.service';\nimport { SubmissionFormsModel } from '../../core/config/models/config-submission-forms.model';\nimport { parseReviver } from '@ng-dynamic-forms/core';\n\n/**\n * A service that provides methods used in submission process.\n */\n@Injectable()\nexport class SectionsService {\n\n  /**\n   * Initialize service variables\n   * @param {NotificationsService} notificationsService\n   * @param {ScrollToService} scrollToService\n   * @param {SubmissionService} submissionService\n   * @param {Store<SubmissionState>} store\n   * @param {TranslateService} translate\n   */\n  constructor(private notificationsService: NotificationsService,\n              private scrollToService: ScrollToService,\n              private submissionService: SubmissionService,\n              private store: Store<SubmissionState>,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Compare the list of the current section errors with the previous one,\n   * and dispatch actions to add/remove to/from the section state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The workspaceitem self url\n   * @param formId\n   *    The [SubmissionDefinitionsModel] that define submission configuration\n   * @param currentErrors\n   *    The [SubmissionSectionError] that define submission sections init data\n   * @param prevErrors\n   *    The [SubmissionSectionError] that define submission sections init errors\n   */\n  public checkSectionErrors(\n    submissionId: string,\n    sectionId: string,\n    formId: string,\n    currentErrors: SubmissionSectionError[],\n    prevErrors: SubmissionSectionError[] = []) {\n    // Remove previous error list if the current is empty\n    if (isEmpty(currentErrors)) {\n      this.store.dispatch(new RemoveSectionErrorsAction(submissionId, sectionId));\n      this.store.dispatch(new FormClearErrorsAction(formId));\n    } else if (!isEqual(currentErrors, prevErrors)) { // compare previous error list with the current one\n      const dispatchedErrors = [];\n\n      // Iterate over the current error list\n      currentErrors.forEach((error: SubmissionSectionError) => {\n        const errorPaths: SectionErrorPath[] = parseSectionErrorPaths(error.path);\n\n        errorPaths.forEach((path: SectionErrorPath) => {\n          if (path.fieldId) {\n            const fieldId = path.fieldId.replace(/\\./g, '_');\n\n            // Dispatch action to add form error to the state;\n            const formAddErrorAction = new FormAddError(formId, fieldId, path.fieldIndex, error.message);\n            this.store.dispatch(formAddErrorAction);\n            dispatchedErrors.push(fieldId);\n          }\n        });\n      });\n\n      // Itereate over the previous error list\n      prevErrors.forEach((error: SubmissionSectionError) => {\n        const errorPaths: SectionErrorPath[] = parseSectionErrorPaths(error.path);\n\n        errorPaths.forEach((path: SectionErrorPath) => {\n          if (path.fieldId) {\n            const fieldId = path.fieldId.replace(/\\./g, '_');\n\n            if (!dispatchedErrors.includes(fieldId)) {\n              // Dispatch action to remove form error from the state;\n              const formRemoveErrorAction = new FormRemoveErrorAction(formId, fieldId, path.fieldIndex);\n              this.store.dispatch(formRemoveErrorAction);\n            }\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Dispatch a new [RemoveSectionErrorsAction]\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   */\n  public dispatchRemoveSectionErrors(submissionId, sectionId) {\n    this.store.dispatch(new RemoveSectionErrorsAction(submissionId, sectionId));\n  }\n\n  /**\n   * Dispatch a new [SetSectionFormId]\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param formId\n   *    The form id\n   */\n  public dispatchSetSectionFormId(submissionId, sectionId, formId) {\n    this.store.dispatch(new SetSectionFormId(submissionId, sectionId, formId));\n  }\n\n  /**\n   * Return the data object for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param sectionType\n   *    The type of section to retrieve\n   * @return Observable<WorkspaceitemSectionDataType>\n   *    observable of [WorkspaceitemSectionDataType]\n   */\n  public getSectionData(submissionId: string, sectionId: string, sectionType: SectionsType): Observable<WorkspaceitemSectionDataType> {\n    return this.store.select(submissionSectionDataFromIdSelector(submissionId, sectionId)).pipe(\n      map((sectionData: WorkspaceitemSectionDataType) => {\n        if (sectionType === SectionsType.SubmissionForm) {\n          return normalizeSectionData(sectionData);\n        } else {\n          return sectionData;\n        }\n      }),\n      distinctUntilChanged(),\n    );\n  }\n\n  /**\n   * Return the error list object data for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<SubmissionSectionError>\n   *    observable of array of [SubmissionSectionError]\n   */\n  public getSectionErrors(submissionId: string, sectionId: string): Observable<SubmissionSectionError[]> {\n    return this.store.select(submissionSectionErrorsFromIdSelector(submissionId, sectionId)).pipe(\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return the state object for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param sectionType\n   *    The type of section to retrieve\n   * @return Observable<SubmissionSectionObject>\n   *    observable of [SubmissionSectionObject]\n   */\n  public getSectionState(submissionId: string, sectionId: string, sectionType: SectionsType): Observable<SubmissionSectionObject> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj: SubmissionSectionObject) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => sectionObj),\n      map((sectionState: SubmissionSectionObject) => {\n        if (hasValue(sectionState.data) && sectionType === SectionsType.SubmissionForm) {\n          return Object.assign({}, sectionState, {\n            data: normalizeSectionData(sectionState.data)\n          });\n        } else {\n          return sectionState;\n        }\n      }),\n      distinctUntilChanged()\n      );\n  }\n\n  /**\n   * Check if a given section is valid\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be valid\n   */\n  public isSectionValid(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => sectionObj.isValid),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section is active\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be active\n   */\n  public isSectionActive(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.submissionService.getActiveSectionId(submissionId).pipe(\n      map((activeSectionId: string) => sectionId === activeSectionId),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section is enabled\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be enabled\n   */\n  public isSectionEnabled(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => sectionObj.enabled),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section is a read only section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param submissionScope\n   *    The submission scope\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be read only\n   */\n  public isSectionReadOnly(submissionId: string, sectionId: string, submissionScope: SubmissionScopeType): Observable<boolean> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => {\n        return isNotEmpty(sectionObj.visibility)\n          && sectionObj.visibility.other === 'READONLY'\n          && submissionScope !== SubmissionScopeType.WorkspaceItem;\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section id is present in the list of sections\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section id should be available\n   */\n  public isSectionAvailable(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.store.select(submissionObjectFromIdSelector(submissionId)).pipe(\n      filter((submissionState: SubmissionObjectEntry) => isNotUndefined(submissionState)),\n      map((submissionState: SubmissionObjectEntry) => {\n        return isNotUndefined(submissionState.sections) && isNotUndefined(submissionState.sections[sectionId]);\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section type is present in the list of sections\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionType\n   *    The section type\n   * @return Observable<boolean>\n   *    Emits true whenever a given section type should be available\n   */\n  public isSectionTypeAvailable(submissionId: string, sectionType: SectionsType): Observable<boolean> {\n    return this.store.select(submissionObjectFromIdSelector(submissionId)).pipe(\n      filter((submissionState: SubmissionObjectEntry) => isNotUndefined(submissionState)),\n      map((submissionState: SubmissionObjectEntry) => {\n        return isNotUndefined(submissionState.sections) && isNotUndefined(findKey(submissionState.sections, {sectionType: sectionType}));\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Dispatch a new [EnableSectionAction] to add a new section and move page target to it\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   */\n  public addSection(submissionId: string, sectionId: string) {\n    this.store.dispatch(new EnableSectionAction(submissionId, sectionId));\n    const config: ScrollToConfigOptions = {\n      target: sectionId,\n      offset: -70\n    };\n\n    this.scrollToService.scrollTo(config);\n  }\n\n  /**\n   * Dispatch a new [DisableSectionAction] to remove section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   */\n  public removeSection(submissionId: string, sectionId: string) {\n    this.store.dispatch(new DisableSectionAction(submissionId, sectionId));\n  }\n\n  /**\n   * Dispatch a new [UpdateSectionDataAction] to update section state with new data and errors\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param data\n   *    The section data\n   * @param errors\n   *    The list of section errors\n   * @param metadata\n   *    The section metadata\n   */\n  public updateSectionData(submissionId: string, sectionId: string, data: WorkspaceitemSectionDataType, errors: SubmissionSectionError[] = [], metadata?: string[]) {\n    if (isNotEmpty(data)) {\n      const isAvailable$ = this.isSectionAvailable(submissionId, sectionId);\n      const isEnabled$ = this.isSectionEnabled(submissionId, sectionId);\n\n      combineLatest(isAvailable$, isEnabled$).pipe(\n        take(1),\n        filter(([available, enabled]: [boolean, boolean]) => available))\n        .subscribe(([available, enabled]: [boolean, boolean]) => {\n          this.store.dispatch(new UpdateSectionDataAction(submissionId, sectionId, data, errors, metadata));\n        });\n    }\n  }\n\n  /**\n   * Dispatch a new [InertSectionErrorsAction] to update section state with new error\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param error\n   *    The section error\n   */\n  public setSectionError(submissionId: string, sectionId: string, error: SubmissionSectionError) {\n    this.store.dispatch(new InertSectionErrorsAction(submissionId, sectionId, error));\n  }\n\n  /**\n   * Dispatch a new [SectionStatusChangeAction] to update section state with new status\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param status\n   *    The section status\n   */\n  public setSectionStatus(submissionId: string, sectionId: string, status: boolean) {\n    this.store.dispatch(new SectionStatusChangeAction(submissionId, sectionId, status));\n  }\n\n  /**\n   * Compute the list of selectable metadata for the section configuration.\n   * @param formConfig\n   */\n  public computeSectionConfiguredMetadata(formConfig: string | SubmissionFormsModel): string[] {\n    const metadata = [];\n    const rawData = typeof formConfig === 'string' ? JSON.parse(formConfig, parseReviver) : formConfig;\n    if (rawData.rows && !isEmpty(rawData.rows)) {\n      rawData.rows.forEach((currentRow) => {\n        if (currentRow.fields && !isEmpty(currentRow.fields)) {\n          currentRow.fields.forEach((field) => {\n            if (field.selectableMetadata && !isEmpty(field.selectableMetadata)) {\n              field.selectableMetadata.forEach((selectableMetadata) => {\n                if (!metadata.includes(selectableMetadata.metadata)) {\n                  metadata.push(selectableMetadata.metadata);\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n    return metadata;\n  }\n\n}\n","import { Component, Injector, Input, OnInit, ViewChild } from '@angular/core';\n\nimport { SectionsDirective } from '../sections.directive';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { rendersSectionType } from '../sections-decorator';\nimport { AlertType } from '../../../shared/alert/aletr-type';\n\n/**\n * This component represents a section that contains the submission license form.\n */\n@Component({\n  selector: 'ds-submission-section-container',\n  templateUrl: './section-container.component.html',\n  styleUrls: ['./section-container.component.scss']\n})\nexport class SubmissionSectionContainerComponent implements OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * The section data\n   * @type {SectionDataObject}\n   */\n  @Input() sectionData: SectionDataObject;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * Injector to inject a section component with the @Input parameters\n   * @type {Injector}\n   */\n  public objectInjector: Injector;\n\n  /**\n   * The SectionsDirective reference\n   */\n  @ViewChild('sectionRef') sectionRef: SectionsDirective;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {Injector} injector\n   */\n  constructor(private injector: Injector) {\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnInit() {\n    this.objectInjector = Injector.create({\n      providers: [\n        {provide: 'collectionIdProvider', useFactory: () => (this.collectionId), deps: []},\n        {provide: 'sectionDataProvider', useFactory: () => (this.sectionData), deps: []},\n        {provide: 'submissionIdProvider', useFactory: () => (this.submissionId), deps: []},\n      ],\n      parent: this.injector\n    });\n  }\n\n  /**\n   * Remove section from submission form\n   *\n   * @param event\n   *    the event emitted\n   */\n  public removeSection(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.sectionRef.removeSection(this.submissionId, this.sectionData.id);\n  }\n\n  /**\n   * Find the correct component based on the section's type\n   */\n  getSectionContent(): string {\n    return rendersSectionType(this.sectionData.sectionType);\n  }\n}\n","<div dsSection #sectionRef=\"sectionRef\"\n     [attr.id]=\"sectionData.id\"\n     [ngClass]=\"{ 'section-focus' : sectionRef.isSectionActive() }\"\n     [mandatory]=\"sectionData.mandatory\"\n     [submissionId]=\"submissionId\"\n     [sectionType]=\"sectionData.sectionType\"\n     [sectionId]=\"sectionData.id\">\n  <ngb-accordion #acc=\"ngbAccordion\"\n                 *ngIf=\"(sectionRef.isEnabled() | async)\"\n                 (panelChange)=\"sectionRef.sectionChange($event)\"\n                 activeIds=\"{{ sectionData.id }}\"\n                 [destroyOnHide]=\"false\">\n    <ngb-panel id=\"{{ sectionData.id }}\">\n      <ng-template ngbPanelTitle>\n        <span class=\"float-left\">{{ 'submission.sections.'+sectionData.header | translate }}</span>\n        <div class=\"d-inline-block float-right\">\n          <i *ngIf=\"!(sectionRef.isValid() | async) && !(sectionRef.hasErrors())\" class=\"fas fa-exclamation-circle text-warning mr-3\"\n             aria-hidden=\"true\"></i>\n          <i *ngIf=\"(sectionRef.hasErrors())\" class=\"fas fa-exclamation-circle text-danger mr-3\"\n             aria-hidden=\"true\"></i>\n          <i *ngIf=\"(sectionRef.isValid() | async) && !(sectionRef.hasErrors())\" class=\"fas fa-check-circle text-success mr-3\"\n             aria-hidden=\"true\"></i>\n          <a class=\"close\" aria-label=\"Close\">\n            <span *ngIf=\"sectionRef.isOpen()\" class=\"fas fa-chevron-up fa-fw\"\n                  aria-hidden=\"true\"></span>\n            <span *ngIf=\"!sectionRef.isOpen()\" class=\"fas fa-chevron-down fa-fw\"\n                  aria-hidden=\"true\"></span>\n          </a>\n          <a href=\"#\" class=\"close mr-3\" *ngIf=\"!sectionRef.isMandatory()\"\n             (click)=\"removeSection($event)\">\n            <i class=\"fas fa-trash-o\" aria-hidden=\"true\"></i>\n          </a>\n        </div>\n      </ng-template>\n      <ng-template ngbPanelContent>\n        <div id=\"sectionGenericError_{{sectionData.id}}\" *ngIf=\"sectionRef.hasGenericErrors()\">\n          <ds-alert *ngFor=\"let error of sectionRef.getErrors(); let i = index\"\n                    [content]=\"error\"\n                    [dismissible]=\"true\"\n                    [type]=\"AlertTypeEnum.Error\"\n                    (close)=\"sectionRef.removeError(i)\"></ds-alert>\n        </div>\n        <div id=\"sectionContent_{{sectionData.id}}\"\n             (click)=\"sectionRef.setFocus($event)\">\n          <ng-container *ngComponentOutlet=\"getSectionContent(); injector: objectInjector;\"></ng-container>\n        </div>\n      </ng-template>\n    </ngb-panel>\n  </ngb-accordion>\n</div>\n","/**\n * Themed wrapper for SubmissionEditComponent\n */\nimport { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { SubmissionEditComponent } from './submission-edit.component';\n\n@Component({\n  selector: 'ds-themed-submission-edit',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedSubmissionEditComponent extends ThemedComponent<SubmissionEditComponent> {\n  protected getComponentName(): string {\n    return 'SubmissionEditComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/submission/edit/submission-edit.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./submission-edit.component`);\n  }\n}\n","import { ChangeDetectorRef, Directive, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { uniq } from 'lodash';\n\nimport { SectionsService } from './sections.service';\nimport { hasValue, isNotEmpty, isNotNull } from '../../shared/empty.util';\nimport { SubmissionSectionError, SubmissionSectionObject } from '../objects/submission-objects.reducer';\nimport parseSectionErrorPaths, { SectionErrorPath } from '../utils/parseSectionErrorPaths';\nimport { SubmissionService } from '../submission.service';\nimport { SectionsType } from './sections-type';\n\n/**\n * Directive for handling generic section functionality\n */\n@Directive({\n  selector: '[dsSection]',\n  exportAs: 'sectionRef'\n})\nexport class SectionsDirective implements OnDestroy, OnInit {\n\n  /**\n   * A boolean representing if section is mandatory\n   * @type {boolean}\n   */\n  @Input() mandatory = true;\n\n  /**\n   * The section id\n   * @type {string}\n   */\n  @Input() sectionId: string;\n\n  /**\n   * The section type\n   * @type {SectionsType}\n   */\n  @Input() sectionType: SectionsType;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The list of generic errors related to the section\n   * @type {Array}\n   */\n  public genericSectionErrors: string[] = [];\n\n  /**\n   * The list of all errors related to the element belonging to this section\n   * @type {Array}\n   */\n  public allSectionErrors: string[] = [];\n\n  /**\n   * A boolean representing if section is active\n   * @type {boolean}\n   */\n  private active = true;\n\n  /**\n   * A boolean representing if section is enabled\n   * @type {boolean}\n   */\n  private enabled: Observable<boolean>;\n\n  /**\n   * A boolean representing the panel collapsible state: opened (true) or closed (false)\n   * @type {boolean}\n   */\n  private sectionState = this.mandatory;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * A boolean representing if section is valid\n   * @type {boolean}\n   */\n  private valid: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {SubmissionService} submissionService\n   * @param {SectionsService} sectionService\n   */\n  constructor(private changeDetectorRef: ChangeDetectorRef,\n              private submissionService: SubmissionService,\n              private sectionService: SectionsService) {\n  }\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    this.valid = this.sectionService.isSectionValid(this.submissionId, this.sectionId).pipe(\n      map((valid: boolean) => {\n        if (valid) {\n          this.resetErrors();\n        }\n        return valid;\n      }));\n\n    this.subs.push(\n      this.sectionService.getSectionState(this.submissionId, this.sectionId, this.sectionType).pipe(\n        map((state: SubmissionSectionObject) => state.errors))\n        .subscribe((errors: SubmissionSectionError[]) => {\n          if (isNotEmpty(errors)) {\n            errors.forEach((errorItem: SubmissionSectionError) => {\n              const parsedErrors: SectionErrorPath[] = parseSectionErrorPaths(errorItem.path);\n\n              parsedErrors.forEach((error: SectionErrorPath) => {\n                if (!error.fieldId) {\n                  this.genericSectionErrors = uniq(this.genericSectionErrors.concat(errorItem.message));\n                } else {\n                  this.allSectionErrors.push(errorItem.message);\n                }\n              });\n            });\n          } else {\n            this.resetErrors();\n          }\n        }),\n      this.submissionService.getActiveSectionId(this.submissionId)\n        .subscribe((activeSectionId) => {\n          const previousActive = this.active;\n          this.active = (activeSectionId === this.sectionId);\n          if (previousActive !== this.active) {\n            this.changeDetectorRef.detectChanges();\n            // If section is no longer active dispatch save action\n            if (!this.active && isNotNull(activeSectionId)) {\n              this.submissionService.dispatchSave(this.submissionId);\n            }\n          }\n        })\n    );\n\n    this.enabled = this.sectionService.isSectionEnabled(this.submissionId, this.sectionId);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Change section state\n   *\n   * @param event\n   *    the event emitted\n   */\n  public sectionChange(event) {\n    this.sectionState = event.nextState;\n  }\n\n  /**\n   * Check if section panel is open\n   *\n   * @returns {boolean}\n   *    Returns true when section panel is open\n   */\n  public isOpen(): boolean {\n    return this.sectionState;\n  }\n\n  /**\n   * Check if section is mandatory\n   *\n   * @returns {boolean}\n   *    Returns true when section is mandatory\n   */\n  public isMandatory(): boolean {\n    return this.mandatory;\n  }\n\n  /**\n   * Check if section panel is active\n   *\n   * @returns {boolean}\n   *    Returns true when section panel is active\n   */\n  public isSectionActive(): boolean {\n    return this.active;\n  }\n\n  /**\n   * Check if section is enabled\n   *\n   * @returns {Observable<boolean>}\n   *    Emits true whenever section is enabled\n   */\n  public isEnabled(): Observable<boolean> {\n    return this.enabled;\n  }\n\n  /**\n   * Check if section is valid\n   *\n   * @returns {Observable<boolean>}\n   *    Emits true whenever section is valid\n   */\n  public isValid(): Observable<boolean> {\n    return this.valid;\n  }\n\n  /**\n   * Remove section panel from submission form\n   *\n   * @param submissionId\n   *    the submission id\n   * @param sectionId\n   *    the section id\n   * @returns {Observable<boolean>}\n   *    Emits true whenever section is valid\n   */\n  public removeSection(submissionId: string, sectionId: string) {\n    this.sectionService.removeSection(submissionId, sectionId);\n  }\n\n  /**\n   * Check if section has only generic errors\n   *\n   * @returns {boolean}\n   *    Returns true when section has only generic errors\n   */\n  public hasGenericErrors(): boolean {\n    return this.genericSectionErrors && this.genericSectionErrors.length > 0;\n  }\n\n  /**\n   * Check if section has errors\n   *\n   * @returns {boolean}\n   *    Returns true when section has errors\n   */\n  public hasErrors(): boolean {\n    return (this.genericSectionErrors && this.genericSectionErrors.length > 0) ||\n      (this.allSectionErrors && this.allSectionErrors.length > 0);\n  }\n\n  /**\n   * Return section errors\n   *\n   * @returns {Array}\n   *    Returns section errors list\n   */\n  public getErrors(): string[] {\n    return this.genericSectionErrors;\n  }\n\n  /**\n   * Set form focus to this section panel\n   *\n   * @param event\n   *    The event emitted\n   */\n  public setFocus(event): void {\n    if (!this.active) {\n      this.submissionService.setActiveSection(this.submissionId, this.sectionId);\n    }\n  }\n\n  /**\n   * Remove error from list\n   *\n   * @param index\n   *    The error array key\n   */\n  public removeError(index): void {\n    this.genericSectionErrors.splice(index);\n  }\n\n  /**\n   * Remove all errors from list\n   */\n  public resetErrors() {\n    if (isNotEmpty(this.genericSectionErrors)) {\n      this.sectionService.dispatchRemoveSectionErrors(this.submissionId, this.sectionId);\n    }\n    this.genericSectionErrors = [];\n    this.allSectionErrors = [];\n\n  }\n}\n","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, startWith } from 'rxjs/operators';\n\nimport { SectionDataObject } from './section-data.model';\nimport { SectionsService } from '../sections.service';\nimport { hasValue, isNotUndefined } from '../../../shared/empty.util';\n\nexport interface SectionDataModel {\n  sectionData: SectionDataObject;\n}\n\n/**\n * An abstract model class for a submission edit form section.\n */\n@Component({\n  selector: 'ds-section-model',\n  template: ''\n})\nexport abstract class SectionModelComponent implements OnDestroy, OnInit, SectionDataModel {\n  protected abstract sectionService: SectionsService;\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  collectionId: string;\n\n  /**\n   * The section data\n   * @type {SectionDataObject}\n   */\n  sectionData: SectionDataObject;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  submissionId: string;\n\n  /**\n   * A boolean representing if this section is valid\n   * @type {boolean}\n   */\n  protected valid: boolean;\n\n  /**\n   * The Subscription to section status observable\n   * @type {Subscription}\n   */\n  private sectionStatusSub: Subscription;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {string} injectedCollectionId\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  public constructor(@Inject('collectionIdProvider') public injectedCollectionId: string,\n                     @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n                     @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    this.collectionId = injectedCollectionId;\n    this.sectionData = injectedSectionData;\n    this.submissionId = injectedSubmissionId;\n  }\n\n  /**\n   * Call abstract methods on component init\n   */\n  ngOnInit(): void {\n    this.onSectionInit();\n    this.updateSectionStatus();\n  }\n\n  /**\n   * Abstract method to implement to get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected abstract getSectionStatus(): Observable<boolean>;\n\n  /**\n   * Abstract method called on component init.\n   * It must be used instead of ngOnInit on the component that extend this abstract class\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected abstract onSectionInit(): void;\n\n  /**\n   * Abstract method called on component destroy.\n   * It must be used instead of ngOnDestroy on the component that extend this abstract class\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected abstract onSectionDestroy(): void;\n\n  /**\n   * Subscribe to section status\n   */\n  protected updateSectionStatus(): void {\n    this.sectionStatusSub = this.getSectionStatus().pipe(\n      filter((sectionStatus: boolean) => isNotUndefined(sectionStatus)),\n      startWith(true))\n      .subscribe((sectionStatus: boolean) => {\n        this.sectionService.setSectionStatus(this.submissionId, this.sectionData.id, sectionStatus);\n      });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions and Call abstract methods on component destroy\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sectionStatusSub)) {\n      this.sectionStatusSub.unsubscribe();\n    }\n    this.onSectionDestroy();\n  }\n}\n","import { isEqual } from 'lodash';\n\nexport class FormFieldPreviousValueObject {\n\n  private _path;\n  private _value;\n\n  constructor(path: any[] = null, value: any = null) {\n    this._path = path;\n    this._value = value;\n  }\n\n  get path() {\n    return this._path;\n  }\n\n  set path(path: string | string[]) {\n    this._path = path;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: any) {\n    this._value = value;\n  }\n\n  public delete() {\n    this._value = null;\n    this._path = null;\n  }\n\n  public isPathEqual(path) {\n    return this._path && isEqual(this._path, path);\n  }\n}\n","<ds-loading *ngIf=\"isLoading\" message=\"Loading...\"></ds-loading>\n<ds-form *ngIf=\"!isLoading && formModel\" #formRef=\"formComponent\"\n         [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"\n         (dfFocus)=\"onFocus($event)\"\n         (remove)=\"onRemove($event)\"\n         (ngbEvent)=\"onCustomEvent($event)\"\n         (removeArrayItem)=\"onRemove($event)\"></ds-form>\n","import { ChangeDetectorRef, Component, Inject, ViewChild } from '@angular/core';\nimport { DynamicFormControlEvent, DynamicFormControlModel } from '@ng-dynamic-forms/core';\n\nimport { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  find,\n  map,\n  take,\n  tap,\n  mergeMap\n} from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { findIndex, isEqual } from 'lodash';\n\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { FormComponent } from '../../../shared/form/form.component';\nimport { FormService } from '../../../shared/form/form.service';\nimport { SectionModelComponent } from '../models/section.model';\nimport { SubmissionFormsConfigService } from '../../../core/config/submission-forms-config.service';\nimport { hasValue, isNotEmpty, isUndefined } from '../../../shared/empty.util';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { SubmissionFormsModel } from '../../../core/config/models/config-submission-forms.model';\nimport { SubmissionSectionError, SubmissionSectionObject } from '../../objects/submission-objects.reducer';\nimport { FormFieldPreviousValueObject } from '../../../shared/form/builder/models/form-field-previous-value-object';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SubmissionService } from '../../submission.service';\nimport { SectionFormOperationsService } from './section-form-operations.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { SectionsService } from '../sections.service';\nimport { difference } from '../../../shared/object.util';\nimport { WorkspaceitemSectionFormObject } from '../../../core/submission/models/workspaceitem-section-form.model';\nimport { WorkspaceItem } from '../../../core/submission/models/workspaceitem.model';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { SubmissionObjectDataService } from '../../../core/submission/submission-object-data.service';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { environment } from '../../../../environments/environment';\nimport { ConfigObject } from '../../../core/config/models/config.model';\nimport { RemoteData } from '../../../core/data/remote-data';\n\n/**\n * This component represents a section that contains a Form.\n */\n@Component({\n  selector: 'ds-submission-section-form',\n  styleUrls: ['./section-form.component.scss'],\n  templateUrl: './section-form.component.html',\n})\n@renderSectionFor(SectionsType.SubmissionForm)\nexport class SubmissionSectionformComponent extends SectionModelComponent {\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * A boolean representing if this section is updating\n   * @type {boolean}\n   */\n  public isUpdating = false;\n\n  /**\n   * A boolean representing if this section is loading\n   * @type {boolean}\n   */\n  public isLoading = true;\n\n  /**\n   * A map representing all field on their way to be removed\n   * @type {Map}\n   */\n  protected fieldsOnTheirWayToBeRemoved: Map<string, number[]> = new Map();\n\n  /**\n   * The form config\n   * @type {SubmissionFormsModel}\n   */\n  protected formConfig: SubmissionFormsModel;\n\n  /**\n   * The form data\n   * @type {any}\n   */\n  protected formData: any = Object.create({});\n\n  /**\n   * Store the\n   * @protected\n   */\n  protected sectionMetadata: string[];\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * The [FormFieldPreviousValueObject] object\n   * @type {FormFieldPreviousValueObject}\n   */\n  protected previousValue: FormFieldPreviousValueObject = new FormFieldPreviousValueObject();\n\n  /**\n   * The list of Subscription\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  protected workspaceItem: WorkspaceItem;\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') private formRef: FormComponent;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {FormBuilderService} formBuilderService\n   * @param {SectionFormOperationsService} formOperationsService\n   * @param {FormService} formService\n   * @param {SubmissionFormsConfigService} formConfigService\n   * @param {NotificationsService} notificationsService\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {TranslateService} translate\n   * @param {SubmissionObjectDataService} submissionObjectService\n   * @param {ObjectCacheService} objectCache\n   * @param {RequestService} requestService\n   * @param {string} injectedCollectionId\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  constructor(protected cdr: ChangeDetectorRef,\n              protected formBuilderService: FormBuilderService,\n              protected formOperationsService: SectionFormOperationsService,\n              protected formService: FormService,\n              protected formConfigService: SubmissionFormsConfigService,\n              protected notificationsService: NotificationsService,\n              protected sectionService: SectionsService,\n              protected submissionService: SubmissionService,\n              protected translate: TranslateService,\n              protected submissionObjectService: SubmissionObjectDataService,\n              protected objectCache: ObjectCacheService,\n              protected requestService: RequestService,\n              @Inject('collectionIdProvider') public injectedCollectionId: string,\n              @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n              @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(injectedCollectionId, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize all instance variables and retrieve form configuration\n   */\n  onSectionInit() {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.formId = this.formService.getUniqueId(this.sectionData.id);\n    this.sectionService.dispatchSetSectionFormId(this.submissionId, this.sectionData.id, this.formId);\n    this.formConfigService.findByHref(this.sectionData.config).pipe(\n      map((configData: RemoteData<ConfigObject>) => configData.payload),\n      tap((config: SubmissionFormsModel) => this.formConfig = config),\n      mergeMap(() =>\n        observableCombineLatest([\n          this.sectionService.getSectionData(this.submissionId, this.sectionData.id, this.sectionData.sectionType),\n          this.submissionObjectService.findById(this.submissionId, true, false, followLink('item')).pipe(\n            getFirstSucceededRemoteData(),\n            getRemoteDataPayload())\n        ])),\n      take(1))\n      .subscribe(([sectionData, workspaceItem]: [WorkspaceitemSectionFormObject, WorkspaceItem]) => {\n        if (isUndefined(this.formModel)) {\n          this.sectionData.errors = [];\n          this.workspaceItem = workspaceItem;\n          // Is the first loading so init form\n          this.initForm(sectionData);\n          this.sectionData.data = sectionData;\n          this.subscriptions();\n          this.isLoading = false;\n          this.cdr.detectChanges();\n        }\n      });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    return this.formService.isValid(this.formId);\n  }\n\n  /**\n   * Check if the section data has been enriched by the server\n   *\n   * @param sectionData\n   *    the section data retrieved from the server\n   */\n  hasMetadataEnrichment(sectionData: WorkspaceitemSectionFormObject): boolean {\n\n    const sectionDataToCheck = {};\n    Object.keys(sectionData).forEach((key) => {\n      if (this.sectionMetadata && this.sectionMetadata.includes(key)) {\n        sectionDataToCheck[key] = sectionData[key];\n      }\n    });\n\n    const diffResult = [];\n\n    // compare current form data state with section data retrieved from store\n    const diffObj = difference(sectionDataToCheck, this.formData);\n\n    // iterate over differences to check whether they are actually different\n    Object.keys(diffObj)\n      .forEach((key) => {\n        diffObj[key].forEach((value) => {\n          // the findIndex extra check excludes values already present in the form but in different positions\n          if (value.hasOwnProperty('value') && findIndex(this.formData[key], { value: value.value }) < 0) {\n            diffResult.push(value);\n          }\n        });\n      });\n    return isNotEmpty(diffResult);\n  }\n\n  /**\n   * Initialize form model\n   *\n   * @param sectionData\n   *    the section data retrieved from the server\n   */\n  initForm(sectionData: WorkspaceitemSectionFormObject): void {\n    try {\n      this.formModel = this.formBuilderService.modelFromConfiguration(\n        this.submissionId,\n        this.formConfig,\n        this.collectionId,\n        sectionData,\n        this.submissionService.getSubmissionScope()\n      );\n      const sectionMetadata = this.sectionService.computeSectionConfiguredMetadata(this.formConfig);\n      this.sectionService.updateSectionData(this.submissionId, this.sectionData.id, sectionData, [], sectionMetadata);\n\n    } catch (e) {\n      const msg: string = this.translate.instant('error.submission.sections.init-form-error') + e.toString();\n      const sectionError: SubmissionSectionError = {\n        message: msg,\n        path: '/sections/' + this.sectionData.id\n      };\n      console.error(e.stack);\n      this.sectionService.setSectionError(this.submissionId, this.sectionData.id, sectionError);\n    }\n  }\n\n  /**\n   * Update form model\n   *\n   * @param sectionData\n   *    the section data retrieved from the server\n   * @param errors\n   *    the section errors retrieved from the server\n   */\n  updateForm(sectionData: WorkspaceitemSectionFormObject, errors: SubmissionSectionError[]): void {\n\n    if (isNotEmpty(sectionData) && !isEqual(sectionData, this.sectionData.data)) {\n      this.sectionData.data = sectionData;\n      if (this.hasMetadataEnrichment(sectionData)) {\n        this.isUpdating = true;\n        this.formModel = null;\n        this.cdr.detectChanges();\n        this.initForm(sectionData);\n        this.checksForErrors(errors);\n        this.isUpdating = false;\n        this.cdr.detectChanges();\n      } else if (isNotEmpty(errors) || isNotEmpty(this.sectionData.errors)) {\n        this.checksForErrors(errors);\n      }\n    } else if (isNotEmpty(errors) || isNotEmpty(this.sectionData.errors)) {\n      this.checksForErrors(errors);\n    }\n\n  }\n\n  /**\n   * Check if there are form validation error retrieved from server\n   *\n   * @param errors\n   *    the section errors retrieved from the server\n   */\n  checksForErrors(errors: SubmissionSectionError[]): void {\n    this.formService.isFormInitialized(this.formId).pipe(\n      find((status: boolean) => status === true && !this.isUpdating))\n      .subscribe(() => {\n        this.sectionService.checkSectionErrors(this.submissionId, this.sectionData.id, this.formId, errors, this.sectionData.errors);\n        this.sectionData.errors = errors;\n        this.cdr.detectChanges();\n      });\n  }\n\n  /**\n   * Initialize all subscriptions\n   */\n  subscriptions(): void {\n    this.subs.push(\n      /**\n       * Subscribe to form's data\n       */\n      this.formService.getFormData(this.formId).pipe(\n        distinctUntilChanged())\n        .subscribe((formData) => {\n          this.formData = formData;\n        }),\n\n      /**\n       * Subscribe to section state\n       */\n      this.sectionService.getSectionState(this.submissionId, this.sectionData.id, this.sectionData.sectionType).pipe(\n        filter((sectionState: SubmissionSectionObject) => {\n          return isNotEmpty(sectionState) && (isNotEmpty(sectionState.data) || isNotEmpty(sectionState.errors));\n        }),\n        distinctUntilChanged())\n        .subscribe((sectionState: SubmissionSectionObject) => {\n          this.fieldsOnTheirWayToBeRemoved = new Map();\n          this.sectionMetadata = sectionState.metadata;\n          this.updateForm(sectionState.data as WorkspaceitemSectionFormObject, sectionState.errors);\n        })\n    );\n  }\n\n  /**\n   * Method called when a form dfChange event is fired.\n   * Dispatch form operations based on changes.\n   *\n   * @param event\n   *    the [[DynamicFormControlEvent]] emitted\n   */\n  onChange(event: DynamicFormControlEvent): void {\n    this.formOperationsService.dispatchOperationsFromEvent(\n      this.pathCombiner,\n      event,\n      this.previousValue,\n      this.hasStoredValue(this.formBuilderService.getId(event.model), this.formOperationsService.getArrayIndexFromEvent(event)));\n    const metadata = this.formOperationsService.getFieldPathSegmentedFromChangeEvent(event);\n    const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n\n    if (environment.submission.autosave.metadata.indexOf(metadata) !== -1 && isNotEmpty(value)) {\n      this.submissionService.dispatchSave(this.submissionId);\n    }\n  }\n\n  /**\n   * Method called when a form dfFocus event is fired.\n   * Initialize [FormFieldPreviousValueObject] instance.\n   *\n   * @param event\n   *    the [[DynamicFormControlEvent]] emitted\n   */\n  onFocus(event: DynamicFormControlEvent): void {\n    const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n    const path = this.formBuilderService.getPath(event.model);\n    if (this.formBuilderService.hasMappedGroupValue(event.model)) {\n      this.previousValue.path = path;\n      this.previousValue.value = this.formOperationsService.getQualdropValueMap(event);\n    } else if (isNotEmpty(value) && ((typeof value === 'object' && isNotEmpty(value.value)) || (typeof value === 'string'))) {\n      this.previousValue.path = path;\n      this.previousValue.value = value;\n    }\n  }\n\n  /**\n   * Method called when a form remove event is fired.\n   * Dispatch form operations based on changes.\n   *\n   * @param event\n   *    the [[DynamicFormControlEvent]] emitted\n   */\n  onRemove(event: DynamicFormControlEvent): void {\n    const fieldId = this.formBuilderService.getId(event.model);\n    const fieldIndex = this.formOperationsService.getArrayIndexFromEvent(event);\n\n    // Keep track that this field will be removed\n    if (this.fieldsOnTheirWayToBeRemoved.has(fieldId)) {\n      const indexes = this.fieldsOnTheirWayToBeRemoved.get(fieldId);\n      indexes.push(fieldIndex);\n      this.fieldsOnTheirWayToBeRemoved.set(fieldId, indexes);\n    } else {\n      this.fieldsOnTheirWayToBeRemoved.set(fieldId, [fieldIndex]);\n    }\n\n    this.formOperationsService.dispatchOperationsFromEvent(\n      this.pathCombiner,\n      event,\n      this.previousValue,\n      this.hasStoredValue(fieldId, fieldIndex));\n\n  }\n\n  /**\n   * Check if the specified form field has already a value stored\n   *\n   * @param fieldId\n   *    the section data retrieved from the serverù\n   * @param index\n   *    the section data retrieved from the server\n   */\n  hasStoredValue(fieldId, index): boolean {\n    if (isNotEmpty(this.sectionData.data)) {\n      return this.sectionData.data.hasOwnProperty(fieldId) &&\n        isNotEmpty(this.sectionData.data[fieldId][index]) &&\n        !this.isFieldToRemove(fieldId, index);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Check if the specified field is on the way to be removed\n   *\n   * @param fieldId\n   *    the section data retrieved from the serverù\n   * @param index\n   *    the section data retrieved from the server\n   */\n  isFieldToRemove(fieldId, index) {\n    return this.fieldsOnTheirWayToBeRemoved.has(fieldId) && this.fieldsOnTheirWayToBeRemoved.get(fieldId).includes(index);\n  }\n\n  /**\n   * Handle the customEvent (ex. drag-drop move event).\n   * The customEvent is stored inside event.$event\n   * @param $event\n   */\n  onCustomEvent(event: DynamicFormControlEvent) {\n    this.formOperationsService.dispatchOperationsFromEvent(\n      this.pathCombiner,\n      event,\n      this.previousValue,\n      null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEqual, union } from 'lodash';\n\nimport { from as observableFrom, Observable, of as observableOf } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { WorkflowItem } from '../../core/submission/models/workflowitem.model';\nimport { WorkspaceitemSectionUploadObject } from '../../core/submission/models/workspaceitem-section-upload.model';\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\nimport { WorkspaceItem } from '../../core/submission/models/workspaceitem.model';\nimport { SubmissionJsonPatchOperationsService } from '../../core/submission/submission-json-patch-operations.service';\nimport { isEmpty, isNotEmpty, isNotUndefined } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SectionsType } from '../sections/sections-type';\nimport { SectionsService } from '../sections/sections.service';\nimport { SubmissionState } from '../submission.reducers';\nimport { SubmissionService } from '../submission.service';\nimport parseSectionErrors from '../utils/parseSectionErrors';\nimport {\n  CompleteInitSubmissionFormAction,\n  DepositSubmissionAction,\n  DepositSubmissionErrorAction,\n  DepositSubmissionSuccessAction,\n  DiscardSubmissionErrorAction,\n  DiscardSubmissionSuccessAction,\n  InitSectionAction,\n  InitSubmissionFormAction,\n  ResetSubmissionFormAction,\n  SaveAndDepositSubmissionAction,\n  SaveForLaterSubmissionFormAction,\n  SaveForLaterSubmissionFormSuccessAction,\n  SaveSubmissionFormAction,\n  SaveSubmissionFormErrorAction,\n  SaveSubmissionFormSuccessAction,\n  SaveSubmissionSectionFormAction,\n  SaveSubmissionSectionFormErrorAction,\n  SaveSubmissionSectionFormSuccessAction,\n  SubmissionObjectAction,\n  SubmissionObjectActionTypes,\n  UpdateSectionDataAction,\n  UpdateSectionDataSuccessAction\n} from './submission-objects.actions';\nimport {SubmissionObjectEntry, SubmissionSectionError, SubmissionSectionObject} from './submission-objects.reducer';\nimport { Item } from '../../core/shared/item.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { SubmissionObjectDataService } from '../../core/submission/submission-object-data.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport parseSectionErrorPaths, {SectionErrorPath} from '../utils/parseSectionErrorPaths';\nimport { FormState } from '../../shared/form/form.reducer';\n\n@Injectable()\nexport class SubmissionObjectEffects {\n\n  /**\n   * Dispatch a [InitSectionAction] for every submission sections and dispatch a [CompleteInitSubmissionFormAction]\n   */\n  @Effect() loadForm$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.INIT_SUBMISSION_FORM),\n    map((action: InitSubmissionFormAction) => {\n      const definition = action.payload.submissionDefinition;\n      const mappedActions = [];\n      definition.sections.page.forEach((sectionDefinition: any) => {\n        const selfLink = sectionDefinition._links.self.href || sectionDefinition._links.self;\n        const sectionId = selfLink.substr(selfLink.lastIndexOf('/') + 1);\n        const config = sectionDefinition._links.config ? (sectionDefinition._links.config.href || sectionDefinition._links.config) : '';\n        const enabled = (sectionDefinition.mandatory) || (isNotEmpty(action.payload.sections) && action.payload.sections.hasOwnProperty(sectionId));\n        let sectionData;\n        if (sectionDefinition.sectionType !== SectionsType.SubmissionForm) {\n          sectionData = (isNotUndefined(action.payload.sections) && isNotUndefined(action.payload.sections[sectionId])) ? action.payload.sections[sectionId] : Object.create(null);\n        } else {\n          sectionData = action.payload.item.metadata;\n        }\n        const sectionErrors = null;\n        mappedActions.push(\n          new InitSectionAction(\n            action.payload.submissionId,\n            sectionId,\n            sectionDefinition.header,\n            config,\n            sectionDefinition.mandatory,\n            sectionDefinition.sectionType,\n            sectionDefinition.visibility,\n            enabled,\n            sectionData,\n            sectionErrors\n          )\n        );\n      });\n      return { action: action, definition: definition, mappedActions: mappedActions };\n    }),\n    mergeMap((result) => {\n      return observableFrom(\n        result.mappedActions.concat(\n          new CompleteInitSubmissionFormAction(result.action.payload.submissionId)\n        ));\n    }));\n\n  /**\n   * Dispatch a [InitSubmissionFormAction]\n   */\n  @Effect() resetForm$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.RESET_SUBMISSION_FORM),\n    map((action: ResetSubmissionFormAction) =>\n      new InitSubmissionFormAction(\n        action.payload.collectionId,\n        action.payload.submissionId,\n        action.payload.selfUrl,\n        action.payload.submissionDefinition,\n        action.payload.sections,\n        action.payload.item,\n        null\n      )));\n\n  /**\n   * Dispatch a [SaveSubmissionFormSuccessAction] or a [SaveSubmissionFormErrorAction] on error\n   */\n  @Effect() saveSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_FORM),\n    switchMap((action: SaveSubmissionFormAction) => {\n      return this.operationsService.jsonPatchByResourceType(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections').pipe(\n        map((response: SubmissionObject[]) => new SaveSubmissionFormSuccessAction(action.payload.submissionId, response, action.payload.isManual)),\n        catchError(() => observableOf(new SaveSubmissionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Dispatch a [SaveForLaterSubmissionFormSuccessAction] or a [SaveSubmissionFormErrorAction] on error\n   */\n  @Effect() saveForLaterSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_FOR_LATER_SUBMISSION_FORM),\n    switchMap((action: SaveForLaterSubmissionFormAction) => {\n      return this.operationsService.jsonPatchByResourceType(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections').pipe(\n        map((response: SubmissionObject[]) => new SaveForLaterSubmissionFormSuccessAction(action.payload.submissionId, response)),\n        catchError(() => observableOf(new SaveSubmissionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Call parseSaveResponse and dispatch actions\n   */\n  @Effect() saveSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_FORM_SUCCESS),\n    withLatestFrom(this.store$),\n    map(([action, currentState]: [SaveSubmissionFormSuccessAction, any]) => {\n      return this.parseSaveResponse((currentState.submission as SubmissionState).objects[action.payload.submissionId],\n        action.payload.submissionObject, action.payload.submissionId, currentState.forms, action.payload.notify);\n    }),\n    mergeMap((actions) => observableFrom(actions)));\n\n  /**\n   * Call parseSaveResponse and dispatch actions.\n   * Notification system is forced to be disabled.\n   */\n  @Effect() saveSubmissionSectionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_SECTION_FORM_SUCCESS),\n    withLatestFrom(this.store$),\n    map(([action, currentState]: [SaveSubmissionSectionFormSuccessAction, any]) => {\n      return this.parseSaveResponse((currentState.submission as SubmissionState).objects[action.payload.submissionId],\n        action.payload.submissionObject, action.payload.submissionId, currentState.forms, false);\n    }),\n    mergeMap((actions) => observableFrom(actions)));\n\n  /**\n   * Dispatch a [SaveSubmissionSectionFormSuccessAction] or a [SaveSubmissionSectionFormErrorAction] on error\n   */\n  @Effect() saveSection$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_SECTION_FORM),\n    switchMap((action: SaveSubmissionSectionFormAction) => {\n      return this.operationsService.jsonPatchByResourceID(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections',\n        action.payload.sectionId).pipe(\n        map((response: SubmissionObject[]) => new SaveSubmissionSectionFormSuccessAction(action.payload.submissionId, response)),\n        catchError(() => observableOf(new SaveSubmissionSectionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Show a notification on error\n   */\n  @Effect({ dispatch: false }) saveError$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_FORM_ERROR, SubmissionObjectActionTypes.SAVE_SUBMISSION_SECTION_FORM_ERROR),\n    withLatestFrom(this.store$),\n    tap(() => this.notificationsService.error(null, this.translate.get('submission.sections.general.save_error_notice'))));\n\n  /**\n   * Call parseSaveResponse and dispatch actions or dispatch [SaveSubmissionFormErrorAction] on error\n   */\n  @Effect() saveAndDeposit$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_AND_DEPOSIT_SUBMISSION),\n    withLatestFrom(this.store$),\n    switchMap(([action, currentState]: [SaveAndDepositSubmissionAction, any]) => {\n      return this.operationsService.jsonPatchByResourceType(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections').pipe(\n        map((response: SubmissionObject[]) => {\n          if (this.canDeposit(response)) {\n            return new DepositSubmissionAction(action.payload.submissionId);\n          } else {\n            this.notificationsService.warning(null, this.translate.get('submission.sections.general.sections_not_valid'));\n            return this.parseSaveResponse((currentState.submission as SubmissionState).objects[action.payload.submissionId],\n              response, action.payload.submissionId, currentState.forms);\n          }\n        }),\n        catchError(() => observableOf(new SaveSubmissionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Dispatch a [DepositSubmissionSuccessAction] or a [DepositSubmissionErrorAction] on error\n   */\n  @Effect() depositSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DEPOSIT_SUBMISSION),\n    withLatestFrom(this.store$),\n    switchMap(([action, state]: [DepositSubmissionAction, any]) => {\n      return this.submissionService.depositSubmission(state.submission.objects[action.payload.submissionId].selfUrl).pipe(\n        map(() => new DepositSubmissionSuccessAction(action.payload.submissionId)),\n        catchError((error) => {\n          console.log('submission error', error);\n          return observableOf(new DepositSubmissionErrorAction(action.payload.submissionId));\n        }));\n    }));\n\n  /**\n   * Show a notification on success and redirect to MyDSpace page\n   */\n  @Effect({ dispatch: false }) saveForLaterSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_FOR_LATER_SUBMISSION_FORM_SUCCESS),\n    tap(() => this.notificationsService.success(null, this.translate.get('submission.sections.general.save_success_notice'))),\n    tap(() => this.submissionService.redirectToMyDSpace()));\n\n  /**\n   * Show a notification on success and redirect to MyDSpace page\n   */\n  @Effect({ dispatch: false }) depositSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DEPOSIT_SUBMISSION_SUCCESS),\n    tap(() => this.notificationsService.success(null, this.translate.get('submission.sections.general.deposit_success_notice'))),\n    tap(() => this.submissionService.redirectToMyDSpace()));\n\n  /**\n   * Show a notification on error\n   */\n  @Effect({ dispatch: false }) depositSubmissionError$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DEPOSIT_SUBMISSION_ERROR),\n    tap(() => this.notificationsService.error(null, this.translate.get('submission.sections.general.deposit_error_notice'))));\n\n  /**\n   * Dispatch a [DiscardSubmissionSuccessAction] or a [DiscardSubmissionErrorAction] on error\n   */\n  @Effect() discardSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DISCARD_SUBMISSION),\n    switchMap((action: DepositSubmissionAction) => {\n      return this.submissionService.discardSubmission(action.payload.submissionId).pipe(\n        map(() => new DiscardSubmissionSuccessAction(action.payload.submissionId)),\n        catchError(() => observableOf(new DiscardSubmissionErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Adds all metadata an item to the SubmissionForm sections of the submission\n   */\n  @Effect() addAllMetadataToSectionData = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.UPDATE_SECTION_DATA),\n    switchMap((action: UpdateSectionDataAction) => {\n      return this.sectionService.getSectionState(action.payload.submissionId, action.payload.sectionId, SectionsType.Upload)\n        .pipe(map((section: SubmissionSectionObject) => [action, section]), take(1));\n    }),\n    filter(([action, section]: [UpdateSectionDataAction, SubmissionSectionObject]) => section.sectionType === SectionsType.SubmissionForm),\n    switchMap(([action, section]: [UpdateSectionDataAction, SubmissionSectionObject]) => {\n      if (section.sectionType === SectionsType.SubmissionForm) {\n        const submissionObject$ = this.submissionObjectService\n          .findById(action.payload.submissionId, true, false, followLink('item')).pipe(\n            getFirstSucceededRemoteDataPayload()\n          );\n\n        const item$ = submissionObject$.pipe(\n          switchMap((submissionObject: SubmissionObject) => (submissionObject.item as Observable<RemoteData<Item>>).pipe(\n            getFirstSucceededRemoteDataPayload(),\n          )));\n\n        return item$.pipe(\n          map((item: Item) => item.metadata),\n          filter((metadata) => !isEqual(action.payload.data, metadata)),\n          map((metadata: any) => new UpdateSectionDataAction(action.payload.submissionId, action.payload.sectionId, metadata, action.payload.errors, action.payload.metadata))\n        );\n      } else {\n        return observableOf(new UpdateSectionDataSuccessAction());\n      }\n    }),\n  );\n\n  /**\n   * Show a notification on success and redirect to MyDSpace page\n   */\n  @Effect({ dispatch: false })\n  discardSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DISCARD_SUBMISSION_SUCCESS),\n    tap(() => this.notificationsService.success(null, this.translate.get('submission.sections.general.discard_success_notice'))),\n    tap(() => this.submissionService.redirectToMyDSpace()));\n\n  /**\n   * Show a notification on error\n   */\n  @Effect({ dispatch: false }) discardSubmissionError$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DISCARD_SUBMISSION_ERROR),\n    tap(() => this.notificationsService.error(null, this.translate.get('submission.sections.general.discard_error_notice'))));\n\n  constructor(private actions$: Actions,\n              private notificationsService: NotificationsService,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private sectionService: SectionsService,\n              private store$: Store<any>,\n              private submissionService: SubmissionService,\n              private submissionObjectService: SubmissionObjectDataService,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Check if the submission object retrieved from REST haven't section errors\n   *\n   * @param response\n   *    The submission object retrieved from REST\n   */\n  protected canDeposit(response: SubmissionObject[]) {\n    let canDeposit = true;\n\n    if (isNotEmpty(response)) {\n      response.forEach((item: WorkspaceItem | WorkflowItem) => {\n        const { errors } = item;\n\n        if (errors && !isEmpty(errors)) {\n          canDeposit = false;\n        }\n      });\n    }\n    return canDeposit;\n  }\n\n  /**\n   * Parse the submission object retrieved from REST and return actions to dispatch\n   *\n   * @param currentState\n   *    The current SubmissionObjectEntry\n   * @param response\n   *    The submission object retrieved from REST\n   * @param submissionId\n   *    The submission id\n   * @param notify\n   *    A boolean that indicate if show notification or not\n   * @return SubmissionObjectAction[]\n   *    List of SubmissionObjectAction to dispatch\n   */\n  protected parseSaveResponse(\n    currentState: SubmissionObjectEntry,\n    response: SubmissionObject[],\n    submissionId: string,\n    forms,\n    notify: boolean = true): SubmissionObjectAction[] {\n\n    const mappedActions = [];\n\n    if (isNotEmpty(response)) {\n      if (notify) {\n        this.notificationsService.success(null, this.translate.get('submission.sections.general.save_success_notice'));\n      }\n\n      response.forEach((item: WorkspaceItem | WorkflowItem) => {\n\n        let errorsList = Object.create({});\n        const { errors } = item;\n\n        if (errors && !isEmpty(errors)) {\n          // to avoid dispatching an action for every error, create an array of errors per section\n          errorsList = parseSectionErrors(errors);\n          if (notify) {\n            this.notificationsService.warning(null, this.translate.get('submission.sections.general.sections_not_valid'));\n          }\n        }\n\n        const sections: WorkspaceitemSectionsObject = (item.sections && isNotEmpty(item.sections)) ? item.sections : {};\n        const sectionsKeys: string[] = union(Object.keys(sections), Object.keys(errorsList));\n\n        for (const sectionId of sectionsKeys) {\n          const sectionErrors = errorsList[sectionId] || [];\n          const sectionData = sections[sectionId] || {};\n\n          // When Upload section is disabled, add to submission only if there are files\n          if (currentState.sections[sectionId].sectionType === SectionsType.Upload\n            && isEmpty((sectionData as WorkspaceitemSectionUploadObject).files)\n            && !currentState.sections[sectionId].enabled) {\n            continue;\n          }\n\n          if (notify && !currentState.sections[sectionId].enabled) {\n            this.submissionService.notifyNewSection(submissionId, sectionId, currentState.sections[sectionId].sectionType);\n          }\n\n          const sectionForm = getForm(forms, currentState, sectionId);\n          const filteredErrors = filterErrors(sectionForm, sectionErrors, currentState.sections[sectionId].sectionType, notify);\n          mappedActions.push(new UpdateSectionDataAction(submissionId, sectionId, sectionData, filteredErrors));\n        }\n      });\n    }\n    return mappedActions;\n  }\n}\n\nfunction getForm(forms, currentState, sectionId) {\n  if (!forms) {\n    return null;\n  }\n  const formId = currentState.sections[sectionId].formId;\n  return forms[formId];\n}\n\n/**\n * Filter sectionErrors accordingly to this rules:\n * 1. if notifications are enabled return all errors\n * 2. if sectionType is different from 'submission-form' return all errors\n * 3. otherwise return errors only for those fields marked as touched inside the section form\n * @param sectionForm\n *  The form related to the section\n * @param sectionErrors\n *  The section errors array\n * @param sectionType\n *  The section type\n * @param notify\n *  Whether notifications are enabled\n */\nfunction filterErrors(sectionForm: FormState, sectionErrors: SubmissionSectionError[], sectionType: string, notify: boolean): SubmissionSectionError[] {\n  if (notify || sectionType !== SectionsType.SubmissionForm) {\n    return sectionErrors;\n  }\n  if (!sectionForm || !sectionForm.touched) {\n    return [];\n  }\n  const filteredErrors = [];\n  sectionErrors.forEach((error: SubmissionSectionError) => {\n    const errorPaths: SectionErrorPath[] = parseSectionErrorPaths(error.path);\n    errorPaths.forEach((path: SectionErrorPath) => {\n      if (path.fieldId && sectionForm.touched[path.fieldId]) {\n        filteredErrors.push(error);\n      }\n    });\n  });\n  return filteredErrors;\n}\n","import { SubmissionObjectEffects } from './objects/submission-objects.effects';\n\nexport const submissionEffects = [\n  SubmissionObjectEffects\n];\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { SubmissionState } from '../../submission.reducers';\nimport {\n  DeleteUploadedFileAction,\n  EditFileDataAction,\n  NewUploadedFileAction\n} from '../../objects/submission-objects.actions';\nimport { submissionUploadedFileFromUuidSelector, submissionUploadedFilesFromIdSelector } from '../../selectors';\nimport { isUndefined } from '../../../shared/empty.util';\nimport { WorkspaceitemSectionUploadFileObject } from '../../../core/submission/models/workspaceitem-section-upload-file.model';\n\n/**\n * A service that provides methods to handle submission's bitstream state.\n */\n@Injectable()\nexport class SectionUploadService {\n\n  /**\n   * Initialize service variables\n   *\n   * @param {Store<SubmissionState>} store\n   */\n  constructor(private store: Store<SubmissionState>) {}\n\n  /**\n   * Return submission's bitstream list from state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @returns {Array}\n   *    Returns submission's bitstream list\n   */\n  public getUploadedFileList(submissionId: string, sectionId: string): Observable<any> {\n    return this.store.select(submissionUploadedFilesFromIdSelector(submissionId, sectionId)).pipe(\n      map((state) => state),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return bitstream's metadata\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @returns {Observable}\n   *    Emits bitstream's metadata\n   */\n  public getFileData(submissionId: string, sectionId: string, fileUUID: string): Observable<any> {\n    return this.store.select(submissionUploadedFilesFromIdSelector(submissionId, sectionId)).pipe(\n      filter((state) => !isUndefined(state)),\n      map((state) => {\n        let fileState;\n        Object.keys(state)\n          .filter((key) => state[key].uuid === fileUUID)\n          .forEach((key) => fileState = state[key]);\n        return fileState;\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return bitstream's default policies\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @returns {Observable}\n   *    Emits bitstream's default policies\n   */\n  public getDefaultPolicies(submissionId: string, sectionId: string, fileUUID: string): Observable<any> {\n    return this.store.select(submissionUploadedFileFromUuidSelector(submissionId, sectionId, fileUUID)).pipe(\n      map((state) => state),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Add a new bitstream to the state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @param data\n   *    The [[WorkspaceitemSectionUploadFileObject]] object\n   */\n  public addUploadedFile(submissionId: string, sectionId: string, fileUUID: string, data: WorkspaceitemSectionUploadFileObject) {\n    this.store.dispatch(\n      new NewUploadedFileAction(submissionId, sectionId, fileUUID, data)\n    );\n  }\n\n  /**\n   * Update bitstream metadata into the state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @param data\n   *    The [[WorkspaceitemSectionUploadFileObject]] object\n   */\n  public updateFileData(submissionId: string, sectionId: string, fileUUID: string, data: WorkspaceitemSectionUploadFileObject) {\n    this.store.dispatch(\n      new EditFileDataAction(submissionId, sectionId, fileUUID, data)\n    );\n  }\n\n  /**\n   * Remove bitstream from the state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   */\n  public removeUploadedFile(submissionId: string, sectionId: string, fileUUID: string) {\n    this.store.dispatch(\n      new DeleteUploadedFileAction(submissionId, sectionId, fileUUID)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from './config.service';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { dataService } from '../cache/builders/build-decorators';\nimport { SUBMISSION_UPLOADS_TYPE } from './models/config-type';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../core.reducers';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { HttpClient } from '@angular/common/http';\nimport { DefaultChangeAnalyzer } from '../data/default-change-analyzer.service';\nimport { ConfigObject } from './models/config.model';\nimport { SubmissionUploadsModel } from './models/config-submission-uploads.model';\nimport { RemoteData } from '../data/remote-data';\nimport { Observable } from 'rxjs';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\n\n/**\n * Provides methods to retrieve, from REST server, bitstream access conditions configurations applicable during the submission process.\n */\n@Injectable()\n@dataService(SUBMISSION_UPLOADS_TYPE)\nexport class SubmissionUploadsConfigService extends ConfigService {\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<CoreState>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected http: HttpClient,\n    protected comparator: DefaultChangeAnalyzer<SubmissionUploadsModel>\n  ) {\n    super(requestService, rdbService, null, objectCache, halService, notificationsService, http, comparator, 'submissionuploads');\n  }\n\n  findByHref(href: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow): Observable<RemoteData<SubmissionUploadsModel>> {\n    return super.findByHref(href, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow as FollowLinkConfig<ConfigObject>[]) as Observable<RemoteData<SubmissionUploadsModel>>;\n  }\n}\n","<ds-alert [content]=\"'submission.sections.upload.info'\"\n          [dismissible]=\"true\"\n          [type]=\"AlertTypeEnum.Info\"></ds-alert>\n\n<ng-container *ngIf=\"fileList.length == 0\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3 class=\"text-center\"><span class=\"text-muted\">{{'submission.sections.upload.no-file-uploaded' | translate}}</span></h3>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"fileList.length > 0\">\n\n  <div *ngIf=\"collectionDefaultAccessConditions.length > 0\" class=\"row\">\n    <div class=\"col-sm-12\" >\n      <ds-alert [type]=\"AlertTypeEnum.Warning\">\n        <ng-container *ngIf=\"collectionPolicyType === 1\">\n          {{ 'submission.sections.upload.header.policy.default.nolist' | translate:{ \"collectionName\": collectionName } }}\n        </ng-container>\n        <ng-container *ngIf=\"collectionPolicyType === 2\">\n          {{ 'submission.sections.upload.header.policy.default.withlist' | translate:{ \"collectionName\": collectionName } }}\n        </ng-container>\n        <span class=\"clearfix\"></span>\n        <ds-submission-section-upload-access-conditions [accessConditions]=\"collectionDefaultAccessConditions\"></ds-submission-section-upload-access-conditions>\n      </ds-alert>\n    </div>\n  </div>\n\n  <ng-container *ngFor=\"let fileEntry of fileList\">\n    <ds-submission-upload-section-file\n                                       [availableAccessConditionOptions]=\"availableAccessConditionOptions\"\n                                       [collectionId]=\"collectionId\"\n                                       [collectionPolicyType]=\"collectionPolicyType\"\n                                       [configMetadataForm]=\"(configMetadataForm$ | async)\"\n                                       [fileId]=\"fileIndexes[fileList.indexOf(fileEntry)]\"\n                                       [fileIndex]=\"fileList.indexOf(fileEntry)\"\n                                       [fileName]=\"fileNames[fileList.indexOf(fileEntry)]\"\n                                       [sectionId]=\"sectionData.id\"\n                                       [submissionId]=\"submissionId\"></ds-submission-upload-section-file>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr/>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { ChangeDetectorRef, Component, Inject } from '@angular/core';\n\nimport {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  Observable,\n  Subscription\n} from 'rxjs';\nimport { distinctUntilChanged, filter, map, mergeMap, switchMap, tap } from 'rxjs/operators';\n\nimport { SectionModelComponent } from '../models/section.model';\nimport { hasValue, isNotEmpty, isNotUndefined, isUndefined } from '../../../shared/empty.util';\nimport { SectionUploadService } from './section-upload.service';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { ResourcePolicyService } from '../../../core/resource-policy/resource-policy.service';\nimport { SubmissionUploadsConfigService } from '../../../core/config/submission-uploads-config.service';\nimport { SubmissionUploadsModel } from '../../../core/config/models/config-submission-uploads.model';\nimport { SubmissionFormsModel } from '../../../core/config/models/config-submission-forms.model';\nimport { SectionsType } from '../sections-type';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { SubmissionObjectEntry } from '../../objects/submission-objects.reducer';\nimport { AlertType } from '../../../shared/alert/aletr-type';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Group } from '../../../core/eperson/models/group.model';\nimport { SectionsService } from '../sections.service';\nimport { SubmissionService } from '../../submission.service';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { AccessConditionOption } from '../../../core/config/models/config-access-condition-option.model';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\n\nexport const POLICY_DEFAULT_NO_LIST = 1; // Banner1\nexport const POLICY_DEFAULT_WITH_LIST = 2; // Banner2\n\nexport interface AccessConditionGroupsMapEntry {\n  accessCondition: string;\n  groups: Group[];\n}\n\n/**\n * This component represents a section that contains submission's bitstreams\n */\n@Component({\n  selector: 'ds-submission-section-upload',\n  styleUrls: ['./section-upload.component.scss'],\n  templateUrl: './section-upload.component.html',\n})\n@renderSectionFor(SectionsType.Upload)\nexport class SubmissionSectionUploadComponent extends SectionModelComponent {\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * The array containing the keys of file list array\n   * @type {Array}\n   */\n  public fileIndexes: string[] = [];\n\n  /**\n   * The file list\n   * @type {Array}\n   */\n  public fileList: any[] = [];\n\n  /**\n   * The array containing the name of the files\n   * @type {Array}\n   */\n  public fileNames: string[] = [];\n\n  /**\n   * The collection name this submission belonging to\n   * @type {string}\n   */\n  public collectionName: string;\n\n  /**\n   * Default access conditions of this collection\n   * @type {Array}\n   */\n  public collectionDefaultAccessConditions: any[] = [];\n\n  /**\n   * Define if collection access conditions policy type :\n   * POLICY_DEFAULT_NO_LIST : is not possible to define additional access group/s for the single file\n   * POLICY_DEFAULT_WITH_LIST : is possible to define additional access group/s for the single file\n   * @type {number}\n   */\n  public collectionPolicyType: number;\n\n  /**\n   * The configuration for the bitstream's metadata form\n   */\n  public configMetadataForm$: Observable<SubmissionFormsModel>;\n\n  /**\n   * List of available access conditions that could be set to files\n   */\n  public availableAccessConditionOptions: AccessConditionOption[];  // List of accessConditions that an user can select\n\n  /**\n   * Is the upload required\n   * @type {boolean}\n   */\n  public required$ = new BehaviorSubject<boolean>(true);\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {SectionUploadService} bitstreamService\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {CollectionDataService} collectionDataService\n   * @param {GroupDataService} groupService\n   * @param {ResourcePolicyService} resourcePolicyService\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {SubmissionUploadsConfigService} uploadsConfigService\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  constructor(private bitstreamService: SectionUploadService,\n              private changeDetectorRef: ChangeDetectorRef,\n              private collectionDataService: CollectionDataService,\n              private groupService: GroupDataService,\n              private resourcePolicyService: ResourcePolicyService,\n              protected sectionService: SectionsService,\n              private submissionService: SubmissionService,\n              private uploadsConfigService: SubmissionUploadsConfigService,\n              @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n              @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(undefined, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize all instance variables and retrieve collection default access conditions\n   */\n  onSectionInit() {\n    const config$ = this.uploadsConfigService.findByHref(this.sectionData.config, true, false, followLink('metadata')).pipe(\n      getFirstSucceededRemoteData(),\n      map((config) => config.payload));\n\n    // retrieve configuration for the bitstream's metadata form\n    this.configMetadataForm$ = config$.pipe(\n      switchMap((config: SubmissionUploadsModel) =>\n        config.metadata.pipe(\n          getFirstSucceededRemoteData(),\n          map((remoteData: RemoteData<SubmissionFormsModel>) => remoteData.payload)\n        )\n      ));\n\n    this.subs.push(\n      this.submissionService.getSubmissionObject(this.submissionId).pipe(\n        filter((submissionObject: SubmissionObjectEntry) => isNotUndefined(submissionObject) && !submissionObject.isLoading),\n        filter((submissionObject: SubmissionObjectEntry) => isUndefined(this.collectionId) || this.collectionId !== submissionObject.collection),\n        tap((submissionObject: SubmissionObjectEntry) => this.collectionId = submissionObject.collection),\n        mergeMap((submissionObject: SubmissionObjectEntry) => this.collectionDataService.findById(submissionObject.collection)),\n        filter((rd: RemoteData<Collection>) => isNotUndefined((rd.payload))),\n        tap((collectionRemoteData: RemoteData<Collection>) => this.collectionName = collectionRemoteData.payload.name),\n        // TODO review this part when https://github.com/DSpace/dspace-angular/issues/575 is resolved\n/*        mergeMap((collectionRemoteData: RemoteData<Collection>) => {\n          return this.resourcePolicyService.findByHref(\n            (collectionRemoteData.payload as any)._links.defaultAccessConditions.href\n          );\n        }),\n        filter((defaultAccessConditionsRemoteData: RemoteData<ResourcePolicy>) =>\n          defaultAccessConditionsRemoteData.hasSucceeded),\n        tap((defaultAccessConditionsRemoteData: RemoteData<ResourcePolicy>) => {\n          if (isNotEmpty(defaultAccessConditionsRemoteData.payload)) {\n            this.collectionDefaultAccessConditions = Array.isArray(defaultAccessConditionsRemoteData.payload)\n              ? defaultAccessConditionsRemoteData.payload : [defaultAccessConditionsRemoteData.payload];\n          }\n        }),*/\n        mergeMap(() => config$),\n      ).subscribe((config: SubmissionUploadsModel) => {\n        this.required$.next(config.required);\n        this.availableAccessConditionOptions = isNotEmpty(config.accessConditionOptions) ? config.accessConditionOptions : [];\n        this.collectionPolicyType = this.availableAccessConditionOptions.length > 0\n          ? POLICY_DEFAULT_WITH_LIST\n          : POLICY_DEFAULT_NO_LIST;\n        this.changeDetectorRef.detectChanges();\n      }),\n\n      // retrieve submission's bitstreams from state\n      observableCombineLatest(this.configMetadataForm$,\n        this.bitstreamService.getUploadedFileList(this.submissionId, this.sectionData.id)).pipe(\n        filter(([configMetadataForm, fileList]: [SubmissionFormsModel, any[]]) => {\n          return isNotEmpty(configMetadataForm) && isNotUndefined(fileList);\n        }),\n        distinctUntilChanged())\n        .subscribe(([configMetadataForm, fileList]: [SubmissionFormsModel, any[]]) => {\n            this.fileList = [];\n            this.fileIndexes = [];\n            this.fileNames = [];\n            this.changeDetectorRef.detectChanges();\n            if (isNotUndefined(fileList) && fileList.length > 0) {\n              fileList.forEach((file) => {\n                this.fileList.push(file);\n                this.fileIndexes.push(file.uuid);\n                this.fileNames.push(this.getFileName(configMetadataForm, file));\n              });\n            }\n\n            this.changeDetectorRef.detectChanges();\n          }\n        )\n    );\n  }\n\n  /**\n   * Return file name from metadata\n   *\n   * @param configMetadataForm\n   *    the bitstream's form configuration\n   * @param fileData\n   *    the file metadata\n   */\n  private getFileName(configMetadataForm: SubmissionFormsModel, fileData: any): string {\n    const metadataName: string = configMetadataForm.rows[0].fields[0].selectableMetadata[0].metadata;\n    let title: string;\n    if (isNotEmpty(fileData.metadata) && isNotEmpty(fileData.metadata[metadataName])) {\n      title = fileData.metadata[metadataName][0].display;\n    } else {\n      title = fileData.uuid;\n    }\n\n    return title;\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    // if not mandatory, always true\n    // if mandatory, at least one file is required\n    return observableCombineLatest(this.required$,\n      this.bitstreamService.getUploadedFileList(this.submissionId, this.sectionData.id),\n      (required,fileList: any[]) => {\n        return (!required || (isNotUndefined(fileList) && fileList.length > 0));\n      });\n  }\n\n  /**\n   * Method provided by Angular. Invoked when the instance is destroyed.\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","\nexport const SECTION_LICENSE_FORM_LAYOUT = {\n\n  granted: {\n    element: {\n      container: 'custom-control custom-checkbox pl-1',\n      control: 'custom-control-input',\n      label: 'custom-control-label pt-1'\n    }\n  }\n};\n\nexport const SECTION_LICENSE_FORM_MODEL = [\n  {\n    id: 'granted',\n    label: 'I confirm the license above',\n    required: true,\n    value: false,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must accept the license',\n      notgranted: 'You must accept the license'\n    },\n    type: 'CHECKBOX',\n  }\n];\n","<span class=\"mb-5\" [innerHTML]=\"licenseText$ | async\"></span>\n<br> <br>\n<ds-form *ngIf=\"formModel\" #formRef=\"formComponent\"\n         [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formLayout]=\"formLayout\"\n         [displaySubmit]=\"displaySubmit\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"></ds-form>\n","import { ChangeDetectorRef, Component, Inject, ViewChild } from '@angular/core';\nimport {\n  DynamicCheckboxModel,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout\n} from '@ng-dynamic-forms/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, find, map, mergeMap, startWith, take } from 'rxjs/operators';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { License } from '../../../core/shared/license.model';\nimport { WorkspaceitemSectionLicenseObject } from '../../../core/submission/models/workspaceitem-section-license.model';\nimport { hasValue, isNotEmpty, isNotNull, isNotUndefined } from '../../../shared/empty.util';\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { FormComponent } from '../../../shared/form/form.component';\nimport { FormService } from '../../../shared/form/form.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { SubmissionService } from '../../submission.service';\nimport { SectionFormOperationsService } from '../form/section-form-operations.service';\nimport { SectionDataObject } from '../models/section-data.model';\n\nimport { SectionModelComponent } from '../models/section.model';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SectionsService } from '../sections.service';\nimport { SECTION_LICENSE_FORM_LAYOUT, SECTION_LICENSE_FORM_MODEL } from './section-license.model';\n\n/**\n * This component represents a section that contains the submission license form.\n */\n@Component({\n  selector: 'ds-submission-section-license',\n  styleUrls: ['./section-license.component.scss'],\n  templateUrl: './section-license.component.html',\n})\n@renderSectionFor(SectionsType.License)\nexport class SubmissionSectionLicenseComponent extends SectionModelComponent {\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * The [[DynamicFormLayout]] object\n   * @type {DynamicFormLayout}\n   */\n  public formLayout: DynamicFormLayout = SECTION_LICENSE_FORM_LAYOUT;\n\n  /**\n   * A boolean representing if to show form submit and cancel buttons\n   * @type {boolean}\n   */\n  public displaySubmit = false;\n\n  /**\n   * The submission license text\n   * @type {Array}\n   */\n  public licenseText$: Observable<string>;\n\n  /**\n   * The [[JsonPatchOperationPathCombiner]] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') private formRef: FormComponent;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {CollectionDataService} collectionDataService\n   * @param {FormBuilderService} formBuilderService\n   * @param {SectionFormOperationsService} formOperationsService\n   * @param {FormService} formService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {string} injectedCollectionId\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  constructor(protected changeDetectorRef: ChangeDetectorRef,\n              protected collectionDataService: CollectionDataService,\n              protected formBuilderService: FormBuilderService,\n              protected formOperationsService: SectionFormOperationsService,\n              protected formService: FormService,\n              protected operationsBuilder: JsonPatchOperationsBuilder,\n              protected sectionService: SectionsService,\n              protected submissionService: SubmissionService,\n              @Inject('collectionIdProvider') public injectedCollectionId: string,\n              @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n              @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(injectedCollectionId, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize all instance variables and retrieve submission license\n   */\n  onSectionInit() {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.formId = this.formService.getUniqueId(this.sectionData.id);\n    this.formModel = this.formBuilderService.fromJSON(SECTION_LICENSE_FORM_MODEL);\n    const model = this.formBuilderService.findById('granted', this.formModel);\n\n    // Retrieve license accepted status\n    (model as DynamicCheckboxModel).value = (this.sectionData.data as WorkspaceitemSectionLicenseObject).granted;\n\n    this.licenseText$ = this.collectionDataService.findById(this.collectionId, true, true, followLink('license')).pipe(\n      filter((collectionData: RemoteData<Collection>) => isNotUndefined((collectionData.payload))),\n      mergeMap((collectionData: RemoteData<Collection>) => (collectionData.payload as any).license),\n      find((licenseData: RemoteData<License>) => isNotUndefined((licenseData.payload))),\n      map((licenseData: RemoteData<License>) => licenseData.payload.text),\n      startWith(''));\n\n    this.subs.push(\n      // Disable checkbox whether it's in workflow or item scope\n      this.sectionService.isSectionReadOnly(\n        this.submissionId,\n        this.sectionData.id,\n        this.submissionService.getSubmissionScope()).pipe(\n        take(1),\n        filter((isReadOnly) => isReadOnly))\n        .subscribe(() => {\n          model.disabled = true;\n        }),\n\n      this.sectionService.getSectionErrors(this.submissionId, this.sectionData.id).pipe(\n        filter((errors) => isNotEmpty(errors)),\n        distinctUntilChanged())\n        .subscribe((errors) => {\n          // parse errors\n          const newErrors = errors.map((error) => {\n            // When the error path is only on the section,\n            // replace it with the path to the form field to display error also on the form\n            if (error.path === '/sections/license') {\n              // check whether license is not accepted\n              if (!(model as DynamicCheckboxModel).checked) {\n                return Object.assign({}, error, { path: '/sections/license/granted' });\n              } else {\n                return null;\n              }\n            } else {\n              return error;\n            }\n          }).filter((error) => isNotNull(error));\n\n          if (isNotEmpty(newErrors)) {\n            this.sectionService.checkSectionErrors(this.submissionId, this.sectionData.id, this.formId, newErrors);\n            this.sectionData.errors = errors;\n          } else {\n            // Remove any section's errors\n            this.sectionService.dispatchRemoveSectionErrors(this.submissionId, this.sectionData.id);\n          }\n          this.changeDetectorRef.detectChanges();\n        })\n    );\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    const model = this.formBuilderService.findById('granted', this.formModel);\n    return (model as DynamicCheckboxModel).valueChanges.pipe(\n      map((value) => value === true),\n      startWith((model as DynamicCheckboxModel).value));\n  }\n\n  /**\n   * Method called when a form dfChange event is fired.\n   * Dispatch form operations based on changes.\n   */\n  onChange(event: DynamicFormControlEvent) {\n    const path = this.formOperationsService.getFieldPathSegmentedFromChangeEvent(event);\n    const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n    if (value) {\n      this.operationsBuilder.add(this.pathCombiner.getPath(path), value.value.toString(), false, true);\n      // Remove any section's errors\n      this.sectionService.dispatchRemoveSectionErrors(this.submissionId, this.sectionData.id);\n    } else {\n      this.operationsBuilder.remove(this.pathCombiner.getPath(path));\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","import {\n  DynamicDatePickerModelConfig,\n  DynamicFormArrayModelConfig,\n  DynamicFormControlLayout,\n  DynamicFormGroupModelConfig,\n  DynamicSelectModelConfig,\n  MATCH_ENABLED,\n  OR_OPERATOR,\n} from '@ng-dynamic-forms/core';\n\nexport const BITSTREAM_METADATA_FORM_GROUP_CONFIG: DynamicFormGroupModelConfig = {\n  id: 'metadata',\n  group: []\n};\nexport const BITSTREAM_METADATA_FORM_GROUP_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'form-group',\n      label: 'col-form-label'\n  },\n  grid: {\n    label: 'col-sm-3'\n  }\n};\n\nexport const BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG: DynamicFormArrayModelConfig = {\n  id: 'accessConditions',\n  groupFactory: null,\n};\nexport const BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT: DynamicFormControlLayout = {\n  grid: {\n    group: 'form-row'\n  }\n};\n\nexport const BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG: DynamicSelectModelConfig<any> = {\n  id: 'name',\n  label: 'submission.sections.upload.form.access-condition-label',\n  options: []\n};\nexport const BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'p-0',\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-md-10'\n  }\n};\n\nexport const BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'startDate',\n  label: 'submission.sections.upload.form.from-label',\n  placeholder: 'submission.sections.upload.form.from-placeholder',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt',\n  relations: [\n    {\n      match: MATCH_ENABLED,\n      operator: OR_OPERATOR,\n      when: []\n    }\n  ],\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'submission.sections.upload.form.date-required'\n  }\n};\nexport const BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'p-0',\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-md-4'\n  }\n};\n\nexport const BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'endDate',\n  label: 'submission.sections.upload.form.until-label',\n  placeholder: 'submission.sections.upload.form.until-placeholder',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt',\n  relations: [\n    {\n      match: MATCH_ENABLED,\n      operator: OR_OPERATOR,\n      when: []\n    }\n  ],\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'submission.sections.upload.form.date-required'\n  }\n};\nexport const BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'p-0',\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-md-4'\n  }\n};\n","<div>\n  <ds-form *ngIf=\"formModel\"\n           #formRef=\"formComponent\"\n           [formId]=\"formId\"\n           [formModel]=\"formModel\"\n           [displaySubmit]=\"false\"\n           [displayCancel]=\"false\"\n           (dfChange)=\"onChange($event)\"></ds-form>\n</div>\n","import { ChangeDetectorRef, Component, Input, OnChanges, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport {\n  DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n  DynamicDateControlModel,\n  DynamicDatePickerModel,\n  DynamicFormArrayGroupModel,\n  DynamicFormArrayModel,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicSelectModel,\n  MATCH_ENABLED,\n  OR_OPERATOR\n} from '@ng-dynamic-forms/core';\n\nimport { WorkspaceitemSectionUploadFileObject } from '../../../../../core/submission/models/workspaceitem-section-upload-file.model';\nimport { FormBuilderService } from '../../../../../shared/form/builder/form-builder.service';\nimport {\n  BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG,\n  BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT,\n  BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG,\n  BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT,\n  BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG,\n  BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT,\n  BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG,\n  BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT,\n  BITSTREAM_METADATA_FORM_GROUP_CONFIG,\n  BITSTREAM_METADATA_FORM_GROUP_LAYOUT\n} from './section-upload-file-edit.model';\nimport { POLICY_DEFAULT_WITH_LIST } from '../../section-upload.component';\nimport { isNotEmpty } from '../../../../../shared/empty.util';\nimport { SubmissionFormsModel } from '../../../../../core/config/models/config-submission-forms.model';\nimport { FormFieldModel } from '../../../../../shared/form/builder/models/form-field.model';\nimport { AccessConditionOption } from '../../../../../core/config/models/config-access-condition-option.model';\nimport { SubmissionService } from '../../../../submission.service';\nimport { FormService } from '../../../../../shared/form/form.service';\nimport { FormComponent } from '../../../../../shared/form/form.component';\n\n/**\n * This component represents the edit form for bitstream\n */\n@Component({\n  selector: 'ds-submission-section-upload-file-edit',\n  templateUrl: './section-upload-file-edit.component.html',\n})\nexport class SubmissionSectionUploadFileEditComponent implements OnChanges {\n\n  /**\n   * The list of available access condition\n   * @type {Array}\n   */\n  @Input() availableAccessConditionOptions: any[];\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * Define if collection access conditions policy type :\n   * POLICY_DEFAULT_NO_LIST : is not possible to define additional access group/s for the single file\n   * POLICY_DEFAULT_WITH_LIST : is possible to define additional access group/s for the single file\n   * @type {number}\n   */\n  @Input() collectionPolicyType: number;\n\n  /**\n   * The configuration for the bitstream's metadata form\n   * @type {SubmissionFormsModel}\n   */\n  @Input() configMetadataForm: SubmissionFormsModel;\n\n  /**\n   * The bitstream's metadata data\n   * @type {WorkspaceitemSectionUploadFileObject}\n   */\n  @Input() fileData: WorkspaceitemSectionUploadFileObject;\n\n  /**\n   * The bitstream id\n   * @type {string}\n   */\n  @Input() fileId: string;\n\n  /**\n   * The bitstream array key\n   * @type {string}\n   */\n  @Input() fileIndex: string;\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  @Input() formId: string;\n\n  /**\n   * The section id\n   * @type {string}\n   */\n  @Input() sectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') public formRef: FormComponent;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {FormBuilderService} formBuilderService\n   * @param {FormService} formService\n   * @param {SubmissionService} submissionService\n   */\n  constructor(private cdr: ChangeDetectorRef,\n              private formBuilderService: FormBuilderService,\n              private formService: FormService,\n              private submissionService: SubmissionService) {\n  }\n\n  /**\n   * Dispatch form model init\n   */\n  ngOnChanges() {\n    if (this.fileData && this.formId) {\n      this.formModel = this.buildFileEditForm();\n      this.cdr.detectChanges();\n    }\n  }\n\n  /**\n   * Initialize form model\n   */\n  protected buildFileEditForm() {\n    const configDescr: FormFieldModel = Object.assign({}, this.configMetadataForm.rows[0].fields[0]);\n    configDescr.repeatable = false;\n    const configForm = Object.assign({}, this.configMetadataForm, {\n      fields: Object.assign([], this.configMetadataForm.rows[0].fields[0], [\n        this.configMetadataForm.rows[0].fields[0],\n        configDescr\n      ])\n    });\n    const formModel: DynamicFormControlModel[] = [];\n    const metadataGroupModelConfig = Object.assign({}, BITSTREAM_METADATA_FORM_GROUP_CONFIG);\n    metadataGroupModelConfig.group = this.formBuilderService.modelFromConfiguration(\n      this.submissionId,\n      configForm,\n      this.collectionId,\n      this.fileData.metadata,\n      this.submissionService.getSubmissionScope()\n    );\n    formModel.push(new DynamicFormGroupModel(metadataGroupModelConfig, BITSTREAM_METADATA_FORM_GROUP_LAYOUT));\n    const accessConditionTypeModelConfig = Object.assign({}, BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG);\n    const accessConditionsArrayConfig = Object.assign({}, BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG);\n    const accessConditionTypeOptions = [];\n\n    if (this.collectionPolicyType === POLICY_DEFAULT_WITH_LIST) {\n      for (const accessCondition of this.availableAccessConditionOptions) {\n        accessConditionTypeOptions.push(\n          {\n            label: accessCondition.name,\n            value: accessCondition.name\n          }\n        );\n      }\n      accessConditionTypeModelConfig.options = accessConditionTypeOptions;\n\n      // Dynamically assign of relation in config. For startdate, endDate, groups.\n      const hasStart = [];\n      const hasEnd = [];\n      const hasGroups = [];\n      this.availableAccessConditionOptions.forEach((condition) => {\n        const showStart: boolean = condition.hasStartDate === true;\n        const showEnd: boolean = condition.hasEndDate === true;\n        const showGroups: boolean = showStart || showEnd;\n        if (showStart) {\n          hasStart.push({ id: 'name', value: condition.name });\n        }\n        if (showEnd) {\n          hasEnd.push({ id: 'name', value: condition.name });\n        }\n        if (showGroups) {\n          hasGroups.push({ id: 'name', value: condition.name });\n        }\n      });\n      const confStart = { relations: [{ match: MATCH_ENABLED, operator: OR_OPERATOR, when: hasStart }] };\n      const confEnd = { relations: [{ match: MATCH_ENABLED, operator: OR_OPERATOR, when: hasEnd }] };\n\n      accessConditionsArrayConfig.groupFactory = () => {\n        const type = new DynamicSelectModel(accessConditionTypeModelConfig, BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT);\n        const startDateConfig = Object.assign({}, BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG, confStart);\n        const endDateConfig = Object.assign({}, BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG, confEnd);\n\n        const startDate = new DynamicDatePickerModel(startDateConfig, BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT);\n        const endDate = new DynamicDatePickerModel(endDateConfig, BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT);\n\n        return [type, startDate, endDate];\n      };\n\n      // Number of access conditions blocks in form\n      accessConditionsArrayConfig.initialCount = isNotEmpty(this.fileData.accessConditions) ? this.fileData.accessConditions.length : 1;\n      formModel.push(\n        new DynamicFormArrayModel(accessConditionsArrayConfig, BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT)\n      );\n\n    }\n    this.initModelData(formModel);\n    return formModel;\n  }\n\n  /**\n   * Initialize form model values\n   *\n   * @param formModel\n   *    The form model\n   */\n  public initModelData(formModel: DynamicFormControlModel[]) {\n    this.fileData.accessConditions.forEach((accessCondition, index) => {\n      Array.of('name', 'startDate', 'endDate')\n        .filter((key) => accessCondition.hasOwnProperty(key))\n        .forEach((key) => {\n          const metadataModel: any = this.formBuilderService.findById(key, formModel, index);\n          if (metadataModel) {\n            if (metadataModel.type === DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER) {\n              const date = new Date(accessCondition[key]);\n              metadataModel.value = {\n                year: date.getFullYear(),\n                month: date.getMonth() + 1,\n                day: date.getDate()\n              };\n            } else {\n              metadataModel.value = accessCondition[key];\n            }\n          }\n        });\n    });\n  }\n\n  /**\n   * Dispatch form model update when changing an access condition\n   *\n   * @param event\n   *    The event emitted\n   */\n  public onChange(event: DynamicFormControlEvent) {\n    if (event.model.id === 'name') {\n      this.setOptions(event.model, event.control);\n    }\n  }\n\n  /**\n   * Update `startDate`, 'groupUUID' and 'endDate' model\n   *\n   * @param model\n   *    The [[DynamicFormControlModel]] object\n   * @param control\n   *    The [[FormControl]] object\n   */\n  public setOptions(model: DynamicFormControlModel, control: FormControl) {\n    let accessCondition: AccessConditionOption = null;\n    this.availableAccessConditionOptions.filter((element) => element.name === control.value)\n      .forEach((element) => accessCondition = element);\n    if (isNotEmpty(accessCondition)) {\n      const showGroups: boolean = accessCondition.hasStartDate === true || accessCondition.hasEndDate === true;\n\n      const startDateControl: FormControl = control.parent.get('startDate') as FormControl;\n      const endDateControl: FormControl = control.parent.get('endDate') as FormControl;\n\n      // Clear previous state\n      startDateControl.markAsUntouched();\n      endDateControl.markAsUntouched();\n\n      startDateControl.setValue(null);\n      control.parent.markAsDirty();\n      endDateControl.setValue(null);\n\n      if (showGroups) {\n        if (accessCondition.hasStartDate) {\n          const startDateModel = this.formBuilderService.findById(\n            'startDate',\n            (model.parent as DynamicFormArrayGroupModel).group) as DynamicDateControlModel;\n\n          const min = new Date(accessCondition.maxStartDate);\n          startDateModel.max = {\n            year: min.getFullYear(),\n            month: min.getMonth() + 1,\n            day: min.getDate()\n          };\n        }\n        if (accessCondition.hasEndDate) {\n          const endDateModel = this.formBuilderService.findById(\n            'endDate',\n            (model.parent as DynamicFormArrayGroupModel).group) as DynamicDateControlModel;\n\n          const max = new Date(accessCondition.maxEndDate);\n          endDateModel.max = {\n            year: max.getFullYear(),\n            month: max.getMonth() + 1,\n            day: max.getDate()\n          };\n        }\n      }\n    }\n  }\n\n}\n","<ng-container *ngFor=\"let accessCondition of accessConditionsList\">\n  <span *ngIf=\"accessCondition.action == 'DEFAULT_BITSTREAM_READ'\" class=\"badge badge-primary mt-3 mr-2\">\n    {{accessCondition.name}} {{accessCondition.startDate}} {{accessCondition.endDate}}\n  </span>\n  <span *ngIf=\"accessCondition.name == 'lease'\" class=\"badge badge-primary mt-3 mr-2\">{{accessCondition.name}} from {{accessCondition.endDate}}</span>\n  <span *ngIf=\"accessCondition.name == 'embargo'\" class=\"badge badge-dark mt-3 mr-2\">{{accessCondition.name}} until {{accessCondition.startDate}}</span>\n  <br>\n</ng-container>\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { find } from 'rxjs/operators';\n\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { ResourcePolicy } from '../../../../core/resource-policy/models/resource-policy.model';\nimport { isEmpty } from '../../../../shared/empty.util';\nimport { Group } from '../../../../core/eperson/models/group.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\n\n/**\n * This component represents a badge that describe an access condition\n */\n@Component({\n  selector: 'ds-submission-section-upload-access-conditions',\n  templateUrl: './submission-section-upload-access-conditions.component.html',\n})\nexport class SubmissionSectionUploadAccessConditionsComponent implements OnInit {\n\n  /**\n   * The list of resource policy\n   * @type {Array}\n   */\n  @Input() accessConditions: ResourcePolicy[];\n\n  /**\n   * The list of access conditions\n   * @type {Array}\n   */\n  public accessConditionsList = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {GroupDataService} groupService\n   */\n  constructor(private groupService: GroupDataService) {}\n\n  /**\n   * Retrieve access conditions list\n   */\n  ngOnInit() {\n    this.accessConditions.forEach((accessCondition: ResourcePolicy) => {\n      if (isEmpty(accessCondition.name)) {\n        this.groupService.findByHref(accessCondition._links.group.href).pipe(\n          find((rd: RemoteData<Group>) => !rd.isResponsePending && rd.hasSucceeded))\n          .subscribe((rd: RemoteData<Group>) => {\n            const group: Group = rd.payload;\n            const accessConditionEntry = Object.assign({}, accessCondition);\n            accessConditionEntry.name = group.name;\n            this.accessConditionsList.push(accessConditionEntry);\n          });\n      } else {\n        this.accessConditionsList.push(accessCondition);\n      }\n    });\n  }\n}\n","<div>\n  <ng-container *ngIf=\"metadata\">\n    <ng-container *ngFor=\"let entry of getAllMetadataValue(fileTitleKey)\">\n      <ng-container *ngIf=\"entry.value !== ''\">\n        <h5>\n          {{entry.value}}\n        </h5>\n      </ng-container>\n      <ng-container *ngIf=\"entry.value === ''\">\n        <h5 *ngIf=\"metadata[fileTitleKey].indexOf(entry) === 0\">\n          <span class=\"text-muted\">{{'submission.sections.upload.no-entry' | translate}} {{fileTitleKey}}</span>\n        </h5>\n      </ng-container>\n      <span class=\"clearfix\"></span>\n    </ng-container>\n    <ng-container *ngFor=\"let entry of getAllMetadataValue(fileDescrKey)\">\n      <ng-container *ngIf=\"entry.value !== ''\">\n          {{entry.value | dsTruncate:['150']}}\n      </ng-container>\n      <ng-container *ngIf=\"entry.value === ''\">\n        <span *ngIf=\"metadata[fileDescrKey].indexOf(entry) === 0\" class=\"text-muted\">{{'submission.sections.upload.no-entry' | translate}} {{fileDescrKey}}</span>\n      </ng-container>\n      <span class=\"clearfix\"></span>\n    </ng-container>\n  </ng-container>\n\n  <span class=\"clearfix\"></span>\n  <ds-submission-section-upload-access-conditions [accessConditions]=\"fileData.accessConditions\"></ds-submission-section-upload-access-conditions>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { WorkspaceitemSectionUploadFileObject } from '../../../../../core/submission/models/workspaceitem-section-upload-file.model';\nimport { isNotEmpty } from '../../../../../shared/empty.util';\nimport { Metadata } from '../../../../../core/shared/metadata.utils';\nimport { MetadataMap, MetadataValue } from '../../../../../core/shared/metadata.models';\n\n/**\n * This component allow to show bitstream's metadata\n */\n@Component({\n  selector: 'ds-submission-section-upload-file-view',\n  templateUrl: './section-upload-file-view.component.html',\n})\nexport class SubmissionSectionUploadFileViewComponent implements OnInit {\n\n  /**\n   * The bitstream's metadata data\n   * @type {WorkspaceitemSectionUploadFileObject}\n   */\n  @Input() fileData: WorkspaceitemSectionUploadFileObject;\n\n  /**\n   * The [[MetadataMap]] object\n   * @type {MetadataMap}\n   */\n  public metadata: MetadataMap = Object.create({});\n\n  /**\n   * The bitstream's title key\n   * @type {string}\n   */\n  public fileTitleKey = 'Title';\n\n  /**\n   * The bitstream's description key\n   * @type {string}\n   */\n  public fileDescrKey = 'Description';\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    if (isNotEmpty(this.fileData.metadata)) {\n      this.metadata[this.fileTitleKey] = Metadata.all(this.fileData.metadata, 'dc.title');\n      this.metadata[this.fileDescrKey] = Metadata.all(this.fileData.metadata, 'dc.description');\n    }\n  }\n\n  /**\n   * Gets all matching metadata in the map(s)\n   *\n   * @param metadataKey\n   *    The metadata key(s) in scope\n   * @returns {MetadataValue[]}\n   *    The matching values\n   */\n  getAllMetadataValue(metadataKey: string): MetadataValue[] {\n    return Metadata.all(this.metadata, metadataKey);\n  }\n}\n","<ng-container *ngIf=\"fileData\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n      <!--ds-thumbnail [thumbnail]=\"bitstreamsList[bitstreamKey].url | async\"></ds-thumbnail-->\n      <ds-thumbnail [thumbnail]=\"fileData?.thumbnail\"></ds-thumbnail>\n    </div>\n    <div class=\"col-md-10\">\n      <div class=\"float-left w-75\">\n        <h3>{{fileName}} <span class=\"text-muted\">({{fileData?.sizeBytes | dsFileSize}})</span></h3>\n      </div>\n      <div class=\"float-right w-15\" [class.sticky-buttons]=\"!readMode\">\n        <ng-container *ngIf=\"readMode\">\n          <button class=\"btn btn-link\" (click)=\"downloadBitstreamFile(); $event.stopPropagation()\"><i class=\"fa fa-download fa-2x text-normal\" aria-hidden=\"true\"></i></button>\n          <!--<a href=\"{{fileData.url}}\"  title=\"Download file\" target=\"_blank\"><i class=\"fa fa-download text-normal mr-3\" aria-hidden=\"true\"></i></a>-->\n          <button class=\"btn btn-link\" (click)=\"$event.preventDefault();switchMode();\"><i class=\"fa fa-edit fa-2x text-normal\"></i></button>\n          <button class=\"btn btn-link\"\n                  title=\"{{ 'submission.sections.upload.delete.confirm.title' | translate }}\"\n                  [disabled]=\"(processingDelete$ | async)\"\n                  (click)=\"$event.preventDefault();confirmDelete(content);\">\n            <i *ngIf=\"(processingDelete$ | async)\" class=\"fas fa-circle-notch fa-spin fa-2x text-danger\"></i>\n            <i *ngIf=\"!(processingDelete$ | async)\" class=\"fa fa-trash fa-2x text-danger\"></i>\n          </button>\n        </ng-container>\n        <ng-container *ngIf=\"!readMode\">\n          <button class=\"btn btn-link\" (click)=\"saveBitstreamData($event);\" title=\"{{ 'submission.sections.upload.save-metadata' | translate }}\"><i class=\"fa fa-save fa-2x text-success\"></i></button>\n          <button class=\"btn btn-link\" (click)=\"$event.preventDefault();switchMode();\" title=\"{{ 'submission.sections.upload.undo' | translate }}\"><i class=\"fa fa-ban fa-2x text-warning\"></i></button>\n          <button class=\"btn btn-link\"\n                  title=\"{{ 'submission.sections.upload.delete.confirm.title' | translate }}\"\n                  [disabled]=\"(processingDelete$ | async)\"\n                  (click)=\"$event.preventDefault();confirmDelete(content);\">\n            <i *ngIf=\"(processingDelete$ | async)\" class=\"fas fa-circle-notch fa-spin fa-2x text-danger\"></i>\n            <i *ngIf=\"!(processingDelete$ | async)\" class=\"fa fa-trash fa-2x text-danger\"></i>\n          </button>\n        </ng-container>\n      </div>\n      <div class=\"clearfix\"></div>\n      <ds-submission-section-upload-file-view *ngIf=\"readMode\"\n                                              [fileData]=\"fileData\"></ds-submission-section-upload-file-view>\n      <ds-submission-section-upload-file-edit *ngIf=\"!readMode\"\n                                              [availableAccessConditionOptions]=\"availableAccessConditionOptions\"\n                                              [collectionId]=\"collectionId\"\n                                              [collectionPolicyType]=\"collectionPolicyType\"\n                                              [configMetadataForm]=\"configMetadataForm\"\n                                              [fileData]=\"fileData\"\n                                              [fileId]=\"fileId\"\n                                              [fileIndex]=\"fileIndex\"\n                                              [formId]=\"formId\"\n                                              [sectionId]=\"sectionId\"></ds-submission-section-upload-file-edit>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #content let-c=\"close\" let-d=\"dismiss\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title text-danger\">{{ 'submission.sections.upload.delete.confirm.title' | translate }}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('cancel')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{ 'submission.sections.upload.delete.confirm.info' | translate }}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"c('cancel')\">{{ 'submission.sections.upload.delete.confirm.cancel' | translate }}</button>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"c('ok')\">{{ 'submission.sections.upload.delete.confirm.submit' | translate }}</button>\n  </div>\n</ng-template>\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, ViewChild } from '@angular/core';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { filter, first, mergeMap, take } from 'rxjs/operators';\nimport { DynamicFormControlModel, } from '@ng-dynamic-forms/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SectionUploadService } from '../section-upload.service';\nimport { isNotEmpty, isNotNull, isNotUndefined } from '../../../../shared/empty.util';\nimport { FormService } from '../../../../shared/form/form.service';\nimport { JsonPatchOperationsBuilder } from '../../../../core/json-patch/builder/json-patch-operations-builder';\nimport { JsonPatchOperationPathCombiner } from '../../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { WorkspaceitemSectionUploadFileObject } from '../../../../core/submission/models/workspaceitem-section-upload-file.model';\nimport { SubmissionFormsModel } from '../../../../core/config/models/config-submission-forms.model';\nimport { dateToISOFormat } from '../../../../shared/date.util';\nimport { SubmissionService } from '../../../submission.service';\nimport { FileService } from '../../../../core/shared/file.service';\nimport { HALEndpointService } from '../../../../core/shared/hal-endpoint.service';\nimport { SubmissionJsonPatchOperationsService } from '../../../../core/submission/submission-json-patch-operations.service';\nimport { SubmissionObject } from '../../../../core/submission/models/submission-object.model';\nimport { WorkspaceitemSectionUploadObject } from '../../../../core/submission/models/workspaceitem-section-upload.model';\nimport { SubmissionSectionUploadFileEditComponent } from './edit/section-upload-file-edit.component';\n\n/**\n * This component represents a single bitstream contained in the submission\n */\n@Component({\n  selector: 'ds-submission-upload-section-file',\n  styleUrls: ['./section-upload-file.component.scss'],\n  templateUrl: './section-upload-file.component.html',\n})\nexport class SubmissionSectionUploadFileComponent implements OnChanges, OnInit {\n\n  /**\n   * The list of available access condition\n   * @type {Array}\n   */\n  @Input() availableAccessConditionOptions: any[];\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * Define if collection access conditions policy type :\n   * POLICY_DEFAULT_NO_LIST : is not possible to define additional access group/s for the single file\n   * POLICY_DEFAULT_WITH_LIST : is possible to define additional access group/s for the single file\n   * @type {number}\n   */\n  @Input() collectionPolicyType: number;\n\n  /**\n   * The configuration for the bitstream's metadata form\n   * @type {SubmissionFormsModel}\n   */\n  @Input() configMetadataForm: SubmissionFormsModel;\n\n  /**\n   * The bitstream id\n   * @type {string}\n   */\n  @Input() fileId: string;\n\n  /**\n   * The bitstream array key\n   * @type {string}\n   */\n  @Input() fileIndex: string;\n\n  /**\n   * The bitstream id\n   * @type {string}\n   */\n  @Input() fileName: string;\n\n  /**\n   * The section id\n   * @type {string}\n   */\n  @Input() sectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The bitstream's metadata data\n   * @type {WorkspaceitemSectionUploadFileObject}\n   */\n  public fileData: WorkspaceitemSectionUploadFileObject;\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * A boolean representing if to show bitstream edit form\n   * @type {boolean}\n   */\n  public readMode: boolean;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * A boolean representing if a submission delete operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  public processingDelete$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subscriptions: Subscription[] = [];\n\n  /**\n   * The [[SubmissionSectionUploadFileEditComponent]] reference\n   * @type {SubmissionSectionUploadFileEditComponent}\n   */\n  @ViewChild(SubmissionSectionUploadFileEditComponent) fileEditComp: SubmissionSectionUploadFileEditComponent;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {FileService} fileService\n   * @param {FormService} formService\n   * @param {HALEndpointService} halService\n   * @param {NgbModal} modalService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SubmissionService} submissionService\n   * @param {SectionUploadService} uploadService\n   */\n  constructor(private cdr: ChangeDetectorRef,\n              private fileService: FileService,\n              private formService: FormService,\n              private halService: HALEndpointService,\n              private modalService: NgbModal,\n              private operationsBuilder: JsonPatchOperationsBuilder,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private submissionService: SubmissionService,\n              private uploadService: SectionUploadService) {\n    this.readMode = true;\n  }\n\n  /**\n   * Retrieve bitstream's metadata\n   */\n  ngOnChanges() {\n    if (this.availableAccessConditionOptions) {\n      // Retrieve file state\n      this.subscriptions.push(\n        this.uploadService\n          .getFileData(this.submissionId, this.sectionId, this.fileId).pipe(\n          filter((bitstream) => isNotUndefined(bitstream)))\n          .subscribe((bitstream) => {\n              this.fileData = bitstream;\n            }\n          )\n      );\n    }\n  }\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    this.formId = this.formService.getUniqueId(this.fileId);\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionId, 'files', this.fileIndex);\n  }\n\n  /**\n   * Delete bitstream from submission\n   */\n  protected deleteFile() {\n    this.operationsBuilder.remove(this.pathCombiner.getPath());\n    this.subscriptions.push(this.operationsService.jsonPatchByResourceID(\n      this.submissionService.getSubmissionObjectLinkName(),\n      this.submissionId,\n      this.pathCombiner.rootElement,\n      this.pathCombiner.subRootElement)\n      .subscribe(() => {\n        this.uploadService.removeUploadedFile(this.submissionId, this.sectionId, this.fileId);\n        this.processingDelete$.next(false);\n      }));\n  }\n\n  /**\n   * Show confirmation dialog for delete\n   */\n  public confirmDelete(content) {\n    this.modalService.open(content).result.then(\n      (result) => {\n        if (result === 'ok') {\n          this.processingDelete$.next(true);\n          this.deleteFile();\n        }\n      }\n    );\n  }\n\n  /**\n   * Perform bitstream download\n   */\n  public downloadBitstreamFile() {\n    this.halService.getEndpoint('bitstreams').pipe(\n      first())\n      .subscribe((url) => {\n        const fileUrl = `${url}/${this.fileData.uuid}/content`;\n        this.fileService.retrieveFileDownloadLink(fileUrl);\n      });\n  }\n\n  /**\n   * Save bitstream metadata\n   *\n   * @param event\n   *    the click event emitted\n   */\n  public saveBitstreamData(event) {\n    event.preventDefault();\n\n    // validate form\n    this.formService.validateAllFormFields(this.fileEditComp.formRef.formGroup);\n    this.subscriptions.push(this.formService.isValid(this.formId).pipe(\n      take(1),\n      filter((isValid) => isValid),\n      mergeMap(() => this.formService.getFormData(this.formId)),\n      take(1),\n      mergeMap((formData: any) => {\n        // collect bitstream metadata\n        Object.keys((formData.metadata))\n          .filter((key) => isNotEmpty(formData.metadata[key]))\n          .forEach((key) => {\n            const metadataKey = key.replace(/_/g, '.');\n            const path = `metadata/${metadataKey}`;\n            this.operationsBuilder.add(this.pathCombiner.getPath(path), formData.metadata[key], true);\n          });\n        const accessConditionsToSave = [];\n        formData.accessConditions\n          .filter((accessCondition) => isNotEmpty(accessCondition))\n          .forEach((accessCondition) => {\n            let accessConditionOpt;\n\n            this.availableAccessConditionOptions\n              .filter((element) => isNotNull(accessCondition.name) && element.name === accessCondition.name[0].value)\n              .forEach((element) => accessConditionOpt = element);\n\n            if (accessConditionOpt) {\n                accessConditionOpt = Object.assign({}, accessCondition);\n                accessConditionOpt.name = this.retrieveValueFromField(accessCondition.name);\n                if (accessCondition.startDate) {\n                  const startDate = this.retrieveValueFromField(accessCondition.startDate);\n                  accessConditionOpt.startDate = dateToISOFormat(startDate);\n                }\n                if (accessCondition.endDate) {\n                  const endDate = this.retrieveValueFromField(accessCondition.endDate);\n                  accessConditionOpt.endDate = dateToISOFormat(endDate);\n                }\n                accessConditionsToSave.push(accessConditionOpt);\n            }\n          });\n\n        if (isNotEmpty(accessConditionsToSave)) {\n          this.operationsBuilder.add(this.pathCombiner.getPath('accessConditions'), accessConditionsToSave, true);\n        }\n\n        // dispatch a PATCH request to save metadata\n        return this.operationsService.jsonPatchByResourceID(\n          this.submissionService.getSubmissionObjectLinkName(),\n          this.submissionId,\n          this.pathCombiner.rootElement,\n          this.pathCombiner.subRootElement);\n      })\n    ).subscribe((result: SubmissionObject[]) => {\n      if (result[0].sections.upload) {\n        Object.keys((result[0].sections.upload as WorkspaceitemSectionUploadObject).files)\n          .filter((key) => (result[0].sections.upload as WorkspaceitemSectionUploadObject).files[key].uuid === this.fileId)\n          .forEach((key) => this.uploadService.updateFileData(\n            this.submissionId,\n            this.sectionId,\n            this.fileId,\n            (result[0].sections.upload as WorkspaceitemSectionUploadObject).files[key]));\n      }\n      this.switchMode();\n    }));\n  }\n\n  /**\n   * Retrieve field value\n   *\n   * @param field\n   *    the specified field object\n   */\n  private retrieveValueFromField(field: any) {\n    const temp = Array.isArray(field) ? field[0] : field;\n    return (temp) ? temp.value : undefined;\n  }\n\n  /**\n   * Switch from edit form to metadata view\n   */\n  public switchMode() {\n    this.readMode = !this.readMode;\n    this.cdr.detectChanges();\n  }\n\n}\n","<div class=\"mb-4 ccLicense-select\">\n  <ds-select\n    [disabled]=\"!submissionCcLicenses\">\n\n    <ng-container class=\"selection\">\n      <span *ngIf=\"!submissionCcLicenses\">\n        <ds-loading></ds-loading>\n      </span>\n      <span *ngIf=\"getSelectedCcLicense()\">\n        {{ getSelectedCcLicense().name }}\n      </span>\n      <span *ngIf=\"submissionCcLicenses && !getSelectedCcLicense()\">\n        <ng-container *ngIf=\"storedCcLicenseLink\">\n          {{ 'submission.sections.ccLicense.change' | translate }}\n        </ng-container>\n        <ng-container *ngIf=\"!storedCcLicenseLink\">\n          {{ 'submission.sections.ccLicense.select' | translate }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <ng-container class=\"menu\">\n      <button *ngIf=\"submissionCcLicenses?.length == 0\"\n              class=\"dropdown-item disabled\">\n        {{ 'submission.sections.ccLicense.none' | translate }}\n      </button>\n      <button *ngFor=\"let license of submissionCcLicenses\"\n              class=\"dropdown-item\"\n              (click)=\"selectCcLicense(license)\">\n        {{ license.name }}\n      </button>\n    </ng-container>\n\n  </ds-select>\n</div>\n\n<ng-container *ngIf=\"getSelectedCcLicense()\">\n\n  <div *ngFor=\"let field of getSelectedCcLicense().fields\"\n       class=\"mb-4\">\n\n    <div class=\"d-flex flex-row\">\n      <div class=\"font-weight-bold {{ field.id }}\">\n        {{ field.label }}\n      </div>\n      <button\n        class=\"btn btn-outline-info btn-sm ml-2\"\n        (click)=\"openInfoModal(infoModal)\">\n        <i class=\"fas fa-question\"></i>\n      </button>\n    </div>\n\n    <ng-template #infoModal>\n\n      <div>\n\n        <div class=\"modal-header mb-4 \">\n          <div>\n            <h4>\n              {{ field.label }}\n            </h4>\n            <div [innerHTML]=\"field.description\"></div>\n          </div>\n          <button type=\"button\" class=\"close\"\n                  (click)=\"closeInfoModal()\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">×</span>\n          </button>\n        </div>\n\n        <div class=\"modal-body\">\n          <div *ngFor=\"let value of field.enums\"\n               class=\"mb-4\">\n            <h5>\n              {{ value.label }}\n            </h5>\n            <div [innerHTML]=\"value.description\" class=\"font-weight-light\"></div>\n          </div>\n        </div>\n\n      </div>\n\n    </ng-template>\n\n    <ds-select *ngIf=\"field.enums?.length > 5\">\n      <ng-container class=\"selection\" *ngVar=\"getSelectedOption(getSelectedCcLicense(), field) as option\">\n        <span *ngIf=\"option\">\n          {{ option.label }}\n        </span>\n        <span *ngIf=\"!option\">\n          {{ 'submission.sections.ccLicense.option.select' | translate }}\n        </span>\n      </ng-container>\n      <ng-container class=\"menu\">\n        <div class=\"options-select-menu overflow-auto\">\n          <button *ngFor=\"let option of field.enums\"\n                  class=\"dropdown-item\"\n                  (click)=\"selectOption(getSelectedCcLicense(), field, option)\">\n            {{ option.label }}\n          </button>\n        </div>\n      </ng-container>\n    </ds-select>\n\n    <ng-container *ngIf=\"field.enums?.length <= 5\">\n      <div *ngFor=\"let option of field.enums\"\n           class=\"d-flex flex-row m-1\">\n        <div (click)=\"selectOption(getSelectedCcLicense(), field, option)\">\n          <input type=\"radio\"\n                 title=\"{{ option.label }}\"\n                 class=\"mr-1\"\n                 [checked]=\"isSelectedOption(getSelectedCcLicense(), field, option)\">\n          <span>{{ option.label }}</span>\n        </div>\n      </div>\n    </ng-container>\n\n  </div>\n\n</ng-container>\n\n<ng-container *ngIf=\"getCcLicenseLink$()\">\n  <ng-container *ngVar=\"getCcLicenseLink$() | async as licenseLink\">\n    <div *ngIf=\"!licenseLink\">\n      <ds-loading></ds-loading>\n    </div>\n    <div *ngIf=\"licenseLink\"\n         class=\"mt-2 p-4 bg-light text-dark\">\n      <div>\n        {{ 'submission.sections.ccLicense.link' | translate }}\n      </div>\n      <a class=\"license-link\" href=\"{{ licenseLink }}\" target=\"_blank\" rel=\"noopener noreferrer\">\n        {{ licenseLink }}\n      </a>\n      <div class=\"m-2\">\n        <div (click)=\"setAccepted(!accepted)\">\n          <input type=\"checkbox\"\n                 title=\"accepted\"\n                 [checked]=\"accepted\">\n          <span>{{ 'submission.sections.ccLicense.confirmation' | translate }}</span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { Component, Inject } from '@angular/core';\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport {\n  Field,\n  Option,\n  SubmissionCcLicence\n} from '../../../core/submission/models/submission-cc-license.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { distinctUntilChanged, filter, map, take } from 'rxjs/operators';\nimport { SubmissionCcLicenseDataService } from '../../../core/submission/submission-cc-license-data.service';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SectionModelComponent } from '../models/section.model';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { SectionsService } from '../sections.service';\nimport { WorkspaceitemSectionCcLicenseObject } from '../../../core/submission/models/workspaceitem-section-cc-license.model';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { isNotEmpty } from '../../../shared/empty.util';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { SubmissionCcLicenseUrlDataService } from '../../../core/submission/submission-cc-license-url-data.service';\n\n/**\n * This component represents the submission section to select the Creative Commons license.\n */\n@Component({\n  selector: 'ds-submission-section-cc-licenses',\n  templateUrl: './submission-section-cc-licenses.component.html',\n  styleUrls: ['./submission-section-cc-licenses.component.scss']\n})\n@renderSectionFor(SectionsType.CcLicense)\nexport class SubmissionSectionCcLicensesComponent extends SectionModelComponent {\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * A boolean representing if this section is loading\n   * @type {boolean}\n   */\n  public isLoading = true;\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * The list of Subscriptions this component subscribes to.\n   */\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Cache of the available Creative Commons licenses.\n   */\n  submissionCcLicenses: SubmissionCcLicence[];\n\n  /**\n   * Reference to NgbModal\n   */\n  protected modalRef: NgbModalRef;\n\n  /**\n   * The Creative Commons link saved in the workspace item.\n   */\n  get storedCcLicenseLink(): string {\n    return this.data.uri;\n  }\n\n  /**\n   * The accepted state for the selected Creative Commons license.\n   */\n  get accepted(): boolean {\n    if (this.data.accepted === undefined) {\n      return !!this.data.uri;\n    }\n    return this.data.accepted;\n  }\n\n  constructor(\n    protected modalService: NgbModal,\n    protected sectionService: SectionsService,\n    protected submissionCcLicensesDataService: SubmissionCcLicenseDataService,\n    protected submissionCcLicenseUrlDataService: SubmissionCcLicenseUrlDataService,\n    protected operationsBuilder: JsonPatchOperationsBuilder,\n    @Inject('collectionIdProvider') public injectedCollectionId: string,\n    @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n    @Inject('submissionIdProvider') public injectedSubmissionId: string\n  ) {\n    super(\n      injectedCollectionId,\n      injectedSectionData,\n      injectedSubmissionId,\n    );\n  }\n\n  /**\n   * The data of this section.\n   */\n  get data(): WorkspaceitemSectionCcLicenseObject {\n    return this.sectionData.data as WorkspaceitemSectionCcLicenseObject;\n  }\n\n  /**\n   * Select a given Creative Commons license.\n   * @param ccLicense the Creative Commons license to select.\n   */\n  selectCcLicense(ccLicense: SubmissionCcLicence) {\n    if (!!this.getSelectedCcLicense() && this.getSelectedCcLicense().id === ccLicense.id) {\n      return;\n    }\n    this.setAccepted(false);\n    this.updateSectionData({\n      ccLicense: {\n        id: ccLicense.id,\n        fields: {},\n      },\n      uri: undefined,\n    });\n  }\n\n  /**\n   * Get the selected Creative Commons license.\n   */\n  getSelectedCcLicense(): SubmissionCcLicence {\n    if (!this.submissionCcLicenses || !this.data.ccLicense) {\n      return null;\n    }\n    return this.submissionCcLicenses.filter((ccLicense) => ccLicense.id === this.data.ccLicense.id)[0];\n  }\n\n  /**\n   * Select an option for a given license field.\n   * @param ccLicense   the related Creative Commons license.\n   * @param field       the field for which to select an option.\n   * @param option      the option to select.\n   */\n  selectOption(ccLicense: SubmissionCcLicence, field: Field, option: Option) {\n    if (this.isSelectedOption(ccLicense, field, option)) {\n      return;\n    }\n    this.updateSectionData({\n      ccLicense: {\n        id: ccLicense.id,\n        fields: Object.assign({}, this.data.ccLicense.fields, {\n          [field.id]: option\n        }),\n      },\n      accepted: false,\n    });\n  }\n\n  /**\n   * Get the selected option for a given license field.\n   * @param ccLicense   the related Creative Commons license.\n   * @param field       the field for which to get the selected option value.\n   */\n  getSelectedOption(ccLicense: SubmissionCcLicence, field: Field): Option {\n    return this.data.ccLicense.fields[field.id];\n  }\n\n  /**\n   * Whether a given option is selected for a given Creative Commons license field.\n   * @param ccLicense   the related Creative Commons license.\n   * @param field       the field for which to check whether the option is selected.\n   * @param option      the option for which to check whether it is selected.\n   */\n  isSelectedOption(ccLicense: SubmissionCcLicence, field: Field, option: Option): boolean {\n    return this.getSelectedOption(ccLicense, field) && this.getSelectedOption(ccLicense, field).id === option.id;\n  }\n\n  /**\n   * Get the link to the Creative Commons license corresponding with the selected options.\n   */\n  getCcLicenseLink$(): Observable<string> {\n\n    if (!!this.storedCcLicenseLink) {\n      return observableOf(this.storedCcLicenseLink);\n    }\n    if (!this.getSelectedCcLicense() || this.getSelectedCcLicense().fields.some(\n      (field) => !this.getSelectedOption(this.getSelectedCcLicense(), field))) {\n      return undefined;\n    }\n    const selectedCcLicense = this.getSelectedCcLicense();\n    return this.submissionCcLicenseUrlDataService.getCcLicenseLink(\n      selectedCcLicense,\n      new Map(selectedCcLicense.fields.map(\n        (field) => [field, this.getSelectedOption(selectedCcLicense, field)]\n      )),\n    );\n  }\n\n  /**\n   * Open a given info modal.\n   * @param content   the modal content.\n   */\n  openInfoModal(content) {\n    this.modalRef = this.modalService.open(content);\n  }\n\n  /**\n   * Close the info modal.\n   */\n  closeInfoModal() {\n    this.modalRef.close();\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  getSectionStatus(): Observable<boolean> {\n    return observableOf(this.accepted);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Initialize the section.\n   */\n  onSectionInit(): void {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.subscriptions.push(\n      this.sectionService.getSectionState(this.submissionId, this.sectionData.id, SectionsType.CcLicense).pipe(\n        filter((sectionState) => {\n          return isNotEmpty(sectionState) && (isNotEmpty(sectionState.data) || isNotEmpty(sectionState.errors));\n        }),\n        distinctUntilChanged(),\n        map((sectionState) => sectionState.data as WorkspaceitemSectionCcLicenseObject),\n      ).subscribe((data) => {\n        if (this.data.accepted !== data.accepted) {\n          const path = this.pathCombiner.getPath('uri');\n          if (data.accepted) {\n            this.getCcLicenseLink$().pipe(\n              take(1),\n            ).subscribe((link) => {\n              this.operationsBuilder.add(path, link.toString(), false, true);\n            });\n          } else if (!!this.data.uri) {\n            this.operationsBuilder.remove(path);\n          }\n        }\n        this.sectionData.data = data;\n      }),\n      this.submissionCcLicensesDataService.findAll({ elementsPerPage: 9999 }).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((list) => list.page),\n      ).subscribe(\n        (licenses) => this.submissionCcLicenses = licenses\n      ),\n    );\n  }\n\n  /**\n   * Set the accepted state for the Creative Commons license.\n   * @param accepted  the accepted state for the cc license.\n   */\n  setAccepted(accepted: boolean) {\n    this.updateSectionData({\n      accepted\n    });\n    this.updateSectionStatus();\n  }\n\n  /**\n   * Update the section data for this section.\n   */\n  updateSectionData(data: WorkspaceitemSectionCcLicenseObject) {\n    this.sectionService.updateSectionData(this.submissionId, this.sectionData.id, Object.assign({}, this.data, data));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CoreModule } from '../core/core.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { SubmissionSectionformComponent } from './sections/form/section-form.component';\nimport { SectionsDirective } from './sections/sections.directive';\nimport { SectionsService } from './sections/sections.service';\nimport { SubmissionFormCollectionComponent } from './form/collection/submission-form-collection.component';\nimport { SubmissionFormFooterComponent } from './form/footer/submission-form-footer.component';\nimport { SubmissionFormComponent } from './form/submission-form.component';\nimport { SubmissionFormSectionAddComponent } from './form/section-add/submission-form-section-add.component';\nimport { SubmissionSectionContainerComponent } from './sections/container/section-container.component';\nimport { CommonModule } from '@angular/common';\nimport { Action, StoreConfig, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { submissionReducers, SubmissionState } from './submission.reducers';\nimport { submissionEffects } from './submission.effects';\nimport { SubmissionSectionUploadComponent } from './sections/upload/section-upload.component';\nimport { SectionUploadService } from './sections/upload/section-upload.service';\nimport { SubmissionUploadFilesComponent } from './form/submission-upload-files/submission-upload-files.component';\nimport { SubmissionSectionLicenseComponent } from './sections/license/section-license.component';\nimport { SubmissionUploadsConfigService } from '../core/config/submission-uploads-config.service';\nimport { SubmissionEditComponent } from './edit/submission-edit.component';\nimport { SubmissionSectionUploadFileComponent } from './sections/upload/file/section-upload-file.component';\nimport { SubmissionSectionUploadFileEditComponent } from './sections/upload/file/edit/section-upload-file-edit.component';\nimport { SubmissionSectionUploadFileViewComponent } from './sections/upload/file/view/section-upload-file-view.component';\nimport { SubmissionSectionUploadAccessConditionsComponent } from './sections/upload/accessConditions/submission-section-upload-access-conditions.component';\nimport { SubmissionSubmitComponent } from './submit/submission-submit.component';\nimport { storeModuleConfig } from '../app.reducer';\nimport { SubmissionImportExternalComponent } from './import-external/submission-import-external.component';\nimport { SubmissionImportExternalSearchbarComponent } from './import-external/import-external-searchbar/submission-import-external-searchbar.component';\nimport { SubmissionImportExternalPreviewComponent } from './import-external/import-external-preview/submission-import-external-preview.component';\nimport { SubmissionImportExternalCollectionComponent } from './import-external/import-external-collection/submission-import-external-collection.component';\nimport { SubmissionSectionCcLicensesComponent } from './sections/cc-license/submission-section-cc-licenses.component';\nimport { JournalEntitiesModule } from '../entity-groups/journal-entities/journal-entities.module';\nimport { ResearchEntitiesModule } from '../entity-groups/research-entities/research-entities.module';\nimport { ThemedSubmissionEditComponent } from './edit/themed-submission-edit.component';\nimport { ThemedSubmissionSubmitComponent } from './submit/themed-submission-submit.component';\nimport { ThemedSubmissionImportExternalComponent } from './import-external/themed-submission-import-external.component';\n\nconst DECLARATIONS = [\n  SubmissionSectionUploadAccessConditionsComponent,\n  SubmissionSectionUploadComponent,\n  SubmissionSectionformComponent,\n  SubmissionSectionLicenseComponent,\n  SubmissionSectionCcLicensesComponent,\n  SectionsDirective,\n  SubmissionEditComponent,\n  ThemedSubmissionEditComponent,\n  SubmissionFormSectionAddComponent,\n  SubmissionFormCollectionComponent,\n  SubmissionFormComponent,\n  SubmissionFormFooterComponent,\n  SubmissionSubmitComponent,\n  ThemedSubmissionSubmitComponent,\n  SubmissionUploadFilesComponent,\n  SubmissionSectionContainerComponent,\n  SubmissionSectionUploadFileComponent,\n  SubmissionSectionUploadFileEditComponent,\n  SubmissionSectionUploadFileViewComponent,\n  SubmissionImportExternalComponent,\n  ThemedSubmissionImportExternalComponent,\n  SubmissionImportExternalSearchbarComponent,\n  SubmissionImportExternalPreviewComponent,\n  SubmissionImportExternalCollectionComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule.forRoot(),\n    SharedModule,\n    StoreModule.forFeature('submission', submissionReducers, storeModuleConfig as StoreConfig<SubmissionState, Action>),\n    EffectsModule.forFeature(submissionEffects),\n    JournalEntitiesModule.withEntryComponents(),\n    ResearchEntitiesModule.withEntryComponents(),\n  ],\n  declarations: DECLARATIONS,\n  exports: DECLARATIONS,\n  providers: [\n    SectionUploadService,\n    SectionsService,\n    SubmissionUploadsConfigService\n  ]\n})\n\n/**\n * This module handles all components that are necessary for the submission process\n */\nexport class SubmissionModule {\n}\n","import { SubmissionObjectError } from '../../core/submission/models/submission-object.model';\nimport { default as parseSectionErrorPaths, SectionErrorPath } from './parseSectionErrorPaths';\n\n/**\n * the following method accept an array of SubmissionObjectError and return a section errors object\n * @param {errors: SubmissionObjectError[]} errors\n * @returns {any}\n */\nconst parseSectionErrors = (errors: SubmissionObjectError[] = []): any => {\n  const errorsList = Object.create({});\n\n  errors.forEach((error: SubmissionObjectError) => {\n    const paths: SectionErrorPath[] = parseSectionErrorPaths(error.paths);\n\n    paths.forEach((path: SectionErrorPath) => {\n      const sectionError = {path: path.originalPath, message: error.message};\n      if (!errorsList[path.sectionId]) {\n        errorsList[path.sectionId] = [];\n      }\n      errorsList[path.sectionId].push(sectionError);\n    });\n  });\n\n  return errorsList;\n};\n\nexport default parseSectionErrors;\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\n\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { SubmissionDefinitionsModel } from '../../core/config/models/config-submission-definitions.model';\nimport { Collection } from '../../core/shared/collection.model';\nimport { HALEndpointService } from '../../core/shared/hal-endpoint.service';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\n\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { UploaderOptions } from '../../shared/uploader/uploader-options.model';\nimport { SubmissionObjectEntry } from '../objects/submission-objects.reducer';\nimport { SectionDataObject } from '../sections/models/section-data.model';\nimport { SubmissionService } from '../submission.service';\nimport { Item } from '../../core/shared/item.model';\nimport { SectionsType } from '../sections/sections-type';\nimport { SectionsService } from '../sections/sections.service';\n\n/**\n * This component represents the submission form.\n */\n@Component({\n  selector: 'ds-submission-form',\n  styleUrls: ['./submission-form.component.scss'],\n  templateUrl: './submission-form.component.html',\n})\nexport class SubmissionFormComponent implements OnChanges, OnDestroy {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n  @Input() item: Item;\n\n  /**\n   * The list of submission's sections\n   * @type {WorkspaceitemSectionsObject}\n   */\n  @Input() sections: WorkspaceitemSectionsObject;\n\n  /**\n   * The submission self url\n   * @type {string}\n   */\n  @Input() selfUrl: string;\n\n  /**\n   * The configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  @Input() submissionDefinition: SubmissionDefinitionsModel;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The configuration id that define this submission\n   * @type {string}\n   */\n  public definitionId: string;\n\n  /**\n   * A boolean representing if a submission form is pending\n   * @type {Observable<boolean>}\n   */\n  public loading: Observable<boolean> = observableOf(true);\n\n  /**\n   * Emits true when the submission config has bitstream uploading enabled in submission\n   */\n  public uploadEnabled$: Observable<boolean>;\n\n  /**\n   * Observable of the list of submission's sections\n   * @type {Observable<WorkspaceitemSectionsObject>}\n   */\n  public submissionSections: Observable<WorkspaceitemSectionsObject>;\n\n  /**\n   * The uploader configuration options\n   * @type {UploaderOptions}\n   */\n  public uploadFilesOptions: UploaderOptions = new UploaderOptions();\n\n  /**\n   * A boolean representing if component is active\n   * @type {boolean}\n   */\n  protected isActive: boolean;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {AuthService} authService\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {HALEndpointService} halService\n   * @param {SubmissionService} submissionService\n   * @param {SectionsService} sectionsService\n   */\n  constructor(\n    private authService: AuthService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private halService: HALEndpointService,\n    private submissionService: SubmissionService,\n    private sectionsService: SectionsService) {\n    this.isActive = true;\n  }\n\n  /**\n   * Initialize all instance variables and retrieve form configuration\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.collectionId && this.submissionId) {\n      this.isActive = true;\n\n      // retrieve submission's section list\n      this.submissionSections = this.submissionService.getSubmissionObject(this.submissionId).pipe(\n        filter(() => this.isActive),\n        map((submission: SubmissionObjectEntry) => submission.isLoading),\n        map((isLoading: boolean) => isLoading),\n        distinctUntilChanged(),\n        switchMap((isLoading: boolean) => {\n          if (!isLoading) {\n            return this.getSectionsList();\n          } else {\n            return observableOf([]);\n          }\n        }));\n      this.uploadEnabled$ = this.sectionsService.isSectionTypeAvailable(this.submissionId, SectionsType.Upload);\n\n      // check if is submission loading\n      this.loading = this.submissionService.getSubmissionObject(this.submissionId).pipe(\n        filter(() => this.isActive),\n        map((submission: SubmissionObjectEntry) => submission.isLoading),\n        map((isLoading: boolean) => isLoading),\n        distinctUntilChanged());\n\n      // init submission state\n      this.subs.push(\n        this.halService.getEndpoint('workspaceitems').pipe(\n          filter((href: string) => isNotEmpty(href)),\n          distinctUntilChanged())\n          .subscribe((endpointURL) => {\n            this.uploadFilesOptions.authToken = this.authService.buildAuthHeader();\n            this.uploadFilesOptions.url = endpointURL.concat(`/${this.submissionId}`);\n            this.definitionId = this.submissionDefinition.name;\n            this.submissionService.dispatchInit(\n              this.collectionId,\n              this.submissionId,\n              this.selfUrl,\n              this.submissionDefinition,\n              this.sections,\n              this.item,\n              null);\n            this.changeDetectorRef.detectChanges();\n          })\n      );\n\n      // start auto save\n      this.submissionService.startAutoSave(this.submissionId);\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions, destroy instance variables\n   * and reset submission state\n   */\n  ngOnDestroy() {\n    this.isActive = false;\n    this.submissionService.stopAutoSave();\n    this.submissionService.resetAllSubmissionObjects();\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * On collection change reset submission state in case of it has a different\n   * submission definition\n   *\n   * @param submissionObject\n   *    new submission object\n   */\n  onCollectionChange(submissionObject: SubmissionObject) {\n    this.collectionId = (submissionObject.collection as Collection).id;\n    if (this.definitionId !== (submissionObject.submissionDefinition as SubmissionDefinitionsModel).name) {\n      this.sections = submissionObject.sections;\n      this.submissionDefinition = (submissionObject.submissionDefinition as SubmissionDefinitionsModel);\n      this.definitionId = this.submissionDefinition.name;\n      this.submissionService.resetSubmissionObject(\n        this.collectionId,\n        this.submissionId,\n        submissionObject._links.self.href,\n        this.submissionDefinition,\n        this.sections,\n        this.item);\n    } else {\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Check if submission form is loading\n   */\n  isLoading(): Observable<boolean> {\n    return this.loading;\n  }\n\n  /**\n   * Check if submission form is loading\n   */\n  protected getSectionsList(): Observable<any> {\n    return this.submissionService.getSubmissionSections(this.submissionId).pipe(\n      filter((sections: SectionDataObject[]) => isNotEmpty(sections)),\n      map((sections: SectionDataObject[]) => sections));\n  }\n}\n","<div class=\"container-fluid\">\n    <div *ngIf=\"!(isLoading() | async)\" class=\"submission-form-header mb-3 d-flex flex-wrap position-sticky\">\n        <div *ngIf=\"(uploadEnabled$ | async)\" class=\"w-100\">\n            <ds-submission-upload-files [submissionId]=\"submissionId\"\n                                        [collectionId]=\"collectionId\"\n                                        [sectionId]=\"'upload'\"\n                                        [uploadFilesOptions]=\"uploadFilesOptions\"></ds-submission-upload-files>\n            <div class=\"clearfix\"></div>\n        </div>\n\n        <div class=\"submission-form-header-item mb-3 mb-sm-0 flex-sm-grow-1 flex-md-grow-0\">\n            <ds-submission-form-collection [currentCollectionId]=\"collectionId\"\n                                           [currentDefinition]=\"definitionId\"\n                                           [submissionId]=\"submissionId\"\n                                           (collectionChange)=\"onCollectionChange($event)\">\n            </ds-submission-form-collection>\n        </div>\n        <div class=\"submission-form-header-item text-right\">\n            <ds-submission-form-section-add [collectionId]=\"collectionId\"\n                                            [submissionId]=\"submissionId\">\n            </ds-submission-form-section-add>\n        </div>\n    </div>\n\n    <div class=\"submission-form-content\">\n        <ds-loading *ngIf=\"(isLoading() | async)\" message=\"Loading...\"></ds-loading>\n        <ng-container *ngFor=\"let object of (submissionSections | async)\">\n            <ds-submission-section-container [collectionId]=\"collectionId\"\n                                             [submissionId]=\"submissionId\"\n                                             [sectionData]=\"object\"></ds-submission-section-container>\n        </ng-container>\n    </div>\n    <div *ngIf=\"!(isLoading() | async)\" class=\"submission-form-footer mt-3 mb-3 position-sticky\">\n        <ds-submission-form-footer [submissionId]=\"submissionId\"></ds-submission-form-footer>\n    </div>\n</div>\n","import { Component, Input, OnInit, } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SectionsService } from '../../sections/sections.service';\nimport { HostWindowService } from '../../../shared/host-window.service';\nimport { SubmissionService } from '../../submission.service';\nimport { SectionDataObject } from '../../sections/models/section-data.model';\n\n/**\n * This component allow to add any new section to submission form\n */\n@Component({\n  selector: 'ds-submission-form-section-add',\n  styleUrls: [ './submission-form-section-add.component.scss' ],\n  templateUrl: './submission-form-section-add.component.html'\n})\nexport class SubmissionFormSectionAddComponent implements OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The possible section list to add\n   * @type {Observable<SectionDataObject[]>}\n   */\n  public sectionList$: Observable<SectionDataObject[]>;\n\n  /**\n   * A boolean representing if there are available sections to add\n   * @type {Observable<boolean>}\n   */\n  public hasSections$: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {HostWindowService} windowService\n   */\n  constructor(private sectionService: SectionsService,\n              private submissionService: SubmissionService,\n              public windowService: HostWindowService) {\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnInit() {\n    this.sectionList$ = this.submissionService.getDisabledSectionsList(this.submissionId);\n    this.hasSections$ = this.sectionList$.pipe(\n      map((list: SectionDataObject[]) => list.length > 0)\n    );\n  }\n\n  /**\n   * Dispatch an action to add a new section\n   */\n  addSection(sectionId) {\n    this.sectionService.addSection(this.submissionId, sectionId);\n  }\n}\n","<div ngbDropdown\n     #sectionAdd=\"ngbDropdown\"\n     placement=\"bottom-right\"\n     class=\"d-inline-block\"\n     [ngClass]=\"{'w-100': windowService.isXs()}\">\n  <button class=\"btn btn-outline-primary dropdown-toggle\"\n          id=\"sectionControls\"\n          [disabled]=\"!(hasSections$ | async)\"\n          [ngClass]=\"{'w-100': (windowService.isXs() | async)}\"\n          ngbDropdownToggle>\n          {{ 'submission.sections.general.add-more' | translate }} <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n  </button>\n  <div ngbDropdownMenu\n       class=\"sections-dropdown-menu\"\n       aria-labelledby=\"sectionControls\"\n       [ngClass]=\"{'w-100': (windowService.isXs() | async)}\">\n    <button class=\"dropdown-item disabled\" *ngIf=\"!(hasSections$ | async)\">\n      {{ 'submission.sections.general.no-sections' | translate }}\n    </button>\n    <button class=\"dropdown-item\" *ngFor=\"let listItem of (sectionList$ | async)\" (click)=\"addSection(listItem.id)\">\n      {{'submission.sections.'+listItem.header | translate }}\n    </button>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { SubmissionImportExternalComponent } from './submission-import-external.component';\n\n/**\n * Themed wrapper for SubmissionImportExternalComponent\n */\n@Component({\n  selector: 'ds-themed-submission-import-external',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedSubmissionImportExternalComponent extends ThemedComponent<SubmissionImportExternalComponent> {\n  protected getComponentName(): string {\n    return 'SubmissionImportExternalComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/submission/import-external/submission-import-external.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./submission-import-external.component`);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\n\nimport { BehaviorSubject, Observable, of as observableOf, Subscription } from 'rxjs';\nimport {\n  find,\n  map\n} from 'rxjs/operators';\n\nimport { Collection } from '../../../core/shared/collection.model';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { SubmissionService } from '../../submission.service';\nimport { SubmissionObject } from '../../../core/submission/models/submission-object.model';\nimport { SubmissionJsonPatchOperationsService } from '../../../core/submission/submission-json-patch-operations.service';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { CollectionDropdownComponent } from '../../../shared/collection-dropdown/collection-dropdown.component';\nimport { SectionsService } from '../../sections/sections.service';\n\n/**\n * This component allows to show the current collection the submission belonging to and to change it.\n */\n@Component({\n  selector: 'ds-submission-form-collection',\n  styleUrls: ['./submission-form-collection.component.scss'],\n  templateUrl: './submission-form-collection.component.html'\n})\nexport class SubmissionFormCollectionComponent implements OnChanges, OnInit {\n\n  /**\n   * The current collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() currentCollectionId: string;\n\n  /**\n   * The current configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  @Input() currentDefinition: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId;\n\n  /**\n   * An event fired when a different collection is selected.\n   * Event's payload equals to new SubmissionObject.\n   */\n  @Output() collectionChange: EventEmitter<SubmissionObject> = new EventEmitter<SubmissionObject>();\n\n  /**\n   * A boolean representing if a collection change operation is processing\n   * @type {BehaviorSubject<boolean>}\n   */\n  public processingChange$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The selected collection id\n   * @type {string}\n   */\n  public selectedCollectionId: string;\n\n  /**\n   * The selected collection name\n   * @type {Observable<string>}\n   */\n  public selectedCollectionName$: Observable<string>;\n\n  /**\n   * The JsonPatchOperationPathCombiner object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * The html child that contains the collections list\n   */\n  @ViewChild(CollectionDropdownComponent) collectionDropdown: CollectionDropdownComponent;\n\n  /**\n   * A boolean representing if the collection section is available\n   * @type {BehaviorSubject<boolean>}\n   */\n  available$: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {CollectionDataService} collectionDataService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SubmissionService} submissionService\n   * @param {SectionsService} sectionsService\n   */\n  constructor(protected cdr: ChangeDetectorRef,\n              private collectionDataService: CollectionDataService,\n              private operationsBuilder: JsonPatchOperationsBuilder,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private submissionService: SubmissionService,\n              private sectionsService: SectionsService) {\n  }\n\n  /**\n   * Initialize collection list\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (hasValue(changes.currentCollectionId)\n      && hasValue(changes.currentCollectionId.currentValue)) {\n      this.selectedCollectionId = this.currentCollectionId;\n\n      this.selectedCollectionName$ = this.collectionDataService.findById(this.currentCollectionId).pipe(\n        find((collectionRD: RemoteData<Collection>) => isNotEmpty(collectionRD.payload)),\n        map((collectionRD: RemoteData<Collection>) => collectionRD.payload.name)\n      );\n    }\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnInit() {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', 'collection');\n    this.available$ = this.sectionsService.isSectionAvailable(this.submissionId, 'collection');\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Emit a [collectionChange] event when a new collection is selected from list\n   *\n   * @param event\n   *    the selected [CollectionListEntryItem]\n   */\n  onSelect(event) {\n    this.processingChange$.next(true);\n    this.operationsBuilder.replace(this.pathCombiner.getPath(), event.collection.id, true);\n    this.subs.push(this.operationsService.jsonPatchByResourceID(\n      this.submissionService.getSubmissionObjectLinkName(),\n      this.submissionId,\n      'sections',\n      'collection')\n      .subscribe((submissionObject: SubmissionObject[]) => {\n        this.selectedCollectionId = event.collection.id;\n        this.selectedCollectionName$ = observableOf(event.collection.name);\n        this.collectionChange.emit(submissionObject[0]);\n        this.submissionService.changeSubmissionCollection(this.submissionId, event.collection.id);\n        this.processingChange$.next(false);\n        this.cdr.detectChanges();\n      })\n    );\n  }\n\n  /**\n   * Reset search form control on dropdown menu close\n   */\n  onClose() {\n    this.collectionDropdown.reset();\n  }\n\n  /**\n   * Reset search form control when dropdown menu is closed\n   *\n   * @param isOpen\n   *    Representing if the dropdown menu is open or not.\n   */\n  toggled(isOpen: boolean) {\n    if (!isOpen) {\n      this.collectionDropdown.reset();\n    }\n  }\n}\n","<div>\n  <div\n    *ngIf=\"!(available$ | async)\"\n    class=\"input-group mb-3\">\n    <div class=\"input-group-prepend\">\n      <span class=\"input-group-text\">{{ 'submission.sections.general.collection' | translate }}</span>\n    </div>\n    <div class=\"input-group-append\">\n      <span class=\"input-group-text\">{{ selectedCollectionName$ | async }}</span>\n    </div>\n  </div>\n  <div\n    ngbDropdown\n    #collectionControls=\"ngbDropdown\"\n    *ngIf=\"(available$ | async)\"\n    class=\"btn-group input-group\"\n    (openChange)=\"toggled($event)\">\n    <div class=\"input-group-prepend\">\n      <span id=\"collectionControlsMenuLabel\" class=\"input-group-text\">\n        {{ 'submission.sections.general.collection' | translate }}\n      </span>\n    </div>\n    <button aria-describedby=\"collectionControlsMenuLabel\"\n            id=\"collectionControlsMenuButton\"\n            class=\"btn btn-outline-primary\"\n            (blur)=\"onClose()\"\n            (click)=\"onClose()\"\n            [disabled]=\"(processingChange$ | async)\"\n            ngbDropdownToggle>\n      <span *ngIf=\"(processingChange$ | async)\"><i class='fas fa-circle-notch fa-spin'></i></span>\n      <span *ngIf=\"!(processingChange$ | async)\">{{ selectedCollectionName$ | async }}</span>\n    </button>\n\n    <div ngbDropdownMenu\n         class=\"dropdown-menu\"\n         id=\"collectionControlsDropdownMenu\"\n         aria-labelledby=\"collectionControlsMenuButton\">\n      <ds-collection-dropdown\n        (selectionChange)=\"onSelect($event)\">\n      </ds-collection-dropdown>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SubmissionRestService } from '../../../core/submission/submission-rest.service';\nimport { SubmissionService } from '../../submission.service';\nimport { SubmissionScopeType } from '../../../core/submission/submission-scope-type';\nimport { isNotEmpty } from '../../../shared/empty.util';\n\n/**\n * This component represents submission form footer bar.\n */\n@Component({\n  selector: 'ds-submission-form-footer',\n  styleUrls: ['./submission-form-footer.component.scss'],\n  templateUrl: './submission-form-footer.component.html'\n})\nexport class SubmissionFormFooterComponent implements OnChanges {\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * A boolean representing if a submission deposit operation is pending\n   * @type {Observable<boolean>}\n   */\n  public processingDepositStatus: Observable<boolean>;\n\n  /**\n   * A boolean representing if a submission save operation is pending\n   * @type {Observable<boolean>}\n   */\n  public processingSaveStatus: Observable<boolean>;\n\n  /**\n   * A boolean representing if showing deposit and discard buttons\n   * @type {Observable<boolean>}\n   */\n  public showDepositAndDiscard: Observable<boolean>;\n\n  /**\n   * A boolean representing if submission form is valid or not\n   * @type {Observable<boolean>}\n   */\n  public submissionIsInvalid: Observable<boolean> = observableOf(true);\n\n  /**\n   * A boolean representing if submission form has unsaved modifications\n   */\n  public hasUnsavedModification: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {NgbModal} modalService\n   * @param {SubmissionRestService} restService\n   * @param {SubmissionService} submissionService\n   */\n  constructor(private modalService: NgbModal,\n              private restService: SubmissionRestService,\n              private submissionService: SubmissionService) {\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (isNotEmpty(this.submissionId)) {\n      this.submissionIsInvalid = this.submissionService.getSubmissionStatus(this.submissionId).pipe(\n        map((isValid: boolean) => isValid === false)\n      );\n\n      this.processingSaveStatus = this.submissionService.getSubmissionSaveProcessingStatus(this.submissionId);\n      this.processingDepositStatus = this.submissionService.getSubmissionDepositProcessingStatus(this.submissionId);\n      this.showDepositAndDiscard = observableOf(this.submissionService.getSubmissionScope() === SubmissionScopeType.WorkspaceItem);\n      this.hasUnsavedModification = this.submissionService.hasUnsavedModification();\n    }\n  }\n\n  /**\n   * Dispatch a submission save action\n   */\n  save(event) {\n    this.submissionService.dispatchSave(this.submissionId, true);\n  }\n\n  /**\n   * Dispatch a submission save for later action\n   */\n  saveLater(event) {\n    this.submissionService.dispatchSaveForLater(this.submissionId);\n  }\n\n  /**\n   * Dispatch a submission deposit action\n   */\n  public deposit(event) {\n    this.submissionService.dispatchDeposit(this.submissionId);\n  }\n\n  /**\n   * Dispatch a submission discard action\n   */\n  public confirmDiscard(content) {\n    this.modalService.open(content).result.then(\n      (result) => {\n        if (result === 'ok') {\n          this.submissionService.dispatchDiscard(this.submissionId);\n        }\n      }\n    );\n  }\n}\n","<div class=\"row\" *ngIf=\"!!submissionId\">\n  <div class=\"col\">\n    <!-- a class=\"btn btn-outline-primary\" role=\"button\" href=\"#\"><i class=\"fas fa-times\"></i> {{'submission.general.cancel' |translate}}</a -->\n  </div>\n  <div *ngIf=\"(processingSaveStatus | async) || (processingDepositStatus | async)\" class=\"col d-flex justify-content-end align-items-center\">\n    <div class=\"progress w-75\">\n      <div *ngIf=\"(processingSaveStatus | async)\" class=\"progress-bar progress-bar-striped progress-bar-animated bg-info\" [style.width]=\"'100%'\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\">Saving...</div>\n      <div *ngIf=\"(processingDepositStatus | async)\" class=\"progress-bar progress-bar-striped progress-bar-animated bg-info\" [style.width]=\"'100%'\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\">Depositing...</div>\n    </div>\n  </div>\n  <div *ngIf=\"!(processingSaveStatus | async) && !(processingDepositStatus | async)\" class=\"col text-right\">\n    <button type=\"button\"\n            class=\"btn btn-secondary\"\n            id=\"save\"\n            [disabled]=\"(processingSaveStatus | async) || !(hasUnsavedModification | async)\"\n            (click)=\"save($event)\">\n      <span><i class=\"fas fa-save\"></i> {{'submission.general.save' | translate}}</span>\n    </button>\n    <button type=\"button\"\n            [class.btn-primary]=\"!(showDepositAndDiscard | async)\"\n            [class.btn-secondary]=\"(showDepositAndDiscard | async)\"\n            class=\"btn\"\n            id=\"saveForLater\"\n            [disabled]=\"(processingSaveStatus | async)\"\n            (click)=\"saveLater($event)\">\n      <span><i class=\"fas fa-save\"></i> {{'submission.general.save-later' | translate}}</span>\n    </button>\n    <button *ngIf=\"(showDepositAndDiscard | async)\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n            [disabled]=\"(submissionIsInvalid | async)\" (click)=\"deposit($event)\">\n      <span><i class=\"fas fa-plus\"></i> {{'submission.general.deposit' | translate}}</span>\n    </button>\n    <button *ngIf=\"(showDepositAndDiscard | async)\"\n            type=\"button\"\n            class=\"btn btn-danger\"\n            (click)=\"$event.preventDefault();confirmDiscard(content)\">\n      <i class=\"fas fa-trash\"></i> {{'submission.general.discard.submit' | translate}}\n    </button>\n  </div>\n</div>\n\n<ng-template #content let-c=\"close\" let-d=\"dismiss\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title text-danger\">{{'submission.general.discard.confirm.title' | translate}}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('cancel')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{'submission.general.discard.confirm.info' | translate}}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"c('cancel')\">{{'submission.general.discard.confirm.cancel' | translate}}</button>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"c('ok')\">{{'submission.general.discard.confirm.submit' | translate}}</button>\n  </div>\n</ng-template>\n"]}