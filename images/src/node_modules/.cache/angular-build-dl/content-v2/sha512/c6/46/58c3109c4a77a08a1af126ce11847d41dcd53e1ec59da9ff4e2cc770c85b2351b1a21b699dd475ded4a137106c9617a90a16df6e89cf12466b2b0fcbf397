{"version":3,"sources":["webpack:///src/themes lazy ^\\.\\/.*\\/app\\/\\+search\\-page\\/search\\-page\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/+search-page/search-page.module.ts","webpack:///src/app/+search-page/themed-search-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/+search-page/search-page-routing.module.ts","webpack:///src/app/+search-page/configuration-search-page.guard.ts","webpack:///src/app/+search-page/search-page.component.ts","webpack:///src/app/+search-page/search-page.component.html","webpack:///src/app/+search-page/search-tracker.component.ts","webpack:///src/app/+search-page/search-tracker.component.html","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","I18nBreadcrumbResolver","breadcrumbService","route","state","key","data","breadcrumbKey","url","fullPath","provider","this","SearchPageModule","withEntryComponents","forRoot","ThemedSearchPageComponent","themeName","SearchPageRoutingModule","forChild","path","breadcrumb","title","children","component","canActivate","ConfigurationSearchPageGuard","params","configuration","SearchPageComponent","SearchTrackerComponent","service","sidebarService","windowService","searchConfigService","routeService","angulartics2","router","super","getSearchOptions","pipe","options","searchEntries","rd","config","searchQueryResponse","payload","subscribe","filters","appliedFilters","i","filtersLength","length","push","eventTrack","next","action","properties","searchOptions","page","size","pagination","totalElements","pageInfo","totalPages","number","currentPage","sort","by","field","order","direction","SEARCH_CONFIG_SERVICE","provide","useClass","I18nBreadcrumbsService","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["var map = {\n\t\"./custom/app/+search-page/search-page.component\": [\n\t\t\"o4x0\",\n\t\t53\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"8kTG\";\nmodule.exports = webpackAsyncContext;","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '../core/core.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { SearchComponent } from './search.component';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { ConfigurationSearchPageGuard } from './configuration-search-page.guard';\nimport { SearchTrackerComponent } from './search-tracker.component';\nimport { StatisticsModule } from '../statistics/statistics.module';\nimport { SearchPageComponent } from './search-page.component';\nimport { SidebarFilterService } from '../shared/sidebar/filter/sidebar-filter.service';\nimport { SearchFilterService } from '../core/shared/search/search-filter.service';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { JournalEntitiesModule } from '../entity-groups/journal-entities/journal-entities.module';\nimport { ResearchEntitiesModule } from '../entity-groups/research-entities/research-entities.module';\nimport { ThemedSearchPageComponent } from './themed-search-page.component';\n\nconst components = [\n  SearchPageComponent,\n  SearchComponent,\n  SearchTrackerComponent,\n  ThemedSearchPageComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule.withEntryComponents(),\n    CoreModule.forRoot(),\n    StatisticsModule.forRoot(),\n    JournalEntitiesModule.withEntryComponents(),\n    ResearchEntitiesModule.withEntryComponents()\n  ],\n  declarations: components,\n  providers: [\n    SidebarService,\n    SidebarFilterService,\n    SearchFilterService,\n    ConfigurationSearchPageGuard,\n    SearchConfigurationService\n  ],\n  exports: components\n})\n\n/**\n * This module handles all components and pipes that are necessary for the search page\n */\nexport class SearchPageModule {\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { SearchPageComponent } from './search-page.component';\n\n/**\n * Themed wrapper for SearchPageComponent\n */\n@Component({\n  selector: 'ds-themed-search-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedSearchPageComponent extends ThemedComponent<SearchPageComponent> {\n\n  protected getComponentName(): string {\n    return 'SearchPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/+search-page/search-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./search-page.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ConfigurationSearchPageGuard } from './configuration-search-page.guard';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { I18nBreadcrumbsService } from '../core/breadcrumbs/i18n-breadcrumbs.service';\nimport { SearchPageModule } from './search-page.module';\nimport { ThemedSearchPageComponent } from './themed-search-page.component';\nimport { ThemedConfigurationSearchPageComponent } from './themed-configuration-search-page.component';\n\n@NgModule({\n  imports: [\n    SearchPageModule,\n    RouterModule.forChild([{\n        path: '',\n        resolve: { breadcrumb: I18nBreadcrumbResolver }, data: { title: 'search.title', breadcrumbKey: 'search' },\n        children: [\n          { path: '', component: ThemedSearchPageComponent },\n          { path: ':configuration', component: ThemedConfigurationSearchPageComponent, canActivate: [ConfigurationSearchPageGuard] }\n        ]\n      }]\n    )\n  ],\n  providers: [\n    I18nBreadcrumbResolver,\n    I18nBreadcrumbsService\n  ]\n})\nexport class SearchPageRoutingModule {\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n/**\n * Assemble the correct i18n key for the configuration search page's title depending on the current route's configuration parameter.\n * The format of the key will be \"{configuration}.search.title\" with:\n * - configuration: The current configuration stored in route.params\n */\nexport class ConfigurationSearchPageGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    const configuration = route.params.configuration;\n\n    const newTitle = configuration + '.search.title';\n\n    route.data = { title: newTitle };\n    return true;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-search-page',\n  templateUrl: './search-page.component.html',\n})\n/**\n * This component represents the whole search page\n * It renders search results depending on the current search options\n */\nexport class SearchPageComponent {\n}\n","<ds-search></ds-search>\n<ds-search-tracker></ds-search-tracker>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { Angulartics2 } from 'angulartics2';\nimport { map, switchMap } from 'rxjs/operators';\nimport { SearchComponent } from './search.component';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { HostWindowService } from '../shared/host-window.service';\nimport { SEARCH_CONFIG_SERVICE } from '../+my-dspace-page/my-dspace-page.component';\nimport { RouteService } from '../core/services/route.service';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { PaginatedSearchOptions } from '../shared/search/paginated-search-options.model';\nimport { SearchObjects } from '../shared/search/search-objects.model';\nimport { Router } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { DSpaceObject } from '../core/shared/dspace-object.model';\nimport { getFirstSucceededRemoteData } from '../core/shared/operators';\n\n/**\n * This component triggers a page view statistic\n */\n@Component({\n  selector: 'ds-search-tracker',\n  styleUrls: ['./search-tracker.component.scss'],\n  templateUrl: './search-tracker.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\nexport class SearchTrackerComponent extends SearchComponent implements OnInit {\n\n  constructor(\n    protected service: SearchService,\n    protected sidebarService: SidebarService,\n    protected windowService: HostWindowService,\n    @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n    protected routeService: RouteService,\n    public angulartics2: Angulartics2,\n    protected router: Router\n  ) {\n    super(service, sidebarService, windowService, searchConfigService, routeService, router);\n  }\n\n  ngOnInit(): void {\n    // super.ngOnInit();\n    this.getSearchOptions().pipe(\n      switchMap((options: PaginatedSearchOptions) =>\n        this.service.searchEntries(options).pipe(\n          getFirstSucceededRemoteData(),\n          map((rd: RemoteData<SearchObjects<DSpaceObject>>) => ({\n            config: options,\n            searchQueryResponse: rd.payload\n          }))\n        )),\n    ).subscribe(({ config, searchQueryResponse }) => {\n        const filters: { filter: string, operator: string, value: string, label: string; }[] = [];\n        const appliedFilters = searchQueryResponse.appliedFilters || [];\n        for (let i = 0, filtersLength = appliedFilters.length; i < filtersLength; i++) {\n          const appliedFilter = appliedFilters[i];\n          filters.push(appliedFilter);\n        }\n        this.angulartics2.eventTrack.next({\n          action: 'search',\n          properties: {\n            searchOptions: config,\n            page: {\n              size: config.pagination.size, // same as searchQueryResponse.page.elementsPerPage\n              totalElements: searchQueryResponse.pageInfo.totalElements,\n              totalPages: searchQueryResponse.pageInfo.totalPages,\n              number: config.pagination.currentPage, // same as searchQueryResponse.page.currentPage\n            },\n            sort: {\n              by: config.sort.field,\n              order: config.sort.direction\n            },\n            filters: filters,\n          },\n        });\n      });\n  }\n}\n","&nbsp;\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}