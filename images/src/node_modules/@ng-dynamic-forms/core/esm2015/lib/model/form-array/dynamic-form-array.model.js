import { __decorate, __metadata } from "tslib";
import { DynamicFormControlModel } from "../dynamic-form-control.model";
import { serializable, serialize } from "../../decorator/serializable.decorator";
import { isFunction, isNumber } from "../../utils/core.utils";
export class DynamicFormArrayGroupModel {
    constructor(context, group = [], index = -1) {
        this.$implicit = this;
        this.context = context;
        this.group = group;
        this.index = index;
    }
    get parent() {
        return this.context;
    }
    get(index) {
        return this.group[index];
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable(),
    __metadata("design:type", Array)
], DynamicFormArrayGroupModel.prototype, "group", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Number)
], DynamicFormArrayGroupModel.prototype, "index", void 0);
export const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = "ARRAY";
export class DynamicFormArrayModel extends DynamicFormControlModel {
    constructor(config, layout) {
        var _a, _b;
        super(config, layout);
        this.groups = [];
        this.type = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
        if (isFunction(config.groupFactory)) {
            this.groupFactory = config.groupFactory;
        }
        else {
            throw new Error("group factory function must be specified for DynamicFormArrayModel");
        }
        this.groupAsyncValidators = (_a = config.groupAsyncValidators) !== null && _a !== void 0 ? _a : null;
        this.groupPrototype = this.groupFactory();
        this.groupValidators = (_b = config.groupValidators) !== null && _b !== void 0 ? _b : null;
        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;
        if (Array.isArray(config.groups)) {
            config.groups.forEach((arrayGroup, index) => {
                var _a;
                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, (_a = arrayGroup.index) !== null && _a !== void 0 ? _a : index));
            });
        }
        else {
            for (let index = 0; index < this.initialCount; index++) {
                this.addGroup();
            }
        }
    }
    updateGroupIndex() {
        this.groups.forEach((group, index) => group.index = index);
    }
    get size() {
        return this.groups.length;
    }
    get(index) {
        return this.groups[index];
    }
    addGroup() {
        return this.insertGroup(this.groups.length);
    }
    insertGroup(index) {
        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());
        this.groups.splice(index, 0, group);
        this.updateGroupIndex();
        return group;
    }
    moveGroup(index, step) {
        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));
        this.updateGroupIndex();
    }
    removeGroup(index) {
        this.groups.splice(index, 1);
        this.updateGroupIndex();
    }
    clear() {
        this.groups.splice(0);
        this.updateGroupIndex();
    }
}
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormArrayModel.prototype, "groupAsyncValidators", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormArrayModel.prototype, "groupValidators", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Array)
], DynamicFormArrayModel.prototype, "groups", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Number)
], DynamicFormArrayModel.prototype, "initialCount", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Array)
], DynamicFormArrayModel.prototype, "groupPrototype", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormArrayModel.prototype, "type", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWFycmF5Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1mb3Jtcy9jb3JlL3NyYy9saWIvbW9kZWwvZm9ybS1hcnJheS9keW5hbWljLWZvcm0tYXJyYXkubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBaUMsTUFBTSwrQkFBK0IsQ0FBQztBQUt2RyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQsTUFBTSxPQUFPLDBCQUEwQjtJQU9uQyxZQUFZLE9BQThCLEVBQUUsUUFBMEIsRUFBRSxFQUFFLFFBQWdCLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxHQUFHLENBQUMsS0FBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQXRCbUI7SUFBZixZQUFZLEVBQUU7O3lEQUF5QjtBQUN4QjtJQUFmLFlBQVksRUFBRTs7eURBQWU7QUF1QmxDLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLE9BQU8sQ0FBQztBQVd2RCxNQUFNLE9B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QUFhO1FBRXJCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7Q0FDSjtBQWhGbUI7SUFBZixZQUFZLEVBQUU7O21FQUFzRDtBQUVyRDtJQUFmLFlBQVksRUFBRTs7OERBQWlEO0FBQ2hEO0lBQWYsWUFBWSxFQUFFOztxREFBMkM7QUFDMUM7SUFBZixZQUFZLEVBQUU7OzJEQUFzQjtBQUVyQjtJQUFmLFlBQVksRUFBRTs7NkRBQTJDO0FBQzFDO0lBQWYsWUFBWSxFQUFFOzttREFBeUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCwgRHluYW1pY0Zvcm1Db250cm9sTW9kZWxDb25maWcgfSBmcm9tIFwiLi4vZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtTW9kZWwgfSBmcm9tIFwiLi4vZHluYW1pYy1mb3JtLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1sYXlvdXQubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNQYXRoYWJsZSB9IGZyb20gXCIuLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLXBhdGgubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnIH0gZnJvbSBcIi4uL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtdmFsaWRhdGlvbi5tb2RlbFwiO1xuaW1wb3J0IHsgc2VyaWFsaXphYmxlLCBzZXJpYWxpemUgfSBmcm9tIFwiLi4vLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzTnVtYmVyIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsIGltcGxlbWVudHMgRHluYW1pY1BhdGhhYmxlIHtcblxuICAgICRpbXBsaWNpdDogRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWw7XG4gICAgY29udGV4dDogRHluYW1pY0Zvcm1BcnJheU1vZGVsO1xuICAgIEBzZXJpYWxpemFibGUoKSBncm91cDogRHluYW1pY0Zvcm1Nb2RlbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgaW5kZXg6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IER5bmFtaWNGb3JtQXJyYXlNb2RlbCwgZ3JvdXA6IER5bmFtaWNGb3JtTW9kZWwgPSBbXSwgaW5kZXg6IG51bWJlciA9IC0xKSB7XG5cbiAgICAgICAgdGhpcy4kaW1wbGljaXQgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBnZXQgcGFyZW50KCk6IER5bmFtaWNGb3JtQXJyYXlNb2RlbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQ7XG4gICAgfVxuXG4gICAgZ2V0KGluZGV4OiBudW1iZXIpOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwW2luZGV4XTtcbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemUodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9BUlJBWSA9IFwiQVJSQVlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljRm9ybUFycmF5TW9kZWxDb25maWcgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbENvbmZpZyB7XG5cbiAgICBncm91cEFzeW5jVmFsaWRhdG9ycz86IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnO1xuICAgIGdyb3VwRmFjdG9yeT86ICgpID0+IER5bmFtaWNGb3JtTW9kZWw7XG4gICAgZ3JvdXBWYWxpZGF0b3JzPzogRHluYW1pY1ZhbGlkYXRvcnNDb25maWc7XG4gICAgZ3JvdXBzPzogRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWxbXSB8IG51bGw7XG4gICAgaW5pdGlhbENvdW50PzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1BcnJheU1vZGVsIGV4dGVuZHMgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwge1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIGdyb3VwQXN5bmNWYWxpZGF0b3JzOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyB8IG51bGw7XG4gICAgZ3JvdXBGYWN0b3J5OiAoKSA9PiBEeW5hbWljRm9ybU1vZGVsO1xuICAgIEBzZXJpYWxpemFibGUoKSBncm91cFZhbGlkYXRvcnM6IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgZ3JvdXBzOiBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbFtdID0gW107XG4gICAgQHNlcmlhbGl6YWJsZSgpIGluaXRpYWxDb3VudDogbnVtYmVyO1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRvbmx5IGdyb3VwUHJvdG90eXBlOiBEeW5hbWljRm9ybU1vZGVsOyAvLyBvbmx5IHRvIHJlY3JlYXRlIG1vZGVsIGZyb20gSlNPTlxuICAgIEBzZXJpYWxpemFibGUoKSByZWFkb25seSB0eXBlOiBzdHJpbmcgPSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0FSUkFZO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEeW5hbWljRm9ybUFycmF5TW9kZWxDb25maWcsIGxheW91dD86IER5bmFtaWNGb3JtQ29udHJvbExheW91dCkge1xuXG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb25maWcuZ3JvdXBGYWN0b3J5KSkge1xuICAgICAgICAgICAgdGhpcy5ncm91cEZhY3RvcnkgPSBjb25maWcuZ3JvdXBGYWN0b3J5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ3JvdXAgZmFjdG9yeSBmdW5jdGlvbiBtdXN0IGJlIHNwZWNpZmllZCBmb3IgRHluYW1pY0Zvcm1BcnJheU1vZGVsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ncm91cEFzeW5jVmFsaWRhdG9ycyA9IGNvbmZpZy5ncm91cEFzeW5jVmFsaWRhdG9ycyA/PyBudWxsO1xuICAgICAgICB0aGlzLmdyb3VwUHJvdG90eXBlID0gdGhpcy5ncm91cEZhY3RvcnkoKTtcbiAgICAgICAgdGhpcy5ncm91cFZhbGlkYXRvcnMgPSBjb25maWcuZ3JvdXBWYWxpZGF0b3JzID8/IG51bGw7XG4gICAgICAgIHRoaXMuaW5pdGlhbENvdW50ID0gaXNOdW1iZXIoY29uZmlnLmluaXRpYWxDb3VudCkgPyBjb25maWcuaW5pdGlhbENvdW50IDogMTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcuZ3JvdXBzKSkge1xuXG4gICAgICAgICAgICBjb25maWcuZ3JvdXBzLmZvckVhY2goKGFycmF5R3JvdXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cHMucHVzaChuZXcgRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWwodGhpcywgYXJyYXlHcm91cC5ncm91cCwgYXJyYXlHcm91cC5pbmRleCA/PyBpbmRleCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5pdGlhbENvdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRHcm91cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVHcm91cEluZGV4KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdyb3Vwcy5mb3JFYWNoKChncm91cCwgaW5kZXgpID0+IGdyb3VwLmluZGV4ID0gaW5kZXgpO1xuICAgIH1cblxuICAgIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3Vwcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0KGluZGV4OiBudW1iZXIpOiBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3Vwc1tpbmRleF07XG4gICAgfVxuXG4gICAgYWRkR3JvdXAoKTogRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWwge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRHcm91cCh0aGlzLmdyb3Vwcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIGluc2VydEdyb3VwKGluZGV4OiBudW1iZXIpOiBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbCB7XG5cbiAgICAgICAgbGV0IGdyb3VwID0gbmV3IER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsKHRoaXMsIHRoaXMuZ3JvdXBGYWN0b3J5KCkpO1xuXG4gICAgICAgIHRoaXMuZ3JvdXBzLnNwbGljZShpbmRleCwgMCwgZ3JvdXApO1xuICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwSW5kZXgoKTtcblxuICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuXG4gICAgbW92ZUdyb3VwKGluZGV4OiBudW1iZXIsIHN0ZXA6IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIHRoaXMuZ3JvdXBzLnNwbGljZShpbmRleCArIHN0ZXAsIDAsIC4uLnRoaXMuZ3JvdXBzLnNwbGljZShpbmRleCwgMSkpO1xuICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwSW5kZXgoKTtcbiAgICB9XG5cbiAgICByZW1vdmVHcm91cChpbmRleDogbnVtYmVyKTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy51cGRhdGVHcm91cEluZGV4KCk7XG4gICAgfVxuXG4gICAgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ3JvdXBzLnNwbGljZSgwKTtcbiAgICAgICAgdGhpcy51cGRhdGVHcm91cEluZGV4KCk7XG4gICAgfVxufVxuIl19