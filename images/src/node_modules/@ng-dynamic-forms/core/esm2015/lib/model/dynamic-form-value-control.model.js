import { __decorate, __metadata } from "tslib";
import { BehaviorSubject } from "rxjs";
import { DynamicFormControlModel } from "./dynamic-form-control.model";
import { serializable } from "../decorator/serializable.decorator";
import { isBoolean, isObject } from "../utils/core.utils";
export class DynamicFormValueControlModel extends DynamicFormControlModel {
    constructor(config, layout) {
        var _a, _b, _c;
        super(config, layout);
        this.additional = isObject(config.additional) ? config.additional : null;
        this.hint = (_a = config.hint) !== null && _a !== void 0 ? _a : null;
        this.required = isBoolean(config.required) ? config.required : false;
        this.tabIndex = (_b = config.tabIndex) !== null && _b !== void 0 ? _b : null;
        this.value$ = new BehaviorSubject((_c = config.value) !== null && _c !== void 0 ? _c : null);
        this.value$.subscribe(value => this._value = value);
        this.valueChanges = this.value$.asObservable();
    }
    get value() {
        return this.value$.getValue();
    }
    set value(value) {
        this.value$.next(value);
    }
    getAdditional(key, defaultValue) {
        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;
    }
}
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormValueControlModel.prototype, "additional", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormValueControlModel.prototype, "hint", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Boolean)
], DynamicFormValueControlModel.prototype, "required", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Number)
], DynamicFormValueControlModel.prototype, "tabIndex", void 0);
__decorate([
    serializable("value"),
    __metadata("design:type", Object)
], DynamicFormValueControlModel.prototype, "_value", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXZhbHVlLWNvbnRyb2wubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL2NvcmUvc3JjL2xpYi9tb2RlbC9keW5hbWljLWZvcm0tdmFsdWUtY29udHJvbC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsdUJBQXVCLEVBQWlDLE1BQU0sOEJBQThCLENBQUM7QUFFdEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFXMUQsTUFBTSxPQUFnQiw0QkFBZ0MsU0FBUSx1QkFBdUI7SUFZakYsWUFBc0IsTUFBNkMsRUFBRSxNQUFpQzs7UUFFbEcsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN6RSxJQUFJLENBQUMsSUFBSSxTQUFHLE1BQU0sQ0FBQyxJQUFJLG1DQUFJLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyRSxJQUFJLENBQUMsUUFBUSxTQUFHLE1BQU0sQ0FBQyxRQUFRLG1DQUFJLElBQUksQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZUFBZSxPQUFDLE1BQU0sQ0FBQyxLQUFLLG1DQUFJLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsS0FBZTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQVcsRUFBRSxZQUF5QjtRQUNoRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDakgsQ0FBQztDQUNKO0FBbkNtQjtJQUFmLFlBQVksRUFBRTs7Z0VBQTJDO0FBQzFDO0lBQWYsWUFBWSxFQUFFOzswREFBcUI7QUFDcEI7SUFBZixZQUFZLEVBQUU7OzhEQUFtQjtBQUNsQjtJQUFmLFlBQVksRUFBRTs7OERBQXlCO0FBQ2pCO0lBQXRCLFlBQVksQ0FBQyxPQUFPLENBQUM7OzREQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCwgRHluYW1pY0Zvcm1Db250cm9sTW9kZWxDb25maWcgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0IH0gZnJvbSBcIi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1sYXlvdXQubW9kZWxcIjtcbmltcG9ydCB7IHNlcmlhbGl6YWJsZSB9IGZyb20gXCIuLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNCb29sZWFuLCBpc09iamVjdCB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZzxUPiBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbE1vZGVsQ29uZmlnIHtcblxuICAgIGFkZGl0aW9uYWw/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAgIGhpbnQ/OiBzdHJpbmc7XG4gICAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICAgIHRhYkluZGV4PzogbnVtYmVyO1xuICAgIHZhbHVlPzogVDtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWw8VD4gZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgYWRkaXRpb25hbDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGhpbnQ6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIEBzZXJpYWxpemFibGUoKSB0YWJJbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKFwidmFsdWVcIikgcHJpdmF0ZSBfdmFsdWU6IFQgfCBudWxsO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZSQ6IEJlaGF2aW9yU3ViamVjdDxUPjtcblxuICAgIHJlYWRvbmx5IHZhbHVlQ2hhbmdlczogT2JzZXJ2YWJsZTxUPjtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWxDb25maWc8VD4sIGxheW91dD86IER5bmFtaWNGb3JtQ29udHJvbExheW91dCkge1xuXG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICB0aGlzLmFkZGl0aW9uYWwgPSBpc09iamVjdChjb25maWcuYWRkaXRpb25hbCkgPyBjb25maWcuYWRkaXRpb25hbCA6IG51bGw7XG4gICAgICAgIHRoaXMuaGludCA9IGNvbmZpZy5oaW50ID8/IG51bGw7XG4gICAgICAgIHRoaXMucmVxdWlyZWQgPSBpc0Jvb2xlYW4oY29uZmlnLnJlcXVpcmVkKSA/IGNvbmZpZy5yZXF1aXJlZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLnRhYkluZGV4ID0gY29uZmlnLnRhYkluZGV4ID8/IG51bGw7XG5cbiAgICAgICAgdGhpcy52YWx1ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGNvbmZpZy52YWx1ZSA/PyBudWxsKTtcbiAgICAgICAgdGhpcy52YWx1ZSQuc3Vic2NyaWJlKHZhbHVlID0+IHRoaXMuX3ZhbHVlID0gdmFsdWUpO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlcyA9IHRoaXMudmFsdWUkLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBUIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlJC5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZSh2YWx1ZTogVCB8IG51bGwpIHtcbiAgICAgICAgdGhpcy52YWx1ZSQubmV4dCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0QWRkaXRpb25hbChrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55IHwgbnVsbCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZGl0aW9uYWwgIT09IG51bGwgJiYgdGhpcy5hZGRpdGlvbmFsLmhhc093blByb3BlcnR5KGtleSkgPyB0aGlzLmFkZGl0aW9uYWxba2V5XSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG59XG4iXX0=