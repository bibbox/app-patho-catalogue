import { __decorate, __metadata } from "tslib";
import { BehaviorSubject } from "rxjs";
import { DynamicFormHook } from "./misc/dynamic-form-control-validation.model";
import { serializable, serialize } from "../decorator/serializable.decorator";
import { isBoolean, isObject, isString } from "../utils/core.utils";
export class DynamicFormControlModel {
    constructor(config, layout = null) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.parent = null;
        this.asyncValidators = (_a = config.asyncValidators) !== null && _a !== void 0 ? _a : null;
        this.errorMessages = (_b = config.errorMessages) !== null && _b !== void 0 ? _b : null;
        this.hidden = isBoolean(config.hidden) ? config.hidden : false;
        this.id = config.id;
        this.label = (_c = config.label) !== null && _c !== void 0 ? _c : null;
        this.labelTooltip = (_d = config.labelTooltip) !== null && _d !== void 0 ? _d : null;
        this.controlTooltip = (_e = config.controlTooltip) !== null && _e !== void 0 ? _e : null;
        this.layout = layout;
        this.name = (_f = config.name) !== null && _f !== void 0 ? _f : config.id;
        this.relations = Array.isArray(config.relations) ? config.relations : [];
        this.updateOn = isString(config.updateOn) ? config.updateOn : null;
        this.validators = (_g = config.validators) !== null && _g !== void 0 ? _g : null;
        this.disabled$ = new BehaviorSubject(isBoolean(config.disabled) ? config.disabled : false);
        this.disabled$.subscribe(disabled => this._disabled = disabled);
        this.disabledChanges = this.disabled$.asObservable();
    }
    get disabled() {
        return this.disabled$.getValue();
    }
    set disabled(disabled) {
        this.disabled$.next(disabled);
    }
    get hasErrorMessages() {
        return isObject(this.errorMessages);
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormControlModel.prototype, "asyncValidators", void 0);
__decorate([
    serializable("disabled"),
    __metadata("design:type", Boolean)
], DynamicFormControlModel.prototype, "_disabled", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormControlModel.prototype, "errorMessages", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Boolean)
], DynamicFormControlModel.prototype, "hidden", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormControlModel.prototype, "id", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormControlModel.prototype, "label", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormControlModel.prototype, "labelTooltip", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormControlModel.prototype, "controlTooltip", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormControlModel.prototype, "layout", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormControlModel.prototype, "name", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Array)
], DynamicFormControlModel.prototype, "relations", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormControlModel.prototype, "updateOn", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormControlModel.prototype, "validators", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL2NvcmUvc3JjL2xpYi9tb2RlbC9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUluRCxPQUFPLEVBQUUsZUFBZSxFQUEyQixNQUFNLDhDQUE4QyxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDOUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFrQnBFLE1BQU0sT0FBZ0IsdUJBQXVCO0lBdUJ6QyxZQUFzQixNQUFxQyxFQUFFLFNBQTBDLElBQUk7O1FBWDNHLFdBQU0sR0FBMkIsSUFBSSxDQUFDO1FBYWxDLElBQUksQ0FBQyxlQUFlLFNBQUcsTUFBTSxDQUFDLGVBQWUsbUNBQUksSUFBSSxDQUFDO1FBQ3RELElBQUksQ0FBQyxhQUFhLFNBQUcsTUFBTSxDQUFDLGFBQWEsbUNBQUksSUFBSSxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxTQUFHLE1BQU0sQ0FBQyxLQUFLLG1DQUFJLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxTQUFHLE1BQU0sQ0FBQyxZQUFZLG1DQUFJLElBQUksQ0FBQztRQUNoRCxJQUFJLENBQUMsY0FBYyxTQUFHLE1BQU0sQ0FBQyxjQUFjLG1DQUFJLElBQUksQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxTQUFHLE1BQU0sQ0FBQyxJQUFJLG1DQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25FLElBQUksQ0FBQyxVQUFVLFNBQUcsTUFBTSxDQUFDLFVBQVUsbUNBQUksSUFBSSxDQUFDO1FBRTVDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxRQUFpQjtRQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKO0FBeERtQjtJQUFmLFlBQVksRUFBRTs7Z0VBQWlEO0FBQ3RDO0lBQXpCLFlBQVksQ0FBQyxVQUFVLENBQUM7OzBEQUFvQjtBQUM3QjtJQUFmLFlBQVksRUFBRTs7OERBQStDO0FBQzlDO0lBQWYsWUFBWSxFQUFFOzt1REFBaUI7QUFDaEI7SUFBZixZQUFZLEVBQUU7O21EQUFZO0FBQ1g7SUFBZixZQUFZLEVBQUU7O3NEQUFzQjtBQUNyQjtJQUFmLFlBQVksRUFBRTs7NkRBQTZCO0FBQzVCO0lBQWYsWUFBWSxFQUFFOzsrREFBK0I7QUFDOUI7SUFBZixZQUFZLEVBQUU7O3VEQUF5QztBQUN4QztJQUFmLFlBQVksRUFBRTs7cURBQWM7QUFFYjtJQUFmLFlBQVksRUFBRTs7MERBQXlDO0FBQ3hDO0lBQWYsWUFBWSxFQUFFOzt5REFBa0M7QUFDakM7SUFBZixZQUFZLEVBQUU7OzJEQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY1BhdGhhYmxlIH0gZnJvbSBcIi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1wYXRoLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xSZWxhdGlvbiB9IGZyb20gXCIuL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtcmVsYXRpb24ubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtSG9vaywgRHluYW1pY1ZhbGlkYXRvcnNDb25maWcgfSBmcm9tIFwiLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLXZhbGlkYXRpb24ubW9kZWxcIjtcbmltcG9ydCB7IHNlcmlhbGl6YWJsZSwgc2VyaWFsaXplIH0gZnJvbSBcIi4uL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yXCI7XG5pbXBvcnQgeyBpc0Jvb2xlYW4sIGlzT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY0Zvcm1Db250cm9sTW9kZWxDb25maWcge1xuXG4gICAgYXN5bmNWYWxpZGF0b3JzPzogRHluYW1pY1ZhbGlkYXRvcnNDb25maWc7XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGVycm9yTWVzc2FnZXM/OiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZztcbiAgICBoaWRkZW4/OiBib29sZWFuO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgbGFiZWxUb29sdGlwPzogc3RyaW5nO1xuICAgIGNvbnRyb2xUb29sdGlwPzogc3RyaW5nO1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgcmVsYXRpb25zPzogRHluYW1pY0Zvcm1Db250cm9sUmVsYXRpb25bXTtcbiAgICB1cGRhdGVPbj86IER5bmFtaWNGb3JtSG9vaztcbiAgICB2YWxpZGF0b3JzPzogRHluYW1pY1ZhbGlkYXRvcnNDb25maWc7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCBpbXBsZW1lbnRzIER5bmFtaWNQYXRoYWJsZSB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgYXN5bmNWYWxpZGF0b3JzOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZShcImRpc2FibGVkXCIpIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgZXJyb3JNZXNzYWdlczogRHluYW1pY1ZhbGlkYXRvcnNDb25maWcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBoaWRkZW46IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIGlkOiBzdHJpbmc7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGxhYmVsOiBzdHJpbmcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBsYWJlbFRvb2x0aXA6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGNvbnRyb2xUb29sdGlwOiBzdHJpbmcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBsYXlvdXQ6IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIG5hbWU6IHN0cmluZztcbiAgICBwYXJlbnQ6IER5bmFtaWNQYXRoYWJsZSB8IG51bGwgPSBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSByZWxhdGlvbnM6IER5bmFtaWNGb3JtQ29udHJvbFJlbGF0aW9uW107XG4gICAgQHNlcmlhbGl6YWJsZSgpIHVwZGF0ZU9uOiBEeW5hbWljRm9ybUhvb2sgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSB2YWxpZGF0b3JzOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyB8IG51bGw7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGRpc2FibGVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuXG4gICAgcmVhZG9ubHkgZGlzYWJsZWRDaGFuZ2VzOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0Zvcm1Db250cm9sTW9kZWxDb25maWcsIGxheW91dDogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0IHwgbnVsbCA9IG51bGwpIHtcblxuICAgICAgICB0aGlzLmFzeW5jVmFsaWRhdG9ycyA9IGNvbmZpZy5hc3luY1ZhbGlkYXRvcnMgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gY29uZmlnLmVycm9yTWVzc2FnZXMgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBpc0Jvb2xlYW4oY29uZmlnLmhpZGRlbikgPyBjb25maWcuaGlkZGVuIDogZmFsc2U7XG4gICAgICAgIHRoaXMuaWQgPSBjb25maWcuaWQ7XG4gICAgICAgIHRoaXMubGFiZWwgPSBjb25maWcubGFiZWwgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5sYWJlbFRvb2x0aXAgPSBjb25maWcubGFiZWxUb29sdGlwID8/IG51bGw7XG4gICAgICAgIHRoaXMuY29udHJvbFRvb2x0aXAgPSBjb25maWcuY29udHJvbFRvb2x0aXAgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XG4gICAgICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lID8/IGNvbmZpZy5pZDtcbiAgICAgICAgdGhpcy5yZWxhdGlvbnMgPSBBcnJheS5pc0FycmF5KGNvbmZpZy5yZWxhdGlvbnMpID8gY29uZmlnLnJlbGF0aW9ucyA6IFtdO1xuICAgICAgICB0aGlzLnVwZGF0ZU9uID0gaXNTdHJpbmcoY29uZmlnLnVwZGF0ZU9uKSA/IGNvbmZpZy51cGRhdGVPbiA6IG51bGw7XG4gICAgICAgIHRoaXMudmFsaWRhdG9ycyA9IGNvbmZpZy52YWxpZGF0b3JzID8/IG51bGw7XG5cbiAgICAgICAgdGhpcy5kaXNhYmxlZCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGlzQm9vbGVhbihjb25maWcuZGlzYWJsZWQpID8gY29uZmlnLmRpc2FibGVkIDogZmFsc2UpO1xuICAgICAgICB0aGlzLmRpc2FibGVkJC5zdWJzY3JpYmUoZGlzYWJsZWQgPT4gdGhpcy5fZGlzYWJsZWQgPSBkaXNhYmxlZCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRDaGFuZ2VzID0gdGhpcy5kaXNhYmxlZCQuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZCQuZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCQubmV4dChkaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgZ2V0IGhhc0Vycm9yTWVzc2FnZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc09iamVjdCh0aGlzLmVycm9yTWVzc2FnZXMpO1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZSh0aGlzKTtcbiAgICB9XG59XG4iXX0=