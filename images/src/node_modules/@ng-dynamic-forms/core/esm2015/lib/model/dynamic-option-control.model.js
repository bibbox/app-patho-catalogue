import { __decorate, __metadata } from "tslib";
import { isObservable, of } from "rxjs";
import { map } from "rxjs/operators";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable, serialize } from "../decorator/serializable.decorator";
import { isBoolean } from "../utils/core.utils";
export class DynamicFormOption {
    constructor(config) {
        var _a;
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.label = (_a = config.label) !== null && _a !== void 0 ? _a : null;
        this.value = config.value;
    }
    get text() {
        return this.label;
    }
    set text(text) {
        this.label = text;
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable(),
    __metadata("design:type", Boolean)
], DynamicFormOption.prototype, "disabled", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormOption.prototype, "label", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormOption.prototype, "value", void 0);
export class DynamicOptionControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this._options = [];
        this.options = config.options;
    }
    updateOptions$() {
        this.options$ = of(this.options);
    }
    set options(options) {
        if (Array.isArray(options)) {
            this._options = options.map(optionConfig => new DynamicFormOption(optionConfig));
            this.updateOptions$();
        }
        else if (isObservable(options)) {
            this.options$ = options.pipe(map(optionsConfig => {
                this._options = optionsConfig.map(optionConfig => new DynamicFormOption(optionConfig));
                return this._options;
            }));
        }
        else {
            this.updateOptions$();
        }
    }
    get options() {
        return this._options;
    }
    add(optionConfig) {
        return this.insert(this.options.length, optionConfig);
    }
    get(index) {
        return this.options[index];
    }
    insert(index, optionConfig) {
        const option = new DynamicFormOption(optionConfig);
        this.options.splice(index, 0, option);
        this.updateOptions$();
        return option;
    }
    remove(...indices) {
        indices.forEach(index => this.options.splice(index, 1));
        this.updateOptions$();
    }
}
__decorate([
    serializable("options"),
    __metadata("design:type", Array)
], DynamicOptionControlModel.prototype, "_options", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1vcHRpb24tY29udHJvbC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvY29yZS9zcmMvbGliL21vZGVsL2R5bmFtaWMtb3B0aW9uLWNvbnRyb2wubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBYyxZQUFZLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsNEJBQTRCLEVBQXNDLE1BQU0sb0NBQW9DLENBQUM7QUFFdEgsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFTaEQsTUFBTSxPQUFPLGlCQUFpQjtJQU0xQixZQUFZLE1BQWtDOztRQUUxQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyRSxJQUFJLENBQUMsS0FBSyxTQUFHLE1BQU0sQ0FBQyxLQUFLLG1DQUFJLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsSUFBbUI7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU07UUFDRixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0o7QUF0Qm1CO0lBQWYsWUFBWSxFQUFFOzttREFBbUI7QUFDbEI7SUFBZixZQUFZLEVBQUU7O2dEQUFzQjtBQUNyQjtJQUFmLFlBQVksRUFBRTs7Z0RBQVU7QUEyQjdCLE1BQU0sT0FBZ0IseUJBQTZCLFNBQVEsNEJBQXFDO0lBSzVGLFlBQXNCLE1BQTBDLEVBQUUsTUFBaUM7UUFFL0YsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUxPLGFBQVEsR0FBMkIsRUFBRSxDQUFDO1FBT25FLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNsQyxDQUFDO0lBRU8sY0FBYztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLE9BQVk7UUFFcEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUksT0FBd0MsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLGlCQUFpQixDQUFJLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFFdEgsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBRXpCO2FBQU0sSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFFOUIsSUFBSSxDQUFDLFFBQVEsR0FBSSxPQUFvRCxDQUFDLElBQUksQ0FDdEUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUVoQixJQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLGlCQUFpQixDQUFJLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBRTFGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBRVg7YUFBTTtZQUVILElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN6QjtJQUNMLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELEdBQUcsQ0FBQyxZQUF3QztRQUN4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYSxFQUFFLFlBQXdDO1FBRTFELE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFdEIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLE9BQWlCO1FBRXZCLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztDQUdKO0FBbkU0QjtJQUF4QixZQUFZLENBQUMsU0FBUyxDQUFDOzsyREFBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBpc09ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbCwgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZyB9IGZyb20gXCIuL2R5bmFtaWMtZm9ybS12YWx1ZS1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgc2VyaWFsaXphYmxlLCBzZXJpYWxpemUgfSBmcm9tIFwiLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGlzQm9vbGVhbiB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY0Zvcm1PcHRpb25Db25maWc8VD4ge1xuXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIHZhbHVlOiBUO1xufVxuXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1PcHRpb248VD4ge1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIGRpc2FibGVkOiBib29sZWFuO1xuICAgIEBzZXJpYWxpemFibGUoKSBsYWJlbDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgdmFsdWU6IFQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNGb3JtT3B0aW9uQ29uZmlnPFQ+KSB7XG5cbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzQm9vbGVhbihjb25maWcuZGlzYWJsZWQpID8gY29uZmlnLmRpc2FibGVkIDogZmFsc2U7XG4gICAgICAgIHRoaXMubGFiZWwgPSBjb25maWcubGFiZWwgPz8gbnVsbDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGNvbmZpZy52YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWw7XG4gICAgfVxuXG4gICAgc2V0IHRleHQodGV4dDogc3RyaW5nIHwgbnVsbCkge1xuICAgICAgICB0aGlzLmxhYmVsID0gdGV4dDtcbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemUodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNPcHRpb25Db250cm9sTW9kZWxDb25maWc8VD4gZXh0ZW5kcyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsQ29uZmlnPFQgfCBUW10+IHtcblxuICAgIG9wdGlvbnM/OiBEeW5hbWljRm9ybU9wdGlvbkNvbmZpZzxUPltdIHwgT2JzZXJ2YWJsZTxEeW5hbWljRm9ybU9wdGlvbkNvbmZpZzxUPltdPjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER5bmFtaWNPcHRpb25Db250cm9sTW9kZWw8VD4gZXh0ZW5kcyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsPFQgfCBUW10+IHtcblxuICAgIEBzZXJpYWxpemFibGUoXCJvcHRpb25zXCIpIHByaXZhdGUgX29wdGlvbnM6IER5bmFtaWNGb3JtT3B0aW9uPFQ+W10gPSBbXTtcbiAgICBvcHRpb25zJDogT2JzZXJ2YWJsZTxEeW5hbWljRm9ybU9wdGlvbjxUPltdPjtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNPcHRpb25Db250cm9sTW9kZWxDb25maWc8VD4sIGxheW91dD86IER5bmFtaWNGb3JtQ29udHJvbExheW91dCkge1xuXG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZU9wdGlvbnMkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9wdGlvbnMkID0gb2YodGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zOiBhbnkpIHtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gKG9wdGlvbnMgYXMgRHluYW1pY0Zvcm1PcHRpb25Db25maWc8VD5bXSkubWFwKG9wdGlvbkNvbmZpZyA9PiBuZXcgRHluYW1pY0Zvcm1PcHRpb248VD4ob3B0aW9uQ29uZmlnKSk7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9ucyQoKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZShvcHRpb25zKSkge1xuXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMkID0gKG9wdGlvbnMgYXMgT2JzZXJ2YWJsZTxEeW5hbWljRm9ybU9wdGlvbkNvbmZpZzxUPltdPikucGlwZShcbiAgICAgICAgICAgICAgICBtYXAob3B0aW9uc0NvbmZpZyA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnNDb25maWcubWFwKG9wdGlvbkNvbmZpZyA9PiBuZXcgRHluYW1pY0Zvcm1PcHRpb248VD4ob3B0aW9uQ29uZmlnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9ucyQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBvcHRpb25zKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cblxuICAgIGFkZChvcHRpb25Db25maWc6IER5bmFtaWNGb3JtT3B0aW9uQ29uZmlnPFQ+KTogRHluYW1pY0Zvcm1PcHRpb248VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnQodGhpcy5vcHRpb25zLmxlbmd0aCwgb3B0aW9uQ29uZmlnKTtcbiAgICB9XG5cbiAgICBnZXQoaW5kZXg6IG51bWJlcik6IER5bmFtaWNGb3JtT3B0aW9uPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1tpbmRleF07XG4gICAgfVxuXG4gICAgaW5zZXJ0KGluZGV4OiBudW1iZXIsIG9wdGlvbkNvbmZpZzogRHluYW1pY0Zvcm1PcHRpb25Db25maWc8VD4pOiBEeW5hbWljRm9ybU9wdGlvbjxUPiB7XG5cbiAgICAgICAgY29uc3Qgb3B0aW9uID0gbmV3IER5bmFtaWNGb3JtT3B0aW9uKG9wdGlvbkNvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnNwbGljZShpbmRleCwgMCwgb3B0aW9uKTtcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zJCgpO1xuXG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxuXG4gICAgcmVtb3ZlKC4uLmluZGljZXM6IG51bWJlcltdKTogdm9pZCB7XG5cbiAgICAgICAgaW5kaWNlcy5mb3JFYWNoKGluZGV4ID0+IHRoaXMub3B0aW9ucy5zcGxpY2UoaW5kZXgsIDEpKTtcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zJCgpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IHNlbGVjdCguLi5pbmRpY2VzOiBudW1iZXJbXSk6IHZvaWQ7XG59XG4iXX0=