import { Directive, ElementRef, Input, Renderer2 } from "@angular/core";
import { isString } from "../utils/core.utils";
import * as ɵngcc0 from '@angular/core';
export class DynamicListDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        if (isString(this.listId)) {
            this.renderer.setAttribute(this.elementRef.nativeElement, "list", this.listId);
        }
    }
}
DynamicListDirective.ɵfac = function DynamicListDirective_Factory(t) { return new (t || DynamicListDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
DynamicListDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DynamicListDirective, selectors: [["", "dynamicList", ""]], inputs: { listId: ["dynamicList", "listId"] } });
DynamicListDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
DynamicListDirective.propDecorators = {
    listId: [{ type: Input, args: ["dynamicList",] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicListDirective, [{
        type: Directive,
        args: [{
                selector: "[dynamicList]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { listId: [{
            type: Input,
            args: ["dynamicList"]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1saXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1mb3Jtcy9jb3JlL3NyYy9saWIvZGlyZWN0aXZlL2R5bmFtaWMtbGlzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUsvQyxNQUFNLE9BQU8sb0JBQW9CO0FBQUcsSUFJaEMsWUFBb0IsVUFBc0IsRUFBVSxRQUFtQjtBQUFJLFFBQXZELGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUFTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxJQUFFLENBQUM7QUFDL0UsSUFDSSxlQUFlO0FBQ25CLFFBQ1EsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ25DLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFnQixDQUFDLENBQUM7QUFDckcsU0FBUztBQUNULElBQUksQ0FBQztBQUNMO2dEQWZDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsZUFBZSxjQUM1QjswS0FDSTtBQUFDO0FBQThDLFlBTmhDLFVBQVU7QUFBSSxZQUFLLFNBQVM7QUFBRztBQUFHO0FBQ2hELHFCQU9ELEtBQUssU0FBQyxhQUFhO0FBQU07Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6IFwiW2R5bmFtaWNMaXN0XVwiXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNMaXN0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBASW5wdXQoXCJkeW5hbWljTGlzdFwiKSBsaXN0SWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblxuICAgICAgICBpZiAoaXNTdHJpbmcodGhpcy5saXN0SWQpKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgXCJsaXN0XCIsIHRoaXMubGlzdElkIGFzIHN0cmluZyk7XG4gICAgICAgIH1cbiAgICB9XG59Il19