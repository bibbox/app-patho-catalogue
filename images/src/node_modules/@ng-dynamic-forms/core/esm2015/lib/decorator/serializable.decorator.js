import "reflect-metadata";
export const METADATA_KEY_SERIALIZABLE = "SERIALIZABLE";
export function serializable(name) {
    return (target, key) => {
        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, { key, name: name || key }, target, key);
    };
}
export function getSerializables(target) {
    const serializables = [];
    for (const key in target) {
        const metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);
        if (metadata) {
            serializables.push(metadata);
        }
    }
    return serializables;
}
export function serialize(target, prototype) {
    return getSerializables(prototype || target).reduce((prev, prop) => {
        prev[prop.name] = target[prop.key];
        return prev;
    }, {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphYmxlLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvY29yZS9zcmMvbGliL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sa0JBQWtCLENBQUM7QUFJMUIsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsY0FBYyxDQUFDO0FBUXhELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBYTtJQUV0QyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxHQUFHLEVBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0YsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxNQUFXO0lBRXhDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUV6QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUV0QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLHlCQUF5QixFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU3RSxJQUFJLFFBQVEsRUFBRTtZQUNWLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDaEM7S0FDSjtJQUVELE9BQU8sYUFBYSxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLE1BQVcsRUFBRSxTQUFlO0lBRWxELE9BQU8sZ0JBQWdCLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVMsRUFBRSxJQUEwQixFQUFFLEVBQUU7UUFFMUYsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRW5DLE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XG5cbmRlY2xhcmUgbGV0IFJlZmxlY3Q6IGFueTtcblxuZXhwb3J0IGNvbnN0IE1FVEFEQVRBX0tFWV9TRVJJQUxJWkFCTEUgPSBcIlNFUklBTElaQUJMRVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6YWJsZVByb3BlcnR5IHtcblxuICAgIGtleTogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6YWJsZShuYW1lPzogc3RyaW5nKTogKHRhcmdldDogYW55LCBrZXk6IHN0cmluZykgPT4gdm9pZCB7XG5cbiAgICByZXR1cm4gKHRhcmdldCwga2V5KSA9PiB7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoTUVUQURBVEFfS0VZX1NFUklBTElaQUJMRSwge2tleSwgbmFtZTogbmFtZSB8fCBrZXl9LCB0YXJnZXQsIGtleSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcmlhbGl6YWJsZXModGFyZ2V0OiBhbnkpOiBTZXJpYWxpemFibGVQcm9wZXJ0eVtdIHtcblxuICAgIGNvbnN0IHNlcmlhbGl6YWJsZXMgPSBbXTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShNRVRBREFUQV9LRVlfU0VSSUFMSVpBQkxFLCB0YXJnZXQsIGtleSk7XG5cbiAgICAgICAgaWYgKG1ldGFkYXRhKSB7XG4gICAgICAgICAgICBzZXJpYWxpemFibGVzLnB1c2gobWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlcmlhbGl6YWJsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUodGFyZ2V0OiBhbnksIHByb3RvdHlwZT86IGFueSk6IG9iamVjdCB7XG5cbiAgICByZXR1cm4gZ2V0U2VyaWFsaXphYmxlcyhwcm90b3R5cGUgfHwgdGFyZ2V0KS5yZWR1Y2UoKHByZXY6IGFueSwgcHJvcDogU2VyaWFsaXphYmxlUHJvcGVydHkpID0+IHtcblxuICAgICAgICBwcmV2W3Byb3AubmFtZV0gPSB0YXJnZXRbcHJvcC5rZXldO1xuXG4gICAgICAgIHJldHVybiBwcmV2O1xuXG4gICAgfSwge30pO1xufVxuIl19