import { Inject, Injectable, Injector, Optional } from "@angular/core";
import { FormControl } from "@angular/forms";
import { AND_OPERATOR, DYNAMIC_MATCHERS, OR_OPERATOR } from "./dynamic-form-relation-matchers";
import { startWith } from "rxjs/operators";
import { merge } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-form-relation-matchers";
export class DynamicFormRelationService {
    constructor(MATCHERS, injector) {
        this.MATCHERS = MATCHERS;
        this.injector = injector;
    }
    getRelatedFormControls(model, group) {
        const conditionReducer = (controls, condition) => {
            var _a;
            const path = (_a = condition.rootPath) !== null && _a !== void 0 ? _a : condition.id;
            if (!controls.hasOwnProperty(path)) {
                const control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);
                control instanceof FormControl ? controls[path] = control : console.warn(`No related form control with id ${condition.id} could be found`);
            }
            return controls;
        };
        const relationReducer = (controls, relation) => relation.when.reduce(conditionReducer, controls);
        return model.relations.reduce(relationReducer, {});
    }
    findRelationByMatcher(relations, matcher) {
        return relations.find(relation => [matcher.match, matcher.opposingMatch].includes(relation.match));
    }
    matchesCondition(relation, relatedFormControls, matcher) {
        var _a;
        const operator = (_a = relation.operator) !== null && _a !== void 0 ? _a : OR_OPERATOR;
        return relation.when.reduce((hasAlreadyMatched, condition, index) => {
            var _a;
            const path = (_a = condition.rootPath) !== null && _a !== void 0 ? _a : condition.id;
            let relatedFormControl;
            for (const [key, control] of Object.entries(relatedFormControls)) {
                if (key === path) {
                    relatedFormControl = control;
                    break;
                }
            }
            if (relatedFormControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;
            }
            if (relatedFormControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);
            }
            return false;
        }, false);
    }
    subscribeRelations(model, group, control) {
        const relatedFormControls = this.getRelatedFormControls(model, group);
        const subscriptions = [];
        Object.values(relatedFormControls).forEach(relatedControl => {
            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));
            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));
            subscriptions.push(merge(valueChanges, statusChanges).subscribe(() => {
                this.MATCHERS.forEach(matcher => {
                    const relation = this.findRelationByMatcher(model.relations, matcher);
                    if (relation !== undefined) {
                        const hasMatch = this.matchesCondition(relation, relatedFormControls, matcher);
                        matcher.onChange(hasMatch, model, control, this.injector);
                    }
                });
            }));
        });
        return subscriptions;
    }
}
DynamicFormRelationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicFormRelationService_Factory() { return new DynamicFormRelationService(i0.ɵɵinject(i1.DYNAMIC_MATCHERS, 8), i0.ɵɵinject(i0.INJECTOR)); }, token: DynamicFormRelationService, providedIn: "root" });
DynamicFormRelationService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
DynamicFormRelationService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_MATCHERS,] }] },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,