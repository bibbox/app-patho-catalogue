import { ChangeDetectorRef, ComponentFactoryResolver, Directive } from "@angular/core";
import { DynamicFormControlEventType, isDynamicFormControlEvent } from "./dynamic-form-control-event";
import { DynamicFormValueControlModel } from "../model/dynamic-form-value-control.model";
import { DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from "../model/checkbox/dynamic-checkbox.model";
import { DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE, DYNAMIC_FORM_CONTROL_TYPE_INPUT } from "../model/input/dynamic-input.model";
import { DynamicFormLayoutService } from "../service/dynamic-form-layout.service";
import { DynamicFormValidationService } from "../service/dynamic-form-validation.service";
import { DynamicFormComponentService } from "../service/dynamic-form-component.service";
import { isString } from "../utils/core.utils";
import { DynamicFormRelationService } from "../service/dynamic-form-relation.service";
import { DynamicFormGroupComponent } from "./dynamic-form-group.component";
import { DynamicFormArrayComponent } from "./dynamic-form-array.component";
export class DynamicFormControlContainerComponent {
    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this._hasFocus = false;
        this.context = null;
        this.componentSubscriptions = [];
        this.subscriptions = [];
    }
    ngOnChanges(changes) {
        const groupChange = changes.group;
        const layoutChange = changes.layout;
        const modelChange = changes.model;
        if (layoutChange || modelChange) {
            this.onLayoutOrModelChange();
        }
        if (modelChange) {
            this.onModelChange();
        }
        if (groupChange || modelChange) {
            this.onGroupOrModelChange();
        }
    }
    ngOnDestroy() {
        this.destroyFormControlComponent();
        this.unsubscribe();
    }
    get id() {
        return this.layoutService.getElementId(this.model);
    }
    get hasFocus() {
        return this._hasFocus;
    }
    get isInvalid() {
        return this.control.invalid;
    }
    get isValid() {
        return this.control.valid;
    }
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    get showErrorMessages() {
        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);
    }
    get hasLabel() {
        return isString(this.model.label);
    }
    get hasHint() {
        return isString(this.model.hint);
    }
    get hint() {
        var _a;
        return (_a = this.model.hint) !== null && _a !== void 0 ? _a : null;
    }
    get isCheckbox() {
        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
    }
    get templates() {
        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
    }
    get startTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
    }
    get endTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
    }
    getClass(context, place) {
        return this.layoutService.getClass(this.controlLayout, context, place);
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
        const component = this.componentRef && this.componentRef.instance;
        if (component && (component instanceof DynamicFormGroupComponent || component instanceof DynamicFormArrayComponent)) {
            component.markForCheck();
        }
    }
    createFormControlComponent() {
        const componentType = this.componentType;
        if (componentType !== null) {
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentViewContainerRef.clear();
            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
            const component = this.componentRef.instance;
            component.formLayout = this.layout;
            component.group = this.group;
            component.layout = this.controlLayout;
            component.model = this.model;
            if (this.templates) {
                component.templates = this.templates;
            }
            this.componentSubscriptions.push(component.blur.subscribe(($event) => this.onBlur($event)));
            this.componentSubscriptions.push(component.change.subscribe(($event) => this.onChange($event)));
            this.componentSubscriptions.push(component.focus.subscribe(($event) => this.onFocus($event)));
            if (component.customEvent !== undefined) {
                this.componentSubscriptions.push(component.customEvent.subscribe(($event) => this.onCustomEvent($event)));
            }
            this.registerFormControlComponentRef(this.componentRef);
        }
    }
    destroyFormControlComponent() {
        if (this.componentRef) {
            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());
            this.componentSubscriptions = [];
            this.unregisterFormControlComponentRef();
            this.componentRef.destroy();
        }
    }
    createDynamicFormControlEvent($event, type) {
        return { $event, context: this.context, control: this.control, group: this.group, model: this.model, type };
    }
    unsubscribe() {
        // this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());
        // this.componentSubscriptions = [];
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = [];
    }
    onControlValueChanges(value) {
        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {
            this.model.value = value;
        }
    }
    onModelValueUpdates(value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    }
    onModelDisabledUpdates(disabled) {
        disabled ? this.control.disable() : this.control.enable();
    }
    onLayoutOrModelChange() {
        var _a;
        this.controlLayout = (_a = this.layoutService.findByModel(this.model, this.layout)) !== null && _a !== void 0 ? _a : this.model.layout;
        this.klass = `${Array.isArray(this.hostClass) ? this.hostClass.join(" ") : ""} ${this.layoutService.getHostClass(this.controlLayout)}`;
    }
    onModelChange() {
        this.destroyFormControlComponent();
        this.createFormControlComponent();
    }
    onGroupOrModelChange() {
        if (this.model) {
            this.unsubscribe();
            if (this.group) {
                this.control = this.group.get(this.model.id);
                this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));
            }
            this.subscriptions.push(this.model.disabledChanges.subscribe(value => this.onModelDisabledUpdates(value)));
            if (this.model instanceof DynamicFormValueControlModel) {
                const model = this.model;
                this.subscriptions.push(model.valueChanges.subscribe(value => this.onModelValueUpdates(value)));
            }
            if (this.model.relations.length > 0) {
                this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));
            }
        }
    }
    onChange($event) {
        var _a;
        if ($event instanceof Event) { // native HTML5 change event
            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                const model = this.model;
                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    const inputElement = (_a = $event.target) !== null && _a !== void 0 ? _a : $event.srcElement;
                    model.files = inputElement.files;
                }
            }
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
        else if (isDynamicFormControlEvent($event)) { // event bypass
            this.change.emit($event);
        }
        else { // custom library value change event
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
    }
    onBlur($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.blur.emit($event);
        }
        else { // native HTML 5 or UI library blur event
            this._hasFocus = false;
            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
        }
    }
    onFocus($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.focus.emit($event);
        }
        else { // native HTML 5 or UI library focus event
            this._hasFocus = true;
            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
        }
    }
    onCustomEvent($event) {
        const emitter = this.customEvent;
        if (isDynamicFormControlEvent($event)) { // child event bypass
            emitter.emit($event);
        }
        else { // native UI library custom event
            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
        }
    }
    registerFormControlComponentRef(ref) {
        if (this.context instanceof DynamicFormArrayGroupModel) {
            this.componentService.registerFormControl(this.model, ref, this.context.index);
        }
        else {
            this.componentService.registerFormControl(this.model, ref);
        }
    }
    unregisterFormControlComponentRef() {
        if (this.context instanceof DynamicFormArrayGroupModel) {
            this.componentService.unregisterFormControl(this.model.id, this.context.index);
        }
        else {
            this.componentService.unregisterFormControl(this.model.id);
        }
    }
}
DynamicFormControlContainerComponent.decorators = [
    { type: Directive }
];
DynamicFormControlContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: DynamicFormComponentService },
    { type: DynamicFormRelationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvY29yZS9zcmMvbGliL2NvbXBvbmVudC9keW5hbWljLWZvcm0tY29udHJvbC1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSx3QkFBd0IsRUFBc0csU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNMLE9BQU8sRUFHSCwyQkFBMkIsRUFDM0IseUJBQXlCLEVBQzVCLE1BQU0sOEJBQThCLENBQUM7QUFFdEMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDekYsT0FBTyxFQUNILCtCQUErQixFQUMvQiwwQkFBMEIsRUFDN0IsTUFBTSw4Q0FBOEMsQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM5RixPQUFPLEVBQ0gsb0NBQW9DLEVBQ3BDLCtCQUErQixFQUVsQyxNQUFNLG9DQUFvQyxDQUFDO0FBUTVDLE9BQU8sRUFBcUIsd0JBQXdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNyRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMxRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN4RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDdEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHM0UsTUFBTSxPQUFnQixvQ0FBb0M7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QUNMLENBQUM7SUFFTyxpQ0FBaUM7UUFFckMsSUFBSSxJQUFJLENBQUMsT0FBTyxZQUFZLDBCQUEwQixFQUFFO1lBRXBELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBRWxGO2FBQU07WUFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM5RDtJQUNMLENBQUM7OztZQTlVSixTQUFTOzs7WUFwQ0QsaUJBQWlCO1lBQUUsd0JBQXdCO1lBNEJ4Qix3QkFBd0I7WUFDM0MsNEJBQTRCO1lBQzVCLDJCQUEyQjtZQUUzQiwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgVHlwZSwgVmlld0NvbnRhaW5lclJlZiwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQge1xuICAgIER5bmFtaWNGb3JtQ29udHJvbEN1c3RvbUV2ZW50LFxuICAgIER5bmFtaWNGb3JtQ29udHJvbEV2ZW50LFxuICAgIER5bmFtaWNGb3JtQ29udHJvbEV2ZW50VHlwZSxcbiAgICBpc0R5bmFtaWNGb3JtQ29udHJvbEV2ZW50XG59IGZyb20gXCIuL2R5bmFtaWMtZm9ybS1jb250cm9sLWV2ZW50XCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9tb2RlbC9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9tb2RlbC9keW5hbWljLWZvcm0tdmFsdWUtY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHtcbiAgICBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0FSUkFZLFxuICAgIER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsXG59IGZyb20gXCIuLi9tb2RlbC9mb3JtLWFycmF5L2R5bmFtaWMtZm9ybS1hcnJheS5tb2RlbFwiO1xuaW1wb3J0IHsgRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9DSEVDS0JPWCB9IGZyb20gXCIuLi9tb2RlbC9jaGVja2JveC9keW5hbWljLWNoZWNrYm94Lm1vZGVsXCI7XG5pbXBvcnQge1xuICAgIERZTkFNSUNfRk9STV9DT05UUk9MX0lOUFVUX1RZUEVfRklMRSxcbiAgICBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0lOUFVULFxuICAgIER5bmFtaWNJbnB1dE1vZGVsXG59IGZyb20gXCIuLi9tb2RlbC9pbnB1dC9keW5hbWljLWlucHV0Lm1vZGVsXCI7XG5pbXBvcnQge1xuICAgIER5bmFtaWNGb3JtQ29udHJvbExheW91dCxcbiAgICBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXRDb250ZXh0LFxuICAgIER5bmFtaWNGb3JtQ29udHJvbExheW91dFBsYWNlXG59IGZyb20gXCIuLi9tb2RlbC9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLWNvbnRyb2wtaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGlyZWN0aXZlL2R5bmFtaWMtdGVtcGxhdGUuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUxheW91dCwgRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2UvZHluYW1pYy1mb3JtLWxheW91dC5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2UvZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZVwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db21wb25lbnRTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2UvZHluYW1pYy1mb3JtLWNvbXBvbmVudC5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybVJlbGF0aW9uU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1yZWxhdGlvbi5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUdyb3VwQ29tcG9uZW50IH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLWdyb3VwLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1BcnJheUNvbXBvbmVudCB9IGZyb20gXCIuL2R5bmFtaWMtZm9ybS1hcnJheS5jb21wb25lbnRcIjtcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0Zvcm1Db250cm9sQ29udGFpbmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBfaGFzRm9jdXMgPSBmYWxzZTtcblxuICAgIGNvbnRleHQ6IER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsIHwgbnVsbCA9IG51bGw7XG4gICAgY29udHJvbDogRm9ybUNvbnRyb2w7XG4gICAgZ3JvdXA6IEZvcm1Hcm91cDtcbiAgICBob3N0Q2xhc3M6IHN0cmluZ1tdO1xuICAgIGtsYXNzOiBzdHJpbmc7XG4gICAgbGF5b3V0OiBEeW5hbWljRm9ybUxheW91dDtcbiAgICBtb2RlbDogRHluYW1pY0Zvcm1Db250cm9sTW9kZWw7XG5cbiAgICBjb250ZW50VGVtcGxhdGVMaXN0OiBRdWVyeUxpc3Q8RHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlPiB8IHVuZGVmaW5lZDtcbiAgICBpbnB1dFRlbXBsYXRlTGlzdDogUXVlcnlMaXN0PER5bmFtaWNUZW1wbGF0ZURpcmVjdGl2ZT4gfCB1bmRlZmluZWQ7XG5cbiAgICBibHVyOiBFdmVudEVtaXR0ZXI8RHluYW1pY0Zvcm1Db250cm9sRXZlbnQ+O1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PjtcbiAgICBjdXN0b21FdmVudDogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PiB8IHVuZGVmaW5lZDtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PjtcblxuICAgIGNvbXBvbmVudFZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8RHluYW1pY0Zvcm1Db250cm9sPjtcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50U3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgICBwcm90ZWN0ZWQgY29udHJvbExheW91dDogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0O1xuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIGxheW91dFNlcnZpY2U6IER5bmFtaWNGb3JtTGF5b3V0U2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZhbGlkYXRpb25TZXJ2aWNlOiBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgY29tcG9uZW50U2VydmljZTogRHluYW1pY0Zvcm1Db21wb25lbnRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgcmVsYXRpb25TZXJ2aWNlOiBEeW5hbWljRm9ybVJlbGF0aW9uU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcblxuICAgICAgICBjb25zdCBncm91cENoYW5nZSA9IChjaGFuZ2VzIGFzIFBpY2s8U2ltcGxlQ2hhbmdlcywgXCJncm91cFwiPikuZ3JvdXA7XG4gICAgICAgIGNvbnN0IGxheW91dENoYW5nZSA9IChjaGFuZ2VzIGFzIFBpY2s8U2ltcGxlQ2hhbmdlcywgXCJsYXlvdXRcIj4pLmxheW91dDtcbiAgICAgICAgY29uc3QgbW9kZWxDaGFuZ2UgPSAoY2hhbmdlcyBhcyBQaWNrPFNpbXBsZUNoYW5nZXMsIFwibW9kZWxcIj4pLm1vZGVsO1xuXG4gICAgICAgIGlmIChsYXlvdXRDaGFuZ2UgfHwgbW9kZWxDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMub25MYXlvdXRPck1vZGVsQ2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kZWxDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdyb3VwQ2hhbmdlIHx8IG1vZGVsQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLm9uR3JvdXBPck1vZGVsQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcblxuICAgICAgICB0aGlzLmRlc3Ryb3lGb3JtQ29udHJvbENvbXBvbmVudCgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgZ2V0IGNvbXBvbmVudFR5cGUoKTogVHlwZTxEeW5hbWljRm9ybUNvbnRyb2w+IHwgbnVsbDtcblxuICAgIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRTZXJ2aWNlLmdldEVsZW1lbnRJZCh0aGlzLm1vZGVsKTtcbiAgICB9XG5cbiAgICBnZXQgaGFzRm9jdXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNGb2N1cztcbiAgICB9XG5cbiAgICBnZXQgaXNJbnZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sLmludmFsaWQ7XG4gICAgfVxuXG4gICAgZ2V0IGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wudmFsaWQ7XG4gICAgfVxuXG4gICAgZ2V0IGVycm9yTWVzc2FnZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uU2VydmljZS5jcmVhdGVFcnJvck1lc3NhZ2VzKHRoaXMuY29udHJvbCwgdGhpcy5tb2RlbCk7XG4gICAgfVxuXG4gICAgZ2V0IHNob3dFcnJvck1lc3NhZ2VzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uU2VydmljZS5zaG93RXJyb3JNZXNzYWdlcyh0aGlzLmNvbnRyb2wsIHRoaXMubW9kZWwsIHRoaXMuaGFzRm9jdXMpO1xuICAgIH1cblxuICAgIGdldCBoYXNMYWJlbCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHRoaXMubW9kZWwubGFiZWwpO1xuICAgIH1cblxuICAgIGdldCBoYXNIaW50KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoKHRoaXMubW9kZWwgYXMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxhbnk+KS5oaW50KTtcbiAgICB9XG5cbiAgICBnZXQgaGludCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm1vZGVsIGFzIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWw8YW55PikuaGludCA/PyBudWxsO1xuICAgIH1cblxuICAgIGdldCBpc0NoZWNrYm94KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50eXBlID09PSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0NIRUNLQk9YO1xuICAgIH1cblxuICAgIGdldCB0ZW1wbGF0ZXMoKTogUXVlcnlMaXN0PER5bmFtaWNUZW1wbGF0ZURpcmVjdGl2ZT4gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dFRlbXBsYXRlTGlzdCAhPT0gdW5kZWZpbmVkID8gdGhpcy5pbnB1dFRlbXBsYXRlTGlzdCA6IHRoaXMuY29udGVudFRlbXBsYXRlTGlzdDtcbiAgICB9XG5cbiAgICBnZXQgc3RhcnRUZW1wbGF0ZSgpOiBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmUgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC50eXBlICE9PSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0FSUkFZID9cbiAgICAgICAgICAgIHRoaXMubGF5b3V0U2VydmljZS5nZXRTdGFydFRlbXBsYXRlKHRoaXMubW9kZWwsIHRoaXMudGVtcGxhdGVzKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXQgZW5kVGVtcGxhdGUoKTogRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwudHlwZSAhPT0gRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9BUlJBWSA/XG4gICAgICAgICAgICB0aGlzLmxheW91dFNlcnZpY2UuZ2V0RW5kVGVtcGxhdGUodGhpcy5tb2RlbCwgdGhpcy50ZW1wbGF0ZXMpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldENsYXNzKGNvbnRleHQ6IER5bmFtaWNGb3JtQ29udHJvbExheW91dENvbnRleHQsIHBsYWNlOiBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXRQbGFjZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dFNlcnZpY2UuZ2V0Q2xhc3ModGhpcy5jb250cm9sTGF5b3V0LCBjb250ZXh0LCBwbGFjZSk7XG4gICAgfVxuXG4gICAgbWFya0ZvckNoZWNrKCk6IHZvaWQge1xuXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG5cbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRSZWYgJiYgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudCAmJiAoY29tcG9uZW50IGluc3RhbmNlb2YgRHluYW1pY0Zvcm1Hcm91cENvbXBvbmVudCB8fCBjb21wb25lbnQgaW5zdGFuY2VvZiBEeW5hbWljRm9ybUFycmF5Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgY29tcG9uZW50Lm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUZvcm1Db250cm9sQ29tcG9uZW50KCk6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFR5cGUgPSB0aGlzLmNvbXBvbmVudFR5cGU7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudFR5cGUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudFR5cGUpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb21wb25lbnRWaWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5KTtcblxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG5cbiAgICAgICAgICAgIGNvbXBvbmVudC5mb3JtTGF5b3V0ID0gdGhpcy5sYXlvdXQ7XG4gICAgICAgICAgICBjb21wb25lbnQuZ3JvdXAgPSB0aGlzLmdyb3VwO1xuICAgICAgICAgICAgY29tcG9uZW50LmxheW91dCA9IHRoaXMuY29udHJvbExheW91dDtcbiAgICAgICAgICAgIGNvbXBvbmVudC5tb2RlbCA9IHRoaXMubW9kZWw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRlbXBsYXRlcykge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZXMgPSB0aGlzLnRlbXBsYXRlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRTdWJzY3JpcHRpb25zLnB1c2goY29tcG9uZW50LmJsdXIuc3Vic2NyaWJlKCgkZXZlbnQ6IGFueSkgPT4gdGhpcy5vbkJsdXIoJGV2ZW50KSkpO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRTdWJzY3JpcHRpb25zLnB1c2goY29tcG9uZW50LmNoYW5nZS5zdWJzY3JpYmUoKCRldmVudDogYW55KSA9PiB0aGlzLm9uQ2hhbmdlKCRldmVudCkpKTtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50U3Vic2NyaXB0aW9ucy5wdXNoKGNvbXBvbmVudC5mb2N1cy5zdWJzY3JpYmUoKCRldmVudDogYW55KSA9PiB0aGlzLm9uRm9jdXMoJGV2ZW50KSkpO1xuXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmN1c3RvbUV2ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmN1c3RvbUV2ZW50LnN1YnNjcmliZSgoJGV2ZW50OiBhbnkpID0+IHRoaXMub25DdXN0b21FdmVudCgkZXZlbnQpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJGb3JtQ29udHJvbENvbXBvbmVudFJlZih0aGlzLmNvbXBvbmVudFJlZik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZGVzdHJveUZvcm1Db250cm9sQ29tcG9uZW50KCk6IHZvaWQge1xuXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xuXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWJzY3JpcHRpb24gPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRTdWJzY3JpcHRpb25zID0gW107XG5cbiAgICAgICAgICAgIHRoaXMudW5yZWdpc3RlckZvcm1Db250cm9sQ29tcG9uZW50UmVmKCk7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlRHluYW1pY0Zvcm1Db250cm9sRXZlbnQoJGV2ZW50OiBhbnksIHR5cGU6IHN0cmluZyk6IER5bmFtaWNGb3JtQ29udHJvbEV2ZW50IHtcbiAgICAgICAgcmV0dXJuIHskZXZlbnQsIGNvbnRleHQ6IHRoaXMuY29udGV4dCwgY29udHJvbDogdGhpcy5jb250cm9sLCBncm91cDogdGhpcy5ncm91cCwgbW9kZWw6IHRoaXMubW9kZWwsIHR5cGV9O1xuICAgIH1cblxuICAgIHVuc3Vic2NyaWJlKCk6IHZvaWQge1xuXG4gICAgICAgIC8vIHRoaXMuY29tcG9uZW50U3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gICAgICAgIC8vIHRoaXMuY29tcG9uZW50U3Vic2NyaXB0aW9ucyA9IFtdO1xuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH1cblxuICAgIG9uQ29udHJvbFZhbHVlQ2hhbmdlcyh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsIGluc3RhbmNlb2YgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbCAmJiB0aGlzLm1vZGVsLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb2RlbFZhbHVlVXBkYXRlcyh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2wudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb2RlbERpc2FibGVkVXBkYXRlcyhkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBkaXNhYmxlZCA/IHRoaXMuY29udHJvbC5kaXNhYmxlKCkgOiB0aGlzLmNvbnRyb2wuZW5hYmxlKCk7XG4gICAgfVxuXG4gICAgb25MYXlvdXRPck1vZGVsQ2hhbmdlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRyb2xMYXlvdXQgPSB0aGlzLmxheW91dFNlcnZpY2UuZmluZEJ5TW9kZWwodGhpcy5tb2RlbCwgdGhpcy5sYXlvdXQpID8/IHRoaXMubW9kZWwubGF5b3V0IGFzIER5bmFtaWNGb3JtQ29udHJvbExheW91dDtcbiAgICAgICAgdGhpcy5rbGFzcyA9IGAke0FycmF5LmlzQXJyYXkodGhpcy5ob3N0Q2xhc3MpID8gdGhpcy5ob3N0Q2xhc3Muam9pbihcIiBcIikgOiBcIlwifSAke3RoaXMubGF5b3V0U2VydmljZS5nZXRIb3N0Q2xhc3ModGhpcy5jb250cm9sTGF5b3V0KX1gO1xuICAgIH1cblxuICAgIG9uTW9kZWxDaGFuZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVzdHJveUZvcm1Db250cm9sQ29tcG9uZW50KCk7XG4gICAgICAgIHRoaXMuY3JlYXRlRm9ybUNvbnRyb2xDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICBvbkdyb3VwT3JNb2RlbENoYW5nZSgpOiB2b2lkIHtcblxuICAgICAgICBpZiAodGhpcy5tb2RlbCkge1xuXG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLmdyb3VwLmdldCh0aGlzLm1vZGVsLmlkKSBhcyBGb3JtQ29udHJvbDtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmNvbnRyb2wudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZSA9PiB0aGlzLm9uQ29udHJvbFZhbHVlQ2hhbmdlcyh2YWx1ZSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5tb2RlbC5kaXNhYmxlZENoYW5nZXMuc3Vic2NyaWJlKHZhbHVlID0+IHRoaXMub25Nb2RlbERpc2FibGVkVXBkYXRlcyh2YWx1ZSkpKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwgaW5zdGFuY2VvZiBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMubW9kZWwgYXMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxhbnk+O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2gobW9kZWwudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZSA9PiB0aGlzLm9uTW9kZWxWYWx1ZVVwZGF0ZXModmFsdWUpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLnJlbGF0aW9ucy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCguLi50aGlzLnJlbGF0aW9uU2VydmljZS5zdWJzY3JpYmVSZWxhdGlvbnModGhpcy5tb2RlbCwgdGhpcy5ncm91cCwgdGhpcy5jb250cm9sKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNoYW5nZSgkZXZlbnQ6IEV2ZW50IHwgRHluYW1pY0Zvcm1Db250cm9sRXZlbnQgfCBhbnkpOiB2b2lkIHtcblxuICAgICAgICBpZiAoJGV2ZW50IGluc3RhbmNlb2YgRXZlbnQpIHsgLy8gbmF0aXZlIEhUTUw1IGNoYW5nZSBldmVudFxuXG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbC50eXBlID09PSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0lOUFVUKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMubW9kZWwgYXMgRHluYW1pY0lucHV0TW9kZWw7XG5cbiAgICAgICAgICAgICAgICBpZiAobW9kZWwuaW5wdXRUeXBlID09PSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX0ZJTEUpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQ6IGFueSA9ICRldmVudC50YXJnZXQgPz8gJGV2ZW50LnNyY0VsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZmlsZXMgPSBpbnB1dEVsZW1lbnQuZmlsZXMgYXMgRmlsZUxpc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KHRoaXMuY3JlYXRlRHluYW1pY0Zvcm1Db250cm9sRXZlbnQoJGV2ZW50LCBEeW5hbWljRm9ybUNvbnRyb2xFdmVudFR5cGUuQ2hhbmdlKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc0R5bmFtaWNGb3JtQ29udHJvbEV2ZW50KCRldmVudCkpIHsgLy8gZXZlbnQgYnlwYXNzXG5cbiAgICAgICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoJGV2ZW50KTtcblxuICAgICAgICB9IGVsc2UgeyAvLyBjdXN0b20gbGlicmFyeSB2YWx1ZSBjaGFuZ2UgZXZlbnRcblxuICAgICAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh0aGlzLmNyZWF0ZUR5bmFtaWNGb3JtQ29udHJvbEV2ZW50KCRldmVudCwgRHluYW1pY0Zvcm1Db250cm9sRXZlbnRUeXBlLkNoYW5nZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25CbHVyKCRldmVudDogRm9jdXNFdmVudCB8IER5bmFtaWNGb3JtQ29udHJvbEV2ZW50IHwgYW55KTogdm9pZCB7XG5cbiAgICAgICAgaWYgKGlzRHluYW1pY0Zvcm1Db250cm9sRXZlbnQoJGV2ZW50KSkgeyAvLyBldmVudCBieXBhc3NcblxuICAgICAgICAgICAgdGhpcy5ibHVyLmVtaXQoJGV2ZW50KTtcblxuICAgICAgICB9IGVsc2UgeyAvLyBuYXRpdmUgSFRNTCA1IG9yIFVJIGxpYnJhcnkgYmx1ciBldmVudFxuXG4gICAgICAgICAgICB0aGlzLl9oYXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ibHVyLmVtaXQodGhpcy5jcmVhdGVEeW5hbWljRm9ybUNvbnRyb2xFdmVudCgkZXZlbnQsIER5bmFtaWNGb3JtQ29udHJvbEV2ZW50VHlwZS5CbHVyKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZvY3VzKCRldmVudDogRm9jdXNFdmVudCB8IER5bmFtaWNGb3JtQ29udHJvbEV2ZW50IHwgYW55KTogdm9pZCB7XG5cbiAgICAgICAgaWYgKGlzRHluYW1pY0Zvcm1Db250cm9sRXZlbnQoJGV2ZW50KSkgeyAvLyBldmVudCBieXBhc3NcblxuICAgICAgICAgICAgdGhpcy5mb2N1cy5lbWl0KCRldmVudCk7XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gbmF0aXZlIEhUTUwgNSBvciBVSSBsaWJyYXJ5IGZvY3VzIGV2ZW50XG5cbiAgICAgICAgICAgIHRoaXMuX2hhc0ZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMuZW1pdCh0aGlzLmNyZWF0ZUR5bmFtaWNGb3JtQ29udHJvbEV2ZW50KCRldmVudCwgRHluYW1pY0Zvcm1Db250cm9sRXZlbnRUeXBlLkZvY3VzKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkN1c3RvbUV2ZW50KCRldmVudDogRHluYW1pY0Zvcm1Db250cm9sRXZlbnQgfCBEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudCk6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGVtaXR0ZXIgPSB0aGlzLmN1c3RvbUV2ZW50IGFzIEV2ZW50RW1pdHRlcjxEeW5hbWljRm9ybUNvbnRyb2xFdmVudD47XG5cbiAgICAgICAgaWYgKGlzRHluYW1pY0Zvcm1Db250cm9sRXZlbnQoJGV2ZW50KSkgeyAvLyBjaGlsZCBldmVudCBieXBhc3NcblxuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCRldmVudCk7XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gbmF0aXZlIFVJIGxpYnJhcnkgY3VzdG9tIGV2ZW50XG5cbiAgICAgICAgICAgIGVtaXR0ZXIuZW1pdCh0aGlzLmNyZWF0ZUR5bmFtaWNGb3JtQ29udHJvbEV2ZW50KCRldmVudC5jdXN0b21FdmVudCwgJGV2ZW50LmN1c3RvbUV2ZW50VHlwZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWdpc3RlckZvcm1Db250cm9sQ29tcG9uZW50UmVmKHJlZjogQ29tcG9uZW50UmVmPER5bmFtaWNGb3JtQ29udHJvbD4pOiB2b2lkIHtcblxuICAgICAgICBpZiAodGhpcy5jb250ZXh0IGluc3RhbmNlb2YgRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWwpIHtcblxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRTZXJ2aWNlLnJlZ2lzdGVyRm9ybUNvbnRyb2wodGhpcy5tb2RlbCwgcmVmLCB0aGlzLmNvbnRleHQuaW5kZXgpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFNlcnZpY2UucmVnaXN0ZXJGb3JtQ29udHJvbCh0aGlzLm1vZGVsLCByZWYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1bnJlZ2lzdGVyRm9ybUNvbnRyb2xDb21wb25lbnRSZWYoKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKHRoaXMuY29udGV4dCBpbnN0YW5jZW9mIER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsKSB7XG5cbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50U2VydmljZS51bnJlZ2lzdGVyRm9ybUNvbnRyb2wodGhpcy5tb2RlbC5pZCwgdGhpcy5jb250ZXh0LmluZGV4KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRTZXJ2aWNlLnVucmVnaXN0ZXJGb3JtQ29udHJvbCh0aGlzLm1vZGVsLmlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==