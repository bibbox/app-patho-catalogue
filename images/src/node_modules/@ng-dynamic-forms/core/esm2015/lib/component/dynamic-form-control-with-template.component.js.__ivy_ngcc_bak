import { Directive } from "@angular/core";
import { DynamicFormControlComponent } from "./dynamic-form-control.component";
import { isString } from "../utils/core.utils";
import { DynamicFormLayoutService } from "../service/dynamic-form-layout.service";
import { DynamicFormValidationService } from "../service/dynamic-form-validation.service";
export class DynamicFormControlWithTemplateComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
    }
    ngAfterViewInit() {
        this.layoutService
            .filterTemplatesByModel(this.model, this.templates)
            .forEach(template => this.bindTemplate(template));
    }
    bindTemplate(template) {
        if (isString(template.as) && this.templateDirectives.has(template.as)) {
            const property = this.templateDirectives.get(template.as);
            this.viewChild[property] = this.mapTemplate(template);
        }
    }
}
DynamicFormControlWithTemplateComponent.decorators = [
    { type: Directive }
];
DynamicFormControlWithTemplateComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wtd2l0aC10ZW1wbGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1keW5hbWljLWZvcm1zL2NvcmUvc3JjL2xpYi9jb21wb25lbnQvZHluYW1pYy1mb3JtLWNvbnRyb2wtd2l0aC10ZW1wbGF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF5QyxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHakYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBRzFGLE1BQU0sT0FBZ0IsdUNBQXdDLFNBQVEsMkJBQTJCO0lBTzdGLFlBQWdDLGFBQXVDLEVBQ3ZDLGlCQUErQztRQUMzRSxLQUFLLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFGWixrQkFBYSxHQUFiLGFBQWEsQ0FBMEI7UUFDdkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUE4QjtJQUUvRSxDQUFDO0lBRUQsZUFBZTtRQUVYLElBQUksQ0FBQyxhQUFhO2FBQ2Isc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ2xELE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBTUQsWUFBWSxDQUFDLFFBQWtDO1FBRTNDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUVuRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQVcsQ0FBQztZQUVwRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekQ7SUFDTCxDQUFDOzs7WUFoQ0osU0FBUzs7O1lBSEQsd0JBQXdCO1lBQ3hCLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xXaXRoVGVtcGxhdGUgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tY29udHJvbC13aXRoLXRlbXBsYXRlLWludGVyZmFjZVwiO1xuaW1wb3J0IHsgRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZS9keW5hbWljLXRlbXBsYXRlLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sQ29tcG9uZW50IH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLWNvbnRyb2wuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9keW5hbWljLWZvcm0tbGF5b3V0LnNlcnZpY2VcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9keW5hbWljLWZvcm0tdmFsaWRhdGlvbi5zZXJ2aWNlXCI7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER5bmFtaWNGb3JtQ29udHJvbFdpdGhUZW1wbGF0ZUNvbXBvbmVudCBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudFxuICAgIGltcGxlbWVudHMgRHluYW1pY0Zvcm1Db250cm9sV2l0aFRlbXBsYXRlLCBBZnRlclZpZXdJbml0IHtcblxuICAgIHJlYWRvbmx5IHRlbXBsYXRlRGlyZWN0aXZlczogTWFwPHN0cmluZywgc3RyaW5nPjtcblxuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PER5bmFtaWNUZW1wbGF0ZURpcmVjdGl2ZT4gfCBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmVbXSB8IHVuZGVmaW5lZDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbGF5b3V0U2VydmljZTogRHluYW1pY0Zvcm1MYXlvdXRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdmFsaWRhdGlvblNlcnZpY2U6IER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIobGF5b3V0U2VydmljZSwgdmFsaWRhdGlvblNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblxuICAgICAgICB0aGlzLmxheW91dFNlcnZpY2VcbiAgICAgICAgICAgIC5maWx0ZXJUZW1wbGF0ZXNCeU1vZGVsKHRoaXMubW9kZWwsIHRoaXMudGVtcGxhdGVzKVxuICAgICAgICAgICAgLmZvckVhY2godGVtcGxhdGUgPT4gdGhpcy5iaW5kVGVtcGxhdGUodGVtcGxhdGUpKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBnZXQgdmlld0NoaWxkKCk6IGFueTtcblxuICAgIGFic3RyYWN0IG1hcFRlbXBsYXRlKHRlbXBsYXRlOiBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmUpOiBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmUgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgYmluZFRlbXBsYXRlKHRlbXBsYXRlOiBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmUpIHtcblxuICAgICAgICBpZiAoaXNTdHJpbmcodGVtcGxhdGUuYXMpICYmIHRoaXMudGVtcGxhdGVEaXJlY3RpdmVzLmhhcyh0ZW1wbGF0ZS5hcykpIHtcblxuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSB0aGlzLnRlbXBsYXRlRGlyZWN0aXZlcy5nZXQodGVtcGxhdGUuYXMpIGFzIHN0cmluZztcblxuICAgICAgICAgICAgdGhpcy52aWV3Q2hpbGRbcHJvcGVydHldID0gdGhpcy5tYXBUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=