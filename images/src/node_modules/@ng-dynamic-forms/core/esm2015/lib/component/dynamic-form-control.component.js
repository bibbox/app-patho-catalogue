import { isString } from "../utils/core.utils";
export class DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        this.layoutService = layoutService;
        this.validationService = validationService;
        this._hasFocus = false;
    }
    get control() {
        const control = this.group.get(this.model.id);
        if (control === null) {
            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);
        }
        return control;
    }
    get id() {
        return this.layoutService.getElementId(this.model);
    }
    get hasFocus() {
        return this._hasFocus;
    }
    get isInvalid() {
        return this.control.invalid;
    }
    get isValid() {
        return this.control.valid;
    }
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    get showErrorMessages() {
        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);
    }
    getClass(context, place, model = this.model) {
        var _a;
        const controlLayout = model === this.model ? this.layout : (_a = this.layoutService.findByModel(model, this.formLayout)) !== null && _a !== void 0 ? _a : model.layout;
        return this.layoutService.getClass(controlLayout, context, place);
    }
    onBlur($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = false;
        this.blur.emit($event);
    }
    onChange($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this.change.emit($event);
    }
    onCustomEvent($event, type = null, bypass = false) {
        if (bypass) {
            this.customEvent.emit($event);
        }
        else if (isString(type)) {
            this.customEvent.emit({ customEvent: $event, customEventType: type });
        }
    }
    onFocus($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = true;
        this.focus.emit($event);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZHluYW1pYy1mb3Jtcy9jb3JlL3NyYy9saWIvY29tcG9uZW50L2R5bmFtaWMtZm9ybS1jb250cm9sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQkEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRS9DLE1BQU0sT0FBZ0IsMkJBQTJCO0lBZTdDLFlBQWdDLGFBQXVDLEVBQ3ZDLGlCQUErQztRQUQvQyxrQkFBYSxHQUFiLGFBQWEsQ0FBMEI7UUFDdkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUE4QjtRQWR2RSxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBZTFCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFFUCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTlDLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLDJEQUEyRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0Y7UUFFRCxPQUFPLE9BQTBCLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksRUFBRTtRQUNGLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBd0MsRUFBRSxLQUFvQyxFQUM5RSxRQUFpQyxJQUFJLENBQUMsS0FBSzs7UUFFaEQsTUFBTSxhQUFhLEdBQUcsS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUN0RCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQ0FBSSxLQUFLLENBQUMsTUFBa0MsQ0FBQztRQUV2RyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFXO1FBRWQsSUFBSSxNQUFNLFlBQVksS0FBSyxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUM1QjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxRQUFRLENBQUMsTUFBVztRQUVoQixJQUFJLE1BQU0sWUFBWSxLQUFLLEVBQUU7WUFDekIsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzVCO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELGFBQWEsQ0FBQyxNQUFXLEVBQUUsT0FBc0IsSUFBSSxFQUFFLFNBQWtCLEtBQUs7UUFFMUUsSUFBSSxNQUFNLEVBQUU7WUFFUixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUVqQzthQUFNLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBRXZCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUN2RTtJQUNMLENBQUM7SUFFRCxPQUFPLENBQUMsTUFBVztRQUVmLElBQUksTUFBTSxZQUFZLEtBQUssRUFBRTtZQUN6QixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDNUI7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBGb3JtR3JvdXAgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbCB9IGZyb20gXCIuL2R5bmFtaWMtZm9ybS1jb250cm9sLWludGVyZmFjZVwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sQ3VzdG9tRXZlbnQgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tY29udHJvbC1ldmVudFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7XG4gICAgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0LFxuICAgIER5bmFtaWNGb3JtQ29udHJvbExheW91dENvbnRleHQsXG4gICAgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0UGxhY2Vcbn0gZnJvbSBcIi4uL21vZGVsL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2UvZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZVwiO1xuaW1wb3J0IHtcbiAgICBEeW5hbWljRm9ybUxheW91dCxcbiAgICBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgRHluYW1pY0Zvcm1Db250cm9sVGVtcGxhdGVzXG59IGZyb20gXCIuLi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1sYXlvdXQuc2VydmljZVwiO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0Zvcm1Db250cm9sQ29tcG9uZW50IGltcGxlbWVudHMgRHluYW1pY0Zvcm1Db250cm9sIHtcblxuICAgIHByaXZhdGUgX2hhc0ZvY3VzID0gZmFsc2U7XG5cbiAgICBmb3JtTGF5b3V0OiBEeW5hbWljRm9ybUxheW91dDtcbiAgICBncm91cDogRm9ybUdyb3VwO1xuICAgIGxheW91dDogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0O1xuICAgIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbDtcbiAgICB0ZW1wbGF0ZXM6IER5bmFtaWNGb3JtQ29udHJvbFRlbXBsYXRlcztcblxuICAgIGJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY3VzdG9tRXZlbnQ6IEV2ZW50RW1pdHRlcjxEeW5hbWljRm9ybUNvbnRyb2xDdXN0b21FdmVudD47XG4gICAgZm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsYXlvdXRTZXJ2aWNlOiBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2YWxpZGF0aW9uU2VydmljZTogRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSkge1xuICAgIH1cblxuICAgIGdldCBjb250cm9sKCk6IEFic3RyYWN0Q29udHJvbCB8IG5ldmVyIHtcblxuICAgICAgICBjb25zdCBjb250cm9sID0gdGhpcy5ncm91cC5nZXQodGhpcy5tb2RlbC5pZCk7XG5cbiAgICAgICAgaWYgKGNvbnRyb2wgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZm9ybSBncm91cCBkb2VzIG5vdCBjb250YWluIGFuIGFic3RyYWN0IGNvbnRyb2wgd2l0aCBpZCAke3RoaXMubW9kZWwuaWR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udHJvbCBhcyBBYnN0cmFjdENvbnRyb2w7XG4gICAgfVxuXG4gICAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dFNlcnZpY2UuZ2V0RWxlbWVudElkKHRoaXMubW9kZWwpO1xuICAgIH1cblxuICAgIGdldCBoYXNGb2N1cygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc0ZvY3VzO1xuICAgIH1cblxuICAgIGdldCBpc0ludmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wuaW52YWxpZDtcbiAgICB9XG5cbiAgICBnZXQgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbC52YWxpZDtcbiAgICB9XG5cbiAgICBnZXQgZXJyb3JNZXNzYWdlcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25TZXJ2aWNlLmNyZWF0ZUVycm9yTWVzc2FnZXModGhpcy5jb250cm9sLCB0aGlzLm1vZGVsKTtcbiAgICB9XG5cbiAgICBnZXQgc2hvd0Vycm9yTWVzc2FnZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25TZXJ2aWNlLnNob3dFcnJvck1lc3NhZ2VzKHRoaXMuY29udHJvbCwgdGhpcy5tb2RlbCwgdGhpcy5oYXNGb2N1cyk7XG4gICAgfVxuXG4gICAgZ2V0Q2xhc3MoY29udGV4dDogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0Q29udGV4dCwgcGxhY2U6IER5bmFtaWNGb3JtQ29udHJvbExheW91dFBsYWNlLFxuICAgICAgICAgICAgIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCA9IHRoaXMubW9kZWwpOiBzdHJpbmcge1xuXG4gICAgICAgIGNvbnN0IGNvbnRyb2xMYXlvdXQgPSBtb2RlbCA9PT0gdGhpcy5tb2RlbCA/IHRoaXMubGF5b3V0IDpcbiAgICAgICAgICAgIHRoaXMubGF5b3V0U2VydmljZS5maW5kQnlNb2RlbChtb2RlbCwgdGhpcy5mb3JtTGF5b3V0KSA/PyBtb2RlbC5sYXlvdXQgYXMgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dFNlcnZpY2UuZ2V0Q2xhc3MoY29udHJvbExheW91dCwgY29udGV4dCwgcGxhY2UpO1xuICAgIH1cblxuICAgIG9uQmx1cigkZXZlbnQ6IGFueSkge1xuXG4gICAgICAgIGlmICgkZXZlbnQgaW5zdGFuY2VvZiBFdmVudCkge1xuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faGFzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ibHVyLmVtaXQoJGV2ZW50KTtcbiAgICB9XG5cbiAgICBvbkNoYW5nZSgkZXZlbnQ6IGFueSkge1xuXG4gICAgICAgIGlmICgkZXZlbnQgaW5zdGFuY2VvZiBFdmVudCkge1xuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICAgIH1cblxuICAgIG9uQ3VzdG9tRXZlbnQoJGV2ZW50OiBhbnksIHR5cGU6IHN0cmluZyB8IG51bGwgPSBudWxsLCBieXBhc3M6IGJvb2xlYW4gPSBmYWxzZSkge1xuXG4gICAgICAgIGlmIChieXBhc3MpIHtcblxuICAgICAgICAgICAgdGhpcy5jdXN0b21FdmVudC5lbWl0KCRldmVudCk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyh0eXBlKSkge1xuXG4gICAgICAgICAgICB0aGlzLmN1c3RvbUV2ZW50LmVtaXQoe2N1c3RvbUV2ZW50OiAkZXZlbnQsIGN1c3RvbUV2ZW50VHlwZTogdHlwZX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Gb2N1cygkZXZlbnQ6IGFueSkge1xuXG4gICAgICAgIGlmICgkZXZlbnQgaW5zdGFuY2VvZiBFdmVudCkge1xuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faGFzRm9jdXMgPSB0cnVlO1xuICAgICAgICB0aGlzLmZvY3VzLmVtaXQoJGV2ZW50KTtcbiAgICB9XG59XG4iXX0=