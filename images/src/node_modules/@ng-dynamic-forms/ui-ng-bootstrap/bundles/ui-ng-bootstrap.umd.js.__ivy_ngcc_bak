(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ng-bootstrap/ng-bootstrap'), require('@ng-dynamic-forms/core'), require('@angular/common'), require('@angular/forms'), require('angular2-text-mask')) :
    typeof define === 'function' && define.amd ? define('@ng-dynamic-forms/ui-ng-bootstrap', ['exports', '@angular/core', '@ng-bootstrap/ng-bootstrap', '@ng-dynamic-forms/core', '@angular/common', '@angular/forms', 'angular2-text-mask'], factory) :
    (global = global || self, factory((global.ngDynamicForms = global.ngDynamicForms || {}, global.ngDynamicForms.ui = global.ngDynamicForms.ui || {}, global.ngDynamicForms.ui.ngbootstrap = {}), global.ng.core, global.ngb, global.ngDynamicForms.core, global.ng.common, global.ng.forms, global['angular2-text-mask']));
}(this, (function (exports, core, ngBootstrap, core$1, common, forms, angular2TextMask) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var DynamicNGBootstrapCalendarComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapCalendarComponent, _super);
        function DynamicNGBootstrapCalendarComponent(layoutService, validationService, config) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.config = config;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapCalendarComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapCalendarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-calendar",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapCalendarComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService },
        { type: ngBootstrap.NgbDatepickerConfig }
    ]; };
    DynamicNGBootstrapCalendarComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        ngbCalendar: [{ type: core.ViewChild, args: [ngBootstrap.NgbDatepicker, { static: true },] }]
    };

    var DynamicNGBootstrapCheckboxComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapCheckboxComponent, _super);
        function DynamicNGBootstrapCheckboxComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapCheckboxComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapCheckboxComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-checkbox",
                    template: "<div [formGroup]=\"group\" class=\"form-check\" [class.disabled]=\"model.disabled\">\n\n    <label class=\"form-check-label\">\n\n        <input type=\"checkbox\" class=\"form-check-input\"\n               [checked]=\"model.checked\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [indeterminate]=\"model.indeterminate\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [required]=\"model.required\"\n               [tabindex]=\"model.tabIndex\"\n               [value]=\"model.value\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/><span [innerHTML]=\"model.label\"\n                                                [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></span>\n    </label>\n\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    DynamicNGBootstrapCheckboxComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapCheckboxComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapCheckboxGroupComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapCheckboxGroupComponent, _super);
        function DynamicNGBootstrapCheckboxGroupComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicNGBootstrapCheckboxGroupComponent.prototype.getCheckboxId = function (model) {
            return this.layoutService.getElementId(model);
        };
        DynamicNGBootstrapCheckboxGroupComponent.prototype.onCheckboxChange = function ($event, model) {
            this.onChange($event);
            model.value = $event.target.checked;
        };
        return DynamicNGBootstrapCheckboxGroupComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapCheckboxGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-checkbox-group",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"\n         [formGroupName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n        <label *ngFor=\"let checkboxModel of model.group\" ngbButtonLabel\n               [hidden]=\"checkboxModel.hidden\"\n               [ngClass]=\"getClass('element', 'control', checkboxModel)\">\n\n            <input type=\"checkbox\" ngbButton\n                   [checked]=\"checkboxModel.checked\"\n                   [formControlName]=\"checkboxModel.id\"\n                   [id]=\"getCheckboxId(checkboxModel)\"\n                   [name]=\"checkboxModel.name\"\n                   [required]=\"checkboxModel.required\"\n                   [tabindex]=\"checkboxModel.tabIndex\"\n                   [value]=\"checkboxModel.value\"\n                   (blur)=\"onBlur($event)\"\n                   (change)=\"onCheckboxChange($event, checkboxModel)\"\n                   (focus)=\"onFocus($event)\"/><span [ngClass]=\"getClass('element', 'label', checkboxModel)\"\n                                                    [innerHTML]=\"checkboxModel.label\"></span></label>\n    </div>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapCheckboxGroupComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapCheckboxGroupComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapDatePickerComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapDatePickerComponent, _super);
        function DynamicNGBootstrapDatePickerComponent(layoutService, validationService, config) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.config = config;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapDatePickerComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapDatePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-datepicker",
                    template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    DynamicNGBootstrapDatePickerComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService },
        { type: ngBootstrap.NgbDatepickerConfig }
    ]; };
    DynamicNGBootstrapDatePickerComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        customEvent: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        ngbDatePicker: [{ type: core.ViewChild, args: [ngBootstrap.NgbDatepicker,] }]
    };

    var DynamicNGBootstrapFormGroupComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapFormGroupComponent, _super);
        function DynamicNGBootstrapFormGroupComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapFormGroupComponent;
    }(core$1.DynamicFormGroupComponent));
    DynamicNGBootstrapFormGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-form-group",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\" [formGroupName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element','control')\">\n\n        <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of model.group\"\n                                           [asBootstrapFormGroup]=\"true\"\n                                           [group]=\"control\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"formLayout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n    </div>\n\n</ng-container>\n"
                },] }
    ];
    DynamicNGBootstrapFormGroupComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapFormGroupComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        templates: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        customEvent: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        components: [{ type: core.ViewChildren, args: [core.forwardRef(function () { return DynamicNGBootstrapFormControlContainerComponent; }),] }]
    };

    var DynamicNGBootstrapInputComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapInputComponent, _super);
        function DynamicNGBootstrapInputComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapInputComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-input",
                    template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.form-control]=\"model.inputType !== 'file'\"\n           [class.form-control-file]=\"model.inputType === 'file'\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n\n    </datalist>\n\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    DynamicNGBootstrapInputComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapInputComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapRadioGroupComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapRadioGroupComponent, _super);
        function DynamicNGBootstrapRadioGroupComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapRadioGroupComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapRadioGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-radio-group",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <div ngbRadioGroup class=\"btn-group btn-group-toggle\" role=\"radiogroup\"\n         [formControlName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\"\n         [tabindex]=\"model.tabIndex\"\n         (change)=\"onChange($event)\">\n\n        <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n        <label *ngFor=\"let option of model.options$ | async\" ngbButtonLabel\n               [ngClass]=\"[getClass('element', 'option'), getClass('grid', 'option')]\">\n\n            <input type=\"radio\" ngbButton\n                   [disabled]=\"option.disabled\"\n                   [name]=\"model.name\"\n                   [value]=\"option.value\"\n                   (blur)=\"onBlur($event)\"\n                   (focus)=\"onFocus($event)\"/><span [innerHTML]=\"option.label\"></span>\n        </label>\n\n    </div>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapRadioGroupComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapRadioGroupComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapRatingComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapRatingComponent, _super);
        function DynamicNGBootstrapRatingComponent(layoutService, validationService, config) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.config = config;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapRatingComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapRatingComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-rating",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-rating [formControlName]=\"model.id\"\n                [id]=\"id\"\n                [max]=\"model.max\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [resettable]=\"model.getAdditional('resettable', config['resettable'])\"\n                (hover)=\"onCustomEvent($event, 'hover')\"\n                (leave)=\"onCustomEvent($event, 'leave')\"\n                (rateChange)=\"onChange($event)\"></ngb-rating>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapRatingComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService },
        { type: ngBootstrap.NgbRatingConfig }
    ]; };
    DynamicNGBootstrapRatingComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        customEvent: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        ngbRating: [{ type: core.ViewChild, args: [ngBootstrap.NgbRating, { static: true },] }]
    };

    var DynamicNGBootstrapSelectComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapSelectComponent, _super);
        function DynamicNGBootstrapSelectComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapSelectComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapSelectComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-select",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <select class=\"form-control\"\n            [class.is-invalid]=\"showErrorMessages\"\n            [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"id\"\n            [name]=\"model.name\"\n            [ngClass]=\"getClass('element', 'control')\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    DynamicNGBootstrapSelectComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapSelectComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapSwitchComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapSwitchComponent, _super);
        function DynamicNGBootstrapSwitchComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapSwitchComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapSwitchComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-switch",
                    template: "<div [formGroup]=\"group\" class=\"custom-control custom-switch\">\n\n    <input type=\"checkbox\" class=\"custom-control-input\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [required]=\"model.required\"\n           [tabindex]=\"model.tabIndex\"\n           [value]=\"model.value\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <label class=\"custom-control-label\" [for]=\"id\" [innerHTML]=\"model.label\"></label>\n\n</div>\n\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    DynamicNGBootstrapSwitchComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapSwitchComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapTextAreaComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapTextAreaComponent, _super);
        function DynamicNGBootstrapTextAreaComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapTextAreaComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapTextAreaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-textarea",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <textarea class=\"form-control\"\n              [class.is-invalid]=\"showErrorMessages\"\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"id\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    DynamicNGBootstrapTextAreaComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapTextAreaComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }]
    };

    var DynamicNGBootstrapTimePickerComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapTimePickerComponent, _super);
        function DynamicNGBootstrapTimePickerComponent(layoutService, validationService, config) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.config = config;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapTimePickerComponent;
    }(core$1.DynamicFormControlComponent));
    DynamicNGBootstrapTimePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-timepicker",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-timepicker [id]=\"id\"\n                    [formControlName]=\"model.id\"\n                    [hourStep]=\"model.getAdditional('hourStep', config['hourStep'])\"\n                    [meridian]=\"model.meridian\"\n                    [minuteStep]=\"model.getAdditional('minuteStep', config['minuteStep'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [seconds]=\"model.showSeconds\"\n                    [secondStep]=\"model.getAdditional('secondStep', config['secondStep'])\"\n                    [size]=\"model.getAdditional('size', config['size'])\"\n                    [spinners]=\"model.getAdditional('spinners', config['spinners'])\"></ngb-timepicker>\n\n</ng-container>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapTimePickerComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService },
        { type: ngBootstrap.NgbTimepickerConfig }
    ]; };
    DynamicNGBootstrapTimePickerComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        ngbTimePicker: [{ type: core.ViewChild, args: [ngBootstrap.NgbTimepicker, { static: true },] }]
    };

    var DynamicNGBootstrapFormControlContainerComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapFormControlContainerComponent, _super);
        function DynamicNGBootstrapFormControlContainerComponent(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
            var _this = _super.call(this, changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) || this;
            _this.changeDetectorRef = changeDetectorRef;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.componentService = componentService;
            _this.relationService = relationService;
            _this.klass = "";
            _this.asBootstrapFormGroup = true;
            _this.context = null;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(DynamicNGBootstrapFormControlContainerComponent.prototype, "componentType", {
            get: function () {
                return this.componentService.getCustomComponentType(this.model) || ngBootstrapUIFormControlMapFn(this.model);
            },
            enumerable: false,
            configurable: true
        });
        return DynamicNGBootstrapFormControlContainerComponent;
    }(core$1.DynamicFormControlContainerComponent));
    DynamicNGBootstrapFormControlContainerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-form-control",
                    template: "<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <div [ngClass]=\"getClass('grid', 'control')\">\n\n        <ng-container #componentViewContainer></ng-container>\n\n        <small *ngIf=\"hasHint\" class=\"text-muted\" [innerHTML]=\"hint\" [ngClass]=\"getClass('element', 'hint')\"></small>\n\n        <div *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n            <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message }}</small>\n        </div>\n\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapFormControlContainerComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ComponentFactoryResolver },
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService },
        { type: core$1.DynamicFormComponentService },
        { type: core$1.DynamicFormRelationService }
    ]; };
    DynamicNGBootstrapFormControlContainerComponent.propDecorators = {
        contentTemplateList: [{ type: core.ContentChildren, args: [core$1.DynamicTemplateDirective,] }],
        klass: [{ type: core.HostBinding, args: ["class",] }],
        asBootstrapFormGroup: [{ type: core.Input }],
        context: [{ type: core.Input }],
        group: [{ type: core.Input }],
        hostClass: [{ type: core.Input }],
        inputTemplateList: [{ type: core.Input, args: ["templates",] }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        customEvent: [{ type: core.Output, args: ["ngbEvent",] }],
        componentViewContainerRef: [{ type: core.ViewChild, args: ["componentViewContainer", { read: core.ViewContainerRef, static: true },] }]
    };
    function ngBootstrapUIFormControlMapFn(model) {
        switch (model.type) {
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                return DynamicNGBootstrapFormArrayComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                return DynamicNGBootstrapCheckboxComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                return DynamicNGBootstrapCheckboxGroupComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
                var datePickerModel = model;
                return datePickerModel.inline ? DynamicNGBootstrapCalendarComponent : DynamicNGBootstrapDatePickerComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                return DynamicNGBootstrapFormGroupComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                return DynamicNGBootstrapInputComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                return DynamicNGBootstrapRadioGroupComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_RATING:
                return DynamicNGBootstrapRatingComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                return DynamicNGBootstrapSelectComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
                return DynamicNGBootstrapSwitchComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                return DynamicNGBootstrapTextAreaComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
                return DynamicNGBootstrapTimePickerComponent;
            default:
                return null;
        }
    }

    var DynamicNGBootstrapFormArrayComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapFormArrayComponent, _super);
        function DynamicNGBootstrapFormArrayComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapFormArrayComponent;
    }(core$1.DynamicFormArrayComponent));
    DynamicNGBootstrapFormArrayComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-form-array",
                    template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of groupModel.group\"\n                                               [context]=\"groupModel\"\n                                               [group]=\"array.at(idx)\"\n                                               [hidden]=\"_model.hidden\"\n                                               [layout]=\"formLayout\"\n                                               [model]=\"_model\"\n                                               [templates]=\"templates\"\n                                               [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                               (blur)=\"onBlur($event)\"\n                                               (change)=\"onChange($event)\"\n                                               (focus)=\"onFocus($event)\"\n                                               (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n"
                },] }
    ];
    DynamicNGBootstrapFormArrayComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormLayoutService },
        { type: core$1.DynamicFormValidationService }
    ]; };
    DynamicNGBootstrapFormArrayComponent.propDecorators = {
        formLayout: [{ type: core.Input }],
        group: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        model: [{ type: core.Input }],
        templates: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        customEvent: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        components: [{ type: core.ViewChildren, args: [core.forwardRef(function () { return DynamicNGBootstrapFormControlContainerComponent; }),] }]
    };

    var DynamicNGBootstrapFormComponent = /** @class */ (function (_super) {
        __extends(DynamicNGBootstrapFormComponent, _super);
        function DynamicNGBootstrapFormComponent(changeDetectorRef, componentService) {
            var _this = _super.call(this, changeDetectorRef, componentService) || this;
            _this.changeDetectorRef = changeDetectorRef;
            _this.componentService = componentService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            _this.ngbEvent = new core.EventEmitter();
            return _this;
        }
        return DynamicNGBootstrapFormComponent;
    }(core$1.DynamicFormComponent));
    DynamicNGBootstrapFormComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-ng-bootstrap-form",
                    template: "<dynamic-ng-bootstrap-form-control *ngFor=\"let controlModel of model; trackBy: trackByFn\"\n                                   [group]=\"group\"\n                                   [hidden]=\"controlModel.hidden\"\n                                   [layout]=\"layout\"\n                                   [model]=\"controlModel\"\n                                   [templates]=\"templates\"\n                                   (blur)=\"onBlur($event)\"\n                                   (change)=\"onChange($event)\"\n                                   (focus)=\"onFocus($event)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></dynamic-ng-bootstrap-form-control>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    DynamicNGBootstrapFormComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core$1.DynamicFormComponentService }
    ]; };
    DynamicNGBootstrapFormComponent.propDecorators = {
        group: [{ type: core.Input }],
        model: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        blur: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        ngbEvent: [{ type: core.Output }],
        templates: [{ type: core.ContentChildren, args: [core$1.DynamicTemplateDirective,] }],
        components: [{ type: core.ViewChildren, args: [DynamicNGBootstrapFormControlContainerComponent,] }]
    };

    var DynamicFormsNGBootstrapUIModule = /** @class */ (function () {
        function DynamicFormsNGBootstrapUIModule() {
        }
        return DynamicFormsNGBootstrapUIModule;
    }());
    DynamicFormsNGBootstrapUIModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        ngBootstrap.NgbButtonsModule,
                        ngBootstrap.NgbDatepickerModule,
                        ngBootstrap.NgbRatingModule,
                        ngBootstrap.NgbTimepickerModule,
                        angular2TextMask.TextMaskModule,
                        core$1.DynamicFormsCoreModule
                    ],
                    declarations: [
                        DynamicNGBootstrapCalendarComponent,
                        DynamicNGBootstrapCheckboxComponent,
                        DynamicNGBootstrapCheckboxGroupComponent,
                        DynamicNGBootstrapDatePickerComponent,
                        DynamicNGBootstrapFormArrayComponent,
                        DynamicNGBootstrapFormComponent,
                        DynamicNGBootstrapFormControlContainerComponent,
                        DynamicNGBootstrapFormGroupComponent,
                        DynamicNGBootstrapInputComponent,
                        DynamicNGBootstrapRadioGroupComponent,
                        DynamicNGBootstrapRatingComponent,
                        DynamicNGBootstrapSelectComponent,
                        DynamicNGBootstrapSwitchComponent,
                        DynamicNGBootstrapTextAreaComponent,
                        DynamicNGBootstrapTimePickerComponent
                    ],
                    entryComponents: [
                        DynamicNGBootstrapCalendarComponent,
                        DynamicNGBootstrapCheckboxComponent,
                        DynamicNGBootstrapCheckboxGroupComponent,
                        DynamicNGBootstrapDatePickerComponent,
                        DynamicNGBootstrapFormArrayComponent,
                        DynamicNGBootstrapFormGroupComponent,
                        DynamicNGBootstrapInputComponent,
                        DynamicNGBootstrapRadioGroupComponent,
                        DynamicNGBootstrapRatingComponent,
                        DynamicNGBootstrapSelectComponent,
                        DynamicNGBootstrapSwitchComponent,
                        DynamicNGBootstrapTextAreaComponent,
                        DynamicNGBootstrapTimePickerComponent
                    ],
                    exports: [
                        core$1.DynamicFormsCoreModule,
                        DynamicNGBootstrapCalendarComponent,
                        DynamicNGBootstrapCheckboxComponent,
                        DynamicNGBootstrapCheckboxGroupComponent,
                        DynamicNGBootstrapDatePickerComponent,
                        DynamicNGBootstrapFormArrayComponent,
                        DynamicNGBootstrapFormComponent,
                        DynamicNGBootstrapFormControlContainerComponent,
                        DynamicNGBootstrapFormGroupComponent,
                        DynamicNGBootstrapInputComponent,
                        DynamicNGBootstrapRadioGroupComponent,
                        DynamicNGBootstrapRatingComponent,
                        DynamicNGBootstrapSelectComponent,
                        DynamicNGBootstrapSwitchComponent,
                        DynamicNGBootstrapTextAreaComponent,
                        DynamicNGBootstrapTimePickerComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DynamicFormsNGBootstrapUIModule = DynamicFormsNGBootstrapUIModule;
    exports.DynamicNGBootstrapCalendarComponent = DynamicNGBootstrapCalendarComponent;
    exports.DynamicNGBootstrapCheckboxComponent = DynamicNGBootstrapCheckboxComponent;
    exports.DynamicNGBootstrapCheckboxGroupComponent = DynamicNGBootstrapCheckboxGroupComponent;
    exports.DynamicNGBootstrapDatePickerComponent = DynamicNGBootstrapDatePickerComponent;
    exports.DynamicNGBootstrapFormArrayComponent = DynamicNGBootstrapFormArrayComponent;
    exports.DynamicNGBootstrapFormComponent = DynamicNGBootstrapFormComponent;
    exports.DynamicNGBootstrapFormControlContainerComponent = DynamicNGBootstrapFormControlContainerComponent;
    exports.DynamicNGBootstrapFormGroupComponent = DynamicNGBootstrapFormGroupComponent;
    exports.DynamicNGBootstrapInputComponent = DynamicNGBootstrapInputComponent;
    exports.DynamicNGBootstrapRadioGroupComponent = DynamicNGBootstrapRadioGroupComponent;
    exports.DynamicNGBootstrapRatingComponent = DynamicNGBootstrapRatingComponent;
    exports.DynamicNGBootstrapSelectComponent = DynamicNGBootstrapSelectComponent;
    exports.DynamicNGBootstrapSwitchComponent = DynamicNGBootstrapSwitchComponent;
    exports.DynamicNGBootstrapTextAreaComponent = DynamicNGBootstrapTextAreaComponent;
    exports.DynamicNGBootstrapTimePickerComponent = DynamicNGBootstrapTimePickerComponent;
    exports.ngBootstrapUIFormControlMapFn = ngBootstrapUIFormControlMapFn;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ui-ng-bootstrap.umd.js.map
