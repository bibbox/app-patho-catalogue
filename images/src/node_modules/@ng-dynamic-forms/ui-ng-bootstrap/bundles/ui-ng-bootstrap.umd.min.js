!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ng-dynamic-forms/core"),require("@angular/common"),require("@angular/forms"),require("angular2-text-mask")):"function"==typeof define&&define.amd?define("@ng-dynamic-forms/ui-ng-bootstrap",["exports","@angular/core","@ng-bootstrap/ng-bootstrap","@ng-dynamic-forms/core","@angular/common","@angular/forms","angular2-text-mask"],t):t(((e=e||self).ngDynamicForms=e.ngDynamicForms||{},e.ngDynamicForms.ui=e.ngDynamicForms.ui||{},e.ngDynamicForms.ui.ngbootstrap={}),e.ng.core,e.ngb,e.ngDynamicForms.core,e.ng.common,e.ng.forms,e["angular2-text-mask"])}(this,(function(e,t,n,o,r,a,i){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function c(e,t){function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}Object.create;Object.create;var p=function(e){function n(n,o,r){var a=e.call(this,n,o)||this;return a.layoutService=n,a.validationService=o,a.config=r,a.blur=new t.EventEmitter,a.change=new t.EventEmitter,a.focus=new t.EventEmitter,a}return c(n,e),n}(o.DynamicFormControlComponent);p.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-calendar",template:"<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n",changeDetection:t.ChangeDetectionStrategy.OnPush}]}],p.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService},{type:n.NgbDatepickerConfig}]},p.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}],ngbCalendar:[{type:t.ViewChild,args:[n.NgbDatepicker,{static:!0}]}]};var s=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormControlComponent);s.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-checkbox",template:'<div [formGroup]="group" class="form-check" [class.disabled]="model.disabled">\n\n    <label class="form-check-label">\n\n        <input type="checkbox" class="form-check-input"\n               [checked]="model.checked"\n               [class.is-invalid]="showErrorMessages"\n               [formControlName]="model.id"\n               [id]="id"\n               [indeterminate]="model.indeterminate"\n               [name]="model.name"\n               [ngClass]="getClass(\'element\', \'control\')"\n               [required]="model.required"\n               [tabindex]="model.tabIndex"\n               [value]="model.value"\n               (blur)="onBlur($event)"\n               (change)="onChange($event)"\n               (focus)="onFocus($event)"/><span [innerHTML]="model.label"\n                                                [ngClass]="[getClass(\'element\', \'label\'), getClass(\'grid\', \'label\')]"></span>\n    </label>\n\n</div>\n',changeDetection:t.ChangeDetectionStrategy.Default}]}],s.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},s.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var u=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n.prototype.getCheckboxId=function(e){return this.layoutService.getElementId(e)},n.prototype.onCheckboxChange=function(e,t){this.onChange(e),t.value=e.target.checked},n}(o.DynamicFormControlComponent);u.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-checkbox-group",template:'<ng-container [formGroup]="group">\n\n    <div class="btn-group btn-group-toggle" data-toggle="buttons"\n         [formGroupName]="model.id"\n         [id]="id"\n         [ngClass]="getClass(\'element\', \'control\')">\n\n        <label *ngFor="let checkboxModel of model.group" ngbButtonLabel\n               [hidden]="checkboxModel.hidden"\n               [ngClass]="getClass(\'element\', \'control\', checkboxModel)">\n\n            <input type="checkbox" ngbButton\n                   [checked]="checkboxModel.checked"\n                   [formControlName]="checkboxModel.id"\n                   [id]="getCheckboxId(checkboxModel)"\n                   [name]="checkboxModel.name"\n                   [required]="checkboxModel.required"\n                   [tabindex]="checkboxModel.tabIndex"\n                   [value]="checkboxModel.value"\n                   (blur)="onBlur($event)"\n                   (change)="onCheckboxChange($event, checkboxModel)"\n                   (focus)="onFocus($event)"/><span [ngClass]="getClass(\'element\', \'label\', checkboxModel)"\n                                                    [innerHTML]="checkboxModel.label"></span></label>\n    </div>\n\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush}]}],u.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},u.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var m=function(e){function n(n,o,r){var a=e.call(this,n,o)||this;return a.layoutService=n,a.validationService=o,a.config=r,a.blur=new t.EventEmitter,a.change=new t.EventEmitter,a.customEvent=new t.EventEmitter,a.focus=new t.EventEmitter,a}return c(n,e),n}(o.DynamicFormControlComponent);m.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-datepicker",template:'<div [formGroup]="group" class="input-group">\n\n    <input ngbDatepicker class="form-control" #datepicker="ngbDatepicker"\n           [class.is-invalid]="showErrorMessages"\n           [displayMonths]="model.getAdditional(\'displayMonths\', config[\'displayMonths\'])"\n           [firstDayOfWeek]="model.getAdditional(\'firstDayOfWeek\', config[\'firstDayOfWeek\'])"\n           [formControlName]="model.id"\n           [id]="id"\n           [maxDate]="model.max"\n           [minDate]="model.min"\n           [name]="model.name"\n           [navigation]="model.getAdditional(\'navigation\', config[\'navigation\'])"\n           [ngClass]="getClass(\'element\', \'control\')"\n           [outsideDays]="model.getAdditional(\'outsideDays\', config[\'outsideDays\'])"\n           [placeholder]="model.placeholder"\n           [placement]="model.getAdditional(\'placement\', \'bottom-left\')"\n           [showWeekdays]="model.getAdditional(\'showWeekdays\', config[\'showWeekdays\'])"\n           [showWeekNumbers]="model.getAdditional(\'showWeekNumbers\', config[\'showWeekNumbers\'])"\n           [startDate]="model.focusedDate"\n           (blur)="onBlur($event)"\n           (dateSelect)="onCustomEvent($event, \'dateSelect\')"\n           (closed)="onCustomEvent($event, \'closed\')"\n           (change)="onChange($event)"\n           (focus)="onFocus($event)">\n\n    <div class="input-group-append">\n\n        <button class="btn btn-outline-secondary" type="button" (click)="datepicker.toggle()">\n\n            <img *ngIf="model.toggleIcon" [src]="model.toggleIcon" style="cursor: pointer;"/>\n            <span *ngIf="model.toggleLabel">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n',changeDetection:t.ChangeDetectionStrategy.Default}]}],m.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService},{type:n.NgbDatepickerConfig}]},m.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],customEvent:[{type:t.Output}],focus:[{type:t.Output}],ngbDatePicker:[{type:t.ViewChild,args:[n.NgbDatepicker]}]};var d=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.customEvent=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormGroupComponent);d.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-form-group",template:'<ng-container [formGroup]="group">\n\n    <div role="group" [formGroupName]="model.id" [id]="id" [ngClass]="getClass(\'element\',\'control\')">\n\n        <dynamic-ng-bootstrap-form-control *ngFor="let _model of model.group"\n                                           [asBootstrapFormGroup]="true"\n                                           [group]="control"\n                                           [hidden]="_model.hidden"\n                                           [layout]="formLayout"\n                                           [model]="_model"\n                                           [templates]="templates"\n                                           [hostClass]="[getClass(\'element\',\'children\'), getClass(\'grid\',\'children\')]"\n                                           (blur)="onBlur($event)"\n                                           (change)="onChange($event)"\n                                           (focus)="onFocus($event)"\n                                           (ngbEvent)="onCustomEvent($event, null, true)"></dynamic-ng-bootstrap-form-control>\n    </div>\n\n</ng-container>\n'}]}],d.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},d.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],templates:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],customEvent:[{type:t.Output}],focus:[{type:t.Output}],components:[{type:t.ViewChildren,args:[t.forwardRef((function(){return D}))]}]};var g=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormControlComponent);g.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-input",template:'<div [formGroup]="group" [class.input-group]="model.prefix || model.suffix">\n\n    <div *ngIf="model.prefix" class="input-group-prepend">\n        <span class="input-group-text" [innerHTML]="model.prefix"></span>\n    </div>\n\n    <input [attr.accept]="model.accept"\n           [attr.max]="model.max"\n           [attr.min]="model.min"\n           [attr.multiple]="model.multiple"\n           [attr.step]="model.step"\n           [autocomplete]="model.autoComplete"\n           [autofocus]="model.autoFocus"\n           [class.form-control]="model.inputType !== \'file\'"\n           [class.form-control-file]="model.inputType === \'file\'"\n           [class.is-invalid]="showErrorMessages"\n           [dynamicList]="model.listId"\n           [formControlName]="model.id"\n           [id]="id"\n           [maxlength]="model.maxLength"\n           [minlength]="model.minLength"\n           [name]="model.name"\n           [ngClass]="getClass(\'element\', \'control\')"\n           [pattern]="model.pattern"\n           [placeholder]="model.placeholder"\n           [readonly]="model.readOnly"\n           [required]="model.required"\n           [spellcheck]="model.spellCheck"\n           [tabindex]="model.tabIndex"\n           [textMask]="{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}"\n           [type]="model.inputType"\n           (blur)="onBlur($event)"\n           (change)="onChange($event)"\n           (focus)="onFocus($event)"/>\n\n    <div *ngIf="model.suffix" class="input-group-append">\n        <span class="input-group-text" [innerHTML]="model.suffix"></span>\n    </div>\n\n    <datalist *ngIf="model.hasList" [id]="model.listId">\n\n        <option *ngFor="let option of model.list$ | async" [value]="option">\n\n    </datalist>\n\n</div>\n',changeDetection:t.ChangeDetectionStrategy.Default}]}],g.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},g.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var y=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormControlComponent);y.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-radio-group",template:'<ng-container [formGroup]="group">\n\n    <div ngbRadioGroup class="btn-group btn-group-toggle" role="radiogroup"\n         [formControlName]="model.id"\n         [id]="id"\n         [ngClass]="getClass(\'element\', \'control\')"\n         [tabindex]="model.tabIndex"\n         (change)="onChange($event)">\n\n        <legend *ngIf="model.legend" [innerHTML]="model.legend"></legend>\n\n        <label *ngFor="let option of model.options$ | async" ngbButtonLabel\n               [ngClass]="[getClass(\'element\', \'option\'), getClass(\'grid\', \'option\')]">\n\n            <input type="radio" ngbButton\n                   [disabled]="option.disabled"\n                   [name]="model.name"\n                   [value]="option.value"\n                   (blur)="onBlur($event)"\n                   (focus)="onFocus($event)"/><span [innerHTML]="option.label"></span>\n        </label>\n\n    </div>\n\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush}]}],y.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},y.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var v=function(e){function n(n,o,r){var a=e.call(this,n,o)||this;return a.layoutService=n,a.validationService=o,a.config=r,a.blur=new t.EventEmitter,a.change=new t.EventEmitter,a.customEvent=new t.EventEmitter,a.focus=new t.EventEmitter,a}return c(n,e),n}(o.DynamicFormControlComponent);v.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-rating",template:'<ng-container [formGroup]="group">\n\n    <ngb-rating [formControlName]="model.id"\n                [id]="id"\n                [max]="model.max"\n                [ngClass]="getClass(\'element\', \'control\')"\n                [resettable]="model.getAdditional(\'resettable\', config[\'resettable\'])"\n                (hover)="onCustomEvent($event, \'hover\')"\n                (leave)="onCustomEvent($event, \'leave\')"\n                (rateChange)="onChange($event)"></ngb-rating>\n\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush}]}],v.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService},{type:n.NgbRatingConfig}]},v.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],customEvent:[{type:t.Output}],focus:[{type:t.Output}],ngbRating:[{type:t.ViewChild,args:[n.NgbRating,{static:!0}]}]};var f=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormControlComponent);f.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-select",template:'<ng-container [formGroup]="group">\n\n    <select class="form-control"\n            [class.is-invalid]="showErrorMessages"\n            [compareWith]="model.compareWithFn"\n            [formControlName]="model.id"\n            [id]="id"\n            [name]="model.name"\n            [ngClass]="getClass(\'element\', \'control\')"\n            [required]="model.required"\n            [tabindex]="model.tabIndex"\n            (blur)="onBlur($event)"\n            (change)="onChange($event)"\n            (focus)="onFocus($event)">\n\n        <option *ngFor="let option of model.options$ | async"\n                [disabled]="option.disabled"\n                [ngValue]="option.value">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.Default}]}],f.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},f.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var h=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormControlComponent);h.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-switch",template:'<div [formGroup]="group" class="custom-control custom-switch">\n\n    <input type="checkbox" class="custom-control-input"\n           [class.is-invalid]="showErrorMessages"\n           [formControlName]="model.id"\n           [id]="id"\n           [name]="model.name"\n           [ngClass]="getClass(\'element\', \'control\')"\n           [required]="model.required"\n           [tabindex]="model.tabIndex"\n           [value]="model.value"\n           (blur)="onBlur($event)"\n           (change)="onChange($event)"\n           (focus)="onFocus($event)">\n\n    <label class="custom-control-label" [for]="id" [innerHTML]="model.label"></label>\n\n</div>\n\n',changeDetection:t.ChangeDetectionStrategy.Default}]}],h.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},h.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var C=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormControlComponent);C.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-textarea",template:'<ng-container [formGroup]="group">\n\n    <textarea class="form-control"\n              [class.is-invalid]="showErrorMessages"\n              [cols]="model.cols"\n              [formControlName]="model.id"\n              [id]="id"\n              [maxlength]="model.maxLength"\n              [minlength]="model.minLength"\n              [name]="model.name"\n              [ngClass]="getClass(\'element\', \'control\')"\n              [placeholder]="model.placeholder"\n              [readonly]="model.readOnly"\n              [required]="model.required"\n              [rows]="model.rows"\n              [spellcheck]="model.spellCheck"\n              [tabindex]="model.tabIndex"\n              [wrap]="model.wrap"\n              (blur)="onBlur($event)"\n              (change)="onChange($event)"\n              (focus)="onFocus($event)"></textarea>\n\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.Default}]}],C.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},C.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}]};var b=function(e){function n(n,o,r){var a=e.call(this,n,o)||this;return a.layoutService=n,a.validationService=o,a.config=r,a.blur=new t.EventEmitter,a.change=new t.EventEmitter,a.focus=new t.EventEmitter,a}return c(n,e),n}(o.DynamicFormControlComponent);b.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-timepicker",template:"<ng-container [formGroup]=\"group\">\n\n    <ngb-timepicker [id]=\"id\"\n                    [formControlName]=\"model.id\"\n                    [hourStep]=\"model.getAdditional('hourStep', config['hourStep'])\"\n                    [meridian]=\"model.meridian\"\n                    [minuteStep]=\"model.getAdditional('minuteStep', config['minuteStep'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [seconds]=\"model.showSeconds\"\n                    [secondStep]=\"model.getAdditional('secondStep', config['secondStep'])\"\n                    [size]=\"model.getAdditional('size', config['size'])\"\n                    [spinners]=\"model.getAdditional('spinners', config['spinners'])\"></ngb-timepicker>\n\n</ng-container>\n",changeDetection:t.ChangeDetectionStrategy.OnPush}]}],b.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService},{type:n.NgbTimepickerConfig}]},b.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}],ngbTimePicker:[{type:t.ViewChild,args:[n.NgbTimepicker,{static:!0}]}]};var D=function(e){function n(n,o,r,a,i,l){var c=e.call(this,n,o,r,a,i,l)||this;return c.changeDetectorRef=n,c.componentFactoryResolver=o,c.layoutService=r,c.validationService=a,c.componentService=i,c.relationService=l,c.klass="",c.asBootstrapFormGroup=!0,c.context=null,c.blur=new t.EventEmitter,c.change=new t.EventEmitter,c.focus=new t.EventEmitter,c.customEvent=new t.EventEmitter,c}return c(n,e),Object.defineProperty(n.prototype,"componentType",{get:function(){return this.componentService.getCustomComponentType(this.model)||E(this.model)},enumerable:!1,configurable:!0}),n}(o.DynamicFormControlContainerComponent);function E(e){switch(e.type){case o.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:return O;case o.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:return s;case o.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:return u;case o.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:return e.inline?p:m;case o.DYNAMIC_FORM_CONTROL_TYPE_GROUP:return d;case o.DYNAMIC_FORM_CONTROL_TYPE_INPUT:return g;case o.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:return y;case o.DYNAMIC_FORM_CONTROL_TYPE_RATING:return v;case o.DYNAMIC_FORM_CONTROL_TYPE_SELECT:return f;case o.DYNAMIC_FORM_CONTROL_TYPE_SWITCH:return h;case o.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:return C;case o.DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:return b;default:return null}}D.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-form-control",template:"<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <div [ngClass]=\"getClass('grid', 'control')\">\n\n        <ng-container #componentViewContainer></ng-container>\n\n        <small *ngIf=\"hasHint\" class=\"text-muted\" [innerHTML]=\"hint\" [ngClass]=\"getClass('element', 'hint')\"></small>\n\n        <div *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n            <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message }}</small>\n        </div>\n\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n",changeDetection:t.ChangeDetectionStrategy.OnPush}]}],D.ctorParameters=function(){return[{type:t.ChangeDetectorRef},{type:t.ComponentFactoryResolver},{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService},{type:o.DynamicFormComponentService},{type:o.DynamicFormRelationService}]},D.propDecorators={contentTemplateList:[{type:t.ContentChildren,args:[o.DynamicTemplateDirective]}],klass:[{type:t.HostBinding,args:["class"]}],asBootstrapFormGroup:[{type:t.Input}],context:[{type:t.Input}],group:[{type:t.Input}],hostClass:[{type:t.Input}],inputTemplateList:[{type:t.Input,args:["templates"]}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}],customEvent:[{type:t.Output,args:["ngbEvent"]}],componentViewContainerRef:[{type:t.ViewChild,args:["componentViewContainer",{read:t.ViewContainerRef,static:!0}]}]};var O=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.layoutService=n,r.validationService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.customEvent=new t.EventEmitter,r.focus=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormArrayComponent);O.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-form-array",template:'<ng-container [formGroup]="group">\n\n    <div [formArrayName]="model.id" [id]="id" [ngClass]="getClass(\'element\', \'control\')">\n\n        <div *ngFor="let groupModel of model.groups; let idx = index" role="group"\n             [formGroupName]="idx" [ngClass]="[getClass(\'element\', \'group\'), getClass(\'grid\', \'group\')]">\n\n            <ng-container *ngTemplateOutlet="startTemplate?.templateRef; context: groupModel"></ng-container>\n\n            <dynamic-ng-bootstrap-form-control *ngFor="let _model of groupModel.group"\n                                               [context]="groupModel"\n                                               [group]="array.at(idx)"\n                                               [hidden]="_model.hidden"\n                                               [layout]="formLayout"\n                                               [model]="_model"\n                                               [templates]="templates"\n                                               [hostClass]="[getClass(\'element\',\'children\'), getClass(\'grid\',\'children\')]"\n                                               (blur)="onBlur($event)"\n                                               (change)="onChange($event)"\n                                               (focus)="onFocus($event)"\n                                               (ngbEvent)="onCustomEvent($event, null, true)"></dynamic-ng-bootstrap-form-control>\n\n            <ng-container *ngTemplateOutlet="endTemplate?.templateRef; context: groupModel"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n'}]}],O.ctorParameters=function(){return[{type:o.DynamicFormLayoutService},{type:o.DynamicFormValidationService}]},O.propDecorators={formLayout:[{type:t.Input}],group:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],templates:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],customEvent:[{type:t.Output}],focus:[{type:t.Output}],components:[{type:t.ViewChildren,args:[t.forwardRef((function(){return D}))]}]};var I=function(e){function n(n,o){var r=e.call(this,n,o)||this;return r.changeDetectorRef=n,r.componentService=o,r.blur=new t.EventEmitter,r.change=new t.EventEmitter,r.focus=new t.EventEmitter,r.ngbEvent=new t.EventEmitter,r}return c(n,e),n}(o.DynamicFormComponent);I.decorators=[{type:t.Component,args:[{selector:"dynamic-ng-bootstrap-form",template:'<dynamic-ng-bootstrap-form-control *ngFor="let controlModel of model; trackBy: trackByFn"\n                                   [group]="group"\n                                   [hidden]="controlModel.hidden"\n                                   [layout]="layout"\n                                   [model]="controlModel"\n                                   [templates]="templates"\n                                   (blur)="onBlur($event)"\n                                   (change)="onChange($event)"\n                                   (focus)="onFocus($event)"\n                                   (ngbEvent)="onCustomEvent($event, ngbEvent)"></dynamic-ng-bootstrap-form-control>\n',changeDetection:t.ChangeDetectionStrategy.OnPush}]}],I.ctorParameters=function(){return[{type:t.ChangeDetectorRef},{type:o.DynamicFormComponentService}]},I.propDecorators={group:[{type:t.Input}],model:[{type:t.Input}],layout:[{type:t.Input}],blur:[{type:t.Output}],change:[{type:t.Output}],focus:[{type:t.Output}],ngbEvent:[{type:t.Output}],templates:[{type:t.ContentChildren,args:[o.DynamicTemplateDirective]}],components:[{type:t.ViewChildren,args:[D]}]};var F=function(){};F.decorators=[{type:t.NgModule,args:[{imports:[r.CommonModule,a.ReactiveFormsModule,n.NgbButtonsModule,n.NgbDatepickerModule,n.NgbRatingModule,n.NgbTimepickerModule,i.TextMaskModule,o.DynamicFormsCoreModule],declarations:[p,s,u,m,O,I,D,d,g,y,v,f,h,C,b],entryComponents:[p,s,u,m,O,d,g,y,v,f,h,C,b],exports:[o.DynamicFormsCoreModule,p,s,u,m,O,I,D,d,g,y,v,f,h,C,b]}]}],e.DynamicFormsNGBootstrapUIModule=F,e.DynamicNGBootstrapCalendarComponent=p,e.DynamicNGBootstrapCheckboxComponent=s,e.DynamicNGBootstrapCheckboxGroupComponent=u,e.DynamicNGBootstrapDatePickerComponent=m,e.DynamicNGBootstrapFormArrayComponent=O,e.DynamicNGBootstrapFormComponent=I,e.DynamicNGBootstrapFormControlContainerComponent=D,e.DynamicNGBootstrapFormGroupComponent=d,e.DynamicNGBootstrapInputComponent=g,e.DynamicNGBootstrapRadioGroupComponent=y,e.DynamicNGBootstrapRatingComponent=v,e.DynamicNGBootstrapSelectComponent=f,e.DynamicNGBootstrapSwitchComponent=h,e.DynamicNGBootstrapTextAreaComponent=C,e.DynamicNGBootstrapTimePickerComponent=b,e.ngBootstrapUIFormControlMapFn=E,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ui-ng-bootstrap.umd.min.js.map