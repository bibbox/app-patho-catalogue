import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicSelectModel } from "@ng-dynamic-forms/core";
export class DynamicNGBootstrapSelectComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSelectComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-select",
                template: "<ng-container [formGroup]=\"group\">\n\n    <select class=\"form-control\"\n            [class.is-invalid]=\"showErrorMessages\"\n            [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"id\"\n            [name]=\"model.name\"\n            [ngClass]=\"getClass('element', 'control')\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapSelectComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapSelectComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1uZy1ib290c3RyYXAtc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWR5bmFtaWMtZm9ybXMvdWktbmctYm9vdHN0cmFwL3NyYy9saWIvc2VsZWN0L2R5bmFtaWMtbmctYm9vdHN0cmFwLXNlbGVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUNILDJCQUEyQixFQUUzQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLGtCQUFrQixFQUNyQixNQUFNLHdCQUF3QixDQUFDO0FBT2hDLE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSwyQkFBMkI7SUFXOUUsWUFBc0IsYUFBdUMsRUFDdkMsaUJBQStDO1FBRWpFLEtBQUssQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUh0QixrQkFBYSxHQUFiLGFBQWEsQ0FBMEI7UUFDdkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUE4QjtRQUwzRCxTQUFJLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9DLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU14RCxDQUFDOzs7WUFwQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSw2QkFBNkI7Z0JBQ3ZDLG94QkFBMkQ7Z0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxPQUFPO2FBQ25EOzs7WUFURyx3QkFBd0I7WUFDeEIsNEJBQTRCOzs7eUJBVzNCLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUs7bUJBRUwsTUFBTTtxQkFDTixNQUFNO29CQUNOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQge1xuICAgIER5bmFtaWNGb3JtQ29udHJvbENvbXBvbmVudCwgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0LFxuICAgIER5bmFtaWNGb3JtTGF5b3V0LFxuICAgIER5bmFtaWNGb3JtTGF5b3V0U2VydmljZSxcbiAgICBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgIER5bmFtaWNTZWxlY3RNb2RlbFxufSBmcm9tIFwiQG5nLWR5bmFtaWMtZm9ybXMvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJkeW5hbWljLW5nLWJvb3RzdHJhcC1zZWxlY3RcIixcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2R5bmFtaWMtbmctYm9vdHN0cmFwLXNlbGVjdC5jb21wb25lbnQuaHRtbFwiLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljTkdCb290c3RyYXBTZWxlY3RDb21wb25lbnQgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnQge1xuXG4gICAgQElucHV0KCkgZm9ybUxheW91dDogRHluYW1pY0Zvcm1MYXlvdXQ7XG4gICAgQElucHV0KCkgZ3JvdXA6IEZvcm1Hcm91cDtcbiAgICBASW5wdXQoKSBsYXlvdXQ6IER5bmFtaWNGb3JtQ29udHJvbExheW91dDtcbiAgICBASW5wdXQoKSBtb2RlbDogRHluYW1pY1NlbGVjdE1vZGVsPHN0cmluZz47XG5cbiAgICBAT3V0cHV0KCkgYmx1cjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgQE91dHB1dCgpIGZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsYXlvdXRTZXJ2aWNlOiBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZhbGlkYXRpb25TZXJ2aWNlOiBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlKSB7XG5cbiAgICAgICAgc3VwZXIobGF5b3V0U2VydmljZSwgdmFsaWRhdGlvblNlcnZpY2UpO1xuICAgIH1cbn1cbiJdfQ==