import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, ViewChildren, forwardRef, ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, HostBinding, ViewContainerRef, NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { NgbDatepickerConfig, NgbDatepicker, NgbRatingConfig, NgbRating, NgbTimepickerConfig, NgbTimepicker, NgbButtonsModule, NgbDatepickerModule, NgbRatingModule, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicFormGroupComponent, DynamicFormControlContainerComponent, DynamicFormComponentService, DynamicFormRelationService, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_RATING, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayComponent, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';
import { CommonModule } from '@angular/common';
import { TextMaskModule } from 'angular2-text-mask';

class DynamicNGBootstrapCalendarComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-calendar",
                template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapCalendarComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbDatepickerConfig }
];
DynamicNGBootstrapCalendarComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ngbCalendar: [{ type: ViewChild, args: [NgbDatepicker, { static: true },] }]
};

class DynamicNGBootstrapCheckboxComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-checkbox",
                template: "<div [formGroup]=\"group\" class=\"form-check\" [class.disabled]=\"model.disabled\">\n\n    <label class=\"form-check-label\">\n\n        <input type=\"checkbox\" class=\"form-check-input\"\n               [checked]=\"model.checked\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [indeterminate]=\"model.indeterminate\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [required]=\"model.required\"\n               [tabindex]=\"model.tabIndex\"\n               [value]=\"model.value\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/><span [innerHTML]=\"model.label\"\n                                                [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></span>\n    </label>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapCheckboxComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapCheckboxComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapCheckboxGroupComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
    getCheckboxId(model) {
        return this.layoutService.getElementId(model);
    }
    onCheckboxChange($event, model) {
        this.onChange($event);
        model.value = $event.target.checked;
    }
}
DynamicNGBootstrapCheckboxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-checkbox-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"\n         [formGroupName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n        <label *ngFor=\"let checkboxModel of model.group\" ngbButtonLabel\n               [hidden]=\"checkboxModel.hidden\"\n               [ngClass]=\"getClass('element', 'control', checkboxModel)\">\n\n            <input type=\"checkbox\" ngbButton\n                   [checked]=\"checkboxModel.checked\"\n                   [formControlName]=\"checkboxModel.id\"\n                   [id]=\"getCheckboxId(checkboxModel)\"\n                   [name]=\"checkboxModel.name\"\n                   [required]=\"checkboxModel.required\"\n                   [tabindex]=\"checkboxModel.tabIndex\"\n                   [value]=\"checkboxModel.value\"\n                   (blur)=\"onBlur($event)\"\n                   (change)=\"onCheckboxChange($event, checkboxModel)\"\n                   (focus)=\"onFocus($event)\"/><span [ngClass]=\"getClass('element', 'label', checkboxModel)\"\n                                                    [innerHTML]=\"checkboxModel.label\"></span></label>\n    </div>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapCheckboxGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapCheckboxGroupComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapDatePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-datepicker",
                template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapDatePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbDatepickerConfig }
];
DynamicNGBootstrapDatePickerComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    ngbDatePicker: [{ type: ViewChild, args: [NgbDatepicker,] }]
};

class DynamicNGBootstrapFormGroupComponent extends DynamicFormGroupComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapFormGroupComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-form-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\" [formGroupName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element','control')\">\n\n        <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of model.group\"\n                                           [asBootstrapFormGroup]=\"true\"\n                                           [group]=\"control\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"formLayout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n    </div>\n\n</ng-container>\n"
            },] }
];
DynamicNGBootstrapFormGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapFormGroupComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    templates: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    components: [{ type: ViewChildren, args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent),] }]
};

class DynamicNGBootstrapInputComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapInputComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-input",
                template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.form-control]=\"model.inputType !== 'file'\"\n           [class.form-control-file]=\"model.inputType === 'file'\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n\n    </datalist>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapInputComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapInputComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapRadioGroupComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-radio-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div ngbRadioGroup class=\"btn-group btn-group-toggle\" role=\"radiogroup\"\n         [formControlName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\"\n         [tabindex]=\"model.tabIndex\"\n         (change)=\"onChange($event)\">\n\n        <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n        <label *ngFor=\"let option of model.options$ | async\" ngbButtonLabel\n               [ngClass]=\"[getClass('element', 'option'), getClass('grid', 'option')]\">\n\n            <input type=\"radio\" ngbButton\n                   [disabled]=\"option.disabled\"\n                   [name]=\"model.name\"\n                   [value]=\"option.value\"\n                   (blur)=\"onBlur($event)\"\n                   (focus)=\"onFocus($event)\"/><span [innerHTML]=\"option.label\"></span>\n        </label>\n\n    </div>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapRadioGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapRadioGroupComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapRatingComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapRatingComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-rating",
                template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-rating [formControlName]=\"model.id\"\n                [id]=\"id\"\n                [max]=\"model.max\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [resettable]=\"model.getAdditional('resettable', config['resettable'])\"\n                (hover)=\"onCustomEvent($event, 'hover')\"\n                (leave)=\"onCustomEvent($event, 'leave')\"\n                (rateChange)=\"onChange($event)\"></ngb-rating>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapRatingComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbRatingConfig }
];
DynamicNGBootstrapRatingComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    ngbRating: [{ type: ViewChild, args: [NgbRating, { static: true },] }]
};

class DynamicNGBootstrapSelectComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSelectComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-select",
                template: "<ng-container [formGroup]=\"group\">\n\n    <select class=\"form-control\"\n            [class.is-invalid]=\"showErrorMessages\"\n            [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"id\"\n            [name]=\"model.name\"\n            [ngClass]=\"getClass('element', 'control')\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapSelectComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapSelectComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapSwitchComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-switch",
                template: "<div [formGroup]=\"group\" class=\"custom-control custom-switch\">\n\n    <input type=\"checkbox\" class=\"custom-control-input\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [required]=\"model.required\"\n           [tabindex]=\"model.tabIndex\"\n           [value]=\"model.value\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <label class=\"custom-control-label\" [for]=\"id\" [innerHTML]=\"model.label\"></label>\n\n</div>\n\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapSwitchComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapSwitchComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapTextAreaComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapTextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-textarea",
                template: "<ng-container [formGroup]=\"group\">\n\n    <textarea class=\"form-control\"\n              [class.is-invalid]=\"showErrorMessages\"\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"id\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.Default
            },] }
];
DynamicNGBootstrapTextAreaComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapTextAreaComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};

class DynamicNGBootstrapTimePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-timepicker",
                template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-timepicker [id]=\"id\"\n                    [formControlName]=\"model.id\"\n                    [hourStep]=\"model.getAdditional('hourStep', config['hourStep'])\"\n                    [meridian]=\"model.meridian\"\n                    [minuteStep]=\"model.getAdditional('minuteStep', config['minuteStep'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [seconds]=\"model.showSeconds\"\n                    [secondStep]=\"model.getAdditional('secondStep', config['secondStep'])\"\n                    [size]=\"model.getAdditional('size', config['size'])\"\n                    [spinners]=\"model.getAdditional('spinners', config['spinners'])\"></ngb-timepicker>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapTimePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbTimepickerConfig }
];
DynamicNGBootstrapTimePickerComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ngbTimePicker: [{ type: ViewChild, args: [NgbTimepicker, { static: true },] }]
};

class DynamicNGBootstrapFormControlContainerComponent extends DynamicFormControlContainerComponent {
    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        super(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService);
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this.klass = "";
        this.asBootstrapFormGroup = true;
        this.context = null;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.customEvent = new EventEmitter();
    }
    get componentType() {
        return this.componentService.getCustomComponentType(this.model) || ngBootstrapUIFormControlMapFn(this.model);
    }
}
DynamicNGBootstrapFormControlContainerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-form-control",
                template: "<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <div [ngClass]=\"getClass('grid', 'control')\">\n\n        <ng-container #componentViewContainer></ng-container>\n\n        <small *ngIf=\"hasHint\" class=\"text-muted\" [innerHTML]=\"hint\" [ngClass]=\"getClass('element', 'hint')\"></small>\n\n        <div *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n            <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message }}</small>\n        </div>\n\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapFormControlContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: DynamicFormComponentService },
    { type: DynamicFormRelationService }
];
DynamicNGBootstrapFormControlContainerComponent.propDecorators = {
    contentTemplateList: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],
    klass: [{ type: HostBinding, args: ["class",] }],
    asBootstrapFormGroup: [{ type: Input }],
    context: [{ type: Input }],
    group: [{ type: Input }],
    hostClass: [{ type: Input }],
    inputTemplateList: [{ type: Input, args: ["templates",] }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    customEvent: [{ type: Output, args: ["ngbEvent",] }],
    componentViewContainerRef: [{ type: ViewChild, args: ["componentViewContainer", { read: ViewContainerRef, static: true },] }]
};
function ngBootstrapUIFormControlMapFn(model) {
    switch (model.type) {
        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
            return DynamicNGBootstrapFormArrayComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
            return DynamicNGBootstrapCheckboxComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            return DynamicNGBootstrapCheckboxGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
            const datePickerModel = model;
            return datePickerModel.inline ? DynamicNGBootstrapCalendarComponent : DynamicNGBootstrapDatePickerComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
            return DynamicNGBootstrapFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
            return DynamicNGBootstrapInputComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
            return DynamicNGBootstrapRadioGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RATING:
            return DynamicNGBootstrapRatingComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
            return DynamicNGBootstrapSelectComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
            return DynamicNGBootstrapSwitchComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
            return DynamicNGBootstrapTextAreaComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
            return DynamicNGBootstrapTimePickerComponent;
        default:
            return null;
    }
}

class DynamicNGBootstrapFormArrayComponent extends DynamicFormArrayComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapFormArrayComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-form-array",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of groupModel.group\"\n                                               [context]=\"groupModel\"\n                                               [group]=\"array.at(idx)\"\n                                               [hidden]=\"_model.hidden\"\n                                               [layout]=\"formLayout\"\n                                               [model]=\"_model\"\n                                               [templates]=\"templates\"\n                                               [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                               (blur)=\"onBlur($event)\"\n                                               (change)=\"onChange($event)\"\n                                               (focus)=\"onFocus($event)\"\n                                               (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n"
            },] }
];
DynamicNGBootstrapFormArrayComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapFormArrayComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    templates: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    components: [{ type: ViewChildren, args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent),] }]
};

class DynamicNGBootstrapFormComponent extends DynamicFormComponent {
    constructor(changeDetectorRef, componentService) {
        super(changeDetectorRef, componentService);
        this.changeDetectorRef = changeDetectorRef;
        this.componentService = componentService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ngbEvent = new EventEmitter();
    }
}
DynamicNGBootstrapFormComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-ng-bootstrap-form",
                template: "<dynamic-ng-bootstrap-form-control *ngFor=\"let controlModel of model; trackBy: trackByFn\"\n                                   [group]=\"group\"\n                                   [hidden]=\"controlModel.hidden\"\n                                   [layout]=\"layout\"\n                                   [model]=\"controlModel\"\n                                   [templates]=\"templates\"\n                                   (blur)=\"onBlur($event)\"\n                                   (change)=\"onChange($event)\"\n                                   (focus)=\"onFocus($event)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></dynamic-ng-bootstrap-form-control>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
DynamicNGBootstrapFormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DynamicFormComponentService }
];
DynamicNGBootstrapFormComponent.propDecorators = {
    group: [{ type: Input }],
    model: [{ type: Input }],
    layout: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ngbEvent: [{ type: Output }],
    templates: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],
    components: [{ type: ViewChildren, args: [DynamicNGBootstrapFormControlContainerComponent,] }]
};

class DynamicFormsNGBootstrapUIModule {
}
DynamicFormsNGBootstrapUIModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    NgbButtonsModule,
                    NgbDatepickerModule,
                    NgbRatingModule,
                    NgbTimepickerModule,
                    TextMaskModule,
                    DynamicFormsCoreModule
                ],
                declarations: [
                    DynamicNGBootstrapCalendarComponent,
                    DynamicNGBootstrapCheckboxComponent,
                    DynamicNGBootstrapCheckboxGroupComponent,
                    DynamicNGBootstrapDatePickerComponent,
                    DynamicNGBootstrapFormArrayComponent,
                    DynamicNGBootstrapFormComponent,
                    DynamicNGBootstrapFormControlContainerComponent,
                    DynamicNGBootstrapFormGroupComponent,
                    DynamicNGBootstrapInputComponent,
                    DynamicNGBootstrapRadioGroupComponent,
                    DynamicNGBootstrapRatingComponent,
                    DynamicNGBootstrapSelectComponent,
                    DynamicNGBootstrapSwitchComponent,
                    DynamicNGBootstrapTextAreaComponent,
                    DynamicNGBootstrapTimePickerComponent
                ],
                entryComponents: [
                    DynamicNGBootstrapCalendarComponent,
                    DynamicNGBootstrapCheckboxComponent,
                    DynamicNGBootstrapCheckboxGroupComponent,
                    DynamicNGBootstrapDatePickerComponent,
                    DynamicNGBootstrapFormArrayComponent,
                    DynamicNGBootstrapFormGroupComponent,
                    DynamicNGBootstrapInputComponent,
                    DynamicNGBootstrapRadioGroupComponent,
                    DynamicNGBootstrapRatingComponent,
                    DynamicNGBootstrapSelectComponent,
                    DynamicNGBootstrapSwitchComponent,
                    DynamicNGBootstrapTextAreaComponent,
                    DynamicNGBootstrapTimePickerComponent
                ],
                exports: [
                    DynamicFormsCoreModule,
                    DynamicNGBootstrapCalendarComponent,
                    DynamicNGBootstrapCheckboxComponent,
                    DynamicNGBootstrapCheckboxGroupComponent,
                    DynamicNGBootstrapDatePickerComponent,
                    DynamicNGBootstrapFormArrayComponent,
                    DynamicNGBootstrapFormComponent,
                    DynamicNGBootstrapFormControlContainerComponent,
                    DynamicNGBootstrapFormGroupComponent,
                    DynamicNGBootstrapInputComponent,
                    DynamicNGBootstrapRadioGroupComponent,
                    DynamicNGBootstrapRatingComponent,
                    DynamicNGBootstrapSelectComponent,
                    DynamicNGBootstrapSwitchComponent,
                    DynamicNGBootstrapTextAreaComponent,
                    DynamicNGBootstrapTimePickerComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { DynamicFormsNGBootstrapUIModule, DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent, ngBootstrapUIFormControlMapFn };
//# sourceMappingURL=ui-ng-bootstrap.js.map
