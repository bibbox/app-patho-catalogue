import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, ViewChildren, forwardRef, ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, HostBinding, ViewContainerRef, NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { NgbDatepickerConfig, NgbDatepicker, NgbRatingConfig, NgbRating, NgbTimepickerConfig, NgbTimepicker, NgbButtonsModule, NgbDatepickerModule, NgbRatingModule, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicFormGroupComponent, DynamicFormControlContainerComponent, DynamicFormComponentService, DynamicFormRelationService, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_RATING, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayComponent, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';
import { CommonModule } from '@angular/common';
import { TextMaskModule } from 'angular2-text-mask';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ng-dynamic-forms/core';
import * as ɵngcc2 from '@ng-bootstrap/ng-bootstrap';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from 'angular2-text-mask';

const _c0 = function (a0, a1) { return [a0, a1]; };
function DynamicNGBootstrapCheckboxGroupComponent_label_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 3);
    ɵngcc0.ɵɵelementStart(1, "input", 4);
    ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapCheckboxGroupComponent_label_2_Template_input_blur_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onBlur($event); })("change", function DynamicNGBootstrapCheckboxGroupComponent_label_2_Template_input_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const checkboxModel_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onCheckboxChange($event, checkboxModel_r1); })("focus", function DynamicNGBootstrapCheckboxGroupComponent_label_2_Template_input_focus_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "span", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const checkboxModel_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("hidden", checkboxModel_r1.hidden)("ngClass", ctx_r0.getClass("element", "control", checkboxModel_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("checked", checkboxModel_r1.checked)("formControlName", checkboxModel_r1.id)("id", ctx_r0.getCheckboxId(checkboxModel_r1))("name", checkboxModel_r1.name)("required", checkboxModel_r1.required)("tabindex", checkboxModel_r1.tabIndex)("value", checkboxModel_r1.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.getClass("element", "label", checkboxModel_r1))("innerHTML", checkboxModel_r1.label, ɵngcc0.ɵɵsanitizeHtml);
} }
function DynamicNGBootstrapDatePickerComponent_img_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 7);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("src", ctx_r1.model.toggleIcon, ɵngcc0.ɵɵsanitizeUrl);
} }
function DynamicNGBootstrapDatePickerComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.model.toggleLabel);
} }
function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "dynamic-ng-bootstrap-form-control", 3);
    ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onBlur($event); })("change", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onChange($event); })("focus", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); })("ngbEvent", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_ngbEvent_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onCustomEvent($event, null, true); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _model_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("asBootstrapFormGroup", true)("group", ctx_r0.control)("hidden", _model_r1.hidden)("layout", ctx_r0.formLayout)("model", _model_r1)("templates", ctx_r0.templates)("hostClass", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx_r0.getClass("element", "children"), ctx_r0.getClass("grid", "children")));
} }
function DynamicNGBootstrapInputComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelement(1, "span", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r0.model.prefix, ɵngcc0.ɵɵsanitizeHtml);
} }
function DynamicNGBootstrapInputComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelement(1, "span", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1.model.suffix, ɵngcc0.ɵɵsanitizeHtml);
} }
function DynamicNGBootstrapInputComponent_datalist_4_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "option", 10);
} if (rf & 2) {
    const option_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", option_r4);
} }
function DynamicNGBootstrapInputComponent_datalist_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "datalist", 8);
    ɵngcc0.ɵɵtemplate(1, DynamicNGBootstrapInputComponent_datalist_4_option_1_Template, 1, 1, "option", 9);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r2.model.listId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r2.model.list$));
} }
const _c1 = function (a0, a1) { return { mask: a0, showMask: a1 }; };
function DynamicNGBootstrapRadioGroupComponent_legend_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "legend", 4);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r0.model.legend, ɵngcc0.ɵɵsanitizeHtml);
} }
function DynamicNGBootstrapRadioGroupComponent_label_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "label", 5);
    ɵngcc0.ɵɵelementStart(1, "input", 6);
    ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapRadioGroupComponent_label_3_Template_input_blur_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onBlur($event); })("focus", function DynamicNGBootstrapRadioGroupComponent_label_3_Template_input_focus_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c0, ctx_r1.getClass("element", "option"), ctx_r1.getClass("grid", "option")));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", option_r2.disabled)("name", ctx_r1.model.name)("value", option_r2.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", option_r2.label, ɵngcc0.ɵɵsanitizeHtml);
} }
function DynamicNGBootstrapSelectComponent_option_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("disabled", option_r1.disabled)("ngValue", option_r1.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(option_r1.label);
} }
const _c2 = ["componentViewContainer"];
function DynamicNGBootstrapFormControlContainerComponent_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "label", 7);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("for", ctx_r0.id)("innerHTML", ctx_r0.model.label, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r0.getClass("element", "label"), ctx_r0.getClass("grid", "label")));
} }
function DynamicNGBootstrapFormControlContainerComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DynamicNGBootstrapFormControlContainerComponent_small_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "small", 8);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r3.hint, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ctx_r3.getClass("element", "hint"));
} }
function DynamicNGBootstrapFormControlContainerComponent_div_7_small_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const message_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(message_r7);
} }
function DynamicNGBootstrapFormControlContainerComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, DynamicNGBootstrapFormControlContainerComponent_div_7_small_1_Template, 2, 1, "small", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r4.getClass("element", "errors"), ctx_r4.getClass("grid", "errors")));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.errorMessages);
} }
function DynamicNGBootstrapFormControlContainerComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c3 = function (a0, a1, a2) { return [a0, a1, a2]; };
const _c4 = ["*"];
function DynamicNGBootstrapFormArrayComponent_div_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DynamicNGBootstrapFormArrayComponent_div_2_dynamic_ng_bootstrap_form_control_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "dynamic-ng-bootstrap-form-control", 6);
    ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapFormArrayComponent_div_2_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onBlur($event); })("change", function DynamicNGBootstrapFormArrayComponent_div_2_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onChange($event); })("focus", function DynamicNGBootstrapFormArrayComponent_div_2_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onFocus($event); })("ngbEvent", function DynamicNGBootstrapFormArrayComponent_div_2_dynamic_ng_bootstrap_form_control_2_Template_dynamic_ng_bootstrap_form_control_ngbEvent_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onCustomEvent($event, null, true); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _model_r6 = ctx.$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    const groupModel_r1 = ctx_r12.$implicit;
    const idx_r2 = ctx_r12.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("context", groupModel_r1)("group", ctx_r4.array.at(idx_r2))("hidden", _model_r6.hidden)("layout", ctx_r4.formLayout)("model", _model_r6)("templates", ctx_r4.templates)("hostClass", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx_r4.getClass("element", "children"), ctx_r4.getClass("grid", "children")));
} }
function DynamicNGBootstrapFormArrayComponent_div_2_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function DynamicNGBootstrapFormArrayComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, DynamicNGBootstrapFormArrayComponent_div_2_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormArrayComponent_div_2_dynamic_ng_bootstrap_form_control_2_Template, 1, 10, "dynamic-ng-bootstrap-form-control", 5);
    ɵngcc0.ɵɵtemplate(3, DynamicNGBootstrapFormArrayComponent_div_2_ng_container_3_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const groupModel_r1 = ctx.$implicit;
    const idx_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formGroupName", idx_r2)("ngClass", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx_r0.getClass("element", "group"), ctx_r0.getClass("grid", "group")));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.startTemplate == null ? null : ctx_r0.startTemplate.templateRef)("ngTemplateOutletContext", groupModel_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", groupModel_r1.group);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.endTemplate == null ? null : ctx_r0.endTemplate.templateRef)("ngTemplateOutletContext", groupModel_r1);
} }
function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "dynamic-ng-bootstrap-form-control", 1);
    ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onBlur($event); })("change", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onChange($event); })("focus", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); })("ngbEvent", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_ngbEvent_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onCustomEvent($event, ctx_r6.ngbEvent); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const controlModel_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("group", ctx_r0.group)("hidden", controlModel_r1.hidden)("layout", ctx_r0.layout)("model", controlModel_r1)("templates", ctx_r0.templates);
} }
class DynamicNGBootstrapCalendarComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCalendarComponent.ɵfac = function DynamicNGBootstrapCalendarComponent_Factory(t) { return new (t || DynamicNGBootstrapCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbDatepickerConfig)); };
DynamicNGBootstrapCalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapCalendarComponent, selectors: [["dynamic-ng-bootstrap-calendar"]], viewQuery: function DynamicNGBootstrapCalendarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(NgbDatepicker, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbCalendar = _t.first);
    } }, inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 13, consts: [[3, "formGroup"], [3, "displayMonths", "firstDayOfWeek", "formControlName", "id", "maxDate", "minDate", "navigation", "ngClass", "outsideDays", "showWeekdays", "showWeekNumbers", "startDate", "select"]], template: function DynamicNGBootstrapCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "ngb-datepicker", 1);
        ɵngcc0.ɵɵlistener("select", function DynamicNGBootstrapCalendarComponent_Template_ngb_datepicker_select_1_listener($event) { return ctx.onChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayMonths", ctx.model.getAdditional("displayMonths", ctx.config["displayMonths"]))("firstDayOfWeek", ctx.model.getAdditional("firstDayOfWeek", ctx.config["firstDayOfWeek"]))("formControlName", ctx.model.id)("id", ctx.id)("maxDate", ctx.model.max)("minDate", ctx.model.min)("navigation", ctx.model.getAdditional("navigation", ctx.config["navigation"]))("ngClass", ctx.getClass("element", "control"))("outsideDays", ctx.model.getAdditional("outsideDays", ctx.config["outsideDays"]))("showWeekdays", ctx.model.getAdditional("showWeekdays", ctx.config["showWeekdays"]))("showWeekNumbers", ctx.model.getAdditional("showWeekNumbers", ctx.config["showWeekNumbers"]))("startDate", ctx.model.focusedDate);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbDatepicker, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapCalendarComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbDatepickerConfig }
];
DynamicNGBootstrapCalendarComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ngbCalendar: [{ type: ViewChild, args: [NgbDatepicker, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapCalendarComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-calendar",
                template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-datepicker [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n                    [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n                    [formControlName]=\"model.id\"\n                    [id]=\"id\"\n                    [maxDate]=\"model.max\"\n                    [minDate]=\"model.min\"\n                    [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n                    [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n                    [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n                    [startDate]=\"model.focusedDate\"\n                    (select)=\"onChange($event)\"></ngb-datepicker>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbDatepickerConfig }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], ngbCalendar: [{
            type: ViewChild,
            args: [NgbDatepicker, { static: true }]
        }] }); })();

class DynamicNGBootstrapCheckboxComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapCheckboxComponent.ɵfac = function DynamicNGBootstrapCheckboxComponent_Factory(t) { return new (t || DynamicNGBootstrapCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapCheckboxComponent, selectors: [["dynamic-ng-bootstrap-checkbox"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 19, consts: [[1, "form-check", 3, "formGroup"], [1, "form-check-label"], ["type", "checkbox", 1, "form-check-input", 3, "checked", "formControlName", "id", "indeterminate", "name", "ngClass", "required", "tabindex", "value", "blur", "change", "focus"], [3, "innerHTML", "ngClass"]], template: function DynamicNGBootstrapCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "label", 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapCheckboxComponent_Template_input_blur_2_listener($event) { return ctx.onBlur($event); })("change", function DynamicNGBootstrapCheckboxComponent_Template_input_change_2_listener($event) { return ctx.onChange($event); })("focus", function DynamicNGBootstrapCheckboxComponent_Template_input_focus_2_listener($event) { return ctx.onFocus($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("disabled", ctx.model.disabled);
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showErrorMessages);
        ɵngcc0.ɵɵproperty("checked", ctx.model.checked)("formControlName", ctx.model.id)("id", ctx.id)("indeterminate", ctx.model.indeterminate)("name", ctx.model.name)("ngClass", ctx.getClass("element", "control"))("required", ctx.model.required)("tabindex", ctx.model.tabIndex)("value", ctx.model.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("innerHTML", ctx.model.label, ɵngcc0.ɵɵsanitizeHtml)("ngClass", ɵngcc0.ɵɵpureFunction2(16, _c0, ctx.getClass("element", "label"), ctx.getClass("grid", "label")));
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.CheckboxRequiredValidator, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2 });
DynamicNGBootstrapCheckboxComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapCheckboxComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapCheckboxComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-checkbox",
                template: "<div [formGroup]=\"group\" class=\"form-check\" [class.disabled]=\"model.disabled\">\n\n    <label class=\"form-check-label\">\n\n        <input type=\"checkbox\" class=\"form-check-input\"\n               [checked]=\"model.checked\"\n               [class.is-invalid]=\"showErrorMessages\"\n               [formControlName]=\"model.id\"\n               [id]=\"id\"\n               [indeterminate]=\"model.indeterminate\"\n               [name]=\"model.name\"\n               [ngClass]=\"getClass('element', 'control')\"\n               [required]=\"model.required\"\n               [tabindex]=\"model.tabIndex\"\n               [value]=\"model.value\"\n               (blur)=\"onBlur($event)\"\n               (change)=\"onChange($event)\"\n               (focus)=\"onFocus($event)\"/><span [innerHTML]=\"model.label\"\n                                                [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></span>\n    </label>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapCheckboxGroupComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
    getCheckboxId(model) {
        return this.layoutService.getElementId(model);
    }
    onCheckboxChange($event, model) {
        this.onChange($event);
        model.value = $event.target.checked;
    }
}
DynamicNGBootstrapCheckboxGroupComponent.ɵfac = function DynamicNGBootstrapCheckboxGroupComponent_Factory(t) { return new (t || DynamicNGBootstrapCheckboxGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapCheckboxGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapCheckboxGroupComponent, selectors: [["dynamic-ng-bootstrap-checkbox-group"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 5, consts: [[3, "formGroup"], ["data-toggle", "buttons", 1, "btn-group", "btn-group-toggle", 3, "formGroupName", "id", "ngClass"], ["ngbButtonLabel", "", 3, "hidden", "ngClass", 4, "ngFor", "ngForOf"], ["ngbButtonLabel", "", 3, "hidden", "ngClass"], ["type", "checkbox", "ngbButton", "", 3, "checked", "formControlName", "id", "name", "required", "tabindex", "value", "blur", "change", "focus"], [3, "ngClass", "innerHTML"]], template: function DynamicNGBootstrapCheckboxGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapCheckboxGroupComponent_label_2_Template, 3, 11, "label", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroupName", ctx.model.id)("id", ctx.id)("ngClass", ctx.getClass("element", "control"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.model.group);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.FormGroupName, ɵngcc4.NgClass, ɵngcc4.NgForOf, ɵngcc2.NgbButtonLabel, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.CheckboxRequiredValidator, ɵngcc2.NgbCheckBox, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapCheckboxGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapCheckboxGroupComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapCheckboxGroupComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-checkbox-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"\n         [formGroupName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n        <label *ngFor=\"let checkboxModel of model.group\" ngbButtonLabel\n               [hidden]=\"checkboxModel.hidden\"\n               [ngClass]=\"getClass('element', 'control', checkboxModel)\">\n\n            <input type=\"checkbox\" ngbButton\n                   [checked]=\"checkboxModel.checked\"\n                   [formControlName]=\"checkboxModel.id\"\n                   [id]=\"getCheckboxId(checkboxModel)\"\n                   [name]=\"checkboxModel.name\"\n                   [required]=\"checkboxModel.required\"\n                   [tabindex]=\"checkboxModel.tabIndex\"\n                   [value]=\"checkboxModel.value\"\n                   (blur)=\"onBlur($event)\"\n                   (change)=\"onCheckboxChange($event, checkboxModel)\"\n                   (focus)=\"onFocus($event)\"/><span [ngClass]=\"getClass('element', 'label', checkboxModel)\"\n                                                    [innerHTML]=\"checkboxModel.label\"></span></label>\n    </div>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapDatePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapDatePickerComponent.ɵfac = function DynamicNGBootstrapDatePickerComponent_Factory(t) { return new (t || DynamicNGBootstrapDatePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbDatepickerConfig)); };
DynamicNGBootstrapDatePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapDatePickerComponent, selectors: [["dynamic-ng-bootstrap-datepicker"]], viewQuery: function DynamicNGBootstrapDatePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(NgbDatepicker, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbDatePicker = _t.first);
    } }, inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 20, consts: [[1, "input-group", 3, "formGroup"], ["ngbDatepicker", "", 1, "form-control", 3, "displayMonths", "firstDayOfWeek", "formControlName", "id", "maxDate", "minDate", "name", "navigation", "ngClass", "outsideDays", "placeholder", "placement", "showWeekdays", "showWeekNumbers", "startDate", "blur", "dateSelect", "closed", "change", "focus"], ["datepicker", "ngbDatepicker"], [1, "input-group-append"], ["type", "button", 1, "btn", "btn-outline-secondary", 3, "click"], ["style", "cursor: pointer;", 3, "src", 4, "ngIf"], [4, "ngIf"], [2, "cursor", "pointer", 3, "src"]], template: function DynamicNGBootstrapDatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        const _r3 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapDatePickerComponent_Template_input_blur_1_listener($event) { return ctx.onBlur($event); })("dateSelect", function DynamicNGBootstrapDatePickerComponent_Template_input_dateSelect_1_listener($event) { return ctx.onCustomEvent($event, "dateSelect"); })("closed", function DynamicNGBootstrapDatePickerComponent_Template_input_closed_1_listener($event) { return ctx.onCustomEvent($event, "closed"); })("change", function DynamicNGBootstrapDatePickerComponent_Template_input_change_1_listener($event) { return ctx.onChange($event); })("focus", function DynamicNGBootstrapDatePickerComponent_Template_input_focus_1_listener($event) { return ctx.onFocus($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "button", 4);
        ɵngcc0.ɵɵlistener("click", function DynamicNGBootstrapDatePickerComponent_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r3); const _r0 = ɵngcc0.ɵɵreference(2); return _r0.toggle(); });
        ɵngcc0.ɵɵtemplate(5, DynamicNGBootstrapDatePickerComponent_img_5_Template, 1, 1, "img", 5);
        ɵngcc0.ɵɵtemplate(6, DynamicNGBootstrapDatePickerComponent_span_6_Template, 2, 1, "span", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showErrorMessages);
        ɵngcc0.ɵɵproperty("displayMonths", ctx.model.getAdditional("displayMonths", ctx.config["displayMonths"]))("firstDayOfWeek", ctx.model.getAdditional("firstDayOfWeek", ctx.config["firstDayOfWeek"]))("formControlName", ctx.model.id)("id", ctx.id)("maxDate", ctx.model.max)("minDate", ctx.model.min)("name", ctx.model.name)("navigation", ctx.model.getAdditional("navigation", ctx.config["navigation"]))("ngClass", ctx.getClass("element", "control"))("outsideDays", ctx.model.getAdditional("outsideDays", ctx.config["outsideDays"]))("placeholder", ctx.model.placeholder)("placement", ctx.model.getAdditional("placement", "bottom-left"))("showWeekdays", ctx.model.getAdditional("showWeekdays", ctx.config["showWeekdays"]))("showWeekNumbers", ctx.model.getAdditional("showWeekNumbers", ctx.config["showWeekNumbers"]))("startDate", ctx.model.focusedDate);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.toggleIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.toggleLabel);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbInputDatepicker, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass, ɵngcc4.NgIf], encapsulation: 2 });
DynamicNGBootstrapDatePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbDatepickerConfig }
];
DynamicNGBootstrapDatePickerComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    ngbDatePicker: [{ type: ViewChild, args: [NgbDatepicker,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapDatePickerComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-datepicker",
                template: "<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onCustomEvent($event, 'dateSelect')\"\n           (closed)=\"onCustomEvent($event, 'closed')\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"datepicker.toggle()\">\n\n            <img *ngIf=\"model.toggleIcon\" [src]=\"model.toggleIcon\" style=\"cursor: pointer;\"/>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbDatepickerConfig }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], customEvent: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], ngbDatePicker: [{
            type: ViewChild,
            args: [NgbDatepicker]
        }] }); })();

class DynamicNGBootstrapFormGroupComponent extends DynamicFormGroupComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapFormGroupComponent.ɵfac = function DynamicNGBootstrapFormGroupComponent_Factory(t) { return new (t || DynamicNGBootstrapFormGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapFormGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormGroupComponent, selectors: [["dynamic-ng-bootstrap-form-group"]], viewQuery: function DynamicNGBootstrapFormGroupComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DynamicNGBootstrapFormControlContainerComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.components = _t);
    } }, inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model", templates: "templates" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 5, consts: [[3, "formGroup"], ["role", "group", 3, "formGroupName", "id", "ngClass"], [3, "asBootstrapFormGroup", "group", "hidden", "layout", "model", "templates", "hostClass", "blur", "change", "focus", "ngbEvent", 4, "ngFor", "ngForOf"], [3, "asBootstrapFormGroup", "group", "hidden", "layout", "model", "templates", "hostClass", "blur", "change", "focus", "ngbEvent"]], template: function DynamicNGBootstrapFormGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_2_Template, 1, 10, "dynamic-ng-bootstrap-form-control", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroupName", ctx.model.id)("id", ctx.id)("ngClass", ctx.getClass("element", "control"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.model.group);
    } }, directives: function () { return [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.FormGroupName, ɵngcc4.NgClass, ɵngcc4.NgForOf, DynamicNGBootstrapFormControlContainerComponent]; }, encapsulation: 2 });
DynamicNGBootstrapFormGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapFormGroupComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    templates: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    components: [{ type: ViewChildren, args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent),] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormGroupComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-form-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\" [formGroupName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element','control')\">\n\n        <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of model.group\"\n                                           [asBootstrapFormGroup]=\"true\"\n                                           [group]=\"control\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"formLayout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n    </div>\n\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], customEvent: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], templates: [{
            type: Input
        }], components: [{
            type: ViewChildren,
            args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent)]
        }] }); })();

class DynamicNGBootstrapInputComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapInputComponent.ɵfac = function DynamicNGBootstrapInputComponent_Factory(t) { return new (t || DynamicNGBootstrapInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapInputComponent, selectors: [["dynamic-ng-bootstrap-input"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 37, consts: [[3, "formGroup"], ["class", "input-group-prepend", 4, "ngIf"], [3, "autocomplete", "autofocus", "dynamicList", "formControlName", "id", "maxlength", "minlength", "name", "ngClass", "pattern", "placeholder", "readonly", "required", "spellcheck", "tabindex", "textMask", "type", "blur", "change", "focus"], ["class", "input-group-append", 4, "ngIf"], [3, "id", 4, "ngIf"], [1, "input-group-prepend"], [1, "input-group-text", 3, "innerHTML"], [1, "input-group-append"], [3, "id"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]], template: function DynamicNGBootstrapInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DynamicNGBootstrapInputComponent_div_1_Template, 2, 1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapInputComponent_Template_input_blur_2_listener($event) { return ctx.onBlur($event); })("change", function DynamicNGBootstrapInputComponent_Template_input_change_2_listener($event) { return ctx.onChange($event); })("focus", function DynamicNGBootstrapInputComponent_Template_input_focus_2_listener($event) { return ctx.onFocus($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, DynamicNGBootstrapInputComponent_div_3_Template, 2, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapInputComponent_datalist_4_Template, 3, 4, "datalist", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("input-group", ctx.model.prefix || ctx.model.suffix);
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.prefix);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("form-control", ctx.model.inputType !== "file")("form-control-file", ctx.model.inputType === "file")("is-invalid", ctx.showErrorMessages);
        ɵngcc0.ɵɵproperty("autocomplete", ctx.model.autoComplete)("autofocus", ctx.model.autoFocus)("dynamicList", ctx.model.listId)("formControlName", ctx.model.id)("id", ctx.id)("maxlength", ctx.model.maxLength)("minlength", ctx.model.minLength)("name", ctx.model.name)("ngClass", ctx.getClass("element", "control"))("pattern", ctx.model.pattern)("placeholder", ctx.model.placeholder)("readonly", ctx.model.readOnly)("required", ctx.model.required)("spellcheck", ctx.model.spellCheck)("tabindex", ctx.model.tabIndex)("textMask", ɵngcc0.ɵɵpureFunction2(34, _c1, ctx.model.mask || false, ctx.model.mask && !ctx.model.placeholder))("type", ctx.model.inputType);
        ɵngcc0.ɵɵattribute("accept", ctx.model.accept)("max", ctx.model.max)("min", ctx.model.min)("multiple", ctx.model.multiple)("step", ctx.model.step);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.suffix);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.hasList);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc4.NgIf, ɵngcc3.DefaultValueAccessor, ɵngcc1.DynamicListDirective, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc3.MaxLengthValidator, ɵngcc3.MinLengthValidator, ɵngcc4.NgClass, ɵngcc3.PatternValidator, ɵngcc3.RequiredValidator, ɵngcc5.MaskedInputDirective, ɵngcc4.NgForOf, ɵngcc3.NgSelectOption, ɵngcc3.ɵangular_packages_forms_forms_x], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });
DynamicNGBootstrapInputComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapInputComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapInputComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-input",
                template: "<div [formGroup]=\"group\" [class.input-group]=\"model.prefix || model.suffix\">\n\n    <div *ngIf=\"model.prefix\" class=\"input-group-prepend\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.prefix\"></span>\n    </div>\n\n    <input [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [class.form-control]=\"model.inputType !== 'file'\"\n           [class.form-control-file]=\"model.inputType === 'file'\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <div *ngIf=\"model.suffix\" class=\"input-group-append\">\n        <span class=\"input-group-text\" [innerHTML]=\"model.suffix\"></span>\n    </div>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n\n    </datalist>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapRadioGroupComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapRadioGroupComponent.ɵfac = function DynamicNGBootstrapRadioGroupComponent_Factory(t) { return new (t || DynamicNGBootstrapRadioGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapRadioGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapRadioGroupComponent, selectors: [["dynamic-ng-bootstrap-radio-group"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 9, consts: [[3, "formGroup"], ["ngbRadioGroup", "", "role", "radiogroup", 1, "btn-group", "btn-group-toggle", 3, "formControlName", "id", "ngClass", "tabindex", "change"], [3, "innerHTML", 4, "ngIf"], ["ngbButtonLabel", "", 3, "ngClass", 4, "ngFor", "ngForOf"], [3, "innerHTML"], ["ngbButtonLabel", "", 3, "ngClass"], ["type", "radio", "ngbButton", "", 3, "disabled", "name", "value", "blur", "focus"]], template: function DynamicNGBootstrapRadioGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵlistener("change", function DynamicNGBootstrapRadioGroupComponent_Template_div_change_1_listener($event) { return ctx.onChange($event); });
        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapRadioGroupComponent_legend_2_Template, 1, 1, "legend", 2);
        ɵngcc0.ɵɵtemplate(3, DynamicNGBootstrapRadioGroupComponent_label_3_Template, 3, 8, "label", 3);
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formControlName", ctx.model.id)("id", ctx.id)("ngClass", ctx.getClass("element", "control"))("tabindex", ctx.model.tabIndex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model.legend);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(4, 7, ctx.model.options$));
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbRadioGroup, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc2.NgbButtonLabel, ɵngcc2.NgbRadio], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapRadioGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapRadioGroupComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapRadioGroupComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-radio-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div ngbRadioGroup class=\"btn-group btn-group-toggle\" role=\"radiogroup\"\n         [formControlName]=\"model.id\"\n         [id]=\"id\"\n         [ngClass]=\"getClass('element', 'control')\"\n         [tabindex]=\"model.tabIndex\"\n         (change)=\"onChange($event)\">\n\n        <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n        <label *ngFor=\"let option of model.options$ | async\" ngbButtonLabel\n               [ngClass]=\"[getClass('element', 'option'), getClass('grid', 'option')]\">\n\n            <input type=\"radio\" ngbButton\n                   [disabled]=\"option.disabled\"\n                   [name]=\"model.name\"\n                   [value]=\"option.value\"\n                   (blur)=\"onBlur($event)\"\n                   (focus)=\"onFocus($event)\"/><span [innerHTML]=\"option.label\"></span>\n        </label>\n\n    </div>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapRatingComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapRatingComponent.ɵfac = function DynamicNGBootstrapRatingComponent_Factory(t) { return new (t || DynamicNGBootstrapRatingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbRatingConfig)); };
DynamicNGBootstrapRatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapRatingComponent, selectors: [["dynamic-ng-bootstrap-rating"]], viewQuery: function DynamicNGBootstrapRatingComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(NgbRating, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbRating = _t.first);
    } }, inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 6, consts: [[3, "formGroup"], [3, "formControlName", "id", "max", "ngClass", "resettable", "hover", "leave", "rateChange"]], template: function DynamicNGBootstrapRatingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "ngb-rating", 1);
        ɵngcc0.ɵɵlistener("hover", function DynamicNGBootstrapRatingComponent_Template_ngb_rating_hover_1_listener($event) { return ctx.onCustomEvent($event, "hover"); })("leave", function DynamicNGBootstrapRatingComponent_Template_ngb_rating_leave_1_listener($event) { return ctx.onCustomEvent($event, "leave"); })("rateChange", function DynamicNGBootstrapRatingComponent_Template_ngb_rating_rateChange_1_listener($event) { return ctx.onChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formControlName", ctx.model.id)("id", ctx.id)("max", ctx.model.max)("ngClass", ctx.getClass("element", "control"))("resettable", ctx.model.getAdditional("resettable", ctx.config["resettable"]));
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbRating, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapRatingComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbRatingConfig }
];
DynamicNGBootstrapRatingComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    ngbRating: [{ type: ViewChild, args: [NgbRating, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapRatingComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-rating",
                template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-rating [formControlName]=\"model.id\"\n                [id]=\"id\"\n                [max]=\"model.max\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [resettable]=\"model.getAdditional('resettable', config['resettable'])\"\n                (hover)=\"onCustomEvent($event, 'hover')\"\n                (leave)=\"onCustomEvent($event, 'leave')\"\n                (rateChange)=\"onChange($event)\"></ngb-rating>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbRatingConfig }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], customEvent: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], ngbRating: [{
            type: ViewChild,
            args: [NgbRating, { static: true }]
        }] }); })();

class DynamicNGBootstrapSelectComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSelectComponent.ɵfac = function DynamicNGBootstrapSelectComponent_Factory(t) { return new (t || DynamicNGBootstrapSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapSelectComponent, selectors: [["dynamic-ng-bootstrap-select"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 13, consts: [[3, "formGroup"], [1, "form-control", 3, "compareWith", "formControlName", "id", "name", "ngClass", "required", "tabindex", "blur", "change", "focus"], [3, "disabled", "ngValue", 4, "ngFor", "ngForOf"], [3, "disabled", "ngValue"]], template: function DynamicNGBootstrapSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "select", 1);
        ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapSelectComponent_Template_select_blur_1_listener($event) { return ctx.onBlur($event); })("change", function DynamicNGBootstrapSelectComponent_Template_select_change_1_listener($event) { return ctx.onChange($event); })("focus", function DynamicNGBootstrapSelectComponent_Template_select_focus_1_listener($event) { return ctx.onFocus($event); });
        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapSelectComponent_option_2_Template, 2, 3, "option", 2);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showErrorMessages);
        ɵngcc0.ɵɵproperty("compareWith", ctx.model.compareWithFn)("formControlName", ctx.model.id)("id", ctx.id)("name", ctx.model.name)("ngClass", ctx.getClass("element", "control"))("required", ctx.model.required)("tabindex", ctx.model.tabIndex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(3, 11, ctx.model.options$));
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.SelectControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass, ɵngcc3.RequiredValidator, ɵngcc4.NgForOf, ɵngcc3.NgSelectOption, ɵngcc3.ɵangular_packages_forms_forms_x], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });
DynamicNGBootstrapSelectComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapSelectComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapSelectComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-select",
                template: "<ng-container [formGroup]=\"group\">\n\n    <select class=\"form-control\"\n            [class.is-invalid]=\"showErrorMessages\"\n            [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"id\"\n            [name]=\"model.name\"\n            [ngClass]=\"getClass('element', 'control')\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}</option>\n\n    </select>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapSwitchComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapSwitchComponent.ɵfac = function DynamicNGBootstrapSwitchComponent_Factory(t) { return new (t || DynamicNGBootstrapSwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapSwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapSwitchComponent, selectors: [["dynamic-ng-bootstrap-switch"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 12, consts: [[1, "custom-control", "custom-switch", 3, "formGroup"], ["type", "checkbox", 1, "custom-control-input", 3, "formControlName", "id", "name", "ngClass", "required", "tabindex", "value", "blur", "change", "focus"], [1, "custom-control-label", 3, "for", "innerHTML"]], template: function DynamicNGBootstrapSwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1);
        ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapSwitchComponent_Template_input_blur_1_listener($event) { return ctx.onBlur($event); })("change", function DynamicNGBootstrapSwitchComponent_Template_input_change_1_listener($event) { return ctx.onChange($event); })("focus", function DynamicNGBootstrapSwitchComponent_Template_input_focus_1_listener($event) { return ctx.onFocus($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "label", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showErrorMessages);
        ɵngcc0.ɵɵproperty("formControlName", ctx.model.id)("id", ctx.id)("name", ctx.model.name)("ngClass", ctx.getClass("element", "control"))("required", ctx.model.required)("tabindex", ctx.model.tabIndex)("value", ctx.model.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("for", ctx.id)("innerHTML", ctx.model.label, ɵngcc0.ɵɵsanitizeHtml);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.CheckboxRequiredValidator, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2 });
DynamicNGBootstrapSwitchComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapSwitchComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapSwitchComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-switch",
                template: "<div [formGroup]=\"group\" class=\"custom-control custom-switch\">\n\n    <input type=\"checkbox\" class=\"custom-control-input\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [formControlName]=\"model.id\"\n           [id]=\"id\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [required]=\"model.required\"\n           [tabindex]=\"model.tabIndex\"\n           [value]=\"model.value\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <label class=\"custom-control-label\" [for]=\"id\" [innerHTML]=\"model.label\"></label>\n\n</div>\n\n",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapTextAreaComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapTextAreaComponent.ɵfac = function DynamicNGBootstrapTextAreaComponent_Factory(t) { return new (t || DynamicNGBootstrapTextAreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapTextAreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapTextAreaComponent, selectors: [["dynamic-ng-bootstrap-textarea"]], inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 17, consts: [[3, "formGroup"], [1, "form-control", 3, "cols", "formControlName", "id", "maxlength", "minlength", "name", "ngClass", "placeholder", "readonly", "required", "rows", "spellcheck", "tabindex", "wrap", "blur", "change", "focus"]], template: function DynamicNGBootstrapTextAreaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "textarea", 1);
        ɵngcc0.ɵɵlistener("blur", function DynamicNGBootstrapTextAreaComponent_Template_textarea_blur_1_listener($event) { return ctx.onBlur($event); })("change", function DynamicNGBootstrapTextAreaComponent_Template_textarea_change_1_listener($event) { return ctx.onChange($event); })("focus", function DynamicNGBootstrapTextAreaComponent_Template_textarea_focus_1_listener($event) { return ctx.onFocus($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-invalid", ctx.showErrorMessages);
        ɵngcc0.ɵɵproperty("cols", ctx.model.cols)("formControlName", ctx.model.id)("id", ctx.id)("maxlength", ctx.model.maxLength)("minlength", ctx.model.minLength)("name", ctx.model.name)("ngClass", ctx.getClass("element", "control"))("placeholder", ctx.model.placeholder)("readonly", ctx.model.readOnly)("required", ctx.model.required)("rows", ctx.model.rows)("spellcheck", ctx.model.spellCheck)("tabindex", ctx.model.tabIndex)("wrap", ctx.model.wrap);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc3.MaxLengthValidator, ɵngcc3.MinLengthValidator, ɵngcc4.NgClass, ɵngcc3.RequiredValidator], encapsulation: 2 });
DynamicNGBootstrapTextAreaComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapTextAreaComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapTextAreaComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-textarea",
                template: "<ng-container [formGroup]=\"group\">\n\n    <textarea class=\"form-control\"\n              [class.is-invalid]=\"showErrorMessages\"\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"id\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();

class DynamicNGBootstrapTimePickerComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService, config) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.config = config;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapTimePickerComponent.ɵfac = function DynamicNGBootstrapTimePickerComponent_Factory(t) { return new (t || DynamicNGBootstrapTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbTimepickerConfig)); };
DynamicNGBootstrapTimePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapTimePickerComponent, selectors: [["dynamic-ng-bootstrap-timepicker"]], viewQuery: function DynamicNGBootstrapTimePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(NgbTimepicker, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbTimePicker = _t.first);
    } }, inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 11, consts: [[3, "formGroup"], [3, "id", "formControlName", "hourStep", "meridian", "minuteStep", "ngClass", "seconds", "secondStep", "size", "spinners"]], template: function DynamicNGBootstrapTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelement(1, "ngb-timepicker", 1);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.id)("formControlName", ctx.model.id)("hourStep", ctx.model.getAdditional("hourStep", ctx.config["hourStep"]))("meridian", ctx.model.meridian)("minuteStep", ctx.model.getAdditional("minuteStep", ctx.config["minuteStep"]))("ngClass", ctx.getClass("element", "control"))("seconds", ctx.model.showSeconds)("secondStep", ctx.model.getAdditional("secondStep", ctx.config["secondStep"]))("size", ctx.model.getAdditional("size", ctx.config["size"]))("spinners", ctx.model.getAdditional("spinners", ctx.config["spinners"]));
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbTimepicker, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapTimePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: NgbTimepickerConfig }
];
DynamicNGBootstrapTimePickerComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ngbTimePicker: [{ type: ViewChild, args: [NgbTimepicker, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapTimePickerComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-timepicker",
                template: "<ng-container [formGroup]=\"group\">\n\n    <ngb-timepicker [id]=\"id\"\n                    [formControlName]=\"model.id\"\n                    [hourStep]=\"model.getAdditional('hourStep', config['hourStep'])\"\n                    [meridian]=\"model.meridian\"\n                    [minuteStep]=\"model.getAdditional('minuteStep', config['minuteStep'])\"\n                    [ngClass]=\"getClass('element', 'control')\"\n                    [seconds]=\"model.showSeconds\"\n                    [secondStep]=\"model.getAdditional('secondStep', config['secondStep'])\"\n                    [size]=\"model.getAdditional('size', config['size'])\"\n                    [spinners]=\"model.getAdditional('spinners', config['spinners'])\"></ngb-timepicker>\n\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbTimepickerConfig }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], ngbTimePicker: [{
            type: ViewChild,
            args: [NgbTimepicker, { static: true }]
        }] }); })();

class DynamicNGBootstrapFormControlContainerComponent extends DynamicFormControlContainerComponent {
    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        super(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService);
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this.klass = "";
        this.asBootstrapFormGroup = true;
        this.context = null;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.customEvent = new EventEmitter();
    }
    get componentType() {
        return this.componentService.getCustomComponentType(this.model) || ngBootstrapUIFormControlMapFn(this.model);
    }
}
DynamicNGBootstrapFormControlContainerComponent.ɵfac = function DynamicNGBootstrapFormControlContainerComponent_Factory(t) { return new (t || DynamicNGBootstrapFormControlContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormComponentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormRelationService)); };
DynamicNGBootstrapFormControlContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormControlContainerComponent, selectors: [["dynamic-ng-bootstrap-form-control"]], contentQueries: function DynamicNGBootstrapFormControlContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DynamicTemplateDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplateList = _t);
    } }, viewQuery: function DynamicNGBootstrapFormControlContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.componentViewContainerRef = _t.first);
    } }, hostVars: 2, hostBindings: function DynamicNGBootstrapFormControlContainerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.klass);
    } }, inputs: { asBootstrapFormGroup: "asBootstrapFormGroup", context: "context", group: "group", hostClass: "hostClass", inputTemplateList: ["templates", "inputTemplateList"], layout: "layout", model: "model" }, outputs: { blur: "blur", change: "change", focus: "focus", customEvent: "ngbEvent" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 10, vars: 16, consts: [[3, "formGroup", "ngClass"], [3, "for", "innerHTML", "ngClass", 4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngClass"], ["componentViewContainer", ""], ["class", "text-muted", 3, "innerHTML", "ngClass", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], [3, "for", "innerHTML", "ngClass"], [1, "text-muted", 3, "innerHTML", "ngClass"], ["class", "invalid-feedback d-block", 4, "ngFor", "ngForOf"], [1, "invalid-feedback", "d-block"]], template: function DynamicNGBootstrapFormControlContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DynamicNGBootstrapFormControlContainerComponent_label_1_Template, 1, 6, "label", 1);
        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormControlContainerComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementContainer(4, null, 4);
        ɵngcc0.ɵɵtemplate(6, DynamicNGBootstrapFormControlContainerComponent_small_6_Template, 1, 2, "small", 5);
        ɵngcc0.ɵɵtemplate(7, DynamicNGBootstrapFormControlContainerComponent_div_7_Template, 2, 5, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, DynamicNGBootstrapFormControlContainerComponent_ng_container_8_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵprojection(9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("form-group", ctx.model.type !== "GROUP" && ctx.asBootstrapFormGroup || ctx.getClass("element", "container").includes("form-group"));
        ɵngcc0.ɵɵproperty("formGroup", ctx.group)("ngClass", ɵngcc0.ɵɵpureFunction3(12, _c3, "ng-dynamic-forms-" + ctx.model.type.toLowerCase(), ctx.getClass("element", "container"), ctx.getClass("grid", "container")));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isCheckbox && ctx.hasLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.startTemplate == null ? null : ctx.startTemplate.templateRef)("ngTemplateOutletContext", ctx.model);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getClass("grid", "control"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasHint);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showErrorMessages);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.endTemplate == null ? null : ctx.endTemplate.templateRef)("ngTemplateOutletContext", ctx.model);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet, ɵngcc4.NgForOf], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapFormControlContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService },
    { type: DynamicFormComponentService },
    { type: DynamicFormRelationService }
];
DynamicNGBootstrapFormControlContainerComponent.propDecorators = {
    contentTemplateList: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],
    klass: [{ type: HostBinding, args: ["class",] }],
    asBootstrapFormGroup: [{ type: Input }],
    context: [{ type: Input }],
    group: [{ type: Input }],
    hostClass: [{ type: Input }],
    inputTemplateList: [{ type: Input, args: ["templates",] }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    customEvent: [{ type: Output, args: ["ngbEvent",] }],
    componentViewContainerRef: [{ type: ViewChild, args: ["componentViewContainer", { read: ViewContainerRef, static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormControlContainerComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-form-control",
                template: "<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <div [ngClass]=\"getClass('grid', 'control')\">\n\n        <ng-container #componentViewContainer></ng-container>\n\n        <small *ngIf=\"hasHint\" class=\"text-muted\" [innerHTML]=\"hint\" [ngClass]=\"getClass('element', 'hint')\"></small>\n\n        <div *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n            <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message }}</small>\n        </div>\n\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc1.DynamicFormComponentService }, { type: ɵngcc1.DynamicFormRelationService }]; }, { klass: [{
            type: HostBinding,
            args: ["class"]
        }], asBootstrapFormGroup: [{
            type: Input
        }], context: [{
            type: Input
        }], blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], customEvent: [{
            type: Output,
            args: ["ngbEvent"]
        }], contentTemplateList: [{
            type: ContentChildren,
            args: [DynamicTemplateDirective]
        }], group: [{
            type: Input
        }], hostClass: [{
            type: Input
        }], inputTemplateList: [{
            type: Input,
            args: ["templates"]
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], componentViewContainerRef: [{
            type: ViewChild,
            args: ["componentViewContainer", { read: ViewContainerRef, static: true }]
        }] }); })();
function ngBootstrapUIFormControlMapFn(model) {
    switch (model.type) {
        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
            return DynamicNGBootstrapFormArrayComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
            return DynamicNGBootstrapCheckboxComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            return DynamicNGBootstrapCheckboxGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
            const datePickerModel = model;
            return datePickerModel.inline ? DynamicNGBootstrapCalendarComponent : DynamicNGBootstrapDatePickerComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
            return DynamicNGBootstrapFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
            return DynamicNGBootstrapInputComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
            return DynamicNGBootstrapRadioGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RATING:
            return DynamicNGBootstrapRatingComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
            return DynamicNGBootstrapSelectComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
            return DynamicNGBootstrapSwitchComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
            return DynamicNGBootstrapTextAreaComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
            return DynamicNGBootstrapTimePickerComponent;
        default:
            return null;
    }
}

class DynamicNGBootstrapFormArrayComponent extends DynamicFormArrayComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicNGBootstrapFormArrayComponent.ɵfac = function DynamicNGBootstrapFormArrayComponent_Factory(t) { return new (t || DynamicNGBootstrapFormArrayComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };
DynamicNGBootstrapFormArrayComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormArrayComponent, selectors: [["dynamic-ng-bootstrap-form-array"]], viewQuery: function DynamicNGBootstrapFormArrayComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DynamicNGBootstrapFormControlContainerComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.components = _t);
    } }, inputs: { formLayout: "formLayout", group: "group", layout: "layout", model: "model", templates: "templates" }, outputs: { blur: "blur", change: "change", customEvent: "customEvent", focus: "focus" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 5, consts: [[3, "formGroup"], [3, "formArrayName", "id", "ngClass"], ["role", "group", 3, "formGroupName", "ngClass", 4, "ngFor", "ngForOf"], ["role", "group", 3, "formGroupName", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "context", "group", "hidden", "layout", "model", "templates", "hostClass", "blur", "change", "focus", "ngbEvent", 4, "ngFor", "ngForOf"], [3, "context", "group", "hidden", "layout", "model", "templates", "hostClass", "blur", "change", "focus", "ngbEvent"]], template: function DynamicNGBootstrapFormArrayComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormArrayComponent_div_2_Template, 4, 10, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.group);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formArrayName", ctx.model.id)("id", ctx.id)("ngClass", ctx.getClass("element", "control"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.model.groups);
    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.FormArrayName, ɵngcc4.NgClass, ɵngcc4.NgForOf, ɵngcc3.FormGroupName, ɵngcc4.NgTemplateOutlet, DynamicNGBootstrapFormControlContainerComponent], encapsulation: 2 });
DynamicNGBootstrapFormArrayComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService },
    { type: DynamicFormValidationService }
];
DynamicNGBootstrapFormArrayComponent.propDecorators = {
    formLayout: [{ type: Input }],
    group: [{ type: Input }],
    layout: [{ type: Input }],
    model: [{ type: Input }],
    templates: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    customEvent: [{ type: Output }],
    focus: [{ type: Output }],
    components: [{ type: ViewChildren, args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent),] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormArrayComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-form-array",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-ng-bootstrap-form-control *ngFor=\"let _model of groupModel.group\"\n                                               [context]=\"groupModel\"\n                                               [group]=\"array.at(idx)\"\n                                               [hidden]=\"_model.hidden\"\n                                               [layout]=\"formLayout\"\n                                               [model]=\"_model\"\n                                               [templates]=\"templates\"\n                                               [hostClass]=\"[getClass('element','children'), getClass('grid','children')]\"\n                                               (blur)=\"onBlur($event)\"\n                                               (change)=\"onChange($event)\"\n                                               (focus)=\"onFocus($event)\"\n                                               (ngbEvent)=\"onCustomEvent($event, null, true)\"></dynamic-ng-bootstrap-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n"
            }]
    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], customEvent: [{
            type: Output
        }], focus: [{
            type: Output
        }], formLayout: [{
            type: Input
        }], group: [{
            type: Input
        }], layout: [{
            type: Input
        }], model: [{
            type: Input
        }], templates: [{
            type: Input
        }], components: [{
            type: ViewChildren,
            args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent)]
        }] }); })();

class DynamicNGBootstrapFormComponent extends DynamicFormComponent {
    constructor(changeDetectorRef, componentService) {
        super(changeDetectorRef, componentService);
        this.changeDetectorRef = changeDetectorRef;
        this.componentService = componentService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ngbEvent = new EventEmitter();
    }
}
DynamicNGBootstrapFormComponent.ɵfac = function DynamicNGBootstrapFormComponent_Factory(t) { return new (t || DynamicNGBootstrapFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormComponentService)); };
DynamicNGBootstrapFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormComponent, selectors: [["dynamic-ng-bootstrap-form"]], contentQueries: function DynamicNGBootstrapFormComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DynamicTemplateDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);
    } }, viewQuery: function DynamicNGBootstrapFormComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DynamicNGBootstrapFormControlContainerComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.components = _t);
    } }, inputs: { group: "group", model: "model", layout: "layout" }, outputs: { blur: "blur", change: "change", focus: "focus", ngbEvent: "ngbEvent" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [[3, "group", "hidden", "layout", "model", "templates", "blur", "change", "focus", "ngbEvent", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "group", "hidden", "layout", "model", "templates", "blur", "change", "focus", "ngbEvent"]], template: function DynamicNGBootstrapFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template, 1, 5, "dynamic-ng-bootstrap-form-control", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.model)("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc4.NgForOf, DynamicNGBootstrapFormControlContainerComponent], encapsulation: 2, changeDetection: 0 });
DynamicNGBootstrapFormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DynamicFormComponentService }
];
DynamicNGBootstrapFormComponent.propDecorators = {
    group: [{ type: Input }],
    model: [{ type: Input }],
    layout: [{ type: Input }],
    blur: [{ type: Output }],
    change: [{ type: Output }],
    focus: [{ type: Output }],
    ngbEvent: [{ type: Output }],
    templates: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],
    components: [{ type: ViewChildren, args: [DynamicNGBootstrapFormControlContainerComponent,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormComponent, [{
        type: Component,
        args: [{
                selector: "dynamic-ng-bootstrap-form",
                template: "<dynamic-ng-bootstrap-form-control *ngFor=\"let controlModel of model; trackBy: trackByFn\"\n                                   [group]=\"group\"\n                                   [hidden]=\"controlModel.hidden\"\n                                   [layout]=\"layout\"\n                                   [model]=\"controlModel\"\n                                   [templates]=\"templates\"\n                                   (blur)=\"onBlur($event)\"\n                                   (change)=\"onChange($event)\"\n                                   (focus)=\"onFocus($event)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></dynamic-ng-bootstrap-form-control>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DynamicFormComponentService }]; }, { blur: [{
            type: Output
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], ngbEvent: [{
            type: Output
        }], group: [{
            type: Input
        }], model: [{
            type: Input
        }], layout: [{
            type: Input
        }], templates: [{
            type: ContentChildren,
            args: [DynamicTemplateDirective]
        }], components: [{
            type: ViewChildren,
            args: [DynamicNGBootstrapFormControlContainerComponent]
        }] }); })();

class DynamicFormsNGBootstrapUIModule {
}
DynamicFormsNGBootstrapUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DynamicFormsNGBootstrapUIModule });
DynamicFormsNGBootstrapUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DynamicFormsNGBootstrapUIModule_Factory(t) { return new (t || DynamicFormsNGBootstrapUIModule)(); }, imports: [[
            CommonModule,
            ReactiveFormsModule,
            NgbButtonsModule,
            NgbDatepickerModule,
            NgbRatingModule,
            NgbTimepickerModule,
            TextMaskModule,
            DynamicFormsCoreModule
        ], DynamicFormsCoreModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicFormsNGBootstrapUIModule, { declarations: function () { return [DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent]; }, imports: function () { return [CommonModule,
        ReactiveFormsModule,
        NgbButtonsModule,
        NgbDatepickerModule,
        NgbRatingModule,
        NgbTimepickerModule,
        TextMaskModule,
        DynamicFormsCoreModule]; }, exports: function () { return [DynamicFormsCoreModule, DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DynamicFormsNGBootstrapUIModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    NgbButtonsModule,
                    NgbDatepickerModule,
                    NgbRatingModule,
                    NgbTimepickerModule,
                    TextMaskModule,
                    DynamicFormsCoreModule
                ],
                declarations: [
                    DynamicNGBootstrapCalendarComponent,
                    DynamicNGBootstrapCheckboxComponent,
                    DynamicNGBootstrapCheckboxGroupComponent,
                    DynamicNGBootstrapDatePickerComponent,
                    DynamicNGBootstrapFormArrayComponent,
                    DynamicNGBootstrapFormComponent,
                    DynamicNGBootstrapFormControlContainerComponent,
                    DynamicNGBootstrapFormGroupComponent,
                    DynamicNGBootstrapInputComponent,
                    DynamicNGBootstrapRadioGroupComponent,
                    DynamicNGBootstrapRatingComponent,
                    DynamicNGBootstrapSelectComponent,
                    DynamicNGBootstrapSwitchComponent,
                    DynamicNGBootstrapTextAreaComponent,
                    DynamicNGBootstrapTimePickerComponent
                ],
                entryComponents: [
                    DynamicNGBootstrapCalendarComponent,
                    DynamicNGBootstrapCheckboxComponent,
                    DynamicNGBootstrapCheckboxGroupComponent,
                    DynamicNGBootstrapDatePickerComponent,
                    DynamicNGBootstrapFormArrayComponent,
                    DynamicNGBootstrapFormGroupComponent,
                    DynamicNGBootstrapInputComponent,
                    DynamicNGBootstrapRadioGroupComponent,
                    DynamicNGBootstrapRatingComponent,
                    DynamicNGBootstrapSelectComponent,
                    DynamicNGBootstrapSwitchComponent,
                    DynamicNGBootstrapTextAreaComponent,
                    DynamicNGBootstrapTimePickerComponent
                ],
                exports: [
                    DynamicFormsCoreModule,
                    DynamicNGBootstrapCalendarComponent,
                    DynamicNGBootstrapCheckboxComponent,
                    DynamicNGBootstrapCheckboxGroupComponent,
                    DynamicNGBootstrapDatePickerComponent,
                    DynamicNGBootstrapFormArrayComponent,
                    DynamicNGBootstrapFormComponent,
                    DynamicNGBootstrapFormControlContainerComponent,
                    DynamicNGBootstrapFormGroupComponent,
                    DynamicNGBootstrapInputComponent,
                    DynamicNGBootstrapRadioGroupComponent,
                    DynamicNGBootstrapRatingComponent,
                    DynamicNGBootstrapSelectComponent,
                    DynamicNGBootstrapSwitchComponent,
                    DynamicNGBootstrapTextAreaComponent,
                    DynamicNGBootstrapTimePickerComponent
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DynamicFormsNGBootstrapUIModule, DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent, ngBootstrapUIFormControlMapFn };

//# sourceMappingURL=ui-ng-bootstrap.js.map