function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/**
 * @license Use of this source code is governed by an MIT-style license that
 * can be found in the LICENSE file at https://github.com/cartant/rxjs-spy
 */

/*tslint:disable:no-use-before-declare*/
function hide() {
  return function hideOperation(source) {
    return source.lift(new HideOperator());
  };
}

var HideOperator = /*#__PURE__*/function () {
  // It would be better if this were a symbol. However ...
  // error TS1166: A computed property name in a class property declaration must directly refer to a built-in symbol.
  function HideOperator() {
    _classCallCheck(this, HideOperator);

    _defineProperty(this, "hide", true);
  }

  _createClass(HideOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(subscriber);
    }
  }]);

  return HideOperator;
}();

/**
 * @license Use of this source code is governed by an MIT-style license that
 * can be found in the LICENSE file at https://github.com/cartant/rxjs-spy
 */

/*tslint:disable:no-use-before-declare*/
function tag(tag) {
  return function tagOperation(source) {
    return source.lift(new TagOperator(tag));
  };
}

var TagOperator = /*#__PURE__*/function () {
  // It would be better if this were a symbol. However ...
  // error TS1166: A computed property name in a class property declaration must directly refer to a built-in symbol.
  function TagOperator(tag) {
    _classCallCheck(this, TagOperator);

    _defineProperty(this, "tag", void 0);

    this.tag = tag;
  }

  _createClass(TagOperator, [{
    key: "call",
    value: function call(subscriber, source) {
      return source.subscribe(subscriber);
    }
  }]);

  return TagOperator;
}();

export { hide, tag };
//# sourceMappingURL=index.js.map
