"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toLogger = exports.defaultLogger = void 0;
exports.defaultLogger = console;
function toLogger(partialLogger) {
    if (partialLogger.error &&
        partialLogger.group &&
        partialLogger.groupCollapsed &&
        partialLogger.groupEnd &&
        partialLogger.warn) {
        return partialLogger;
    }
    var spaces = 2;
    var indent = 0;
    return {
        error: function (message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            call.apply(void 0, __spreadArrays(["error", message], args));
        },
        group: function (title) {
            call("log", title);
            indent += spaces;
        },
        groupCollapsed: function (title) {
            call("log", title);
            indent += spaces;
        },
        groupEnd: function () {
            indent = Math.max(0, indent - spaces);
        },
        log: function (message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            call.apply(void 0, __spreadArrays(["log", message], args));
        },
        warn: function (message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            call.apply(void 0, __spreadArrays(["warn", message], args));
        }
    };
    function call(method, message) {
        var _a;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var padding = " ".repeat(indent);
        if (message) {
            message = padding + message;
        }
        else {
            message = padding;
        }
        (_a = (partialLogger[method] || partialLogger.log)).call.apply(_a, __spreadArrays([partialLogger, message], args));
    }
}
exports.toLogger = toLogger;
