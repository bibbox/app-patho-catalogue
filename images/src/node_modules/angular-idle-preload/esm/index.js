/*
 * @PatrickJS
 */
import { NgZone, NgModule, Inject, InjectionToken, Injectable } from '@angular/core';
import { of } from "rxjs";
/*
 * token to requestIdleCallback
 */
export var REQUEST_IDLE_CALLBACK = new InjectionToken('REQUEST_IDLE_CALLBACK');
/*
 * Private API.
 * please use @angularclass/request-idle-callback if you want
 * to use `__requestIdle` this without providers
 */
export function __requestIdle(zone) {
    if (typeof window === 'undefined') {
        return function (fn) { return setTimeout(fn); };
    }
    var win = window;
    if (win.requestIdleCallback) {
        return function (fn) { return win.requestIdleCallback(fn); };
    }
    return function (fn) { return zone.runOutsideAngular(function () { return win.setTimeout(fn, 10); }); };
}
var IdlePreload = /** @class */ (function () {
    /*
     * include zone to run outside of zone.js
     */
    function IdlePreload(_ngZone, requestIdleCallback) {
        this._ngZone = _ngZone;
        this.requestIdleCallback = requestIdleCallback;
    }
    /*
     * fire off preloading async modules
     */
    IdlePreload.prototype.preload = function (route, fn /* () => Observable<any>*/) {
        this.requestIdleCallback(fn);
        return of(null);
    };
    IdlePreload.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    IdlePreload.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [REQUEST_IDLE_CALLBACK,] }] }
    ]; };
    return IdlePreload;
}());
export { IdlePreload };
/*
 * raw providers
 */
export var IDLE_PRELOAD_PROVIDERS = [
    { provide: IdlePreload, useClass: IdlePreload, deps: [NgZone, REQUEST_IDLE_CALLBACK] }
];
export var REQUEST_IDLE_CALLBACK_PROVIDERS = [
    { provide: REQUEST_IDLE_CALLBACK, useFactory: __requestIdle, deps: [NgZone] }
];
var IdlePreloadModule = /** @class */ (function () {
    function IdlePreloadModule() {
    }
    /*
     * forRoot() to allow providers only be created once
     */
    IdlePreloadModule.forRoot = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: IdlePreloadModule,
            providers: (config.requestIdleCallback === false ? [] : REQUEST_IDLE_CALLBACK_PROVIDERS).concat(IDLE_PRELOAD_PROVIDERS)
        };
    };
    /*
     * alias for reference to IdlePreload token
     */
    IdlePreloadModule.IdleStrategy = function () {
        return IdlePreload;
    };
    IdlePreloadModule.decorators = [
        { type: NgModule, args: [{
                // because Angular
                },] },
    ];
    return IdlePreloadModule;
}());
export { IdlePreloadModule };
//# sourceMappingURL=index.js.map