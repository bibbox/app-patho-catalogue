import { NgZone, ModuleWithProviders, InjectionToken } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare const REQUEST_IDLE_CALLBACK: InjectionToken<string>;
export declare function __requestIdle(zone: NgZone): (fn: any) => any;
export declare class IdlePreload {
    private _ngZone;
    private requestIdleCallback;
    constructor(_ngZone: NgZone, requestIdleCallback: any);
    preload(route: any, fn: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IdlePreload, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IdlePreload>;
}
export declare const IDLE_PRELOAD_PROVIDERS: any[];
export declare const REQUEST_IDLE_CALLBACK_PROVIDERS: any[];
export interface IdlePreloadConfig {
    requestIdleCallback?: boolean;
}
export declare class IdlePreloadModule {
    static forRoot(config?: IdlePreloadConfig): ModuleWithProviders<IdlePreloadModule>;
    static IdleStrategy(): typeof IdlePreload;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<IdlePreloadModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<IdlePreloadModule>;
}

//# sourceMappingURL=index.d.ts.map