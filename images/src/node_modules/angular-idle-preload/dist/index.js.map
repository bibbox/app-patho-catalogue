{"version":3,"file":"index.js","sources":["../src/index.ts"],"names":[],"mappings":";AAAA;AACA;AACA,GAAG;AACH;AACA,sCAOuB;AACvB,6BAAwB;AAEvB;AACD;AAAgC,GAC5B;AACS,QAAA,qBAAqB,GAAG,IAAI,qBAAc,CAAS,uBAAuB,CAAC,CAAC;AAExF;AACD;AAAgB;AAC6C;AACd,GAC3C;AACJ,uBAA8B,IAAY;AAC1C,IAAE,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;AACrC,QAAI,OAAO,UAAC,EAAE,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,EAAd,CAAc,CAAC;AAClC,KAAG;AACH,IAAE,IAAI,GAAG,GAAQ,MAAM,CAAC;AACxB,IAAE,IAAI,GAAG,CAAC,mBAAmB,EAAE;AAC/B,QAAI,OAAO,UAAC,EAAE,IAAK,OAAA,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC,EAA3B,CAA2B,CAAC;AAC/C,KAAG;AACH,IAAE,OAAO,UAAC,EAAE,IAAK,OAAA,IAAI,CAAC,iBAAiB,CAAC,cAAM,OAAA,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,EAAtB,CAAsB,CAAC,EAApD,CAAoD,CAAC;AACtE,CAAC;AATD,sCASC;;AAED;AACiC,IAChC;AACD;AACG,OAAC;AACJ,IAAE,qBAAoB,OAAe,EAAyC,mBAAwB;AAAI,QAApF,YAAO,GAAP,OAAO,CAAQ;AAAC,QAAwC,wBAAmB,GAAnB,mBAAmB,CAAK;AAAC,IAAE,CAAC;AAC1G,IACC;AACD;AACG,OAAC;AACJ,IAAE,6BAAO,GAAP,UAAQ,KAAoB,EAAE,EAAO,CAAC,0BAA0B;AAAI,QAClE,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;AACjC,QAAI,OAAO,SAAE,CAAC,IAAI,CAAC,CAAC;AACpB,IAAE,CAAC,CAZI;AAAC;wBADP,iBAAU,zCACoB;AAET,gBAjCpB,aAAM;AACN,gDAkCsC,aAAM,SAAC,6BAAqB;AAAQ;;;;;;;;kCAAS;AAAC,IAUtF,kBAAC;AAED,CAFC,AAfD,IAeC;AAdY,kCAAW;AAgBxB;AACA;AACA,GAAG;AACU,QAAA,sBAAsB,GAAU;AAC7C,IAAE,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAE,aAAM,EAAE,6BAAqB,CAAE,EAAE;AAC1F,CAAC,CAAC;AAEW,QAAA,+BAA+B,GAAU;AACtD,IAAE,EAAE,OAAO,EAAE,6BAAqB,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,CAAE,aAAM,CAAE,EAAE;AACjF,CAAC,CAAC;AAMF;AAGiB,IAHjB;AACmB,IAuBnB,CAAC;AACD,IArBC;AACD;AACG,OAAC;AACJ,IAAS,yBAAO,GAAd,UAAe,MAA8B;AAAI,QAAlC,uBAAA,EAAA,WAA8B;AAAI,QAC/C,OAAO;AACX,YAAM,QAAQ,EAAE,iBAAiB;AACjC,YAAM,SAAS,EACJ,CAAC,MAAM,CAAC,mBAAmB,KAAK,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,uCAA+B,CAAC,QAC7E,8BAAsB,CAC1B;AACP,SAAK,CAAC;AACN,IAAE,CAAC;AAEH,IAAC;AACD;AACG,OAAC;AACJ,IAAS,8BAAY,GAAnB;AAAc,QACZ,OAAO,WAAW,CAAC;AACvB,IAAE,CAAC;qDAtBF,eAAQ,SAAC;gBACR,kBAAkB,kBACnB;;;;;;gDACS;AAAC,IAqBX,wBAAC;AACA,CADA,AAxBD,IAwBC;AArBY,8CAAiB;AAAC","sourcesContent":["/*\n * @PatrickJS\n */\n\nimport {\n  NgZone,\n  NgModule,\n  ModuleWithProviders,\n  Inject,\n  InjectionToken,\n  Injectable\n} from '@angular/core';\nimport {of} from \"rxjs\";\n\n /*\n  * token to requestIdleCallback\n  */\nexport const REQUEST_IDLE_CALLBACK = new InjectionToken<string>('REQUEST_IDLE_CALLBACK');\n\n /*\n  * Private API.\n  * please use @angularclass/request-idle-callback if you want\n  * to use `__requestIdle` this without providers\n  */\nexport function __requestIdle(zone: NgZone) {\n  if (typeof window === 'undefined') {\n    return (fn) => setTimeout(fn);\n  }\n  let win: any = window;\n  if (win.requestIdleCallback) {\n    return (fn) => win.requestIdleCallback(fn);\n  }\n  return (fn) => zone.runOutsideAngular(() => win.setTimeout(fn, 10));\n}\n\n@Injectable()\nexport class IdlePreload /*implements PreloadingStrategy*/ {\n /*\n  * include zone to run outside of zone.js\n  */\n  constructor(private _ngZone: NgZone, @Inject(REQUEST_IDLE_CALLBACK) private requestIdleCallback: any) {}\n\n /*\n  * fire off preloading async modules\n  */\n  preload(route: /*Route*/ any, fn: any /* () => Observable<any>*/ ): any/* Observable<any> */ {\n    this.requestIdleCallback(fn);\n    return of(null);\n  }\n\n}\n\n/*\n * raw providers\n */\nexport const IDLE_PRELOAD_PROVIDERS: any[] = [\n  { provide: IdlePreload, useClass: IdlePreload, deps: [ NgZone, REQUEST_IDLE_CALLBACK ] }\n];\n\nexport const REQUEST_IDLE_CALLBACK_PROVIDERS: any[] = [\n  { provide: REQUEST_IDLE_CALLBACK, useFactory: __requestIdle, deps: [ NgZone ] }\n];\n\nexport interface IdlePreloadConfig {\n  requestIdleCallback?: boolean;\n}\n\n@NgModule({\n  // because Angular\n})\nexport class IdlePreloadModule {\n /*\n  * forRoot() to allow providers only be created once\n  */\n  static forRoot(config: IdlePreloadConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: IdlePreloadModule,\n      providers: [\n        ...(config.requestIdleCallback === false ? [] : REQUEST_IDLE_CALLBACK_PROVIDERS),\n        ...IDLE_PRELOAD_PROVIDERS\n      ]\n    };\n  }\n\n /*\n  * alias for reference to IdlePreload token\n  */\n  static IdleStrategy() {\n    return IdlePreload;\n  }\n\n}\n"]}