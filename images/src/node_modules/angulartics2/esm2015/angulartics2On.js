import { Directive, ElementRef, Input, NgModule, Renderer2, } from '@angular/core';
import { Angulartics2 } from './angulartics2-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './angulartics2-core';
export class Angulartics2On {
    constructor(elRef, angulartics2, renderer) {
        this.elRef = elRef;
        this.angulartics2 = angulartics2;
        this.renderer = renderer;
        this.angularticsProperties = {};
    }
    ngAfterContentInit() {
        this.renderer.listen(this.elRef.nativeElement, this.angulartics2On || 'click', (event) => this.eventTrack(event));
    }
    eventTrack(event) {
        const action = this.angularticsAction; // || this.inferEventName();
        const properties = Object.assign(Object.assign({}, this.angularticsProperties), { eventType: event.type });
        if (this.angularticsCategory) {
            properties.category = this.angularticsCategory;
        }
        if (this.angularticsLabel) {
            properties.label = this.angularticsLabel;
        }
        if (this.angularticsValue) {
            properties.value = this.angularticsValue;
        }
        this.angulartics2.eventTrack.next({
            action,
            properties,
        });
    }
}
Angulartics2On.ɵfac = function Angulartics2On_Factory(t) { return new (t || Angulartics2On)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Angulartics2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
Angulartics2On.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Angulartics2On, selectors: [["", "angulartics2On", ""]], inputs: { angularticsProperties: "angularticsProperties", angulartics2On: "angulartics2On", angularticsAction: "angularticsAction", angularticsCategory: "angularticsCategory", angularticsLabel: "angularticsLabel", angularticsValue: "angularticsValue" } });
Angulartics2On.ctorParameters = () => [
    { type: ElementRef },
    { type: Angulartics2 },
    { type: Renderer2 }
];
Angulartics2On.propDecorators = {
    angulartics2On: [{ type: Input, args: ['angulartics2On',] }],
    angularticsAction: [{ type: Input }],
    angularticsCategory: [{ type: Input }],
    angularticsLabel: [{ type: Input }],
    angularticsValue: [{ type: Input }],
    angularticsProperties: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angulartics2On, [{
        type: Directive,
        args: [{ selector: '[angulartics2On]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Angulartics2 }, { type: ɵngcc0.Renderer2 }]; }, { angularticsProperties: [{
            type: Input
        }], angulartics2On: [{
            type: Input,
            args: ['angulartics2On']
        }], angularticsAction: [{
            type: Input
        }], angularticsCategory: [{
            type: Input
        }], angularticsLabel: [{
            type: Input
        }], angularticsValue: [{
            type: Input
        }] }); })();
export class Angulartics2OnModule {
}
Angulartics2OnModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Angulartics2OnModule });
Angulartics2OnModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Angulartics2OnModule_Factory(t) { return new (t || Angulartics2OnModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Angulartics2OnModule, { declarations: [Angulartics2On], exports: [Angulartics2On] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angulartics2OnModule, [{
        type: NgModule,
        args: [{
                declarations: [Angulartics2On],
                exports: [Angulartics2On]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcnRpY3MyT24uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29yZS9hbmd1bGFydGljczJPbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsUUFBUSxFQUNSLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7OztBQUduRCxNQUFNLE9BQU8sY0FBYztBQUFHLElBUzVCLFlBQ1UsS0FBaUIsRUFDakIsWUFBMEIsRUFDMUIsUUFBbUI7QUFDNUIsUUFIUyxVQUFLLEdBQUwsS0FBSyxDQUFZO0FBQUMsUUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQy9CLFFBTlcsMEJBQXFCLEdBQVEsRUFBRSxDQUFDO0FBQzNDLElBS00sQ0FBQztBQUNQLElBQ0Usa0JBQWtCO0FBQ3BCLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUN4QixJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sRUFDOUIsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQ3pDLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUNFLFVBQVUsQ0FBQyxLQUFZO0FBQ3pCLFFBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsNEJBQTRCO0FBQ3ZFLFFBQUksTUFBTSxVQUFVLG1DQUNYLElBQUksQ0FBQyxxQkFBcUIsS0FDN0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQ3RCLENBQUM7QUFDTixRQUNJLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO0FBQ2xDLFlBQU0sVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7QUFDckQsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBTSxVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztBQUMvQyxTQUFLO0FBQ0wsUUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUMvQixZQUFNLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQy9DLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztBQUN0QyxZQUFNLE1BQU07QUFDWixZQUFNLFVBQVU7QUFDaEIsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSDswQ0E5Q0MsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFO2dYQUN0QztBQUFDO0FBQXdDLFlBUjVDLFVBQVU7QUFDVixZQUlPLFlBQVk7QUFBSSxZQUZ2QixTQUFTO0FBQ1Y7QUFBRztBQUNVLDZCQUtYLEtBQUssU0FBQyxnQkFBZ0I7QUFBTyxnQ0FDN0IsS0FBSztBQUFLLGtDQUNWLEtBQUs7QUFBSywrQkFDVixLQUFLO0FBQUssK0JBQ1YsS0FBSztBQUFLLG9DQUNWLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFzRGQsTUFBTSxPQUFPLG9CQUFvQjtBQUFHO2dEQUpuQyxRQUFRLFNBQUMsa0JBQ1I7VUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDLGtCQUM5QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFDMUI7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJ0aWNzMiB9IGZyb20gJy4vYW5ndWxhcnRpY3MyLWNvcmUnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbYW5ndWxhcnRpY3MyT25dJyB9KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJ0aWNzMk9uIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KCdhbmd1bGFydGljczJPbicpIGFuZ3VsYXJ0aWNzMk9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFuZ3VsYXJ0aWNzQWN0aW9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFuZ3VsYXJ0aWNzQ2F0ZWdvcnk6IHN0cmluZztcbiAgQElucHV0KCkgYW5ndWxhcnRpY3NMYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBhbmd1bGFydGljc1ZhbHVlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFuZ3VsYXJ0aWNzUHJvcGVydGllczogYW55ID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGFuZ3VsYXJ0aWNzMjogQW5ndWxhcnRpY3MyLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHsgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihcbiAgICAgIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgIHRoaXMuYW5ndWxhcnRpY3MyT24gfHwgJ2NsaWNrJyxcbiAgICAgIChldmVudDogRXZlbnQpID0+IHRoaXMuZXZlbnRUcmFjayhldmVudCksXG4gICAgKTtcbiAgfVxuXG4gIGV2ZW50VHJhY2soZXZlbnQ6IEV2ZW50KSB7XG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hbmd1bGFydGljc0FjdGlvbjsgLy8gfHwgdGhpcy5pbmZlckV2ZW50TmFtZSgpO1xuICAgIGNvbnN0IHByb3BlcnRpZXM6IGFueSA9IHtcbiAgICAgIC4uLnRoaXMuYW5ndWxhcnRpY3NQcm9wZXJ0aWVzLFxuICAgICAgZXZlbnRUeXBlOiBldmVudC50eXBlLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5hbmd1bGFydGljc0NhdGVnb3J5KSB7XG4gICAgICBwcm9wZXJ0aWVzLmNhdGVnb3J5ID0gdGhpcy5hbmd1bGFydGljc0NhdGVnb3J5O1xuICAgIH1cbiAgICBpZiAodGhpcy5hbmd1bGFydGljc0xhYmVsKSB7XG4gICAgICBwcm9wZXJ0aWVzLmxhYmVsID0gdGhpcy5hbmd1bGFydGljc0xhYmVsO1xuICAgIH1cbiAgICBpZiAodGhpcy5hbmd1bGFydGljc1ZhbHVlKSB7XG4gICAgICBwcm9wZXJ0aWVzLnZhbHVlID0gdGhpcy5hbmd1bGFydGljc1ZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuYW5ndWxhcnRpY3MyLmV2ZW50VHJhY2submV4dCh7XG4gICAgICBhY3Rpb24sXG4gICAgICBwcm9wZXJ0aWVzLFxuICAgIH0pO1xuICB9XG5cbiAgLypwcml2YXRlIGlzQ29tbWFuZCgpIHtcbiAgICByZXR1cm4gWydhOicsICdidXR0b246JywgJ2J1dHRvbjpidXR0b24nLCAnYnV0dG9uOnN1Ym1pdCcsICdpbnB1dDpidXR0b24nLCAnaW5wdXQ6c3VibWl0J10uaW5kZXhPZihcbiAgICAgIGdldERPTSgpLnRhZ05hbWUodGhpcy5lbCkudG9Mb3dlckNhc2UoKSArICc6JyArIChnZXRET00oKS50eXBlKHRoaXMuZWwpIHx8ICcnKSkgPj0gMDtcbiAgfVxuXG4gIHByaXZhdGUgaW5mZXJFdmVudE5hbWUoKSB7XG4gICAgaWYgKHRoaXMuaXNDb21tYW5kKCkpIHJldHVybiBnZXRET00oKS5nZXRUZXh0KHRoaXMuZWwpIHx8IGdldERPTSgpLmdldFZhbHVlKHRoaXMuZWwpO1xuICAgIHJldHVybiBnZXRET00oKS5nZXRQcm9wZXJ0eSh0aGlzLmVsLCAnaWQnKSB8fCBnZXRET00oKS5nZXRQcm9wZXJ0eSh0aGlzLmVsLCAnbmFtZScpIHx8IGdldERPTSgpLnRhZ05hbWUodGhpcy5lbCk7XG4gIH0qL1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtBbmd1bGFydGljczJPbl0sXG4gIGV4cG9ydHM6IFtBbmd1bGFydGljczJPbl0sXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJ0aWNzMk9uTW9kdWxlIHt9XG4iXX0=