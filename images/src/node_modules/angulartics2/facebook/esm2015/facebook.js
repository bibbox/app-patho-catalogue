import { Injectable } from '@angular/core';
import { Angulartics2 } from 'angulartics2';
import * as i0 from "@angular/core";
import * as i1 from "angulartics2";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'angulartics2';
const facebookEventList = [
    'ViewContent',
    'Search',
    'AddToCart',
    'AddToWishlist',
    'InitiateCheckout',
    'AddPaymentInfo',
    'Purchase',
    'Lead',
    'CompleteRegistration',
];
export class Angulartics2Facebook {
    constructor(angulartics2) {
        this.angulartics2 = angulartics2;
    }
    startTracking() {
        this.angulartics2.eventTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe(x => this.eventTrack(x.action, x.properties));
    }
    /**
     * Send interactions to the Pixel, i.e. for event tracking in Pixel
     *
     * @param action action associated with the event
     */
    eventTrack(action, properties = {}) {
        if (typeof fbq === 'undefined') {
            return;
        }
        if (facebookEventList.indexOf(action) === -1) {
            return fbq('trackCustom', action, properties);
        }
        return fbq('track', action, properties);
    }
}
Angulartics2Facebook.ɵfac = function Angulartics2Facebook_Factory(t) { return new (t || Angulartics2Facebook)(ɵngcc0.ɵɵinject(ɵngcc1.Angulartics2)); };
Angulartics2Facebook.ɵprov = i0.ɵɵdefineInjectable({ factory: function Angulartics2Facebook_Factory() { return new Angulartics2Facebook(i0.ɵɵinject(i1.Angulartics2)); }, token: Angulartics2Facebook, providedIn: "root" });
Angulartics2Facebook.ctorParameters = () => [
    { type: Angulartics2 }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angulartics2Facebook, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.Angulartics2 }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2suanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcHJvdmlkZXJzL2ZhY2Vib29rL2ZhY2Vib29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM1QztBQUNvQzs7O0FBRXBDLE1BQU0saUJBQWlCLEdBQUc7QUFDMUIsSUFBRSxhQUFhO0FBQ2YsSUFBRSxRQUFRO0FBQ1YsSUFBRSxXQUFXO0FBQ2IsSUFBRSxlQUFlO0FBQ2pCLElBQUUsa0JBQWtCO0FBQ3BCLElBQUUsZ0JBQWdCO0FBQ2xCLElBQUUsVUFBVTtBQUNaLElBQUUsTUFBTTtBQUNSLElBQUUsc0JBQXNCO0FBQ3hCLENBQUMsQ0FBQztBQUdGLE1BQU0sT0FBTyxvQkFBb0I7QUFDakMsSUFBRSxZQUFvQixZQUEwQjtBQUFJLFFBQTlCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsSUFBRyxDQUFDO0FBQ3JELElBQ0UsYUFBYTtBQUFLLFFBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVTtBQUNoQyxhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDcEQsYUFBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDL0QsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFFLFVBQVUsQ0FBQyxNQUFjLEVBQUUsYUFBa0IsRUFBRTtBQUNqRCxRQUFJLElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxFQUFFO0FBQ3BDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUFJLElBQUksaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ2xELFlBQU0sT0FBTyxHQUFHLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxTQUFLO0FBQ0wsUUFBSSxPQUFPLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUNIO3VKQUFDO0FBQ0QsNk5BeEJLO0FBQUM7RUFETCxVQUFVLFNBQUMsRUFBRSx2QkFFRSxZQWxCUCxZQUFZO0FBQUc7R0FnQkEsRUFBRSxNQUFNLEVBQUU7Ozs2RUFoQlI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQW5ndWxhcnRpY3MyIH0gZnJvbSAnYW5ndWxhcnRpY3MyJztcblxuZGVjbGFyZSBjb25zdCBmYnE6IGZhY2Vib29rLlBpeGVsLkV2ZW50O1xuXG5jb25zdCBmYWNlYm9va0V2ZW50TGlzdCA9IFtcbiAgJ1ZpZXdDb250ZW50JyxcbiAgJ1NlYXJjaCcsXG4gICdBZGRUb0NhcnQnLFxuICAnQWRkVG9XaXNobGlzdCcsXG4gICdJbml0aWF0ZUNoZWNrb3V0JyxcbiAgJ0FkZFBheW1lbnRJbmZvJyxcbiAgJ1B1cmNoYXNlJyxcbiAgJ0xlYWQnLFxuICAnQ29tcGxldGVSZWdpc3RyYXRpb24nLFxuXTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFydGljczJGYWNlYm9vayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYW5ndWxhcnRpY3MyOiBBbmd1bGFydGljczIpIHsgfVxuXG4gIHN0YXJ0VHJhY2tpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5hbmd1bGFydGljczIuZXZlbnRUcmFja1xuICAgICAgLnBpcGUodGhpcy5hbmd1bGFydGljczIuZmlsdGVyRGV2ZWxvcGVyTW9kZSgpKVxuICAgICAgLnN1YnNjcmliZSh4ID0+IHRoaXMuZXZlbnRUcmFjayh4LmFjdGlvbiwgeC5wcm9wZXJ0aWVzKSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBpbnRlcmFjdGlvbnMgdG8gdGhlIFBpeGVsLCBpLmUuIGZvciBldmVudCB0cmFja2luZyBpbiBQaXhlbFxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIGFjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50XG4gICAqL1xuICBldmVudFRyYWNrKGFjdGlvbjogc3RyaW5nLCBwcm9wZXJ0aWVzOiBhbnkgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgZmJxID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZmFjZWJvb2tFdmVudExpc3QuaW5kZXhPZihhY3Rpb24pID09PSAtMSkge1xuICAgICAgcmV0dXJuIGZicSgndHJhY2tDdXN0b20nLCBhY3Rpb24sIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgICByZXR1cm4gZmJxKCd0cmFjaycsIGFjdGlvbiwgcHJvcGVydGllcyk7XG4gIH1cbn1cbiJdfQ==