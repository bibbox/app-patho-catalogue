import { Injectable } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { Angulartics2 } from 'angulartics2';
import * as i0 from "@angular/core";
import * as i1 from "angulartics2";
import * as i2 from "@angular/platform-browser";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'angulartics2';
import * as ɵngcc2 from '@angular/platform-browser';
export class Angulartics2Clicky {
    constructor(angulartics2, titleService) {
        this.angulartics2 = angulartics2;
        this.titleService = titleService;
        if (typeof clicky === 'undefined') {
            console.warn('Angulartics 2 Clicky Plugin: clicky global not found');
        }
    }
    startTracking() {
        this.angulartics2.pageTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.pageTrack(x.path));
        this.angulartics2.eventTrack
            .pipe(this.angulartics2.filterDeveloperMode())
            .subscribe((x) => this.eventOrGoalTrack(x.action, x.properties));
    }
    /**
     * Track Page in Clicky
     *
     * @param path location
     *
     * @link https://clicky.com/help/custom/manual#log
     */
    pageTrack(path) {
        const title = this.titleService.getTitle();
        clicky.log(path, title, 'pageview');
    }
    /**
     * Track Event Or Goal in Clicky
     *
     * @param action Action name
     * @param properties Definition of 'properties.goal' determines goal vs event tracking
     *
     * @link https://clicky.com/help/custom/manual#log
     * @link https://clicky.com/help/custom/manual#goal
     */
    eventOrGoalTrack(action, properties) {
        if (typeof properties.goal === 'undefined') {
            const title = properties.title || null;
            const type = properties.type != null ? this.validateType(properties.type) : null;
            clicky.log(action, title, type);
        }
        else {
            const goalId = properties.goal;
            const revenue = properties.revenue;
            clicky.goal(goalId, revenue, !!properties.noQueue);
        }
    }
    validateType(type) {
        const EventType = ['pageview', 'click', 'download', 'outbound'];
        return EventType.indexOf(type) > -1 ? type : 'pageview';
    }
}
Angulartics2Clicky.ɵfac = function Angulartics2Clicky_Factory(t) { return new (t || Angulartics2Clicky)(ɵngcc0.ɵɵinject(ɵngcc1.Angulartics2), ɵngcc0.ɵɵinject(ɵngcc2.Title)); };
Angulartics2Clicky.ɵprov = i0.ɵɵdefineInjectable({ factory: function Angulartics2Clicky_Factory() { return new Angulartics2Clicky(i0.ɵɵinject(i1.Angulartics2), i0.ɵɵinject(i2.Title)); }, token: Angulartics2Clicky, providedIn: "root" });
Angulartics2Clicky.ctorParameters = () => [
    { type: Angulartics2 },
    { type: Title }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angulartics2Clicky, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.Angulartics2 }, { type: ɵngcc2.Title }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2t5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3Byb3ZpZGVycy9jbGlja3kvY2xpY2t5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUM7QUFBcUM7QUFFckI7Ozs7QUFHaEIsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQUFFLFlBQ1UsWUFBMEIsRUFDMUIsWUFBbUI7QUFDN0IsUUFGVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBQzNCLGlCQUFZLEdBQVosWUFBWSxDQUFPO0FBQUMsUUFFNUIsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7QUFDdkMsWUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLHNEQUFzRCxDQUFDLENBQUM7QUFDM0UsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsYUFBYTtBQUFLLFFBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUztBQUMvQixhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDcEQsYUFBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDaEQsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVU7QUFDaEMsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQ3BELGFBQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN2RSxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUg7QUFBTztBQUVKLE9BREM7QUFDTCxJQUFFLFNBQVMsQ0FBQyxJQUFZO0FBQ3hCLFFBQUksTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN2RCxRQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN4QyxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFFSDtBQUFPO0FBQ0U7QUFFSixPQURIO0FBQ0wsSUFBRSxnQkFBZ0IsQ0FBQyxNQUFjLEVBQUUsVUFBcUM7QUFDeEUsUUFBSSxJQUFJLE9BQU8sVUFBVSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7QUFDaEQsWUFBTSxNQUFNLEtBQUssR0FBVyxVQUFVLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQztBQUNyRCxZQUFNLE1BQU0sSUFBSSxHQUFXLFVBQVUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQy9GLFlBQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RDLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxNQUFNLE1BQU0sR0FBVyxVQUFVLENBQUMsSUFBSSxDQUFDO0FBQzdDLFlBQU0sTUFBTSxPQUFPLEdBQVcsVUFBVSxDQUFDLE9BQU8sQ0FBQztBQUNqRCxZQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLFlBQVksQ0FBQyxJQUFZO0FBQUksUUFDbkMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRSxRQUFJLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDNUQsSUFBRSxDQUFDO0FBQ0g7Z0xBQUM7QUFDRCw0T0F6REs7QUFBQztFQURMLFVBQVUsU0FBQyxFQUFFLHZCQUdiLFlBUlEsWUFBWTtLQUtHLEVBQUUsTUFBTSxFQUFFLGZBTFQsWUFGaEIsS0FBSztBQUFHOzs7O3FHQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaXRsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBBbmd1bGFydGljczIgfSBmcm9tICdhbmd1bGFydGljczInO1xuaW1wb3J0IHsgQ2xpY2t5UHJvcGVydGllcyB9IGZyb20gJy4vY2xpY2t5LmludGVyZmFjZXMnO1xuXG5kZWNsYXJlIHZhciBjbGlja3k6IGFueTtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFydGljczJDbGlja3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFuZ3VsYXJ0aWNzMjogQW5ndWxhcnRpY3MyLFxuICAgIHByaXZhdGUgdGl0bGVTZXJ2aWNlOiBUaXRsZSxcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBjbGlja3kgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0FuZ3VsYXJ0aWNzIDIgQ2xpY2t5IFBsdWdpbjogY2xpY2t5IGdsb2JhbCBub3QgZm91bmQnKTtcbiAgICB9XG4gIH1cblxuICBzdGFydFRyYWNraW5nKCk6IHZvaWQge1xuICAgIHRoaXMuYW5ndWxhcnRpY3MyLnBhZ2VUcmFja1xuICAgICAgLnBpcGUodGhpcy5hbmd1bGFydGljczIuZmlsdGVyRGV2ZWxvcGVyTW9kZSgpKVxuICAgICAgLnN1YnNjcmliZSgoeCkgPT4gdGhpcy5wYWdlVHJhY2soeC5wYXRoKSk7XG4gICAgdGhpcy5hbmd1bGFydGljczIuZXZlbnRUcmFja1xuICAgICAgLnBpcGUodGhpcy5hbmd1bGFydGljczIuZmlsdGVyRGV2ZWxvcGVyTW9kZSgpKVxuICAgICAgLnN1YnNjcmliZSgoeCkgPT4gdGhpcy5ldmVudE9yR29hbFRyYWNrKHguYWN0aW9uLCB4LnByb3BlcnRpZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFjayBQYWdlIGluIENsaWNreVxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCBsb2NhdGlvblxuICAgKlxuICAgKiBAbGluayBodHRwczovL2NsaWNreS5jb20vaGVscC9jdXN0b20vbWFudWFsI2xvZ1xuICAgKi9cbiAgcGFnZVRyYWNrKHBhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IHRpdGxlOiBzdHJpbmcgPSB0aGlzLnRpdGxlU2VydmljZS5nZXRUaXRsZSgpO1xuICAgIGNsaWNreS5sb2cocGF0aCwgdGl0bGUsICdwYWdldmlldycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYWNrIEV2ZW50IE9yIEdvYWwgaW4gQ2xpY2t5XG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb24gQWN0aW9uIG5hbWVcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgRGVmaW5pdGlvbiBvZiAncHJvcGVydGllcy5nb2FsJyBkZXRlcm1pbmVzIGdvYWwgdnMgZXZlbnQgdHJhY2tpbmdcbiAgICpcbiAgICogQGxpbmsgaHR0cHM6Ly9jbGlja3kuY29tL2hlbHAvY3VzdG9tL21hbnVhbCNsb2dcbiAgICogQGxpbmsgaHR0cHM6Ly9jbGlja3kuY29tL2hlbHAvY3VzdG9tL21hbnVhbCNnb2FsXG4gICAqL1xuICBldmVudE9yR29hbFRyYWNrKGFjdGlvbjogc3RyaW5nLCBwcm9wZXJ0aWVzOiBQYXJ0aWFsPENsaWNreVByb3BlcnRpZXM+KSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzLmdvYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCB0aXRsZTogc3RyaW5nID0gcHJvcGVydGllcy50aXRsZSB8fCBudWxsO1xuICAgICAgY29uc3QgdHlwZTogc3RyaW5nID0gcHJvcGVydGllcy50eXBlICE9IG51bGwgPyB0aGlzLnZhbGlkYXRlVHlwZShwcm9wZXJ0aWVzLnR5cGUpIDogbnVsbDtcbiAgICAgIGNsaWNreS5sb2coYWN0aW9uLCB0aXRsZSwgdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGdvYWxJZDogc3RyaW5nID0gcHJvcGVydGllcy5nb2FsO1xuICAgICAgY29uc3QgcmV2ZW51ZTogbnVtYmVyID0gcHJvcGVydGllcy5yZXZlbnVlO1xuICAgICAgY2xpY2t5LmdvYWwoZ29hbElkLCByZXZlbnVlLCAhIXByb3BlcnRpZXMubm9RdWV1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVR5cGUodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBFdmVudFR5cGUgPSBbJ3BhZ2V2aWV3JywgJ2NsaWNrJywgJ2Rvd25sb2FkJywgJ291dGJvdW5kJ107XG4gICAgcmV0dXJuIEV2ZW50VHlwZS5pbmRleE9mKHR5cGUpID4gLTEgPyB0eXBlIDogJ3BhZ2V2aWV3JztcbiAgfVxufVxuIl19