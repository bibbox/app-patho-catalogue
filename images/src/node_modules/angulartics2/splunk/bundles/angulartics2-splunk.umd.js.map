{"version":3,"file":"angulartics2-splunk.umd.js","sources":["../../../../src/lib/providers/splunk/splunk.ts","../../../../src/lib/providers/splunk/angulartics2-splunk.ts"],"names":["Injectable","Angulartics2"],"mappings":";;;;;;;QASE,4BAAoB,YAA0B;AAChD,YADsB,iBAAY,GAAZ,YAAY,CAAc;AAAC,YAC7C,IAAI,QAAQ,EAAE,CAAC,KAAK,WAAW,EAAE;AACrC,gBAAM,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AACvC,aAAK;AACL,SAAG;AACH,QACE,0CAAa,GAAb;AAAc,YAAd,iBAOC;AACH,YAPI,IAAI,CAAC,YAAY,CAAC,SAAS;AAC/B,iBAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;AACpD,iBAAO,SAAS,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;AAChD,YAAI,IAAI,CAAC,YAAY,CAAC,UAAU;AAChC,iBAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;AACpD,iBAAO,SAAS,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,UAAU,CAAC,GAAA,CAAC,CAAC;AACjE,SAAG;AAEH,QAAE,sCAAS,GAAT,UAAU,IAAY;AACxB,YAAI,IAAI;AACR,gBAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACxB,aAAK;AAAC,YAAA,OAAO,CAAC,EAAE;AAChB,gBAAM,IAAI,EAAE,CAAC,YAAY,cAAc,CAAC,EAAE;AAC1C,oBAAQ,MAAM,CAAC,CAAC;AAChB,iBAAO;AACP,aAAK;AACL,SAAG;AAEH,QAAE,uCAAU,GAAV,UAAW,MAAc,EAAE,UAAe;AAC5C,YAAI,IAAI;AACR,gBAAM,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACnC,aAAK;AAAC,YAAA,OAAO,CAAC,EAAE;AAChB,gBAAM,IAAI,EAAE,CAAC,YAAY,cAAc,CAAC,EAAE;AAC1C,oBAAQ,MAAM,CAAC,CAAC;AAChB,iBAAO;AACP,aAAK;AACL,SAAG;;;;;6EACH;AAAC;AACiC;AAAU,yNArCnC;sDADRA,tDACS;IADC,SAAC,EAAE,UAAU,EAAE,MAAM,jCAGM,gBAP7BC,eAAY;CAIa,DAJV;AAAU;AAAC,ICFnC;AACA;AAEA;AACO;AAAC;AAC2B;AAAC;AAAmE;AAAC;AAAM","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Angulartics2 } from 'angulartics2';\n\ndeclare var sp: any;\n\n@Injectable({ providedIn: 'root' })\nexport class Angulartics2Splunk {\n\n  constructor(private angulartics2: Angulartics2) {\n    if (typeof (sp) === 'undefined') {\n      console.warn('Splunk not found');\n    }\n  }\n\n  startTracking(): void {\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n  }\n\n  pageTrack(path: string) {\n    try {\n      sp.pageview(path);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n\n  eventTrack(action: string, properties: any) {\n    try {\n      sp.track(action, properties);\n    } catch (e) {\n      if (!(e instanceof ReferenceError)) {\n        throw e;\n      }\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './splunk';\n"]}