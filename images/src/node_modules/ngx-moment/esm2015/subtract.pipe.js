/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
import { Pipe } from '@angular/core';
import * as moment from 'moment';
import * as ɵngcc0 from '@angular/core';
const momentConstructor = moment;
export class SubtractPipe {
    transform(value, amount, unit) {
        if (typeof amount === 'undefined' ||
            (typeof amount === 'number' && typeof unit === 'undefined')) {
            throw new Error('SubtractPipe: missing required arguments');
        }
        return momentConstructor(value).subtract(amount, unit);
    }
}
SubtractPipe.ɵfac = function SubtractPipe_Factory(t) { return new (t || SubtractPipe)(); };
SubtractPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "amSubtract", type: SubtractPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SubtractPipe, [{
        type: Pipe,
        args: [{ name: 'amSubtract' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VidHJhY3QucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N1YnRyYWN0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDLGpDQUFqQyxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxDQUdqQyxNQUFNO01BQU8sWUFBWSxPQUN2Qix6QkFKRixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQztBQUl0QixDQUNQLEtBQXlCLEVBQ3pCLE1BQWdDLEVBQ2hDLElBQStCLHBCQUpuQyxNQUFNLE9BQU8sWUFBWTtJQU1yQixJQUNFLE9BQU8sTUFBTSxLQUFLLDFCQVBJLElBQzFCLFNBQVMsQ0FDUCxLQUF5QixFQUN6QixNQUFnQyxFQUNoQyxJQUErQjtBQUdBLGdCQUM3QixDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVE7RUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLENBQUMsRUFDM0QsaENBRE4sWUFBTSxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLENBQUMsRUFDM0Q7WUFDQSxNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUMseEVBQWxFLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1NBQzdELFRBQUwsU0FBSztRQUNELE9BQU8saUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQywvREFBM0QsUUFBSSxPQUFPLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQyxMQUFILElBQUUsQ0FBQztBQUNIO3dDQWZDLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsbkNBQTNCLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7Ozs7OztBQVBBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogbmd4LW1vbWVudCAoYykgMjAxNSwgMjAxNiBVcmkgU2hha2VkIC8gTUlUIExpY2VuY2UgKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmNvbnN0IG1vbWVudENvbnN0cnVjdG9yID0gbW9tZW50O1xuXG5AUGlwZSh7IG5hbWU6ICdhbVN1YnRyYWN0JyB9KVxuZXhwb3J0IGNsYXNzIFN1YnRyYWN0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oXG4gICAgdmFsdWU6IG1vbWVudC5Nb21lbnRJbnB1dCxcbiAgICBhbW91bnQ6IG1vbWVudC5EdXJhdGlvbklucHV0QXJnMSxcbiAgICB1bml0PzogbW9tZW50LkR1cmF0aW9uSW5wdXRBcmcyLFxuICApOiBhbnkge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBhbW91bnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAodHlwZW9mIGFtb3VudCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHVuaXQgPT09ICd1bmRlZmluZWQnKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdWJ0cmFjdFBpcGU6IG1pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzJyk7XG4gICAgfVxuICAgIHJldHVybiBtb21lbnRDb25zdHJ1Y3Rvcih2YWx1ZSkuc3VidHJhY3QoYW1vdW50LCB1bml0KTtcbiAgfVxufVxuIl19