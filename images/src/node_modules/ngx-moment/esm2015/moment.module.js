import { NgModule } from '@angular/core';
import { NGX_MOMENT_OPTIONS } from './moment-options';
import { AddPipe } from './add.pipe';
import { CalendarPipe } from './calendar.pipe';
import { DateFormatPipe } from './date-format.pipe';
import { DifferencePipe } from './difference.pipe';
import { DurationPipe } from './duration.pipe';
import { FromUnixPipe } from './from-unix.pipe';
import { FromUtcPipe } from './from-utc.pipe';
import { IsAfterPipe } from './is-after.pipe';
import { IsBeforePipe } from './is-before.pipe';
import { LocalTimePipe } from './local.pipe';
import { LocalePipe } from './locale.pipe';
import { ParsePipe } from './parse.pipe';
import { ParseZonePipe } from './parse-zone.pipe';
import { SubtractPipe } from './subtract.pipe';
import { TimeAgoPipe } from './time-ago.pipe';
import { UtcPipe } from './utc.pipe';
import * as ɵngcc0 from '@angular/core';
const ANGULAR_MOMENT_PIPES = [
    AddPipe,
    CalendarPipe,
    DateFormatPipe,
    DifferencePipe,
    DurationPipe,
    FromUnixPipe,
    ParsePipe,
    SubtractPipe,
    TimeAgoPipe,
    UtcPipe,
    FromUtcPipe,
    LocalTimePipe,
    LocalePipe,
    ParseZonePipe,
    IsBeforePipe,
    IsAfterPipe,
];
export class MomentModule {
    static forRoot(options) {
        return {
            ngModule: MomentModule,
            providers: [
                {
                    provide: NGX_MOMENT_OPTIONS,
                    useValue: Object.assign({}, options),
                },
            ],
        };
    }
}
MomentModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MomentModule });
MomentModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MomentModule_Factory(t) { return new (t || MomentModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MomentModule, { declarations: [AddPipe,
        CalendarPipe,
        DateFormatPipe,
        DifferencePipe,
        DurationPipe,
        FromUnixPipe,
        ParsePipe,
        SubtractPipe,
        TimeAgoPipe,
        UtcPipe,
        FromUtcPipe,
        LocalTimePipe,
        LocalePipe,
        ParseZonePipe,
        IsBeforePipe,
        IsAfterPipe], exports: [AddPipe,
        CalendarPipe,
        DateFormatPipe,
        DifferencePipe,
        DurationPipe,
        FromUnixPipe,
        ParsePipe,
        SubtractPipe,
        TimeAgoPipe,
        UtcPipe,
        FromUtcPipe,
        LocalTimePipe,
        LocalePipe,
        ParseZonePipe,
        IsBeforePipe,
        IsAfterPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MomentModule, [{
        type: NgModule,
        args: [{
                declarations: ANGULAR_MOMENT_PIPES,
                exports: ANGULAR_MOMENT_PIPES
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vbWVudC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBb0IsTUFBTSxrQkFBa0IsQ0FBQztBQUV4RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDLHJDQUFyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQywvQ0FBL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQyxwREFBcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQyxuREFBbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQywvQ0FBL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQyxoREFBaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQyw5Q0FBOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQyw5Q0FBOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQyxoREFBaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUMsN0NBQTdDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQywzQ0FBM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDLHpDQUF6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQyxsREFBbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQywvQ0FBL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQyw5Q0FBOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUMsckNBQXJDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFckMsTUFBTSxvQkFBb0IsR0FBRyxNQUMzQjtDQUFPLE1BQ1AsWUFBWSxNQUNaLHpCQUhGLE1BQU0sb0JBQW9CLEdBQUc7UUFHYixSQUZoQixJQUFFLE9BQU87Q0FHUCxjQUFjLGZBRmhCLElBQUUsWUFBWTtHQUdaLFlBQVksZkFGZCxJQUFFLGNBQWM7Q0FHZCxZQUFZLE1BQ1osbkJBSEYsSUFBRSxjQUFjO1FBR0wsUkFGWCxJQUFFLFlBQVk7O0FBRWQsSUFBRSxTQUFTO0lBQ1QsWUFBWSxoQkFBZCxJQUFFLFlBQVk7SUFDWixXQUFXLGZBQWIsSUFBRSxXQUFXO0lBQ1gsT0FBTyxYQUFULElBQUUsT0FBTztJQUNQLFdBQVcsZkFBYixJQUFFLFdBQVc7SUFDWCxhQUFhLGpCQUFmLElBQUUsYUFBYTtJQUNiLFVBQVUsZEFBWixJQUFFLFVBQVU7SUFDVixhQUFhLGpCQUFmLElBQUUsYUFBYTtJQUNiLFlBQVksaEJBQWQsSUFBRSxZQUFZO0lBQ1osV0FBVyxmQUFiLElBQUUsV0FBVztDQUNaLENBQUMsRkFBRixDQUFDLENBQUM7QUFNRixNQUFNLE9BQU8sWUFBWSx6QkFBekIsTUFBTSxPQUFPLFlBQVk7SUFDdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUEwQiwxQkFBM0MsSUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQTBCO1FBQ3ZDLE9BQU8sZkFEb0MsUUFDM0MsT0FBTztZQUNMLFFBQVEsRUFBRSxZQUFZLGxDQUE1QixZQUFNLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFNBQVMsRUFBRSx2QkFBakIsWUFBTSxTQUFTLEVBQUU7Z0JBQ1QsaEJBQVIsZ0JBQVE7b0JBQ0UsT0FBTyxFQUFFLGtCQUFrQiwvQ0FBckMsb0JBQVUsT0FBTyxFQUFFLGtCQUFrQjtvQkFDM0IsUUFBUSxvQkFDSCxPQUFPLENBQ1gseERBRlgsb0JBQVUsUUFBUSxvQkFDSCxPQUFPLENBQ1g7aUJBQ0YsakJBQVQsaUJBQVM7YUFDRixiQUFQLGFBQU87U0FDRixDQUFDLFZBQU4sU0FBSyxDQUFDO0lBQ0osQ0FBQyxMQUFILElBQUUsQ0FBQztBQUNIO3dDQWxCQyxRQUFRLFNBQUMsakJBQVQsUUFBUSxTQUFDO01BQ1IsWUFBWSxFQUFFLG9CQUFvQixrQkFDbEMsT0FBTyxFQUFFLG9CQUFvQixlQUM5QixoR0FGQyxZQUFZLEVBQUUsb0JBQW9CLGtCQUNsQyxPQUFPLEVBQUUsb0JBQW9CLGVBQzlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUExQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYX01PTUVOVF9PUFRJT05TLCBOZ3hNb21lbnRPcHRpb25zIH0gZnJvbSAnLi9tb21lbnQtb3B0aW9ucyc7XG5cbmltcG9ydCB7IEFkZFBpcGUgfSBmcm9tICcuL2FkZC5waXBlJztcbmltcG9ydCB7IENhbGVuZGFyUGlwZSB9IGZyb20gJy4vY2FsZW5kYXIucGlwZSc7XG5pbXBvcnQgeyBEYXRlRm9ybWF0UGlwZSB9IGZyb20gJy4vZGF0ZS1mb3JtYXQucGlwZSc7XG5pbXBvcnQgeyBEaWZmZXJlbmNlUGlwZSB9IGZyb20gJy4vZGlmZmVyZW5jZS5waXBlJztcbmltcG9ydCB7IER1cmF0aW9uUGlwZSB9IGZyb20gJy4vZHVyYXRpb24ucGlwZSc7XG5pbXBvcnQgeyBGcm9tVW5peFBpcGUgfSBmcm9tICcuL2Zyb20tdW5peC5waXBlJztcbmltcG9ydCB7IEZyb21VdGNQaXBlIH0gZnJvbSAnLi9mcm9tLXV0Yy5waXBlJztcbmltcG9ydCB7IElzQWZ0ZXJQaXBlIH0gZnJvbSAnLi9pcy1hZnRlci5waXBlJztcbmltcG9ydCB7IElzQmVmb3JlUGlwZSB9IGZyb20gJy4vaXMtYmVmb3JlLnBpcGUnO1xuaW1wb3J0IHsgTG9jYWxUaW1lUGlwZSB9IGZyb20gJy4vbG9jYWwucGlwZSc7XG5pbXBvcnQgeyBMb2NhbGVQaXBlIH0gZnJvbSAnLi9sb2NhbGUucGlwZSc7XG5pbXBvcnQgeyBQYXJzZVBpcGUgfSBmcm9tICcuL3BhcnNlLnBpcGUnO1xuaW1wb3J0IHsgUGFyc2Vab25lUGlwZSB9IGZyb20gJy4vcGFyc2Utem9uZS5waXBlJztcbmltcG9ydCB7IFN1YnRyYWN0UGlwZSB9IGZyb20gJy4vc3VidHJhY3QucGlwZSc7XG5pbXBvcnQgeyBUaW1lQWdvUGlwZSB9IGZyb20gJy4vdGltZS1hZ28ucGlwZSc7XG5pbXBvcnQgeyBVdGNQaXBlIH0gZnJvbSAnLi91dGMucGlwZSc7XG5cbmNvbnN0IEFOR1VMQVJfTU9NRU5UX1BJUEVTID0gW1xuICBBZGRQaXBlLFxuICBDYWxlbmRhclBpcGUsXG4gIERhdGVGb3JtYXRQaXBlLFxuICBEaWZmZXJlbmNlUGlwZSxcbiAgRHVyYXRpb25QaXBlLFxuICBGcm9tVW5peFBpcGUsXG4gIFBhcnNlUGlwZSxcbiAgU3VidHJhY3RQaXBlLFxuICBUaW1lQWdvUGlwZSxcbiAgVXRjUGlwZSxcbiAgRnJvbVV0Y1BpcGUsXG4gIExvY2FsVGltZVBpcGUsXG4gIExvY2FsZVBpcGUsXG4gIFBhcnNlWm9uZVBpcGUsXG4gIElzQmVmb3JlUGlwZSxcbiAgSXNBZnRlclBpcGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IEFOR1VMQVJfTU9NRU5UX1BJUEVTLFxuICBleHBvcnRzOiBBTkdVTEFSX01PTUVOVF9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTW9tZW50TW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qob3B0aW9ucz86IE5neE1vbWVudE9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE1vbWVudE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTW9tZW50TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOR1hfTU9NRU5UX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19